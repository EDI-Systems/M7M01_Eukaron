/******************************************************************************
Filename    : rme_platform_TMS320C6678.sct
Author      : pry
Date        : 24/06/2017
Licence     : LGPL v3+; see COPYING for details.
Description : The linker cmd file for TMS320C6678 layout. This file is intended
              to be used with TMS320C6678. We ban the functionality to use cache as
              scratchpad memory once and for all with RME; the predictability and
              speed gains of this usage can be achieved with cache partitioning.
              Hand-tuning sometimes can have adverse effects on efficiency.
              We will not load attempt to load ourself into memory; the bootloader
              does this. TI provides RBL and IBL for this purpose, thus we will not
              worry about it here¡£ We will assume that we have a loaded memory map,
              and will start execution at the kernel entry.
              Local L2 SRAM             : 0x00800000 0x00080000 (512kB)
              Local L1 instruction SRAM : 0x00E00000 0x00008000 (32kB)
              Local L1 data SRAM        : 0x00E00000 0x00008000 (32kB)
              Multicore shared SRAM     : 0x0C000000 0x00400000 (4MB)
              EMIF CS2 address space    : 0x70000000 0x04000000 (64MB)
              EMIF CS3 address space    : 0x74000000 0x04000000 (64MB)
              EMIF CS4 address space    : 0x78000000 0x04000000 (64MB)
              EMIF CS5 address space    : 0x7C000000 0x04000000 (64MB)
              DDR3 SDRAM memory         : 0x80000000 0x80000000 (2GB)
              On the EVM, there are only 512MB DDR3 available.
              System layout:
              |0x80000000            0x8003FFFF|0x80040000         0x800FFFFF|
              |<-        Kernel Stack        ->|<-   Kernel Data & Code    ->|
              |0x80100000            0x803FFFFF|0x80400000         0x81FFFFFF|
              |<-       Kernel Objects       ->|<-           User          ->|
              |0x82000000                                          0x9FFFFFFF|
              |<-                           User                           ->|
******************************************************************************/

/* Begin Memory Layout *******************************************************/
MEMORY
{
    LOCAL_L2_SRAM:  o = 0x00800000 l = 0x00080000   /* 512kB LOCAL L2/SRAM */
    LOCAL_L1P_SRAM: o = 0x00E00000 l = 0x00008000   /* 32kB LOCAL L1P/SRAM */
    LOCAL_L1D_SRAM: o = 0x00F00000 l = 0x00008000   /* 32kB LOCAL L1D/SRAM */
    SHRAM:          o = 0x0C000000 l = 0x00400000   /* 4MB Multicore shared Memmory */
    
    EMIF16_CS2:     o = 0x70000000 l = 0x04000000   /* 64MB EMIF16 CS2 Data Memory */
    EMIF16_CS3:     o = 0x74000000 l = 0x04000000   /* 64MB EMIF16 CS3 Data Memory */
    EMIF16_CS4:     o = 0x78000000 l = 0x04000000   /* 64MB EMIF16 CS4 Data Memory */
    EMIF16_CS5:     o = 0x7C000000 l = 0x04000000   /* 64MB EMIF16 CS5 Data Memory */

    KSTACK_DDR3:    o = 0x80000000 l = 0x00040000   /* 256kB kernel stack memory */
    KERNEL_DDR3:    o = 0x80040000 l = 0x000C0000   /* 768kB kernel text&data memory */
    KOBJ_DDR3:      o = 0x80100000 l = 0x03E00000   /* 62MB dedicated kernel memory */
    KHYP_DDR3:      o = 0x83F00000 l = 0x000C0000   /* 768kB dedicated hypervisor memory */
    KINT_DDR3:      o = 0x83FC0000 l = 0x00040000   /* 256kB dedicated interrupt flag memory */
    USER_DDR3:      o = 0x84000000 l = 0x1C000000   /* 448MB available user memory */
}
/* End Memory Layout *********************************************************/
SECTIONS
{
/* Begin Segment:USER *********************************************************
 Description : The user-level segment.
******************************************************************************/
.USER
{
    *user.obj(.text)
    *user.obj(.stack)
    *user.obj(.bss)
    *user.obj(.cio)
    *user.obj(.const)
    *user.obj(.data)
    *user.obj(.switch)
    *user.obj(.sysmem)
    *user.obj(.far)
    *user.obj(.args)
    *user.obj(.ppinfo)
    *user.obj(.ppdata)

    /* COFF sections */
    *user.obj(.pinit)
    *user.obj(.cinit)

    /* EABI sections */
    *user.obj(.binit)
    *user.obj(.init_array)
    *user.obj(.neardata)
    *user.obj(.fardata)
    *user.obj(.rodata)
    *user.obj(.c6xabi.exidx)
    *user.obj(.c6xabi.extab)
} > USER_DDR3
/* TI linker requires these trash sections */
.stack > USER_DDR3
.cinit > USER_DDR3
/* End Segment:USER **********************************************************/

/* Begin Segment:KERNEL_STACK *************************************************
Description : The kernel stack segments.
******************************************************************************/
.KERNEL_STACK
{
    /* The kernel stack goes first */
    rme_platform_c66x_asm.obj(.data)
    rme_platform_c66x_asm.obj(.stack)
} > KSTACK_DDR3
/* End Segment:KERNEL_STACK **************************************************/

/* Begin Segment:KERNEL *******************************************************
Description : The kernel segment, this is where the kernel of the operating
              system is located at. This segment also contains the .bss(ZI)
              for processes.
              The kernel and the init process is placed in the CCMRAM.
******************************************************************************/
.KERNEL
{
    /* All other sections */
    *(.text)
    *(.stack)
    *(.bss)
    *(.cio)
    *(.const)
    *(.data)
    *(.switch)
    *(.sysmem)
    *(.far)
    *(.args)
    *(.ppinfo)
    *(.ppdata)

    /* COFF sections */
    *(.pinit)
    *(.cinit)

    /* EABI sections */
    *(.binit)
    *(.init_array)
    *(.neardata)
    *(.fardata)
    *(.rodata)
    *(.c6xabi.exidx)
    *(.c6xabi.extab)
} > KERNEL_DDR3
/* End Segment:KERNEL ********************************************************/
}
/* End Of File ***************************************************************/

/* Copyright (C) Evo-Devo Instrum. All rights reserved ***********************/
