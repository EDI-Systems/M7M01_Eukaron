
RME.elf:     file format elf32-littlearm


Disassembly of section .text:

80100000 <_start>:
    .global             __bss_end__
    .global             __va_offset__
    .global             main
_start:
    .global             _start
    LDR                 R0,=__bss_start__
80100000:	e59f01ac 	ldr	r0, [pc, #428]	@ 801001b4 <finish+0x8>
    LDR                 R1,=__bss_end__
80100004:	e59f11ac 	ldr	r1, [pc, #428]	@ 801001b8 <finish+0xc>
    LDR                 R2,=__va_offset__
80100008:	e59f21ac 	ldr	r2, [pc, #428]	@ 801001bc <finish+0x10>
    SUB                 R0,R0,R2
8010000c:	e0400002 	sub	r0, r0, r2
    SUB                 R1,R1,R2
80100010:	e0411002 	sub	r1, r1, r2
    LDR                 R2,=0x00        
80100014:	e3a02000 	mov	r2, #0

80100018 <clear_bss>:
clear_bss:
    CMP                 R0,R1
80100018:	e1500001 	cmp	r0, r1
    BEQ                 clear_done
8010001c:	0a000002 	beq	8010002c <clear_done>
    STR                 R2,[R0]
80100020:	e5802000 	str	r2, [r0]
    ADD                 R0,#0x04
80100024:	e2800004 	add	r0, r0, #4
    B                   clear_bss
80100028:	eafffffa 	b	80100018 <clear_bss>

8010002c <clear_done>:
clear_done:
    /* Set stacks for all modes */
    LDR                 R4,=__RME_A7A_Stack_Start
8010002c:	e59f418c 	ldr	r4, [pc, #396]	@ 801001c0 <finish+0x14>
    ADD                 R4,#0x10000
80100030:	e2844801 	add	r4, r4, #65536	@ 0x10000
    /* IRQ mode */
    LDR                 R0,=0x600F00D2
80100034:	e59f0188 	ldr	r0, [pc, #392]	@ 801001c4 <finish+0x18>
    MSR                 CPSR,R0
80100038:	e129f000 	msr	CPSR_fc, r0
    MOV                 SP,R4
8010003c:	e1a0d004 	mov	sp, r4
    /* ABT mode */
    LDR                 R0,=0x600F00D7
80100040:	e59f0180 	ldr	r0, [pc, #384]	@ 801001c8 <finish+0x1c>
    MSR                 CPSR,R0
80100044:	e129f000 	msr	CPSR_fc, r0
    MOV                 SP,R4
80100048:	e1a0d004 	mov	sp, r4
    /* FIQ mode */
    LDR                 R0,=0x600F00D1
8010004c:	e59f0178 	ldr	r0, [pc, #376]	@ 801001cc <finish+0x20>
    MSR                 CPSR,R0
80100050:	e129f000 	msr	CPSR_fc, r0
    MOV                 SP,R4
80100054:	e1a0d004 	mov	sp, r4
    /* UND mode */
    LDR                 R0,=0x600F00DB
80100058:	e59f0170 	ldr	r0, [pc, #368]	@ 801001d0 <finish+0x24>
    MSR                 CPSR,R0
8010005c:	e129f000 	msr	CPSR_fc, r0
    MOV                 SP,R4
80100060:	e1a0d004 	mov	sp, r4
    /* SYS mode */
    LDR                 R0,=0x600F00DB
80100064:	e59f0164 	ldr	r0, [pc, #356]	@ 801001d0 <finish+0x24>
    MSR                 CPSR,R0
80100068:	e129f000 	msr	CPSR_fc, r0
    MOV                 SP,R4
8010006c:	e1a0d004 	mov	sp, r4
    /* SVC mode */
    LDR                 R0,=0x600F00D3
80100070:	e59f015c 	ldr	r0, [pc, #348]	@ 801001d4 <finish+0x28>
    MSR                 CPSR,R0
80100074:	e129f000 	msr	CPSR_fc, r0
    MOV                 SP,R4
80100078:	e1a0d004 	mov	sp, r4

    /* Turn off the MMU and all cache if it is already enabled. There's no need
     * to turn cache off because we are not modifying the instruction stream at
     * all; the TLB walker will start walking from L1D if it is enabled */
    CP15_GET_INIT       CRN=C1 OP1=0 CRM=C0 OP2=0   //08C5187A off, 08C5187F on
8010007c:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
    LDR                 R1,=~((1<<2)|(1<<0))
80100080:	e3e01005 	mvn	r1, #5
    AND                 R0,R0,R1
80100084:	e0000001 	and	r0, r0, r1
    CP15_SET_INIT       CRN=C1 OP1=0 CRM=C0 OP2=0 /* SCTLR.AFE,TRE,I,C,M */
80100088:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
    ISB
8010008c:	f57ff06f 	isb	sy
    /* Flush TLB */
    LDR                 R0,=0x00
80100090:	e3a00000 	mov	r0, #0
    CP15_SET_INIT       CRN=C8 OP1=0 CRM=C7 OP2=0 /* TLBIALL */
80100094:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
    ISB
80100098:	f57ff06f 	isb	sy
     * R5: Number of pages
     * R6: Property mask
     * R7: Page counter
     * R8: Write index register
     * R9: Write content register */
    LDR                 R0,=RME_A7A_Mem_Info   //165F18
8010009c:	e59f0134 	ldr	r0, [pc, #308]	@ 801001d8 <finish+0x2c>
    LDR                 R1,=__RME_A7A_Kern_Pgt //150000
801000a0:	e59f1134 	ldr	r1, [pc, #308]	@ 801001dc <finish+0x30>
    LDR                 R2,=__va_offset__
801000a4:	e59f2110 	ldr	r2, [pc, #272]	@ 801001bc <finish+0x10>
    /* Calculate the actual address */
    SUB                 R0,R0,R2
801000a8:	e0400002 	sub	r0, r0, r2
    SUB                 R1,R1,R2
801000ac:	e0411002 	sub	r1, r1, r2
    /* Calculate the configuration end address */
    LDR                 R3,[R0]
801000b0:	e5903000 	ldr	r3, [r0]
    LSL					R3,R3,#2
801000b4:	e1a03103 	lsl	r3, r3, #2
    ADD                 R2,R0,R3
801000b8:	e0802003 	add	r2, r0, r3
    ADD                 R0,R0,#0x04
801000bc:	e2800004 	add	r0, r0, #4

801000c0 <load_config>:
    /* Load configurations and generate page table layout one by one */
load_config:
    LDMIA               R0!,{R3-R6}
801000c0:	e8b00078 	ldm	r0!, {r3, r4, r5, r6}
    MOV                 R7,#0x00
801000c4:	e3a07000 	mov	r7, #0
    LSR                 R8,R4,#18
801000c8:	e1a08924 	lsr	r8, r4, #18
    ADD                 R8,R1,R8
801000cc:	e0818008 	add	r8, r1, r8
    ORR                 R9,R3,R6
801000d0:	e1839006 	orr	r9, r3, r6

801000d4 <fill_pgtbl>:

fill_pgtbl:
    STR                 R9,[R8]
801000d4:	e5889000 	str	r9, [r8]
    ADD                 R8,R8,#4
801000d8:	e2888004 	add	r8, r8, #4
    ADD                 R7,R7,#1
801000dc:	e2877001 	add	r7, r7, #1
    ADD                 R9,R9,#0x100000
801000e0:	e2899601 	add	r9, r9, #1048576	@ 0x100000

    CMP                 R7,R5
801000e4:	e1570005 	cmp	r7, r5
    BNE                 fill_pgtbl
801000e8:	1afffff9 	bne	801000d4 <fill_pgtbl>

    CMP                 R0,R2
801000ec:	e1500002 	cmp	r0, r2
    BNE                 load_config
801000f0:	1afffff2 	bne	801000c0 <load_config>

    ISB
801000f4:	f57ff06f 	isb	sy

    /* Set the registers */
    LDR                 R0,=0x02
801000f8:	e3a00002 	mov	r0, #2
    CP15_SET_INIT       CRN=C2 OP1=0 CRM=C0 OP2=2 /* TTBCR, TTBR1 in use when accessing > 1GB */
801000fc:	ee020f50 	mcr	15, 0, r0, cr2, cr0, {2}
    ISB
80100100:	f57ff06f 	isb	sy

    LDR                 R0,=0xFFFFFFFFF//0x55555555
80100104:	e3e00000 	mvn	r0, #0
    CP15_SET_INIT       CRN=C3 OP1=0 CRM=C0 OP2=0 /* DACR */
80100108:	ee030f10 	mcr	15, 0, r0, cr3, cr0, {0}
    ISB
8010010c:	f57ff06f 	isb	sy

    LDR                 R0,=0x000A00A4
80100110:	e59f00c8 	ldr	r0, [pc, #200]	@ 801001e0 <finish+0x34>
    CP15_SET_INIT       CRN=C10 OP1=0 CRM=C2 OP2=0 /* PRRR */
80100114:	ee0a0f12 	mcr	15, 0, r0, cr10, cr2, {0}
    ISB
80100118:	f57ff06f 	isb	sy

    LDR                 R0,=0x006C006C
8010011c:	e59f00c0 	ldr	r0, [pc, #192]	@ 801001e4 <finish+0x38>
    CP15_SET_INIT       CRN=C10 OP1=0 CRM=C2 OP2=1 /* NMRR */
80100120:	ee0a0f32 	mcr	15, 0, r0, cr10, cr2, {1}
    ISB
80100124:	f57ff06f 	isb	sy

    /* Set base address */
    LDR                 R0,=__RME_A7A_Kern_Pgt
80100128:	e59f00ac 	ldr	r0, [pc, #172]	@ 801001dc <finish+0x30>
    LDR                 R1,=__va_offset__
8010012c:	e59f1088 	ldr	r1, [pc, #136]	@ 801001bc <finish+0x10>
    SUB                 R0,R0,R1 //R0=00150000
80100130:	e0400001 	sub	r0, r0, r1
    ORR					R0,R0,#0x09 /* Stuff to write into TTBR */
80100134:	e3800009 	orr	r0, r0, #9
    CP15_SET_INIT       CRN=C2 OP1=0 CRM=C0 OP2=0 /* TTBR0 */
80100138:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
    CP15_SET_INIT       CRN=C2 OP1=0 CRM=C0 OP2=1 /* TTBR1 */
8010013c:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
    /* Load the main function address to R3 first to prepare for a long jump */
    LDR                 R3,=main  //R3=80165848
80100140:	e59f30a0 	ldr	r3, [pc, #160]	@ 801001e8 <finish+0x3c>
    ISB
80100144:	f57ff06f 	isb	sy

    /* Turn on paging and cache */
    CP15_GET_INIT       CRN=C1 OP1=0 CRM=C0 OP2=0
80100148:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
    LDR                 R1,=(1<<29)|(1<<28)|(1<<12)|(1<<2)|(1<<0) //R1=30001005 |(1<<12)|(1<<2)|(1<<0)
8010014c:	e59f1098 	ldr	r1, [pc, #152]	@ 801001ec <finish+0x40>
    ORR                 R0,R0,R1  //R0=38C5187F
80100150:	e1800001 	orr	r0, r0, r1
    CP15_SET_INIT       CRN=C1 OP1=0 CRM=C0 OP2=0 /* SCTLR.AFE,TRE,I,C,M */
80100154:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
    ISB
80100158:	f57ff06f 	isb	sy

    /* Flush TLB again */
    LDR                 R0,=0x00
8010015c:	e3a00000 	mov	r0, #0
    CP15_SET_INIT       CRN=C8 OP1=0 CRM=C7 OP2=0 /* TLBIALL */
80100160:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
    ISB
80100164:	f57ff06f 	isb	sy

    /* Branch to main function */
    BX                  R3
80100168:	e12fff13 	bx	r3

	/* Print a hex number in LR, R12 used as counter ********************************************/
    MOV 				LR,R0
8010016c:	e1a0e000 	mov	lr, r0
    MOV					R12,#32     /* 32-bits */
80100170:	e3a0c020 	mov	ip, #32

80100174 <nextdigit>:
nextdigit:
    SUB					R12,R12,#0x04
80100174:	e24cc004 	sub	ip, ip, #4
    LSR					R11,LR,R12
80100178:	e1a0bc3e 	lsr	fp, lr, ip
	AND					R11,R11,#0x0F
8010017c:	e20bb00f 	and	fp, fp, #15
	CMP					R11,#0x09
80100180:	e35b0009 	cmp	fp, #9
	BGE					bigger
80100184:	aa000001 	bge	80100190 <bigger>
	ADD					R11,R11,#0x30 /* add '0' */
80100188:	e28bb030 	add	fp, fp, #48	@ 0x30
	B					printwait
8010018c:	ea000000 	b	80100194 <printwait>

80100190 <bigger>:
bigger:
	ADD					R11,R11,#(0x41-10) /* add 'A' */
80100190:	e28bb037 	add	fp, fp, #55	@ 0x37

80100194 <printwait>:
printwait:
    LDR                 R10,=0xE000102C
80100194:	e59fa054 	ldr	sl, [pc, #84]	@ 801001f0 <finish+0x44>
    LDR					R10,[R10]
80100198:	e59aa000 	ldr	sl, [sl]
    TST					R10,#0x08
8010019c:	e31a0008 	tst	sl, #8
    BEQ					printwait
801001a0:	0afffffb 	beq	80100194 <printwait>
    LDR                 R10,=0xE0001030
801001a4:	e59fa048 	ldr	sl, [pc, #72]	@ 801001f4 <finish+0x48>
    STR                 R11,[R10]
801001a8:	e58ab000 	str	fp, [sl]

801001ac <finish>:
finish:
	CMP					R12,#0x00
801001ac:	e35c0000 	cmp	ip, #0
	BNE					nextdigit
801001b0:	1affffef 	bne	80100174 <nextdigit>
    LDR                 R0,=__bss_start__
801001b4:	80167000 	.word	0x80167000
    LDR                 R1,=__bss_end__
801001b8:	80967118 	.word	0x80967118
    LDR                 R2,=__va_offset__
801001bc:	80000000 	.word	0x80000000
    LDR                 R4,=__RME_A7A_Stack_Start
801001c0:	80100200 	.word	0x80100200
    LDR                 R0,=0x600F00D2
801001c4:	600f00d2 	.word	0x600f00d2
    LDR                 R0,=0x600F00D7
801001c8:	600f00d7 	.word	0x600f00d7
    LDR                 R0,=0x600F00D1
801001cc:	600f00d1 	.word	0x600f00d1
    LDR                 R0,=0x600F00DB
801001d0:	600f00db 	.word	0x600f00db
    LDR                 R0,=0x600F00D3
801001d4:	600f00d3 	.word	0x600f00d3
    LDR                 R0,=RME_A7A_Mem_Info   //165F18
801001d8:	80166218 	.word	0x80166218
    LDR                 R1,=__RME_A7A_Kern_Pgt //150000
801001dc:	80150000 	.word	0x80150000
    LDR                 R0,=0x000A00A4
801001e0:	000a00a4 	.word	0x000a00a4
    LDR                 R0,=0x006C006C
801001e4:	006c006c 	.word	0x006c006c
    LDR                 R3,=main  //R3=80165848
801001e8:	80165b40 	.word	0x80165b40
    LDR                 R1,=(1<<29)|(1<<28)|(1<<12)|(1<<2)|(1<<0) //R1=30001005 |(1<<12)|(1<<2)|(1<<0)
801001ec:	30001005 	.word	0x30001005
    LDR                 R10,=0xE000102C
801001f0:	e000102c 	.word	0xe000102c
    LDR                 R10,=0xE0001030
801001f4:	e0001030 	.word	0xe0001030
801001f8:	e320f000 	nop	{0}
801001fc:	e320f000 	nop	{0}

80100200 <__RME_A7A_Stack_Start>:
	...

80140200 <__RME_A7A_Stack_End>:
	...

80150000 <__RME_A7A_Kern_Pgt>:
	...

80160000 <__RME_A7A_Vector_Table>:
__RME_A7A_Kern_Pgt:
    .space              65536
/* Vectors *******************************************************************/
    .align              8
__RME_A7A_Vector_Table:
    B                   Reset_Handler
80160000:	ea0001d6 	b	80160760 <Reset_Handler>
    B                   Undefined_Handler
80160004:	ea0001d6 	b	80160764 <Undefined_Handler>
    B                   SVC_Handler
80160008:	ea0001ff 	b	8016080c <SVC_Handler>
    B                   Prefetch_Abort_Handler
8016000c:	ea0001e2 	b	8016079c <Prefetch_Abort_Handler>
    B                   Data_Abort_Handler
80160010:	ea0001ef 	b	801607d4 <Data_Abort_Handler>
    B                   Unused_Handler
80160014:	ea0001d1 	b	80160760 <Reset_Handler>
    B                   IRQ_Handler
80160018:	ea000209 	b	80160844 <IRQ_Handler>
    B                   FIQ_Handler
8016001c:	ea000216 	b	8016087c <FIQ_Handler>

80160020 <__RME_A7A_CPSR_Get>:
Output      : None.
Return      : R0 - The XXXX register contents.
******************************************************************************/
/* CPSR & SPSR */
__RME_A7A_CPSR_Get:
    MRS                 R0,CPSR
80160020:	e10f0000 	mrs	r0, CPSR
    BX                  LR
80160024:	e12fff1e 	bx	lr

80160028 <__RME_A7A_SPSR_Get>:
__RME_A7A_SPSR_Get:
    MRS                 R0,SPSR
80160028:	e14f0000 	mrs	r0, SPSR
    BX                  LR
8016002c:	e12fff1e 	bx	lr

80160030 <__RME_A7A_MIDR_Get>:

/* Main ID register */
__RME_A7A_MIDR_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C0 OP2=0
80160030:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
80160034:	e12fff1e 	bx	lr

80160038 <__RME_A7A_CTR_Get>:
/* Cache type register */
__RME_A7A_CTR_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C0 OP2=1
80160038:	ee100f30 	mrc	15, 0, r0, cr0, cr0, {1}
8016003c:	e12fff1e 	bx	lr

80160040 <__RME_A7A_TCMTR_Get>:
/* TCM type register */
__RME_A7A_TCMTR_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C0 OP2=2
80160040:	ee100f50 	mrc	15, 0, r0, cr0, cr0, {2}
80160044:	e12fff1e 	bx	lr

80160048 <__RME_A7A_TLBTR_Get>:
/* TLB type register */
__RME_A7A_TLBTR_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C0 OP2=3
80160048:	ee100f70 	mrc	15, 0, r0, cr0, cr0, {3}
8016004c:	e12fff1e 	bx	lr

80160050 <__RME_A7A_MPIDR_Get>:
/* Multiprocessor affinity register */
__RME_A7A_MPIDR_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C0 OP2=5
80160050:	ee100fb0 	mrc	15, 0, r0, cr0, cr0, {5}
80160054:	e12fff1e 	bx	lr

80160058 <__RME_A7A_REVIDR_Get>:
/* Revision ID register */
__RME_A7A_REVIDR_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C0 OP2=6
80160058:	ee100fd0 	mrc	15, 0, r0, cr0, cr0, {6}
8016005c:	e12fff1e 	bx	lr

80160060 <__RME_A7A_ID_PFR0_Get>:
/* Processor feature register 0 */
__RME_A7A_ID_PFR0_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C1 OP2=0
80160060:	ee100f11 	mrc	15, 0, r0, cr0, cr1, {0}
80160064:	e12fff1e 	bx	lr

80160068 <__RME_A7A_ID_PFR1_Get>:
/* Processor feature register 1 */
__RME_A7A_ID_PFR1_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C1 OP2=1
80160068:	ee100f31 	mrc	15, 0, r0, cr0, cr1, {1}
8016006c:	e12fff1e 	bx	lr

80160070 <__RME_A7A_ID_DFR0_Get>:
/* Debug feature register 0 */
__RME_A7A_ID_DFR0_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C1 OP2=2
80160070:	ee100f51 	mrc	15, 0, r0, cr0, cr1, {2}
80160074:	e12fff1e 	bx	lr

80160078 <__RME_A7A_ID_AFR0_Get>:
/* Auxiliary feature register 0 */
__RME_A7A_ID_AFR0_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C1 OP2=3
80160078:	ee100f71 	mrc	15, 0, r0, cr0, cr1, {3}
8016007c:	e12fff1e 	bx	lr

80160080 <__RME_A7A_ID_MMFR0_Get>:
/* Memory model feature register 0 */
__RME_A7A_ID_MMFR0_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C1 OP2=4
80160080:	ee100f91 	mrc	15, 0, r0, cr0, cr1, {4}
80160084:	e12fff1e 	bx	lr

80160088 <__RME_A7A_ID_MMFR1_Get>:
/* Memory model feature register 1 */
__RME_A7A_ID_MMFR1_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C1 OP2=5
80160088:	ee100fb1 	mrc	15, 0, r0, cr0, cr1, {5}
8016008c:	e12fff1e 	bx	lr

80160090 <__RME_A7A_ID_MMFR2_Get>:
/* Memory model feature register 2 */
__RME_A7A_ID_MMFR2_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C1 OP2=6
80160090:	ee100fd1 	mrc	15, 0, r0, cr0, cr1, {6}
80160094:	e12fff1e 	bx	lr

80160098 <__RME_A7A_ID_MMFR3_Get>:
/* Memory model feature register 3 */
__RME_A7A_ID_MMFR3_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C1 OP2=7
80160098:	ee100ff1 	mrc	15, 0, r0, cr0, cr1, {7}
8016009c:	e12fff1e 	bx	lr

801600a0 <__RME_A7A_ID_ISAR0_Get>:
/* ISA feature register 0 */
__RME_A7A_ID_ISAR0_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C2 OP2=0
801600a0:	ee100f12 	mrc	15, 0, r0, cr0, cr2, {0}
801600a4:	e12fff1e 	bx	lr

801600a8 <__RME_A7A_ID_ISAR1_Get>:
/* ISA feature register 1 */
__RME_A7A_ID_ISAR1_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C2 OP2=1
801600a8:	ee100f32 	mrc	15, 0, r0, cr0, cr2, {1}
801600ac:	e12fff1e 	bx	lr

801600b0 <__RME_A7A_ID_ISAR2_Get>:
/* ISA feature register 2 */
__RME_A7A_ID_ISAR2_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C2 OP2=2
801600b0:	ee100f52 	mrc	15, 0, r0, cr0, cr2, {2}
801600b4:	e12fff1e 	bx	lr

801600b8 <__RME_A7A_ID_ISAR3_Get>:
/* ISA feature register 3 */
__RME_A7A_ID_ISAR3_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C2 OP2=3
801600b8:	ee100f72 	mrc	15, 0, r0, cr0, cr2, {3}
801600bc:	e12fff1e 	bx	lr

801600c0 <__RME_A7A_ID_ISAR4_Get>:
/* ISA feature register 4 */
__RME_A7A_ID_ISAR4_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C2 OP2=4
801600c0:	ee100f92 	mrc	15, 0, r0, cr0, cr2, {4}
801600c4:	e12fff1e 	bx	lr

801600c8 <__RME_A7A_ID_ISAR5_Get>:
/* ISA feature register 5 */
__RME_A7A_ID_ISAR5_Get:
    CP15_GET            CRN=C0 OP1=0 CRM=C2 OP2=5
801600c8:	ee100fb2 	mrc	15, 0, r0, cr0, cr2, {5}
801600cc:	e12fff1e 	bx	lr

801600d0 <__RME_A7A_ID_CCSIDR_Get>:
/* Cache size ID registers */
__RME_A7A_ID_CCSIDR_Get:
    CP15_GET            CRN=C0 OP1=1 CRM=C0 OP2=0
801600d0:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
801600d4:	e12fff1e 	bx	lr

801600d8 <__RME_A7A_ID_CLIDR_Get>:
/* Cache level ID register */
__RME_A7A_ID_CLIDR_Get:
    CP15_GET            CRN=C0 OP1=1 CRM=C0 OP2=1
801600d8:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
801600dc:	e12fff1e 	bx	lr

801600e0 <__RME_A7A_ID_AIDR_Get>:
/* Auxiliary ID register */
__RME_A7A_ID_AIDR_Get:
    CP15_GET            CRN=C0 OP1=1 CRM=C0 OP2=7
801600e0:	ee300ff0 	mrc	15, 1, r0, cr0, cr0, {7}
801600e4:	e12fff1e 	bx	lr

801600e8 <__RME_A7A_ID_CSSELR_Get>:
/* Cache size selection register */
__RME_A7A_ID_CSSELR_Get:
    CP15_GET            CRN=C0 OP1=2 CRM=C0 OP2=0
801600e8:	ee500f10 	mrc	15, 2, r0, cr0, cr0, {0}
801600ec:	e12fff1e 	bx	lr

801600f0 <__RME_A7A_ID_VPIDR_Get>:
/* Virtualization processor ID register  */
__RME_A7A_ID_VPIDR_Get:
    CP15_GET            CRN=C0 OP1=4 CRM=C0 OP2=0
801600f0:	ee900f10 	mrc	15, 4, r0, cr0, cr0, {0}
801600f4:	e12fff1e 	bx	lr

801600f8 <__RME_A7A_ID_VMPIDR_Get>:
/* Virtualization multiprocessor ID register */
__RME_A7A_ID_VMPIDR_Get:
    CP15_GET            CRN=C0 OP1=4 CRM=C0 OP2=5
801600f8:	ee900fb0 	mrc	15, 4, r0, cr0, cr0, {5}
801600fc:	e12fff1e 	bx	lr

80160100 <__RME_A7A_SCTLR_Get>:

/* System control register */
__RME_A7A_SCTLR_Get:
    CP15_GET            CRN=C1 OP1=0 CRM=C0 OP2=0
80160100:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
80160104:	e12fff1e 	bx	lr

80160108 <__RME_A7A_ACTLR_Get>:
/* Auxiliary control register */
__RME_A7A_ACTLR_Get:
    CP15_GET            CRN=C1 OP1=0 CRM=C0 OP2=1
80160108:	ee110f30 	mrc	15, 0, r0, cr1, cr0, {1}
8016010c:	e12fff1e 	bx	lr

80160110 <__RME_A7A_CPACR_Get>:
/* Coprocessor auxiliary control register */
__RME_A7A_CPACR_Get:
    CP15_GET            CRN=C1 OP1=0 CRM=C0 OP2=2
80160110:	ee110f50 	mrc	15, 0, r0, cr1, cr0, {2}
80160114:	e12fff1e 	bx	lr

80160118 <__RME_A7A_SCR_Get>:
/* Secure configuration register */
__RME_A7A_SCR_Get:
    CP15_GET            CRN=C1 OP1=0 CRM=C1 OP2=0
80160118:	ee110f11 	mrc	15, 0, r0, cr1, cr1, {0}
8016011c:	e12fff1e 	bx	lr

80160120 <__RME_A7A_SDER_Get>:
/* Secure debug enable register */
__RME_A7A_SDER_Get:
    CP15_GET            CRN=C1 OP1=0 CRM=C1 OP2=1
80160120:	ee110f31 	mrc	15, 0, r0, cr1, cr1, {1}
80160124:	e12fff1e 	bx	lr

80160128 <__RME_A7A_NSACR_Get>:
/* Non-secure access control register */
__RME_A7A_NSACR_Get:
    CP15_GET            CRN=C1 OP1=0 CRM=C1 OP2=2
80160128:	ee110f51 	mrc	15, 0, r0, cr1, cr1, {2}
8016012c:	e12fff1e 	bx	lr

80160130 <__RME_A7A_HSCTLR_Get>:
/* Hyp system control register */
__RME_A7A_HSCTLR_Get:
    CP15_GET            CRN=C1 OP1=4 CRM=C0 OP2=0
80160130:	ee910f10 	mrc	15, 4, r0, cr1, cr0, {0}
80160134:	e12fff1e 	bx	lr

80160138 <__RME_A7A_HACTLR_Get>:
/* Hyp auxiliary control register */
__RME_A7A_HACTLR_Get:
    CP15_GET            CRN=C1 OP1=4 CRM=C0 OP2=1
80160138:	ee910f30 	mrc	15, 4, r0, cr1, cr0, {1}
8016013c:	e12fff1e 	bx	lr

80160140 <__RME_A7A_HCR_Get>:
/* Hyp configuration register */
__RME_A7A_HCR_Get:
    CP15_GET            CRN=C1 OP1=4 CRM=C1 OP2=0
80160140:	ee910f11 	mrc	15, 4, r0, cr1, cr1, {0}
80160144:	e12fff1e 	bx	lr

80160148 <__RME_A7A_HDCR_Get>:
/* Hyp debug configuration register */
__RME_A7A_HDCR_Get:
    CP15_GET            CRN=C1 OP1=4 CRM=C1 OP2=1
80160148:	ee910f31 	mrc	15, 4, r0, cr1, cr1, {1}
8016014c:	e12fff1e 	bx	lr

80160150 <__RME_A7A_HCPTR_Get>:
/* Hyp coprocessor trap register */
__RME_A7A_HCPTR_Get:
    CP15_GET            CRN=C1 OP1=4 CRM=C1 OP2=2
80160150:	ee910f51 	mrc	15, 4, r0, cr1, cr1, {2}
80160154:	e12fff1e 	bx	lr

80160158 <__RME_A7A_HSTR_Get>:
/* Hyp system trap register */
__RME_A7A_HSTR_Get:
    CP15_GET            CRN=C1 OP1=4 CRM=C1 OP2=3
80160158:	ee910f71 	mrc	15, 4, r0, cr1, cr1, {3}
8016015c:	e12fff1e 	bx	lr

80160160 <__RME_A7A_HACR_Get>:
/* Hyp auxiliary configuration register */
__RME_A7A_HACR_Get:
    CP15_GET            CRN=C1 OP1=4 CRM=C1 OP2=7
80160160:	ee910ff1 	mrc	15, 4, r0, cr1, cr1, {7}
80160164:	e12fff1e 	bx	lr

80160168 <__RME_A7A_TTBR0_Get>:

/* Translation table base register 0 - 32bit. We do not support PAE of any kind */
__RME_A7A_TTBR0_Get:
    CP15_GET            CRN=C2 OP1=0 CRM=C0 OP2=0
80160168:	ee120f10 	mrc	15, 0, r0, cr2, cr0, {0}
8016016c:	e12fff1e 	bx	lr

80160170 <__RME_A7A_TTBR1_Get>:
/* Translation table base register 1 - 32bit. We do not support PAE of any kind */
__RME_A7A_TTBR1_Get:
    CP15_GET            CRN=C2 OP1=0 CRM=C0 OP2=1
80160170:	ee120f30 	mrc	15, 0, r0, cr2, cr0, {1}
80160174:	e12fff1e 	bx	lr

80160178 <__RME_A7A_TTBCR_Get>:
/* Translation table base controle register */
__RME_A7A_TTBCR_Get:
    CP15_GET            CRN=C2 OP1=0 CRM=C0 OP2=2
80160178:	ee120f50 	mrc	15, 0, r0, cr2, cr0, {2}
8016017c:	e12fff1e 	bx	lr

80160180 <__RME_A7A_HTCR_Get>:
/* Hyp translation control register */
__RME_A7A_HTCR_Get:
    CP15_GET            CRN=C2 OP1=4 CRM=C0 OP2=2
80160180:	ee920f50 	mrc	15, 4, r0, cr2, cr0, {2}
80160184:	e12fff1e 	bx	lr

80160188 <__RME_A7A_VTCR_Get>:
/* Virtualization translation control register */
__RME_A7A_VTCR_Get:
    CP15_GET            CRN=C2 OP1=4 CRM=C1 OP2=2
80160188:	ee920f51 	mrc	15, 4, r0, cr2, cr1, {2}
8016018c:	e12fff1e 	bx	lr

80160190 <__RME_A7A_DACR_Get>:
/* Domain access control register */
__RME_A7A_DACR_Get:
    CP15_GET            CRN=C3 OP1=0 CRM=C0 OP2=0
80160190:	ee130f10 	mrc	15, 0, r0, cr3, cr0, {0}
80160194:	e12fff1e 	bx	lr

80160198 <__RME_A7A_DFSR_Get>:

/* Data fault status register */
__RME_A7A_DFSR_Get:
    CP15_GET            CRN=C5 OP1=0 CRM=C0 OP2=0
80160198:	ee150f10 	mrc	15, 0, r0, cr5, cr0, {0}
8016019c:	e12fff1e 	bx	lr

801601a0 <__RME_A7A_IFSR_Get>:
/* Instruction fault status register */
__RME_A7A_IFSR_Get:
    CP15_GET            CRN=C5 OP1=0 CRM=C0 OP2=1
801601a0:	ee150f30 	mrc	15, 0, r0, cr5, cr0, {1}
801601a4:	e12fff1e 	bx	lr

801601a8 <__RME_A7A_ADFSR_Get>:
/* Auxiliary data fault status register */
__RME_A7A_ADFSR_Get:
    CP15_GET            CRN=C5 OP1=0 CRM=C1 OP2=0
801601a8:	ee150f11 	mrc	15, 0, r0, cr5, cr1, {0}
801601ac:	e12fff1e 	bx	lr

801601b0 <__RME_A7A_AIFSR_Get>:
/* Auxiliary instruction fault status register */
__RME_A7A_AIFSR_Get:
    CP15_GET            CRN=C5 OP1=0 CRM=C1 OP2=1
801601b0:	ee150f31 	mrc	15, 0, r0, cr5, cr1, {1}
801601b4:	e12fff1e 	bx	lr

801601b8 <__RME_A7A_HADFSR_Get>:
/* Hyp auxiliary data fault status register */
__RME_A7A_HADFSR_Get:
    CP15_GET            CRN=C5 OP1=4 CRM=C1 OP2=0
801601b8:	ee950f11 	mrc	15, 4, r0, cr5, cr1, {0}
801601bc:	e12fff1e 	bx	lr

801601c0 <__RME_A7A_HAIFSR_Get>:
/* Hyp auxiliary instruction fault status register */
__RME_A7A_HAIFSR_Get:
    CP15_GET            CRN=C5 OP1=4 CRM=C1 OP2=1
801601c0:	ee950f31 	mrc	15, 4, r0, cr5, cr1, {1}
801601c4:	e12fff1e 	bx	lr

801601c8 <__RME_A7A_HSR_Get>:
/* Hyp syndrome register */
__RME_A7A_HSR_Get:
    CP15_GET            CRN=C5 OP1=4 CRM=C2 OP2=0
801601c8:	ee950f12 	mrc	15, 4, r0, cr5, cr2, {0}
801601cc:	e12fff1e 	bx	lr

801601d0 <__RME_A7A_DFAR_Get>:
/* Data fault address register */
__RME_A7A_DFAR_Get:
    CP15_GET            CRN=C6 OP1=0 CRM=C0 OP2=0
801601d0:	ee160f10 	mrc	15, 0, r0, cr6, cr0, {0}
801601d4:	e12fff1e 	bx	lr

801601d8 <__RME_A7A_IFAR_Get>:
/* Instruction fault address register */
__RME_A7A_IFAR_Get:
    CP15_GET            CRN=C6 OP1=0 CRM=C0 OP2=2
801601d8:	ee160f50 	mrc	15, 0, r0, cr6, cr0, {2}
801601dc:	e12fff1e 	bx	lr

801601e0 <__RME_A7A_HDFAR_Get>:
/* Hyp data fault address register */
__RME_A7A_HDFAR_Get:
    CP15_GET            CRN=C6 OP1=4 CRM=C0 OP2=0
801601e0:	ee960f10 	mrc	15, 4, r0, cr6, cr0, {0}
801601e4:	e12fff1e 	bx	lr

801601e8 <__RME_A7A_HIFAR_Get>:
/* Hyp instruction fault address register */
__RME_A7A_HIFAR_Get:
    CP15_GET            CRN=C6 OP1=4 CRM=C0 OP2=2
801601e8:	ee960f50 	mrc	15, 4, r0, cr6, cr0, {2}
801601ec:	e12fff1e 	bx	lr

801601f0 <__RME_A7A_HPFAR_Get>:
/* Hyp IPA fault address register */
__RME_A7A_HPFAR_Get:
    CP15_GET            CRN=C6 OP1=4 CRM=C0 OP2=4
801601f0:	ee960f90 	mrc	15, 4, r0, cr6, cr0, {4}
801601f4:	e12fff1e 	bx	lr

801601f8 <__RME_A7A_PAR_Get>:

/* Physical address register */
__RME_A7A_PAR_Get:
    CP15_GET            CRN=C7 OP1=0 CRM=C4 OP2=0
801601f8:	ee170f14 	mrc	15, 0, r0, cr7, cr4, {0}
801601fc:	e12fff1e 	bx	lr

80160200 <__RME_A7A_TLBLR_Get>:

/* C9 registers currently unsupported */

/* TLB lockdown register - Cortex-A9 */
__RME_A7A_TLBLR_Get:
    CP15_GET            CRN=C10 OP1=0 CRM=C0 OP2=0
80160200:	ee1a0f10 	mrc	15, 0, r0, cr10, cr0, {0}
80160204:	e12fff1e 	bx	lr

80160208 <__RME_A7A_PRRR_Get>:
/* Primary region remap register */
__RME_A7A_PRRR_Get:
    CP15_GET            CRN=C10 OP1=0 CRM=C2 OP2=0
80160208:	ee1a0f12 	mrc	15, 0, r0, cr10, cr2, {0}
8016020c:	e12fff1e 	bx	lr

80160210 <__RME_A7A_NMRR_Get>:
/* Normal memory remap register */
__RME_A7A_NMRR_Get:
    CP15_GET            CRN=C10 OP1=0 CRM=C2 OP2=1
80160210:	ee1a0f32 	mrc	15, 0, r0, cr10, cr2, {1}
80160214:	e12fff1e 	bx	lr

80160218 <__RME_A7A_AMAIR0_Get>:
/* Auxiliary memory attribute indirection register 0 */
__RME_A7A_AMAIR0_Get:
    CP15_GET            CRN=C10 OP1=0 CRM=C3 OP2=0
80160218:	ee1a0f13 	mrc	15, 0, r0, cr10, cr3, {0}
8016021c:	e12fff1e 	bx	lr

80160220 <__RME_A7A_AMAIR1_Get>:
/* Auxiliary memory attribute indirection register 1 */
__RME_A7A_AMAIR1_Get:
    CP15_GET            CRN=C10 OP1=0 CRM=C3 OP2=1
80160220:	ee1a0f33 	mrc	15, 0, r0, cr10, cr3, {1}
80160224:	e12fff1e 	bx	lr

80160228 <__RME_A7A_HMAIR0_Get>:
/* Hyp memory attribute indirection register 0 */
__RME_A7A_HMAIR0_Get:
    CP15_GET            CRN=C10 OP1=4 CRM=C2 OP2=0
80160228:	ee9a0f12 	mrc	15, 4, r0, cr10, cr2, {0}
8016022c:	e12fff1e 	bx	lr

80160230 <__RME_A7A_HMAIR1_Get>:
/* Hyp memory attribute indirection register 1 */
__RME_A7A_HMAIR1_Get:
    CP15_GET            CRN=C10 OP1=4 CRM=C2 OP2=1
80160230:	ee9a0f32 	mrc	15, 4, r0, cr10, cr2, {1}
80160234:	e12fff1e 	bx	lr

80160238 <__RME_A7A_HAMAIR0_Get>:
/* Hyp auxiliary memory attribute indirection register 0 */
__RME_A7A_HAMAIR0_Get:
    CP15_GET            CRN=C10 OP1=4 CRM=C3 OP2=0
80160238:	ee9a0f13 	mrc	15, 4, r0, cr10, cr3, {0}
8016023c:	e12fff1e 	bx	lr

80160240 <__RME_A7A_HAMAIR1_Get>:
/* Hyp auxiliary memory attribute indirection register 1 */
__RME_A7A_HAMAIR1_Get:
    CP15_GET            CRN=C10 OP1=4 CRM=C3 OP2=1
80160240:	ee9a0f33 	mrc	15, 4, r0, cr10, cr3, {1}
80160244:	e12fff1e 	bx	lr

80160248 <__RME_A7A_VBAR_Get>:

/* Vector base address register */
__RME_A7A_VBAR_Get:
    CP15_GET            CRN=C12 OP1=0 CRM=C0 OP2=0
80160248:	ee1c0f10 	mrc	15, 0, r0, cr12, cr0, {0}
8016024c:	e12fff1e 	bx	lr

80160250 <__RME_A7A_MVBAR_Get>:
/* Vector base address register */
__RME_A7A_MVBAR_Get:
    CP15_GET            CRN=C12 OP1=0 CRM=C0 OP2=1
80160250:	ee1c0f30 	mrc	15, 0, r0, cr12, cr0, {1}
80160254:	e12fff1e 	bx	lr

80160258 <__RME_A7A_ISR_Get>:
/* Interrupt status register */
__RME_A7A_ISR_Get:
    CP15_GET            CRN=C12 OP1=0 CRM=C1 OP2=0
80160258:	ee1c0f11 	mrc	15, 0, r0, cr12, cr1, {0}
8016025c:	e12fff1e 	bx	lr

80160260 <__RME_A7A_HVBAR_Get>:
/* Hyp vector base address register */
__RME_A7A_HVBAR_Get:
    CP15_GET            CRN=C12 OP1=4 CRM=C0 OP2=0
80160260:	ee9c0f10 	mrc	15, 4, r0, cr12, cr0, {0}
80160264:	e12fff1e 	bx	lr

80160268 <__RME_A7A_FCSEIDR_Get>:

/* FCSE PID register */
__RME_A7A_FCSEIDR_Get:
    CP15_GET            CRN=C13 OP1=0 CRM=C0 OP2=0
80160268:	ee1d0f10 	mrc	15, 0, r0, cr13, cr0, {0}
8016026c:	e12fff1e 	bx	lr

80160270 <__RME_A7A_CONTEXTIDR_Get>:
/* Context ID register */
__RME_A7A_CONTEXTIDR_Get:
    CP15_GET            CRN=C13 OP1=0 CRM=C0 OP2=1
80160270:	ee1d0f30 	mrc	15, 0, r0, cr13, cr0, {1}
80160274:	e12fff1e 	bx	lr

80160278 <__RME_A7A_TPIDRURW_Get>:
/* User read/write software thread register */
__RME_A7A_TPIDRURW_Get:
    CP15_GET            CRN=C13 OP1=0 CRM=C0 OP2=2
80160278:	ee1d0f50 	mrc	15, 0, r0, cr13, cr0, {2}
8016027c:	e12fff1e 	bx	lr

80160280 <__RME_A7A_TPIDRURO_Get>:
/* User read-only software thread register */
__RME_A7A_TPIDRURO_Get:
    CP15_GET            CRN=C13 OP1=0 CRM=C0 OP2=3
80160280:	ee1d0f70 	mrc	15, 0, r0, cr13, cr0, {3}
80160284:	e12fff1e 	bx	lr

80160288 <__RME_A7A_TPIDRPRW_Get>:
/* PL1-only software thread register */
__RME_A7A_TPIDRPRW_Get:
    CP15_GET            CRN=C13 OP1=0 CRM=C0 OP2=4
80160288:	ee1d0f90 	mrc	15, 0, r0, cr13, cr0, {4}
8016028c:	e12fff1e 	bx	lr

80160290 <__RME_A7A_HTPIDR_Get>:
/* Hyp read/write software thread register */
__RME_A7A_HTPIDR_Get:
    CP15_GET            CRN=C13 OP1=4 CRM=C0 OP2=2
80160290:	ee9d0f50 	mrc	15, 4, r0, cr13, cr0, {2}
80160294:	e12fff1e 	bx	lr

80160298 <__RME_A7A_CNTFRQ_Get>:

/* Counter frequency register */
__RME_A7A_CNTFRQ_Get:
    CP15_GET            CRN=C14 OP1=0 CRM=C0 OP2=0
80160298:	ee1e0f10 	mrc	15, 0, r0, cr14, cr0, {0}
8016029c:	e12fff1e 	bx	lr

801602a0 <__RME_A7A_CNTKCTL_Get>:
/* Timer PL1 control register */
__RME_A7A_CNTKCTL_Get:
    CP15_GET            CRN=C14 OP1=0 CRM=C1 OP2=0
801602a0:	ee1e0f11 	mrc	15, 0, r0, cr14, cr1, {0}
801602a4:	e12fff1e 	bx	lr

801602a8 <__RME_A7A_CNTP_TVAL_Get>:
/* PL1 physical timer value register */
__RME_A7A_CNTP_TVAL_Get:
    CP15_GET            CRN=C14 OP1=0 CRM=C2 OP2=0
801602a8:	ee1e0f12 	mrc	15, 0, r0, cr14, cr2, {0}
801602ac:	e12fff1e 	bx	lr

801602b0 <__RME_A7A_CNTP_CTL_Get>:
/* PL1 physical timer control register */
__RME_A7A_CNTP_CTL_Get:
    CP15_GET            CRN=C14 OP1=0 CRM=C2 OP2=1
801602b0:	ee1e0f32 	mrc	15, 0, r0, cr14, cr2, {1}
801602b4:	e12fff1e 	bx	lr

801602b8 <__RME_A7A_CNTV_TVAL_Get>:
/* Virtual timer value register */
__RME_A7A_CNTV_TVAL_Get:
    CP15_GET            CRN=C14 OP1=0 CRM=C3 OP2=0
801602b8:	ee1e0f13 	mrc	15, 0, r0, cr14, cr3, {0}
801602bc:	e12fff1e 	bx	lr

801602c0 <__RME_A7A_CNTV_CTL_Get>:
/* Virtual timer control register */
__RME_A7A_CNTV_CTL_Get:
    CP15_GET            CRN=C14 OP1=0 CRM=C3 OP2=1
801602c0:	ee1e0f33 	mrc	15, 0, r0, cr14, cr3, {1}
801602c4:	e12fff1e 	bx	lr

801602c8 <__RME_A7A_CNTHCTL_Get>:
/* Timer PL2 control register */
__RME_A7A_CNTHCTL_Get:
    CP15_GET            CRN=C14 OP1=4 CRM=C1 OP2=0
801602c8:	ee9e0f11 	mrc	15, 4, r0, cr14, cr1, {0}
801602cc:	e12fff1e 	bx	lr

801602d0 <__RME_A7A_CNTHP_TVAL_Get>:
/* PL2 physical timer value register */
__RME_A7A_CNTHP_TVAL_Get:
    CP15_GET            CRN=C14 OP1=4 CRM=C2 OP2=0
801602d0:	ee9e0f12 	mrc	15, 4, r0, cr14, cr2, {0}
801602d4:	e12fff1e 	bx	lr

801602d8 <__RME_A7A_CNTHP_CTL_Get>:
/* PL2 physical timer control register */
__RME_A7A_CNTHP_CTL_Get:
    CP15_GET            CRN=C14 OP1=4 CRM=C2 OP2=1
801602d8:	ee9e0f32 	mrc	15, 4, r0, cr14, cr2, {1}
801602dc:	e12fff1e 	bx	lr

801602e0 <__RME_A7A_CNTPCT_DW_Get>:
              rme_ptr_t* R1 - The pointer to the higher bits.
Return      : None.
******************************************************************************/
/* Physical count register */
__RME_A7A_CNTPCT_DW_Get:
    CP15_GET_DOUBLE     CRM=C14 OP=0
801602e0:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
801602e4:	e5802000 	str	r2, [r0]
801602e8:	e5813000 	str	r3, [r1]
801602ec:	e12fff1e 	bx	lr

801602f0 <__RME_A7A_CNTVCT_DW_Get>:
/* Virtual count register */
__RME_A7A_CNTVCT_DW_Get:
    CP15_GET_DOUBLE     CRM=C14 OP=1
801602f0:	ec532f1e 	mrrc	15, 1, r2, r3, cr14
801602f4:	e5802000 	str	r2, [r0]
801602f8:	e5813000 	str	r3, [r1]
801602fc:	e12fff1e 	bx	lr

80160300 <__RME_A7A_CNTP_CVAL_DW_Get>:
/* PL1 physical timer compare value register */
__RME_A7A_CNTP_CVAL_DW_Get:
    CP15_GET_DOUBLE     CRM=C14 OP=2
80160300:	ec532f2e 	mrrc	15, 2, r2, r3, cr14
80160304:	e5802000 	str	r2, [r0]
80160308:	e5813000 	str	r3, [r1]
8016030c:	e12fff1e 	bx	lr

80160310 <__RME_A7A_CNTV_CVAL_DW_Get>:
/* Virtual timer compare value register */
__RME_A7A_CNTV_CVAL_DW_Get:
    CP15_GET_DOUBLE     CRM=C14 OP=3
80160310:	ec532f3e 	mrrc	15, 3, r2, r3, cr14
80160314:	e5802000 	str	r2, [r0]
80160318:	e5813000 	str	r3, [r1]
8016031c:	e12fff1e 	bx	lr

80160320 <__RME_A7A_CNTVOFF_DW_Get>:
/* Virtual offset register */
__RME_A7A_CNTVOFF_DW_Get:
    CP15_GET_DOUBLE     CRM=C14 OP=4
80160320:	ec532f4e 	mrrc	15, 4, r2, r3, cr14
80160324:	e5802000 	str	r2, [r0]
80160328:	e5813000 	str	r3, [r1]
8016032c:	e12fff1e 	bx	lr

80160330 <__RME_A7A_CNTHP_CVAL_DW_Get>:
/* L2 physical timer compare value register */
__RME_A7A_CNTHP_CVAL_DW_Get:
    CP15_GET_DOUBLE     CRM=C14 OP=6
80160330:	ec532f6e 	mrrc	15, 6, r2, r3, cr14
80160334:	e5802000 	str	r2, [r0]
80160338:	e5813000 	str	r3, [r1]
8016033c:	e12fff1e 	bx	lr

80160340 <__RME_A7A_CPSR_Set>:
Output      : None.
Return      : None.
******************************************************************************/
/* CPSR & SPSR */
__RME_A7A_CPSR_Set:
    MSR                 CPSR,R0
80160340:	e129f000 	msr	CPSR_fc, r0
    BX                  LR
80160344:	e12fff1e 	bx	lr

80160348 <__RME_A7A_SPSR_Set>:
__RME_A7A_SPSR_Set:
    MSR                 SPSR,R0
80160348:	e169f000 	msr	SPSR_fc, r0
    BX                  LR
8016034c:	e12fff1e 	bx	lr

80160350 <__RME_A7A_ID_CSSELR_Set>:

/* Cache size selection register */
__RME_A7A_ID_CSSELR_Set:
    CP15_SET            CRN=C0 OP1=2 CRM=C0 OP2=0
80160350:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
80160354:	e12fff1e 	bx	lr

80160358 <__RME_A7A_ID_VPIDR_Set>:
/* Virtualization processor ID register  */
__RME_A7A_ID_VPIDR_Set:
    CP15_SET            CRN=C0 OP1=4 CRM=C0 OP2=0
80160358:	ee800f10 	mcr	15, 4, r0, cr0, cr0, {0}
8016035c:	e12fff1e 	bx	lr

80160360 <__RME_A7A_ID_VMPIDR_Set>:
/* Virtualization multiprocessor ID register */
__RME_A7A_ID_VMPIDR_Set:
    CP15_SET            CRN=C0 OP1=4 CRM=C0 OP2=5
80160360:	ee800fb0 	mcr	15, 4, r0, cr0, cr0, {5}
80160364:	e12fff1e 	bx	lr

80160368 <__RME_A7A_SCTLR_Set>:

/* System control register */
__RME_A7A_SCTLR_Set:
    CP15_SET            CRN=C1 OP1=0 CRM=C0 OP2=0
80160368:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
8016036c:	e12fff1e 	bx	lr

80160370 <__RME_A7A_ACTLR_Set>:
/* Auxiliary control register */
__RME_A7A_ACTLR_Set:
    CP15_SET            CRN=C1 OP1=0 CRM=C0 OP2=1
80160370:	ee010f30 	mcr	15, 0, r0, cr1, cr0, {1}
80160374:	e12fff1e 	bx	lr

80160378 <__RME_A7A_CPACR_Set>:
/* Coprocessor auxiliary control register */
__RME_A7A_CPACR_Set:
    CP15_SET            CRN=C1 OP1=0 CRM=C0 OP2=2
80160378:	ee010f50 	mcr	15, 0, r0, cr1, cr0, {2}
8016037c:	e12fff1e 	bx	lr

80160380 <__RME_A7A_SCR_Set>:
/* Secure configuration register */
__RME_A7A_SCR_Set:
    CP15_SET            CRN=C1 OP1=0 CRM=C1 OP2=0
80160380:	ee010f11 	mcr	15, 0, r0, cr1, cr1, {0}
80160384:	e12fff1e 	bx	lr

80160388 <__RME_A7A_SDER_Set>:
/* Secure debug enable register */
__RME_A7A_SDER_Set:
    CP15_SET            CRN=C1 OP1=0 CRM=C1 OP2=1
80160388:	ee010f31 	mcr	15, 0, r0, cr1, cr1, {1}
8016038c:	e12fff1e 	bx	lr

80160390 <__RME_A7A_NSACR_Set>:
/* Non-secure access control register */
__RME_A7A_NSACR_Set:
    CP15_SET            CRN=C1 OP1=0 CRM=C1 OP2=2
80160390:	ee010f51 	mcr	15, 0, r0, cr1, cr1, {2}
80160394:	e12fff1e 	bx	lr

80160398 <__RME_A7A_HSCTLR_Set>:
/* Hyp system control register */
__RME_A7A_HSCTLR_Set:
    CP15_SET            CRN=C1 OP1=4 CRM=C0 OP2=0
80160398:	ee810f10 	mcr	15, 4, r0, cr1, cr0, {0}
8016039c:	e12fff1e 	bx	lr

801603a0 <__RME_A7A_HACTLR_Set>:
/* Hyp auxiliary control register */
__RME_A7A_HACTLR_Set:
    CP15_SET            CRN=C1 OP1=4 CRM=C0 OP2=1
801603a0:	ee810f30 	mcr	15, 4, r0, cr1, cr0, {1}
801603a4:	e12fff1e 	bx	lr

801603a8 <__RME_A7A_HCR_Set>:
/* Hyp configuration register */
__RME_A7A_HCR_Set:
    CP15_SET            CRN=C1 OP1=4 CRM=C1 OP2=0
801603a8:	ee810f11 	mcr	15, 4, r0, cr1, cr1, {0}
801603ac:	e12fff1e 	bx	lr

801603b0 <__RME_A7A_HDCR_Set>:
/* Hyp debug configuration register */
__RME_A7A_HDCR_Set:
    CP15_SET            CRN=C1 OP1=4 CRM=C1 OP2=1
801603b0:	ee810f31 	mcr	15, 4, r0, cr1, cr1, {1}
801603b4:	e12fff1e 	bx	lr

801603b8 <__RME_A7A_HCPTR_Set>:
/* Hyp coprocessor trap register */
__RME_A7A_HCPTR_Set:
    CP15_SET            CRN=C1 OP1=4 CRM=C1 OP2=2
801603b8:	ee810f51 	mcr	15, 4, r0, cr1, cr1, {2}
801603bc:	e12fff1e 	bx	lr

801603c0 <__RME_A7A_HSTR_Set>:
/* Hyp system trap register */
__RME_A7A_HSTR_Set:
    CP15_SET            CRN=C1 OP1=4 CRM=C1 OP2=3
801603c0:	ee810f71 	mcr	15, 4, r0, cr1, cr1, {3}
801603c4:	e12fff1e 	bx	lr

801603c8 <__RME_A7A_HACR_Set>:
/* Hyp auxiliary configuration register */
__RME_A7A_HACR_Set:
    CP15_SET            CRN=C1 OP1=4 CRM=C1 OP2=7
801603c8:	ee810ff1 	mcr	15, 4, r0, cr1, cr1, {7}
801603cc:	e12fff1e 	bx	lr

801603d0 <__RME_A7A_Pgt_Set>:

/* Translation table base register 0 - 32bit. We do not support PAE of any kind.
 * This operation also sets the page table of this architecture */
__RME_A7A_TTBR0_Set:
__RME_A7A_Pgt_Set:
    CP15_SET            CRN=C2 OP1=0 CRM=C0 OP2=0
801603d0:	ee020f10 	mcr	15, 0, r0, cr2, cr0, {0}
801603d4:	e12fff1e 	bx	lr

801603d8 <__RME_A7A_TTBR1_Set>:
/* Translation table base register 1 - 32bit. We do not support PAE of any kind */
__RME_A7A_TTBR1_Set:
    CP15_SET            CRN=C2 OP1=0 CRM=C0 OP2=1
801603d8:	ee020f30 	mcr	15, 0, r0, cr2, cr0, {1}
801603dc:	e12fff1e 	bx	lr

801603e0 <__RME_A7A_TTBCR_Set>:
/* Translation table base controle register */
__RME_A7A_TTBCR_Set:
    CP15_SET            CRN=C2 OP1=0 CRM=C0 OP2=2
801603e0:	ee020f50 	mcr	15, 0, r0, cr2, cr0, {2}
801603e4:	e12fff1e 	bx	lr

801603e8 <__RME_A7A_HTCR_Set>:
/* Hyp translation control register */
__RME_A7A_HTCR_Set:
    CP15_SET            CRN=C2 OP1=4 CRM=C0 OP2=2
801603e8:	ee820f50 	mcr	15, 4, r0, cr2, cr0, {2}
801603ec:	e12fff1e 	bx	lr

801603f0 <__RME_A7A_VTCR_Set>:
/* Virtualization translation control register */
__RME_A7A_VTCR_Set:
    CP15_SET            CRN=C2 OP1=4 CRM=C1 OP2=2
801603f0:	ee820f51 	mcr	15, 4, r0, cr2, cr1, {2}
801603f4:	e12fff1e 	bx	lr

801603f8 <__RME_A7A_DACR_Set>:
/* Domain access control register */
__RME_A7A_DACR_Set:
    CP15_SET            CRN=C3 OP1=0 CRM=C0 OP2=0
801603f8:	ee030f10 	mcr	15, 0, r0, cr3, cr0, {0}
801603fc:	e12fff1e 	bx	lr

80160400 <__RME_A7A_DFSR_Set>:

/* Data fault status register */
__RME_A7A_DFSR_Set:
    CP15_SET            CRN=C5 OP1=0 CRM=C0 OP2=0
80160400:	ee050f10 	mcr	15, 0, r0, cr5, cr0, {0}
80160404:	e12fff1e 	bx	lr

80160408 <__RME_A7A_IFSR_Set>:
/* Instruction fault status register */
__RME_A7A_IFSR_Set:
    CP15_SET            CRN=C5 OP1=0 CRM=C0 OP2=1
80160408:	ee050f30 	mcr	15, 0, r0, cr5, cr0, {1}
8016040c:	e12fff1e 	bx	lr

80160410 <__RME_A7A_ADFSR_Set>:
/* Auxiliary data fault status register */
__RME_A7A_ADFSR_Set:
    CP15_SET            CRN=C5 OP1=0 CRM=C1 OP2=0
80160410:	ee050f11 	mcr	15, 0, r0, cr5, cr1, {0}
80160414:	e12fff1e 	bx	lr

80160418 <__RME_A7A_AIFSR_Set>:
/* Auxiliary instruction fault status register */
__RME_A7A_AIFSR_Set:
    CP15_SET            CRN=C5 OP1=0 CRM=C1 OP2=1
80160418:	ee050f31 	mcr	15, 0, r0, cr5, cr1, {1}
8016041c:	e12fff1e 	bx	lr

80160420 <__RME_A7A_HADFSR_Set>:
/* Hyp auxiliary data fault status register */
__RME_A7A_HADFSR_Set:
    CP15_SET            CRN=C5 OP1=4 CRM=C1 OP2=0
80160420:	ee850f11 	mcr	15, 4, r0, cr5, cr1, {0}
80160424:	e12fff1e 	bx	lr

80160428 <__RME_A7A_HAIFSR_Set>:
/* Hyp auxiliary instruction fault status register */
__RME_A7A_HAIFSR_Set:
    CP15_SET            CRN=C5 OP1=4 CRM=C1 OP2=1
80160428:	ee850f31 	mcr	15, 4, r0, cr5, cr1, {1}
8016042c:	e12fff1e 	bx	lr

80160430 <__RME_A7A_HSR_Set>:
/* Hyp syndrome register */
__RME_A7A_HSR_Set:
    CP15_SET            CRN=C5 OP1=4 CRM=C2 OP2=0
80160430:	ee850f12 	mcr	15, 4, r0, cr5, cr2, {0}
80160434:	e12fff1e 	bx	lr

80160438 <__RME_A7A_DFAR_Set>:
/* Data fault address register */
__RME_A7A_DFAR_Set:
    CP15_SET            CRN=C6 OP1=0 CRM=C0 OP2=0
80160438:	ee060f10 	mcr	15, 0, r0, cr6, cr0, {0}
8016043c:	e12fff1e 	bx	lr

80160440 <__RME_A7A_IFAR_Set>:
/* Instruction fault address register */
__RME_A7A_IFAR_Set:
    CP15_SET            CRN=C6 OP1=0 CRM=C0 OP2=2
80160440:	ee060f50 	mcr	15, 0, r0, cr6, cr0, {2}
80160444:	e12fff1e 	bx	lr

80160448 <__RME_A7A_HDFAR_Set>:
/* Hyp data fault address register */
__RME_A7A_HDFAR_Set:
    CP15_SET            CRN=C6 OP1=4 CRM=C0 OP2=0
80160448:	ee860f10 	mcr	15, 4, r0, cr6, cr0, {0}
8016044c:	e12fff1e 	bx	lr

80160450 <__RME_A7A_HIFAR_Set>:
/* Hyp instruction fault address register */
__RME_A7A_HIFAR_Set:
    CP15_SET            CRN=C6 OP1=4 CRM=C0 OP2=2
80160450:	ee860f50 	mcr	15, 4, r0, cr6, cr0, {2}
80160454:	e12fff1e 	bx	lr

80160458 <__RME_A7A_HPFAR_Set>:
/* Hyp IPA fault address register */
__RME_A7A_HPFAR_Set:
    CP15_SET            CRN=C6 OP1=4 CRM=C0 OP2=4
80160458:	ee860f90 	mcr	15, 4, r0, cr6, cr0, {4}
8016045c:	e12fff1e 	bx	lr

80160460 <__RME_A7A_ICIALLUIS_Set>:

/* Instruction cache invalidate all to PoU inner shareable */
__RME_A7A_ICIALLUIS_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C1 OP2=0
80160460:	ee070f11 	mcr	15, 0, r0, cr7, cr1, {0}
80160464:	e12fff1e 	bx	lr

80160468 <__RME_A7A_BPIALLIS_Set>:
/* Branch predictor invalidate all inner shareable */
__RME_A7A_BPIALLIS_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C1 OP2=6
80160468:	ee070fd1 	mcr	15, 0, r0, cr7, cr1, {6}
8016046c:	e12fff1e 	bx	lr

80160470 <__RME_A7A_PAR_Set>:
/* Physical address register */
__RME_A7A_PAR_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C4 OP2=6
80160470:	ee070fd4 	mcr	15, 0, r0, cr7, cr4, {6}
80160474:	e12fff1e 	bx	lr

80160478 <__RME_A7A_ICIALLU_Set>:
/* Instruction cache invalidate all to PoU */
__RME_A7A_ICIALLU_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C5 OP2=0
80160478:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}
8016047c:	e12fff1e 	bx	lr

80160480 <__RME_A7A_ICIMVAU_Set>:
/* Invalidate instruction cache by MVA to PoU */
__RME_A7A_ICIMVAU_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C5 OP2=1
80160480:	ee070f35 	mcr	15, 0, r0, cr7, cr5, {1}
80160484:	e12fff1e 	bx	lr

80160488 <__RME_A7A_CP15ISB_Set>:
/* ISB register - deprecated */
__RME_A7A_CP15ISB_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C5 OP2=4
80160488:	ee070f95 	mcr	15, 0, r0, cr7, cr5, {4}
8016048c:	e12fff1e 	bx	lr

80160490 <__RME_A7A_BPIALL_Set>:
/* Invalidate entire branch predictor array */
__RME_A7A_BPIALL_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C5 OP2=6
80160490:	ee070fd5 	mcr	15, 0, r0, cr7, cr5, {6}
80160494:	e12fff1e 	bx	lr

80160498 <__RME_A7A_BPIMVA_Set>:
/* Invalidate MVA from branch predictors */
__RME_A7A_BPIMVA_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C5 OP2=7
80160498:	ee070ff5 	mcr	15, 0, r0, cr7, cr5, {7}
8016049c:	e12fff1e 	bx	lr

801604a0 <__RME_A7A_DCIMVAC_Set>:
/* Invalidate data cache by MVA to PoC */
__RME_A7A_DCIMVAC_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C6 OP2=1
801604a0:	ee070f36 	mcr	15, 0, r0, cr7, cr6, {1}
801604a4:	e12fff1e 	bx	lr

801604a8 <__RME_A7A_DCISW_Set>:
/* Invalidate data cache line by set/way */
__RME_A7A_DCISW_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C6 OP2=2
801604a8:	ee070f56 	mcr	15, 0, r0, cr7, cr6, {2}
801604ac:	e12fff1e 	bx	lr

801604b0 <__RME_A7A_ATS1CPR_Set>:
/* Priviledged read VA to PA translation */
__RME_A7A_ATS1CPR_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C8 OP2=0
801604b0:	ee070f18 	mcr	15, 0, r0, cr7, cr8, {0}
801604b4:	e12fff1e 	bx	lr

801604b8 <__RME_A7A_ATS1CPW_Set>:
/* Priviledged write VA to PA translation */
__RME_A7A_ATS1CPW_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C8 OP2=1
801604b8:	ee070f38 	mcr	15, 0, r0, cr7, cr8, {1}
801604bc:	e12fff1e 	bx	lr

801604c0 <__RME_A7A_ATS1CUR_Set>:
/* User read VA to PA translation */
__RME_A7A_ATS1CUR_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C8 OP2=2
801604c0:	ee070f58 	mcr	15, 0, r0, cr7, cr8, {2}
801604c4:	e12fff1e 	bx	lr

801604c8 <__RME_A7A_ATS1CUW_Set>:
/* User write VA to PA translation */
__RME_A7A_ATS1CUW_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C8 OP2=3
801604c8:	ee070f78 	mcr	15, 0, r0, cr7, cr8, {3}
801604cc:	e12fff1e 	bx	lr

801604d0 <__RME_A7A_ATS12NSOPR_Set>:
/* Priviledged read VA to PA translation, other security state */
__RME_A7A_ATS12NSOPR_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C8 OP2=4
801604d0:	ee070f98 	mcr	15, 0, r0, cr7, cr8, {4}
801604d4:	e12fff1e 	bx	lr

801604d8 <__RME_A7A_ATS12NSOPW_Set>:
/* Priviledged write VA to PA translation, other security state */
__RME_A7A_ATS12NSOPW_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C8 OP2=5
801604d8:	ee070fb8 	mcr	15, 0, r0, cr7, cr8, {5}
801604dc:	e12fff1e 	bx	lr

801604e0 <__RME_A7A_ATS12NSOUR_Set>:
/* User read VA to PA translation, other security state */
__RME_A7A_ATS12NSOUR_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C8 OP2=6
801604e0:	ee070fd8 	mcr	15, 0, r0, cr7, cr8, {6}
801604e4:	e12fff1e 	bx	lr

801604e8 <__RME_A7A_ATS12NSOUW_Set>:
/* User write VA to PA translation, other security state */
__RME_A7A_ATS12NSOUW_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C8 OP2=7
801604e8:	ee070ff8 	mcr	15, 0, r0, cr7, cr8, {7}
801604ec:	e12fff1e 	bx	lr

801604f0 <__RME_A7A_DCCMVAC_Set>:
/* Clean data cache line by MVA to PoC */
__RME_A7A_DCCMVAC_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C10 OP2=1
801604f0:	ee070f3a 	mcr	15, 0, r0, cr7, cr10, {1}
801604f4:	e12fff1e 	bx	lr

801604f8 <__RME_A7A_DCCSW_Set>:
/* Clean data cache line by set/way */
__RME_A7A_DCCSW_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C10 OP2=2
801604f8:	ee070f5a 	mcr	15, 0, r0, cr7, cr10, {2}
801604fc:	e12fff1e 	bx	lr

80160500 <__RME_A7A_CP15DSB_Set>:
/* DSB register - deprecated */
__RME_A7A_CP15DSB_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C10 OP2=4
80160500:	ee070f9a 	mcr	15, 0, r0, cr7, cr10, {4}
80160504:	e12fff1e 	bx	lr

80160508 <__RME_A7A_CP15DMB_Set>:
/* DMB register - deprecated */
__RME_A7A_CP15DMB_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C10 OP2=5
80160508:	ee070fba 	mcr	15, 0, r0, cr7, cr10, {5}
8016050c:	e12fff1e 	bx	lr

80160510 <__RME_A7A_DCCMVAU_Set>:
/* Clean data cache line by MVA to PoU */
__RME_A7A_DCCMVAU_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C11 OP2=1
80160510:	ee070f3b 	mcr	15, 0, r0, cr7, cr11, {1}
80160514:	e12fff1e 	bx	lr

80160518 <__RME_A7A_DCCIMVAC_Set>:
/* Clean and invalidate data cache line by MVA to PoC */
__RME_A7A_DCCIMVAC_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C14 OP2=1
80160518:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
8016051c:	e12fff1e 	bx	lr

80160520 <__RME_A7A_DCCISW_Set>:
/* Clean and invalidate data cache line by set/way */
__RME_A7A_DCCISW_Set:
    CP15_SET            CRN=C7 OP1=0 CRM=C14 OP2=2
80160520:	ee070f5e 	mcr	15, 0, r0, cr7, cr14, {2}
80160524:	e12fff1e 	bx	lr

80160528 <__RME_A7A_ATS1HR_Set>:
/* Hyp mode read translation */
__RME_A7A_ATS1HR_Set:
    CP15_SET            CRN=C7 OP1=4 CRM=C8 OP2=0
80160528:	ee870f18 	mcr	15, 4, r0, cr7, cr8, {0}
8016052c:	e12fff1e 	bx	lr

80160530 <__RME_A7A_ATS1HW_Set>:
/* Hyp mode write translation */
__RME_A7A_ATS1HW_Set:
    CP15_SET            CRN=C7 OP1=4 CRM=C8 OP2=1
80160530:	ee870f38 	mcr	15, 4, r0, cr7, cr8, {1}
80160534:	e12fff1e 	bx	lr

80160538 <__RME_A7A_TLBIALLIS_Set>:

/* Invalidate entire TLB IS */
__RME_A7A_TLBIALLIS_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C3 OP2=0
80160538:	ee080f13 	mcr	15, 0, r0, cr8, cr3, {0}
8016053c:	e12fff1e 	bx	lr

80160540 <__RME_A7A_TLBIMVAIS_Set>:
/* Invalidate unified TLB entry by MVA and ASID IS */
__RME_A7A_TLBIMVAIS_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C3 OP2=1
80160540:	ee080f33 	mcr	15, 0, r0, cr8, cr3, {1}
80160544:	e12fff1e 	bx	lr

80160548 <__RME_A7A_TLBIASIDIS_Set>:
/* Invalidate unified TLB by ASID match IS */
__RME_A7A_TLBIASIDIS_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C3 OP2=2
80160548:	ee080f53 	mcr	15, 0, r0, cr8, cr3, {2}
8016054c:	e12fff1e 	bx	lr

80160550 <__RME_A7A_TLBIMVAAIS_Set>:
/* Invalidate unified TLB entry by MVA all ASID IS */
__RME_A7A_TLBIMVAAIS_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C3 OP2=3
80160550:	ee080f73 	mcr	15, 0, r0, cr8, cr3, {3}
80160554:	e12fff1e 	bx	lr

80160558 <__RME_A7A_ITLBIALL_Set>:
/* Invalidate instruction TLB */
__RME_A7A_ITLBIALL_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C5 OP2=0
80160558:	ee080f15 	mcr	15, 0, r0, cr8, cr5, {0}
8016055c:	e12fff1e 	bx	lr

80160560 <__RME_A7A_ITLBIMVA_Set>:
/* Invalidate instruction TLB entry by MVA and ASID */
__RME_A7A_ITLBIMVA_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C5 OP2=1
80160560:	ee080f35 	mcr	15, 0, r0, cr8, cr5, {1}
80160564:	e12fff1e 	bx	lr

80160568 <__RME_A7A_ITLBIASID_Set>:
/* Invalidate instruction TLB by ASID match */
__RME_A7A_ITLBIASID_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C5 OP2=2
80160568:	ee080f55 	mcr	15, 0, r0, cr8, cr5, {2}
8016056c:	e12fff1e 	bx	lr

80160570 <__RME_A7A_DTLBIALL_Set>:
/* Invalidate data TLB */
__RME_A7A_DTLBIALL_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C6 OP2=0
80160570:	ee080f16 	mcr	15, 0, r0, cr8, cr6, {0}
80160574:	e12fff1e 	bx	lr

80160578 <__RME_A7A_DTLBIMVA_Set>:
/* Invalidate data TLB entry by MVA and ASID */
__RME_A7A_DTLBIMVA_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C6 OP2=1
80160578:	ee080f36 	mcr	15, 0, r0, cr8, cr6, {1}
8016057c:	e12fff1e 	bx	lr

80160580 <__RME_A7A_DTLBIASID_Set>:
/* Invalidate data TLB by ASID match */
__RME_A7A_DTLBIASID_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C6 OP2=2
80160580:	ee080f56 	mcr	15, 0, r0, cr8, cr6, {2}
80160584:	e12fff1e 	bx	lr

80160588 <__RME_A7A_TLBIALL_Set>:
/* Invalidate unified TLB */
__RME_A7A_TLBIALL_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C7 OP2=0
80160588:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
8016058c:	e12fff1e 	bx	lr

80160590 <__RME_A7A_TLBIMVA_Set>:
/* Invalidate unified TLB entry by MVA and ASID */
__RME_A7A_TLBIMVA_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C7 OP2=1
80160590:	ee080f37 	mcr	15, 0, r0, cr8, cr7, {1}
80160594:	e12fff1e 	bx	lr

80160598 <__RME_A7A_TLBIASID_Set>:
/* Invalidate unified TLB by ASID match */
__RME_A7A_TLBIASID_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C7 OP2=2
80160598:	ee080f57 	mcr	15, 0, r0, cr8, cr7, {2}
8016059c:	e12fff1e 	bx	lr

801605a0 <__RME_A7A_TLBIMVAA_Set>:
/* Invalidate unified TLB entries by MVA all ASID */
__RME_A7A_TLBIMVAA_Set:
    CP15_SET            CRN=C8 OP1=0 CRM=C7 OP2=3
801605a0:	ee080f77 	mcr	15, 0, r0, cr8, cr7, {3}
801605a4:	e12fff1e 	bx	lr

801605a8 <__RME_A7A_TLBIALLHIS_Set>:
/* Invalidate entire Hyp unified TLB IS */
__RME_A7A_TLBIALLHIS_Set:
    CP15_SET            CRN=C8 OP1=4 CRM=C3 OP2=0
801605a8:	ee880f13 	mcr	15, 4, r0, cr8, cr3, {0}
801605ac:	e12fff1e 	bx	lr

801605b0 <__RME_A7A_TLBIMVAHIS_Set>:
/* Invalidate Hyp unified TLB entry by MVA IS */
__RME_A7A_TLBIMVAHIS_Set:
    CP15_SET            CRN=C8 OP1=4 CRM=C3 OP2=1
801605b0:	ee880f33 	mcr	15, 4, r0, cr8, cr3, {1}
801605b4:	e12fff1e 	bx	lr

801605b8 <__RME_A7A_TLBIALLNSNHIS_Set>:
/* Invalidate entire Non-secure non-Hyp unified TLB IS */
__RME_A7A_TLBIALLNSNHIS_Set:
    CP15_SET            CRN=C8 OP1=4 CRM=C3 OP2=4
801605b8:	ee880f93 	mcr	15, 4, r0, cr8, cr3, {4}
801605bc:	e12fff1e 	bx	lr

801605c0 <__RME_A7A_TLBIALLH_Set>:
/* Invalidate entire Hyp unified TLB */
__RME_A7A_TLBIALLH_Set:
    CP15_SET            CRN=C8 OP1=4 CRM=C7 OP2=0
801605c0:	ee880f17 	mcr	15, 4, r0, cr8, cr7, {0}
801605c4:	e12fff1e 	bx	lr

801605c8 <__RME_A7A_TLBIMVAH_Set>:
/* Invalidate Hyp unified TLB entry by MVA */
__RME_A7A_TLBIMVAH_Set:
    CP15_SET            CRN=C8 OP1=4 CRM=C7 OP2=1
801605c8:	ee880f37 	mcr	15, 4, r0, cr8, cr7, {1}
801605cc:	e12fff1e 	bx	lr

801605d0 <__RME_A7A_TLBIALLNSNH_Set>:
/* Invalidate entire Non-secure non-Hyp unified TLB */
__RME_A7A_TLBIALLNSNH_Set:
    CP15_SET            CRN=C8 OP1=4 CRM=C7 OP2=4
801605d0:	ee880f97 	mcr	15, 4, r0, cr8, cr7, {4}
801605d4:	e12fff1e 	bx	lr

801605d8 <__RME_A7A_TLBLR_Set>:

/* C9 registers currently unsupported */

/* TLB lockdown register - Cortex-A9 */
__RME_A7A_TLBLR_Set:
    CP15_SET            CRN=C10 OP1=0 CRM=C0 OP2=0
801605d8:	ee0a0f10 	mcr	15, 0, r0, cr10, cr0, {0}
801605dc:	e12fff1e 	bx	lr

801605e0 <__RME_A7A_PRRR_Set>:
/* Primary region remap register */
__RME_A7A_PRRR_Set:
    CP15_SET            CRN=C10 OP1=0 CRM=C2 OP2=0
801605e0:	ee0a0f12 	mcr	15, 0, r0, cr10, cr2, {0}
801605e4:	e12fff1e 	bx	lr

801605e8 <__RME_A7A_NMRR_Set>:
/* Normal memory remap register */
__RME_A7A_NMRR_Set:
    CP15_SET            CRN=C10 OP1=0 CRM=C2 OP2=1
801605e8:	ee0a0f32 	mcr	15, 0, r0, cr10, cr2, {1}
801605ec:	e12fff1e 	bx	lr

801605f0 <__RME_A7A_AMAIR0_Set>:
/* Auxiliary memory attribute indirection register 0 */
__RME_A7A_AMAIR0_Set:
    CP15_SET            CRN=C10 OP1=0 CRM=C3 OP2=0
801605f0:	ee0a0f13 	mcr	15, 0, r0, cr10, cr3, {0}
801605f4:	e12fff1e 	bx	lr

801605f8 <__RME_A7A_AMAIR1_Set>:
/* Auxiliary memory attribute indirection register 1 */
__RME_A7A_AMAIR1_Set:
    CP15_SET            CRN=C10 OP1=0 CRM=C3 OP2=1
801605f8:	ee0a0f33 	mcr	15, 0, r0, cr10, cr3, {1}
801605fc:	e12fff1e 	bx	lr

80160600 <__RME_A7A_HMAIR0_Set>:
/* Hyp memory attribute indirection register 0 */
__RME_A7A_HMAIR0_Set:
    CP15_SET            CRN=C10 OP1=4 CRM=C2 OP2=0
80160600:	ee8a0f12 	mcr	15, 4, r0, cr10, cr2, {0}
80160604:	e12fff1e 	bx	lr

80160608 <__RME_A7A_HMAIR1_Set>:
/* Hyp memory attribute indirection register 1 */
__RME_A7A_HMAIR1_Set:
    CP15_SET            CRN=C10 OP1=4 CRM=C2 OP2=1
80160608:	ee8a0f32 	mcr	15, 4, r0, cr10, cr2, {1}
8016060c:	e12fff1e 	bx	lr

80160610 <__RME_A7A_HAMAIR0_Set>:
/* Hyp auxiliary memory attribute indirection register 0 */
__RME_A7A_HAMAIR0_Set:
    CP15_SET            CRN=C10 OP1=4 CRM=C3 OP2=0
80160610:	ee8a0f13 	mcr	15, 4, r0, cr10, cr3, {0}
80160614:	e12fff1e 	bx	lr

80160618 <__RME_A7A_HAMAIR1_Set>:
/* Hyp auxiliary memory attribute indirection register 1 */
__RME_A7A_HAMAIR1_Set:
    CP15_SET            CRN=C10 OP1=4 CRM=C3 OP2=1
80160618:	ee8a0f33 	mcr	15, 4, r0, cr10, cr3, {1}
8016061c:	e12fff1e 	bx	lr

80160620 <__RME_A7A_VBAR_Set>:

/* Vector base address register */
__RME_A7A_VBAR_Set:
    CP15_SET            CRN=C12 OP1=0 CRM=C0 OP2=0
80160620:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
80160624:	e12fff1e 	bx	lr

80160628 <__RME_A7A_MVBAR_Set>:
/* Vector base address register */
__RME_A7A_MVBAR_Set:
    CP15_SET            CRN=C12 OP1=0 CRM=C0 OP2=1
80160628:	ee0c0f30 	mcr	15, 0, r0, cr12, cr0, {1}
8016062c:	e12fff1e 	bx	lr

80160630 <__RME_A7A_HVBAR_Set>:
/* Hyp vector base address register */
__RME_A7A_HVBAR_Set:
    CP15_SET            CRN=C12 OP1=4 CRM=C0 OP2=0
80160630:	ee8c0f10 	mcr	15, 4, r0, cr12, cr0, {0}
80160634:	e12fff1e 	bx	lr

80160638 <__RME_A7A_CONTEXTIDR_Set>:

/* Context ID register */
__RME_A7A_CONTEXTIDR_Set:
    CP15_SET            CRN=C13 OP1=0 CRM=C0 OP2=1
80160638:	ee0d0f30 	mcr	15, 0, r0, cr13, cr0, {1}
8016063c:	e12fff1e 	bx	lr

80160640 <__RME_A7A_TPIDRURW_Set>:
/* User read/write software thread register */
__RME_A7A_TPIDRURW_Set:
    CP15_SET            CRN=C13 OP1=0 CRM=C0 OP2=2
80160640:	ee0d0f50 	mcr	15, 0, r0, cr13, cr0, {2}
80160644:	e12fff1e 	bx	lr

80160648 <__RME_A7A_TPIDRURO_Set>:
/* User read-only software thread register */
__RME_A7A_TPIDRURO_Set:
    CP15_SET            CRN=C13 OP1=0 CRM=C0 OP2=3
80160648:	ee0d0f70 	mcr	15, 0, r0, cr13, cr0, {3}
8016064c:	e12fff1e 	bx	lr

80160650 <__RME_A7A_TPIDRPRW_Set>:
/* PL1-only software thread register */
__RME_A7A_TPIDRPRW_Set:
    CP15_SET            CRN=C13 OP1=0 CRM=C0 OP2=4
80160650:	ee0d0f90 	mcr	15, 0, r0, cr13, cr0, {4}
80160654:	e12fff1e 	bx	lr

80160658 <__RME_A7A_HTPIDR_Set>:
/* Hyp read/write software thread register */
__RME_A7A_HTPIDR_Set:
    CP15_SET            CRN=C13 OP1=4 CRM=C0 OP2=2
80160658:	ee8d0f50 	mcr	15, 4, r0, cr13, cr0, {2}
8016065c:	e12fff1e 	bx	lr

80160660 <__RME_A7A_CNTFRQ_Set>:

/* Counter frequency register */
__RME_A7A_CNTFRQ_Set:
    CP15_SET            CRN=C14 OP1=0 CRM=C0 OP2=0
80160660:	ee0e0f10 	mcr	15, 0, r0, cr14, cr0, {0}
80160664:	e12fff1e 	bx	lr

80160668 <__RME_A7A_CNTKCTL_Set>:
/* Timer PL1 control register */
__RME_A7A_CNTKCTL_Set:
    CP15_SET            CRN=C14 OP1=0 CRM=C1 OP2=0
80160668:	ee0e0f11 	mcr	15, 0, r0, cr14, cr1, {0}
8016066c:	e12fff1e 	bx	lr

80160670 <__RME_A7A_CNTP_TVAL_Set>:
/* PL1 physical timer value register */
__RME_A7A_CNTP_TVAL_Set:
    CP15_SET            CRN=C14 OP1=0 CRM=C2 OP2=0
80160670:	ee0e0f12 	mcr	15, 0, r0, cr14, cr2, {0}
80160674:	e12fff1e 	bx	lr

80160678 <__RME_A7A_CNTP_CTL_Set>:
/* PL1 physical timer control register */
__RME_A7A_CNTP_CTL_Set:
    CP15_SET            CRN=C14 OP1=0 CRM=C2 OP2=1
80160678:	ee0e0f32 	mcr	15, 0, r0, cr14, cr2, {1}
8016067c:	e12fff1e 	bx	lr

80160680 <__RME_A7A_CNTV_TVAL_Set>:
/* Virtual timer value register */
__RME_A7A_CNTV_TVAL_Set:
    CP15_SET            CRN=C14 OP1=0 CRM=C3 OP2=0
80160680:	ee0e0f13 	mcr	15, 0, r0, cr14, cr3, {0}
80160684:	e12fff1e 	bx	lr

80160688 <__RME_A7A_CNTV_CTL_Set>:
/* Virtual timer control register */
__RME_A7A_CNTV_CTL_Set:
    CP15_SET            CRN=C14 OP1=0 CRM=C3 OP2=1
80160688:	ee0e0f33 	mcr	15, 0, r0, cr14, cr3, {1}
8016068c:	e12fff1e 	bx	lr

80160690 <__RME_A7A_CNTHCTL_Set>:
/* Timer PL2 control register */
__RME_A7A_CNTHCTL_Set:
    CP15_SET            CRN=C14 OP1=4 CRM=C1 OP2=0
80160690:	ee8e0f11 	mcr	15, 4, r0, cr14, cr1, {0}
80160694:	e12fff1e 	bx	lr

80160698 <__RME_A7A_CNTHP_TVAL_Set>:
/* PL2 physical timer value register */
__RME_A7A_CNTHP_TVAL_Set:
    CP15_SET            CRN=C14 OP1=4 CRM=C2 OP2=0
80160698:	ee8e0f12 	mcr	15, 4, r0, cr14, cr2, {0}
8016069c:	e12fff1e 	bx	lr

801606a0 <__RME_A7A_CNTHP_CTL_Set>:
/* PL2 physical timer control register */
__RME_A7A_CNTHP_CTL_Set:
    CP15_SET            CRN=C14 OP1=4 CRM=C2 OP2=1
801606a0:	ee8e0f32 	mcr	15, 4, r0, cr14, cr2, {1}
801606a4:	e12fff1e 	bx	lr

801606a8 <__RME_A7A_CNTP_CVAL_DW_Set>:
Output      : None.
Return      : None.
******************************************************************************/
/* PL1 physical timer compare value register */
__RME_A7A_CNTP_CVAL_DW_Set:
    CP15_SET_DOUBLE     CRM=C14 OP=2
801606a8:	ec400f2e 	mcrr	15, 2, r0, r0, cr14
801606ac:	e12fff1e 	bx	lr

801606b0 <__RME_A7A_CNTV_CVAL_DW_Set>:
/* Virtual timer compare value register */
__RME_A7A_CNTV_CVAL_DW_Set:
    CP15_SET_DOUBLE     CRM=C14 OP=3
801606b0:	ec400f3e 	mcrr	15, 3, r0, r0, cr14
801606b4:	e12fff1e 	bx	lr

801606b8 <__RME_A7A_CNTVOFF_DW_Set>:
/* Virtual offset register */
__RME_A7A_CNTVOFF_DW_Set:
    CP15_SET_DOUBLE     CRM=C14 OP=4
801606b8:	ec400f4e 	mcrr	15, 4, r0, r0, cr14
801606bc:	e12fff1e 	bx	lr

801606c0 <__RME_A7A_CNTHP_CVAL_DW_Set>:
/* L2 physical timer compare value register */
__RME_A7A_CNTHP_CVAL_DW_Set:
    CP15_SET_DOUBLE     CRM=C14 OP=6
801606c0:	ec400f6e 	mcrr	15, 6, r0, r0, cr14
801606c4:	e12fff1e 	bx	lr

801606c8 <__RME_A7A_Fetch_Add>:
              cnt_t Addend - The number to add.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the addition.
******************************************************************************/
__RME_A7A_Fetch_Add:
    LDREX               R2,[R0]
801606c8:	e1902f9f 	ldrex	r2, [r0]
    ADD                 R3,R2,R1
801606cc:	e0823001 	add	r3, r2, r1
    STREX               R12,R3,[R0]
801606d0:	e180cf93 	strex	ip, r3, [r0]
    CMP                 R12,#0x00
801606d4:	e35c0000 	cmp	ip, #0
    BNE                 __RME_A7A_Fetch_Add
801606d8:	1afffffa 	bne	801606c8 <__RME_A7A_Fetch_Add>
    MOV                 R0,R2
801606dc:	e1a00002 	mov	r0, r2
    BX                  LR
801606e0:	e12fff1e 	bx	lr

801606e4 <__RME_A7A_Fetch_And>:
              cnt_t Operand - The number to logic AND with the destination.
Output      : ptr_t* Ptr - The pointer to the data.
Return      : ptr_t - The value before the AND operation.
******************************************************************************/
__RME_A7A_Fetch_And:
    LDREX               R2,[R0]
801606e4:	e1902f9f 	ldrex	r2, [r0]
    AND                 R3,R2,R1
801606e8:	e0023001 	and	r3, r2, r1
    STREX               R12,R3,[R0]
801606ec:	e180cf93 	strex	ip, r3, [r0]
    CMP                 R12,#0x00
801606f0:	e35c0000 	cmp	ip, #0
    BNE                 __RME_A7A_Fetch_Add
801606f4:	1afffff3 	bne	801606c8 <__RME_A7A_Fetch_Add>
    MOV                 R0,R2
801606f8:	e1a00002 	mov	r0, r2
    BX                  LR
801606fc:	e12fff1e 	bx	lr

80160700 <__RME_A7A_Read_Acquire>:
Input       : rme_ptr_t* R0 - Address to read from.
Output      : None.
Return      : None.
******************************************************************************/
__RME_A7A_Read_Acquire:
    LDR                 R0,[R0]
80160700:	e5900000 	ldr	r0, [r0]
    DMB
80160704:	f57ff05f 	dmb	sy
    BX                  LR
80160708:	e12fff1e 	bx	lr

8016070c <__RME_A7A_Write_Release>:
              rme_ptr_t R1 - Content to write to the address.
Output      : None.
Return      : None.
******************************************************************************/
__RME_A7A_Write_Release:
    DMB
8016070c:	f57ff05f 	dmb	sy
    STR                 R1,[R0]
80160710:	e5801000 	str	r1, [r0]
    BX                  LR
80160714:	e12fff1e 	bx	lr

80160718 <__RME_Int_Disable>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Int_Disable:
    CPSID               I
80160718:	f10c0080 	cpsid	i
    BX                  LR
8016071c:	e12fff1e 	bx	lr

80160720 <__RME_Int_Enable>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
__RME_Int_Enable:
    CPSIE               I
80160720:	f1080080 	cpsie	i
    BX                  LR
80160724:	e12fff1e 	bx	lr

80160728 <__RME_A7A_Halt>:
Output      : None.
Return      : None.
******************************************************************************/
__RME_A7A_Halt:
    /* Wait for interrupt */
    WFI
80160728:	e320f003 	wfi
    BX                  LR
8016072c:	e12fff1e 	bx	lr

80160730 <_RME_Kmain>:
Input       : ptr_t Stack - The stack address to set SP to.
Output      : None.
Return      : None.
******************************************************************************/
_RME_Kmain:
    MOV                 R0,SP
80160730:	e1a0000d 	mov	r0, sp
    BL                  RME_Kmain
80160734:	eb000641 	bl	80162040 <RME_Kmain>

80160738 <__RME_A7A_MSB_Get>:
Input       : ptr_t Val - The value.
Output      : None.
Return      : ptr_t - The MSB position.
******************************************************************************/
__RME_A7A_MSB_Get:
    CLZ                 R1,R0
80160738:	e16f1f10 	clz	r1, r0
    MOV                 R0,#31
8016073c:	e3a0001f 	mov	r0, #31
    SUB                 R0,R1
80160740:	e0400001 	sub	r0, r0, r1
    BX                  LR
80160744:	e12fff1e 	bx	lr

80160748 <__RME_User_Enter>:
              ptr_t CPUID - The CPUID.
Output      : None.
Return      : None.
******************************************************************************/
__RME_User_Enter:
    PUSH                {R0}
80160748:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
    MOV                 R0,R2
8016074c:	e1a00002 	mov	r0, r2
    /* Prepare the SPSR for user-level */
    MOV                 R2,#0x10
80160750:	e3a02010 	mov	r2, #16
    MSR                 SPSR,R2
80160754:	e169f002 	msr	SPSR_fc, r2
    MSR                 SP_usr,R1
80160758:	e125f201 	msr	SP_usr, r1
    LDMIA               SP!,{PC}^
8016075c:	e8fd8000 	ldm	sp!, {pc}^

80160760 <Reset_Handler>:
Output      : None.
Return      : None.
******************************************************************************/
Reset_Handler:
Unused_Handler:
    B                   .
80160760:	eafffffe 	b	80160760 <Reset_Handler>

80160764 <Undefined_Handler>:
    /* Restore user-mode PC */
    LDMIA               SP!,{PC}^
.endm

Undefined_Handler:
    SAVE_GP_REGS
80160764:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
80160768:	e94d6000 	stmdb	sp, {sp, lr}^
8016076c:	e24dd008 	sub	sp, sp, #8
80160770:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
80160774:	e14f0000 	mrs	r0, SPSR
80160778:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
8016077c:	e1a0000d 	mov	r0, sp
    BL                  __RME_A7A_Undefined_Handler
80160780:	eb0015cc 	bl	80165eb8 <__RME_A7A_Undefined_Handler>
    RESTORE_GP_REGS
80160784:	e49d0004 	pop	{r0}		@ (ldr r0, [sp], #4)
80160788:	e16ff000 	msr	SPSR_fsxc, r0
8016078c:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
80160790:	e8dd6000 	ldm	sp, {sp, lr}^
80160794:	e28dd008 	add	sp, sp, #8
80160798:	e8fd8000 	ldm	sp!, {pc}^

8016079c <Prefetch_Abort_Handler>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
Prefetch_Abort_Handler:
    SAVE_GP_REGS
8016079c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
801607a0:	e94d6000 	stmdb	sp, {sp, lr}^
801607a4:	e24dd008 	sub	sp, sp, #8
801607a8:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
801607ac:	e14f0000 	mrs	r0, SPSR
801607b0:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
801607b4:	e1a0000d 	mov	r0, sp
    BL                  __RME_A7A_Prefetch_Abort_Handler
801607b8:	eb0015bf 	bl	80165ebc <__RME_A7A_Prefetch_Abort_Handler>
    RESTORE_GP_REGS
801607bc:	e49d0004 	pop	{r0}		@ (ldr r0, [sp], #4)
801607c0:	e16ff000 	msr	SPSR_fsxc, r0
801607c4:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
801607c8:	e8dd6000 	ldm	sp, {sp, lr}^
801607cc:	e28dd008 	add	sp, sp, #8
801607d0:	e8fd8000 	ldm	sp!, {pc}^

801607d4 <Data_Abort_Handler>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
Data_Abort_Handler:
    SAVE_GP_REGS
801607d4:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
801607d8:	e94d6000 	stmdb	sp, {sp, lr}^
801607dc:	e24dd008 	sub	sp, sp, #8
801607e0:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
801607e4:	e14f0000 	mrs	r0, SPSR
801607e8:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
801607ec:	e1a0000d 	mov	r0, sp
    BL                  __RME_A7A_Data_Abort_Handler
801607f0:	eb0015b2 	bl	80165ec0 <__RME_A7A_Data_Abort_Handler>
    RESTORE_GP_REGS
801607f4:	e49d0004 	pop	{r0}		@ (ldr r0, [sp], #4)
801607f8:	e16ff000 	msr	SPSR_fsxc, r0
801607fc:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
80160800:	e8dd6000 	ldm	sp, {sp, lr}^
80160804:	e28dd008 	add	sp, sp, #8
80160808:	e8fd8000 	ldm	sp!, {pc}^

8016080c <SVC_Handler>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
SVC_Handler:
    SAVE_GP_REGS
8016080c:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
80160810:	e94d6000 	stmdb	sp, {sp, lr}^
80160814:	e24dd008 	sub	sp, sp, #8
80160818:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
8016081c:	e14f0000 	mrs	r0, SPSR
80160820:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
80160824:	e1a0000d 	mov	r0, sp
    BL                  _RME_Svc_Handler
80160828:	eb000bda 	bl	80163798 <_RME_Svc_Handler>
    RESTORE_GP_REGS
8016082c:	e49d0004 	pop	{r0}		@ (ldr r0, [sp], #4)
80160830:	e16ff000 	msr	SPSR_fsxc, r0
80160834:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
80160838:	e8dd6000 	ldm	sp, {sp, lr}^
8016083c:	e28dd008 	add	sp, sp, #8
80160840:	e8fd8000 	ldm	sp!, {pc}^

80160844 <IRQ_Handler>:
IRQ_Handler:
    //LDR                 R0,=0x41210000
    //LDR                 R1,=0x55555555
   // STR                 R1,[R0]
   // B .
    SAVE_GP_REGS
80160844:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
80160848:	e94d6000 	stmdb	sp, {sp, lr}^
8016084c:	e24dd008 	sub	sp, sp, #8
80160850:	e92d1fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
80160854:	e14f0000 	mrs	r0, SPSR
80160858:	e52d0004 	push	{r0}		@ (str r0, [sp, #-4]!)
8016085c:	e1a0000d 	mov	r0, sp
    BL                  __RME_A7A_IRQ_Handler
80160860:	eb001597 	bl	80165ec4 <__RME_A7A_IRQ_Handler>
    RESTORE_GP_REGS
80160864:	e49d0004 	pop	{r0}		@ (ldr r0, [sp], #4)
80160868:	e16ff000 	msr	SPSR_fsxc, r0
8016086c:	e8bd1fff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
80160870:	e8dd6000 	ldm	sp, {sp, lr}^
80160874:	e28dd008 	add	sp, sp, #8
80160878:	e8fd8000 	ldm	sp!, {pc}^

8016087c <FIQ_Handler>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
FIQ_Handler:
    B                   .
8016087c:	eafffffe 	b	8016087c <FIQ_Handler>

80160880 <_RME_Cpt_Add>:
    rme_ptr_t Kom_Begin;
    rme_ptr_t Kom_End;
    rme_ptr_t Kom_Flag;

    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
80160880:	e3110080 	tst	r1, #128	@ 0x80
{
80160884:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
80160888:	e1a04001 	mov	r4, r1
8016088c:	e59d9020 	ldr	r9, [sp, #32]
80160890:	e1a06000 	mov	r6, r0
80160894:	e59d8024 	ldr	r8, [sp, #36]	@ 0x24
80160898:	e1a07002 	mov	r7, r2
8016089c:	e1a05003 	mov	r5, r3
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
801608a0:	1a00005b 	bne	80160a14 <_RME_Cpt_Add+0x194>
801608a4:	e5903014 	ldr	r3, [r0, #20]
801608a8:	e1510003 	cmp	r1, r3
801608ac:	3590100c 	ldrcc	r1, [r0, #12]
801608b0:	2a000055 	bcs	80160a0c <_RME_Cpt_Add+0x18c>
801608b4:	e0814284 	add	r4, r1, r4, lsl #5
801608b8:	e1a00004 	mov	r0, r4
801608bc:	ebffff8f 	bl	80160700 <__RME_A7A_Read_Acquire>
801608c0:	e7e73850 	ubfx	r3, r0, #16, #8
801608c4:	e3530002 	cmp	r3, #2
801608c8:	0a0000d0 	beq	80160c10 <_RME_Cpt_Add+0x390>
801608cc:	e1a00c20 	lsr	r0, r0, #24
801608d0:	e3500003 	cmp	r0, #3
801608d4:	1a0000cb 	bne	80160c08 <_RME_Cpt_Add+0x388>
                   struct RME_Cap_Cpt*,Cpt_Dst,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
801608d8:	e3150080 	tst	r5, #128	@ 0x80
801608dc:	0a000047 	beq	80160a00 <_RME_Cpt_Add+0x180>
801608e0:	e5962014 	ldr	r2, [r6, #20]
801608e4:	e1a03425 	lsr	r3, r5, #8
801608e8:	e1530002 	cmp	r3, r2
801608ec:	2a000046 	bcs	80160a0c <_RME_Cpt_Add+0x18c>
801608f0:	e596600c 	ldr	r6, [r6, #12]
801608f4:	e0866283 	add	r6, r6, r3, lsl #5
801608f8:	e1a00006 	mov	r0, r6
801608fc:	ebffff7f 	bl	80160700 <__RME_A7A_Read_Acquire>
80160900:	e7e73850 	ubfx	r3, r0, #16, #8
80160904:	e3530002 	cmp	r3, #2
80160908:	0a0000c0 	beq	80160c10 <_RME_Cpt_Add+0x390>
8016090c:	e1a00c20 	lsr	r0, r0, #24
80160910:	e3500003 	cmp	r0, #3
80160914:	1a0000bb 	bne	80160c08 <_RME_Cpt_Add+0x388>
80160918:	e5963014 	ldr	r3, [r6, #20]
8016091c:	e205507f 	and	r5, r5, #127	@ 0x7f
80160920:	e1550003 	cmp	r5, r3
80160924:	2a000038 	bcs	80160a0c <_RME_Cpt_Add+0x18c>
80160928:	e596300c 	ldr	r3, [r6, #12]
8016092c:	e0835285 	add	r5, r3, r5, lsl #5
80160930:	e1a00005 	mov	r0, r5
80160934:	ebffff71 	bl	80160700 <__RME_A7A_Read_Acquire>
80160938:	e7e73850 	ubfx	r3, r0, #16, #8
8016093c:	e3530002 	cmp	r3, #2
80160940:	0a0000b2 	beq	80160c10 <_RME_Cpt_Add+0x390>
80160944:	e1a00c20 	lsr	r0, r0, #24
80160948:	e3500003 	cmp	r0, #3
8016094c:	1a0000ad 	bne	80160c08 <_RME_Cpt_Add+0x388>
                   struct RME_Cap_Cpt*,Cpt_Src,Type_Stat);
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Dst,RME_CPT_FLAG_ADD_DST);
80160950:	e5943008 	ldr	r3, [r4, #8]
80160954:	e3130010 	tst	r3, #16
80160958:	0a000053 	beq	80160aac <_RME_Cpt_Add+0x22c>
    RME_CAP_CHECK(Cpt_Src,RME_CPT_FLAG_ADD_SRC);
8016095c:	e5953008 	ldr	r3, [r5, #8]
80160960:	e3130008 	tst	r3, #8
80160964:	0a000050 	beq	80160aac <_RME_Cpt_Add+0x22c>
    
    /* Get the cap slots */
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
80160968:	e5943014 	ldr	r3, [r4, #20]
8016096c:	e1530007 	cmp	r3, r7
80160970:	9a000025 	bls	80160a0c <_RME_Cpt_Add+0x18c>
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
80160974:	e5953014 	ldr	r3, [r5, #20]
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
80160978:	e594600c 	ldr	r6, [r4, #12]
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
8016097c:	e1530009 	cmp	r3, r9
    RME_CPT_GETSLOT(Cpt_Dst,Cap_Dst,struct RME_Cap_Struct*,Capobj_Dst);
80160980:	e086a287 	add	sl, r6, r7, lsl #5
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
80160984:	9a000020 	bls	80160a0c <_RME_Cpt_Add+0x18c>
80160988:	e595500c 	ldr	r5, [r5, #12]
8016098c:	e0854289 	add	r4, r5, r9, lsl #5
    
    /* Atomic read - Read barrier to avoid premature checking of the rest */
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Src->Head.Type_Stat));
80160990:	e1a00004 	mov	r0, r4
80160994:	ebffff59 	bl	80160700 <__RME_A7A_Read_Acquire>
    /* Is the source cap frozen? */
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
80160998:	e7e73850 	ubfx	r3, r0, #16, #8
    RME_CPT_GETSLOT(Cpt_Src,Cap_Src,struct RME_Cap_Struct*,Capobj_Src);
8016099c:	e1a01004 	mov	r1, r4
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
801609a0:	e3530002 	cmp	r3, #2
801609a4:	0a000099 	beq	80160c10 <_RME_Cpt_Add+0x390>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Does the source cap exist at all? */
    if(Type_Stat==0U)
801609a8:	e3500000 	cmp	r0, #0
801609ac:	0a000099 	beq	80160c18 <_RME_Cpt_Add+0x398>
    Kom_Begin=0U;
    Kom_End=0U;
    Kom_Flag=0U;
    
    /* Is there a flag conflict? - For page tables, we have different checking mechanisms */
    Src_Type=RME_CAP_TYPE(Type_Stat);
801609b0:	e1a03c20 	lsr	r3, r0, #24
    if(Src_Type==RME_CAP_TYPE_PGT)
801609b4:	e3530004 	cmp	r3, #4
801609b8:	0a000029 	beq	80160a64 <_RME_Cpt_Add+0x1e4>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KFN)
801609bc:	e3530001 	cmp	r3, #1
801609c0:	0a00003b 	beq	80160ab4 <_RME_Cpt_Add+0x234>
        {
            RME_COV_MARKER();
            /* No action required */
        }
    }
    else if(Src_Type==RME_CAP_TYPE_KOM)
801609c4:	e3530002 	cmp	r3, #2
801609c8:	0a000067 	beq	80160b6c <_RME_Cpt_Add+0x2ec>
    else
    {
        RME_COV_MARKER();
        
        /* Check the flags - if there are extra ones, or all zero */
        if(Flag==0U)
801609cc:	e3580000 	cmp	r8, #0
801609d0:	0a000035 	beq	80160aac <_RME_Cpt_Add+0x22c>
        else
        {
            RME_COV_MARKER();
            /* No action required */
        }
        if((Flag&(~(Capobj_Src->Head.Flag)))!=0U)
801609d4:	e5942008 	ldr	r2, [r4, #8]
801609d8:	e1d82002 	bics	r2, r8, r2
801609dc:	1a000032 	bne	80160aac <_RME_Cpt_Add+0x22c>
            /* No action required */
        }
    }
    
    /* Is the destination slot unoccupied? */
    if(Capobj_Dst->Head.Type_Stat!=0U)
801609e0:	e7962287 	ldr	r2, [r6, r7, lsl #5]
801609e4:	e3520000 	cmp	r2, #0
801609e8:	1a000002 	bne	801609f8 <_RME_Cpt_Add+0x178>
    if(*Ptr==Old)
801609ec:	e7962287 	ldr	r2, [r6, r7, lsl #5]
801609f0:	e3520000 	cmp	r2, #0
801609f4:	0a000039 	beq	80160ae0 <_RME_Cpt_Add+0x260>
    {
        RME_COV_MARKER();
            
        return RME_ERR_CPT_EXIST;
801609f8:	e3e00004 	mvn	r0, #4
                      RME_CAP_TYPE_STAT(Src_Type,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_LEAF));

    return 0;
}
801609fc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Src,RME_CAP_TYPE_CPT,
80160a00:	e5963014 	ldr	r3, [r6, #20]
80160a04:	e1550003 	cmp	r5, r3
80160a08:	3affffc6 	bcc	80160928 <_RME_Cpt_Add+0xa8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
80160a0c:	e3e00002 	mvn	r0, #2
80160a10:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
80160a14:	e5902014 	ldr	r2, [r0, #20]
80160a18:	e1a03421 	lsr	r3, r1, #8
80160a1c:	e1530002 	cmp	r3, r2
80160a20:	2afffff9 	bcs	80160a0c <_RME_Cpt_Add+0x18c>
80160a24:	e590a00c 	ldr	sl, [r0, #12]
80160a28:	e08aa283 	add	sl, sl, r3, lsl #5
80160a2c:	e1a0000a 	mov	r0, sl
80160a30:	ebffff32 	bl	80160700 <__RME_A7A_Read_Acquire>
80160a34:	e7e73850 	ubfx	r3, r0, #16, #8
80160a38:	e3530002 	cmp	r3, #2
80160a3c:	0a000073 	beq	80160c10 <_RME_Cpt_Add+0x390>
80160a40:	e1a00c20 	lsr	r0, r0, #24
80160a44:	e3500003 	cmp	r0, #3
80160a48:	1a00006e 	bne	80160c08 <_RME_Cpt_Add+0x388>
80160a4c:	e59a3014 	ldr	r3, [sl, #20]
80160a50:	e204407f 	and	r4, r4, #127	@ 0x7f
80160a54:	e1540003 	cmp	r4, r3
80160a58:	2affffeb 	bcs	80160a0c <_RME_Cpt_Add+0x18c>
80160a5c:	e59a100c 	ldr	r1, [sl, #12]
80160a60:	eaffff93 	b	801608b4 <_RME_Cpt_Add+0x34>
        if(RME_PGT_FLAG_HIGH(Flag)>RME_PGT_FLAG_HIGH(Capobj_Src->Head.Flag))
80160a64:	e5942008 	ldr	r2, [r4, #8]
80160a68:	e1a0ca28 	lsr	ip, r8, #20
80160a6c:	e15c0a22 	cmp	ip, r2, lsr #20
80160a70:	8a00000d 	bhi	80160aac <_RME_Cpt_Add+0x22c>
        if(RME_PGT_FLAG_LOW(Flag)<RME_PGT_FLAG_LOW(Capobj_Src->Head.Flag))
80160a74:	e5942008 	ldr	r2, [r4, #8]
80160a78:	e7ebe458 	ubfx	lr, r8, #8, #12
80160a7c:	e7eb2452 	ubfx	r2, r2, #8, #12
        if(RME_PGT_FLAG_HIGH(Flag)<RME_PGT_FLAG_LOW(Flag))
80160a80:	e15c000e 	cmp	ip, lr
80160a84:	215e0002 	cmpcs	lr, r2
80160a88:	3a000007 	bcc	80160aac <_RME_Cpt_Add+0x22c>
        if(RME_PGT_FLAG_FLAG(Flag)==0U)
80160a8c:	e6ef2078 	uxtb	r2, r8
80160a90:	e3520000 	cmp	r2, #0
80160a94:	0a000004 	beq	80160aac <_RME_Cpt_Add+0x22c>
        if((RME_PGT_FLAG_FLAG(Flag)&(~RME_PGT_FLAG_FLAG(Capobj_Src->Head.Flag)))!=0U)
80160a98:	e5942008 	ldr	r2, [r4, #8]
80160a9c:	e1c82002 	bic	r2, r8, r2
80160aa0:	e20220ff 	and	r2, r2, #255	@ 0xff
80160aa4:	e3520000 	cmp	r2, #0
80160aa8:	0affffcc 	beq	801609e0 <_RME_Cpt_Add+0x160>
            return RME_ERR_CPT_FLAG;
80160aac:	e3e00006 	mvn	r0, #6
80160ab0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        if(RME_KFN_FLAG_HIGH(Flag)>RME_KFN_FLAG_HIGH(Capobj_Src->Head.Flag))
80160ab4:	e5942008 	ldr	r2, [r4, #8]
80160ab8:	e1a0c828 	lsr	ip, r8, #16
80160abc:	e15c0822 	cmp	ip, r2, lsr #16
80160ac0:	8afffff9 	bhi	80160aac <_RME_Cpt_Add+0x22c>
        if(RME_KFN_FLAG_LOW(Flag)<RME_KFN_FLAG_LOW(Capobj_Src->Head.Flag))
80160ac4:	e5942008 	ldr	r2, [r4, #8]
80160ac8:	e6ffe078 	uxth	lr, r8
80160acc:	e6ff2072 	uxth	r2, r2
        if(RME_KFN_FLAG_HIGH(Flag)<RME_KFN_FLAG_LOW(Flag))
80160ad0:	e15c000e 	cmp	ip, lr
80160ad4:	215e0002 	cmpcs	lr, r2
80160ad8:	2affffc0 	bcs	801609e0 <_RME_Cpt_Add+0x160>
80160adc:	eafffff2 	b	80160aac <_RME_Cpt_Add+0x22c>
    RME_CPT_OCCUPY(Capobj_Dst);
80160ae0:	e307c114 	movw	ip, #28948	@ 0x7114
        *Ptr=New;
80160ae4:	e3a0e801 	mov	lr, #65536	@ 0x10000
    RME_CPT_OCCUPY(Capobj_Dst);
80160ae8:	e348c096 	movt	ip, #32918	@ 0x8096
    if(Src_Type==RME_CAP_TYPE_KOM)
80160aec:	e3530002 	cmp	r3, #2
        *Ptr=New;
80160af0:	e786e287 	str	lr, [r6, r7, lsl #5]
    RME_CPT_OCCUPY(Capobj_Dst);
80160af4:	e59cc000 	ldr	ip, [ip]
80160af8:	e58ac010 	str	ip, [sl, #16]
    if(Src_Type==RME_CAP_TYPE_KOM)
80160afc:	0a000032 	beq	80160bcc <_RME_Cpt_Add+0x34c>
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
80160b00:	e58a8008 	str	r8, [sl, #8]
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
80160b04:	e2433001 	sub	r3, r3, #1
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
80160b08:	e594200c 	ldr	r2, [r4, #12]
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
80160b0c:	e3530001 	cmp	r3, #1
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Flag);
80160b10:	e58a200c 	str	r2, [sl, #12]
80160b14:	e5943014 	ldr	r3, [r4, #20]
80160b18:	e58a3014 	str	r3, [sl, #20]
80160b1c:	e5943018 	ldr	r3, [r4, #24]
80160b20:	e58a3018 	str	r3, [sl, #24]
80160b24:	e594301c 	ldr	r3, [r4, #28]
80160b28:	e58a301c 	str	r3, [sl, #28]
    if((Src_Type!=RME_CAP_TYPE_KOM)&&(Src_Type!=RME_CAP_TYPE_KFN))
80160b2c:	9a000032 	bls	80160bfc <_RME_Cpt_Add+0x37c>
        Capobj_Dst->Head.Root_Ref=RME_CAP_CONV_ROOT(Capobj_Src,rme_ptr_t);
80160b30:	e7953289 	ldr	r3, [r5, r9, lsl #5]
80160b34:	e6ff3073 	uxth	r3, r3
80160b38:	e3530000 	cmp	r3, #0
80160b3c:	15941004 	ldrne	r1, [r4, #4]
80160b40:	e58a1004 	str	r1, [sl, #4]
        RME_FETCH_ADD(&(((volatile struct RME_Cap_Struct*)
80160b44:	e59a2004 	ldr	r2, [sl, #4]
    Old=(rme_cnt_t)(*Ptr);
80160b48:	e5923004 	ldr	r3, [r2, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80160b4c:	e2833001 	add	r3, r3, #1
80160b50:	e5823004 	str	r3, [r2, #4]
    RME_WRITE_RELEASE(&(Capobj_Dst->Head.Type_Stat),
80160b54:	e20014ff 	and	r1, r0, #-16777216	@ 0xff000000
80160b58:	e1a0000a 	mov	r0, sl
80160b5c:	e3811001 	orr	r1, r1, #1
80160b60:	ebfffee9 	bl	8016070c <__RME_A7A_Write_Release>
    return 0;
80160b64:	e3a00000 	mov	r0, #0
80160b68:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
80160b6c:	e59d3028 	ldr	r3, [sp, #40]	@ 0x28
80160b70:	e1a02828 	lsr	r2, r8, #16
80160b74:	e1a03823 	lsr	r3, r3, #16
80160b78:	e3c3303f 	bic	r3, r3, #63	@ 0x3f
80160b7c:	e1a02802 	lsl	r2, r2, #16
        Kom_Begin=RME_KOM_FLAG_LOW(Flag,Ext_Flag);
80160b80:	e1a08808 	lsl	r8, r8, #16
        Kom_End=RME_KOM_FLAG_HIGH(Flag,Ext_Flag);
80160b84:	e1833002 	orr	r3, r3, r2
        if(Kom_End<=Kom_Begin)
80160b88:	e1580003 	cmp	r8, r3
80160b8c:	2affffc6 	bcs	80160aac <_RME_Cpt_Add+0x22c>
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
80160b90:	e5941014 	ldr	r1, [r4, #20]
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
80160b94:	e5942014 	ldr	r2, [r4, #20]
        Kom_Begin+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
80160b98:	e0888001 	add	r8, r8, r1
        if(Kom_Begin<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
80160b9c:	e1520008 	cmp	r2, r8
80160ba0:	8affffc1 	bhi	80160aac <_RME_Cpt_Add+0x22c>
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
80160ba4:	e5941014 	ldr	r1, [r4, #20]
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
80160ba8:	e5942014 	ldr	r2, [r4, #20]
        Kom_End+=((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin;
80160bac:	e0833001 	add	r3, r3, r1
        if(Kom_End<((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin)
80160bb0:	e1520003 	cmp	r2, r3
80160bb4:	8affffbc 	bhi	80160aac <_RME_Cpt_Add+0x22c>
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
80160bb8:	e5943014 	ldr	r3, [r4, #20]
            return RME_ERR_CPT_FLAG;
80160bbc:	e3e00006 	mvn	r0, #6
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->Begin>Kom_Begin)
80160bc0:	e1530008 	cmp	r3, r8
        if(((volatile struct RME_Cap_Kom*)Capobj_Src)->End<(Kom_End-1U))
80160bc4:	95943018 	ldrls	r3, [r4, #24]
80160bc8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        RME_CAP_COPY(Capobj_Dst,Capobj_Src,Kom_Flag);
80160bcc:	e58a2008 	str	r2, [sl, #8]
80160bd0:	e594300c 	ldr	r3, [r4, #12]
80160bd4:	e58a300c 	str	r3, [sl, #12]
80160bd8:	e5943014 	ldr	r3, [r4, #20]
80160bdc:	e58a3014 	str	r3, [sl, #20]
80160be0:	e5943018 	ldr	r3, [r4, #24]
80160be4:	e58a3018 	str	r3, [sl, #24]
80160be8:	e594301c 	ldr	r3, [r4, #28]
80160bec:	e58a301c 	str	r3, [sl, #28]
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->End=Kom_End-1U;
80160bf0:	e3e03000 	mvn	r3, #0
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->Begin=Kom_Begin;
80160bf4:	e58a2014 	str	r2, [sl, #20]
        ((volatile struct RME_Cap_Kom*)Capobj_Dst)->End=Kom_End-1U;
80160bf8:	e58a3018 	str	r3, [sl, #24]
        Capobj_Dst->Head.Root_Ref=0U;
80160bfc:	e3a03000 	mov	r3, #0
80160c00:	e58a3004 	str	r3, [sl, #4]
80160c04:	eaffffd2 	b	80160b54 <_RME_Cpt_Add+0x2d4>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Dst,RME_CAP_TYPE_CPT,
80160c08:	e3e00001 	mvn	r0, #1
80160c0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
80160c10:	e3e00008 	mvn	r0, #8
80160c14:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return RME_ERR_CPT_NULL;
80160c18:	e3e00000 	mvn	r0, #0
80160c1c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

80160c20 <_RME_Prc_Crt>:
    struct RME_Cap_Pgt* Prc_Pgt;
#endif
    rme_ptr_t Type_Stat;
    
    /* Get the capability slots */
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
80160c20:	e3110080 	tst	r1, #128	@ 0x80
{
80160c24:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
80160c28:	e1a05001 	mov	r5, r1
80160c2c:	e59d8020 	ldr	r8, [sp, #32]
80160c30:	e1a04000 	mov	r4, r0
80160c34:	e1a07002 	mov	r7, r2
80160c38:	e1a06003 	mov	r6, r3
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
80160c3c:	1a000051 	bne	80160d88 <_RME_Prc_Crt+0x168>
80160c40:	e5903014 	ldr	r3, [r0, #20]
80160c44:	e1510003 	cmp	r1, r3
80160c48:	3590100c 	ldrcc	r1, [r0, #12]
80160c4c:	2a000073 	bcs	80160e20 <_RME_Prc_Crt+0x200>
80160c50:	e0815285 	add	r5, r1, r5, lsl #5
80160c54:	e1a00005 	mov	r0, r5
80160c58:	ebfffea8 	bl	80160700 <__RME_A7A_Read_Acquire>
80160c5c:	e7e73850 	ubfx	r3, r0, #16, #8
80160c60:	e3530002 	cmp	r3, #2
80160c64:	0a00008f 	beq	80160ea8 <_RME_Prc_Crt+0x288>
80160c68:	e1a00c20 	lsr	r0, r0, #24
80160c6c:	e3500003 	cmp	r0, #3
80160c70:	1a000088 	bne	80160e98 <_RME_Prc_Crt+0x278>
                   struct RME_Cap_Cpt*,Cpt_Crt,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80160c74:	e3160080 	tst	r6, #128	@ 0x80
80160c78:	0a00003d 	beq	80160d74 <_RME_Prc_Crt+0x154>
80160c7c:	e5942014 	ldr	r2, [r4, #20]
80160c80:	e1a03426 	lsr	r3, r6, #8
80160c84:	e1530002 	cmp	r3, r2
80160c88:	2a000064 	bcs	80160e20 <_RME_Prc_Crt+0x200>
80160c8c:	e594900c 	ldr	r9, [r4, #12]
80160c90:	e0899283 	add	r9, r9, r3, lsl #5
80160c94:	e1a00009 	mov	r0, r9
80160c98:	ebfffe98 	bl	80160700 <__RME_A7A_Read_Acquire>
80160c9c:	e7e73850 	ubfx	r3, r0, #16, #8
80160ca0:	e3530002 	cmp	r3, #2
80160ca4:	0a00007f 	beq	80160ea8 <_RME_Prc_Crt+0x288>
80160ca8:	e1a00c20 	lsr	r0, r0, #24
80160cac:	e3500003 	cmp	r0, #3
80160cb0:	1a000078 	bne	80160e98 <_RME_Prc_Crt+0x278>
80160cb4:	e5993014 	ldr	r3, [r9, #20]
80160cb8:	e206607f 	and	r6, r6, #127	@ 0x7f
80160cbc:	e1560003 	cmp	r6, r3
80160cc0:	2a000056 	bcs	80160e20 <_RME_Prc_Crt+0x200>
80160cc4:	e599300c 	ldr	r3, [r9, #12]
80160cc8:	e0836286 	add	r6, r3, r6, lsl #5
80160ccc:	e1a00006 	mov	r0, r6
80160cd0:	ebfffe8a 	bl	80160700 <__RME_A7A_Read_Acquire>
80160cd4:	e7e73850 	ubfx	r3, r0, #16, #8
80160cd8:	e3530002 	cmp	r3, #2
80160cdc:	0a000071 	beq	80160ea8 <_RME_Prc_Crt+0x288>
80160ce0:	e1a00c20 	lsr	r0, r0, #24
80160ce4:	e3500003 	cmp	r0, #3
80160ce8:	1a00006a 	bne	80160e98 <_RME_Prc_Crt+0x278>
                   struct RME_Cap_Cpt*,Cpt_Op,Type_Stat);
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
80160cec:	e3180080 	tst	r8, #128	@ 0x80
80160cf0:	1a000038 	bne	80160dd8 <_RME_Prc_Crt+0x1b8>
80160cf4:	e5943014 	ldr	r3, [r4, #20]
80160cf8:	e1580003 	cmp	r8, r3
80160cfc:	2a000047 	bcs	80160e20 <_RME_Prc_Crt+0x200>
80160d00:	e594300c 	ldr	r3, [r4, #12]
80160d04:	e0838288 	add	r8, r3, r8, lsl #5
80160d08:	e1a00008 	mov	r0, r8
80160d0c:	ebfffe7b 	bl	80160700 <__RME_A7A_Read_Acquire>
80160d10:	e7e73850 	ubfx	r3, r0, #16, #8
80160d14:	e3530002 	cmp	r3, #2
80160d18:	0a000062 	beq	80160ea8 <_RME_Prc_Crt+0x288>
80160d1c:	e1a00c20 	lsr	r0, r0, #24
80160d20:	e3500004 	cmp	r0, #4
80160d24:	1a00005b 	bne	80160e98 <_RME_Prc_Crt+0x278>
                   struct RME_Cap_Pgt*,Pgt_Op,Type_Stat);
#endif
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
80160d28:	e5953008 	ldr	r3, [r5, #8]
80160d2c:	e3130001 	tst	r3, #1
80160d30:	0a00005a 	beq	80160ea0 <_RME_Prc_Crt+0x280>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_PRC_CRT);
80160d34:	e5963008 	ldr	r3, [r6, #8]
80160d38:	e3130040 	tst	r3, #64	@ 0x40
80160d3c:	0a000057 	beq	80160ea0 <_RME_Prc_Crt+0x280>
#if(RME_PGT_RAW_ENABLE==0U)
    RME_CAP_CHECK(Pgt_Op,RME_PGT_FLAG_PRC_CRT);
80160d40:	e5983008 	ldr	r3, [r8, #8]
80160d44:	e3130040 	tst	r3, #64	@ 0x40
80160d48:	0a000054 	beq	80160ea0 <_RME_Prc_Crt+0x280>
#endif
    
    /* Get the cap slot */
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
80160d4c:	e5953014 	ldr	r3, [r5, #20]
80160d50:	e1530007 	cmp	r3, r7
80160d54:	9a000031 	bls	80160e20 <_RME_Prc_Crt+0x200>
80160d58:	e595300c 	ldr	r3, [r5, #12]
    if(*Ptr==Old)
80160d5c:	e7932287 	ldr	r2, [r3, r7, lsl #5]
    RME_CPT_GETSLOT(Cpt_Crt,Cap_Prc,struct RME_Cap_Prc*,Prc_Crt);
80160d60:	e0830287 	add	r0, r3, r7, lsl #5
    if(*Ptr==Old)
80160d64:	e3520000 	cmp	r2, #0
80160d68:	0a00002e 	beq	80160e28 <_RME_Prc_Crt+0x208>
    /* Take the slot if possible */
    RME_CPT_OCCUPY(Prc_Crt);
80160d6c:	e3e00004 	mvn	r0, #4
                      RME_CAP_TYPE_STAT(RME_CAP_TYPE_PRC,
                                        RME_CAP_STAT_VALID,
                                        RME_CAP_ATTR_ROOT));

    return 0;
}
80160d70:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80160d74:	e5943014 	ldr	r3, [r4, #20]
80160d78:	e1560003 	cmp	r6, r3
80160d7c:	2a000027 	bcs	80160e20 <_RME_Prc_Crt+0x200>
80160d80:	e594300c 	ldr	r3, [r4, #12]
80160d84:	eaffffcf 	b	80160cc8 <_RME_Prc_Crt+0xa8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
80160d88:	e5902014 	ldr	r2, [r0, #20]
80160d8c:	e1a03421 	lsr	r3, r1, #8
80160d90:	e1530002 	cmp	r3, r2
80160d94:	2a000021 	bcs	80160e20 <_RME_Prc_Crt+0x200>
80160d98:	e590900c 	ldr	r9, [r0, #12]
80160d9c:	e0899283 	add	r9, r9, r3, lsl #5
80160da0:	e1a00009 	mov	r0, r9
80160da4:	ebfffe55 	bl	80160700 <__RME_A7A_Read_Acquire>
80160da8:	e7e73850 	ubfx	r3, r0, #16, #8
80160dac:	e3530002 	cmp	r3, #2
80160db0:	0a00003c 	beq	80160ea8 <_RME_Prc_Crt+0x288>
80160db4:	e1a00c20 	lsr	r0, r0, #24
80160db8:	e3500003 	cmp	r0, #3
80160dbc:	1a000035 	bne	80160e98 <_RME_Prc_Crt+0x278>
80160dc0:	e5993014 	ldr	r3, [r9, #20]
80160dc4:	e205507f 	and	r5, r5, #127	@ 0x7f
80160dc8:	e1550003 	cmp	r5, r3
80160dcc:	2a000013 	bcs	80160e20 <_RME_Prc_Crt+0x200>
80160dd0:	e599100c 	ldr	r1, [r9, #12]
80160dd4:	eaffff9d 	b	80160c50 <_RME_Prc_Crt+0x30>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
80160dd8:	e5942014 	ldr	r2, [r4, #20]
80160ddc:	e1a03428 	lsr	r3, r8, #8
80160de0:	e1530002 	cmp	r3, r2
80160de4:	2a00000d 	bcs	80160e20 <_RME_Prc_Crt+0x200>
80160de8:	e594400c 	ldr	r4, [r4, #12]
80160dec:	e0844283 	add	r4, r4, r3, lsl #5
80160df0:	e1a00004 	mov	r0, r4
80160df4:	ebfffe41 	bl	80160700 <__RME_A7A_Read_Acquire>
80160df8:	e7e73850 	ubfx	r3, r0, #16, #8
80160dfc:	e3530002 	cmp	r3, #2
80160e00:	0a000028 	beq	80160ea8 <_RME_Prc_Crt+0x288>
80160e04:	e1a00c20 	lsr	r0, r0, #24
80160e08:	e3500003 	cmp	r0, #3
80160e0c:	1a000021 	bne	80160e98 <_RME_Prc_Crt+0x278>
80160e10:	e5943014 	ldr	r3, [r4, #20]
80160e14:	e208807f 	and	r8, r8, #127	@ 0x7f
80160e18:	e1580003 	cmp	r8, r3
80160e1c:	3affffb7 	bcc	80160d00 <_RME_Prc_Crt+0xe0>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
80160e20:	e3e00002 	mvn	r0, #2
80160e24:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_OCCUPY(Prc_Crt);
80160e28:	e3071114 	movw	r1, #28948	@ 0x7114
        *Ptr=New;
80160e2c:	e3a0c801 	mov	ip, #65536	@ 0x10000
    Prc_Crt->Head.Root_Ref=0U;
80160e30:	eddf0b1e 	vldr	d16, [pc, #120]	@ 80160eb0 <_RME_Prc_Crt+0x290>
    RME_CPT_OCCUPY(Prc_Crt);
80160e34:	e3481096 	movt	r1, #32918	@ 0x8096
        *Ptr=New;
80160e38:	e783c287 	str	ip, [r3, r7, lsl #5]
    Prc_Crt->Head.Root_Ref=0U;
80160e3c:	e2803004 	add	r3, r0, #4
    Prc_Crt->Head.Object=0U;
80160e40:	e580200c 	str	r2, [r0, #12]
    RME_CPT_OCCUPY(Prc_Crt);
80160e44:	e5912000 	ldr	r2, [r1]
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
80160e48:	e3a01405 	mov	r1, #83886080	@ 0x5000000
    RME_CPT_OCCUPY(Prc_Crt);
80160e4c:	e5802010 	str	r2, [r0, #16]
    Prc_Crt->Head.Root_Ref=0U;
80160e50:	f443078f 	vst1.32	{d16}, [r3]
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
80160e54:	e1d630b0 	ldrh	r3, [r6]
80160e58:	e3530000 	cmp	r3, #0
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
80160e5c:	e1d830b0 	ldrh	r3, [r8]
    Prc_Cpt=RME_CAP_CONV_ROOT(Cpt_Op,struct RME_Cap_Cpt*);
80160e60:	15966004 	ldrne	r6, [r6, #4]
    Prc_Pgt=RME_CAP_CONV_ROOT(Pgt_Op,struct RME_Cap_Pgt*);
80160e64:	e3530000 	cmp	r3, #0
80160e68:	15988004 	ldrne	r8, [r8, #4]
    Prc_Crt->Cpt=Prc_Cpt;
80160e6c:	e5806014 	str	r6, [r0, #20]
    Prc_Crt->Pgt=Prc_Pgt;
80160e70:	e5808018 	str	r8, [r0, #24]
    Old=(rme_cnt_t)(*Ptr);
80160e74:	e5963004 	ldr	r3, [r6, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80160e78:	e2833001 	add	r3, r3, #1
80160e7c:	e5863004 	str	r3, [r6, #4]
    Old=(rme_cnt_t)(*Ptr);
80160e80:	e5983004 	ldr	r3, [r8, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80160e84:	e2833001 	add	r3, r3, #1
80160e88:	e5883004 	str	r3, [r8, #4]
    RME_WRITE_RELEASE(&(Prc_Crt->Head.Type_Stat),
80160e8c:	ebfffe1e 	bl	8016070c <__RME_A7A_Write_Release>
    return 0;
80160e90:	e3a00000 	mov	r0, #0
80160e94:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
80160e98:	e3e00001 	mvn	r0, #1
80160e9c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CAP_CHECK(Cpt_Crt,RME_CPT_FLAG_CRT);
80160ea0:	e3e00006 	mvn	r0, #6
80160ea4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
80160ea8:	e3e00008 	mvn	r0, #8
80160eac:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
80160eb0:	00000000 	.word	0x00000000
80160eb4:	0000000f 	.word	0x0000000f

80160eb8 <_RME_Pgt_Add>:
{
80160eb8:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
80160ebc:	e3110080 	tst	r1, #128	@ 0x80
{
80160ec0:	e24dd008 	sub	sp, sp, #8
80160ec4:	e1a04001 	mov	r4, r1
80160ec8:	e1a08000 	mov	r8, r0
80160ecc:	e1a05002 	mov	r5, r2
80160ed0:	e59d9028 	ldr	r9, [sp, #40]	@ 0x28
80160ed4:	e1a07003 	mov	r7, r3
80160ed8:	e59d602c 	ldr	r6, [sp, #44]	@ 0x2c
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
80160edc:	1a000064 	bne	80161074 <_RME_Pgt_Add+0x1bc>
80160ee0:	e5903014 	ldr	r3, [r0, #20]
80160ee4:	e1510003 	cmp	r1, r3
80160ee8:	3590100c 	ldrcc	r1, [r0, #12]
80160eec:	2a00005e 	bcs	8016106c <_RME_Pgt_Add+0x1b4>
80160ef0:	e0814284 	add	r4, r1, r4, lsl #5
80160ef4:	e1a00004 	mov	r0, r4
80160ef8:	ebfffe00 	bl	80160700 <__RME_A7A_Read_Acquire>
80160efc:	e7e73850 	ubfx	r3, r0, #16, #8
80160f00:	e3530002 	cmp	r3, #2
80160f04:	0a000076 	beq	801610e4 <_RME_Pgt_Add+0x22c>
80160f08:	e1a00c20 	lsr	r0, r0, #24
80160f0c:	e3500004 	cmp	r0, #4
80160f10:	1a00006b 	bne	801610c4 <_RME_Pgt_Add+0x20c>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
80160f14:	e3190080 	tst	r9, #128	@ 0x80
80160f18:	0a000050 	beq	80161060 <_RME_Pgt_Add+0x1a8>
80160f1c:	e5982014 	ldr	r2, [r8, #20]
80160f20:	e1a03429 	lsr	r3, r9, #8
80160f24:	e1530002 	cmp	r3, r2
80160f28:	2a00004f 	bcs	8016106c <_RME_Pgt_Add+0x1b4>
80160f2c:	e598800c 	ldr	r8, [r8, #12]
80160f30:	e0888283 	add	r8, r8, r3, lsl #5
80160f34:	e1a00008 	mov	r0, r8
80160f38:	ebfffdf0 	bl	80160700 <__RME_A7A_Read_Acquire>
80160f3c:	e7e73850 	ubfx	r3, r0, #16, #8
80160f40:	e3530002 	cmp	r3, #2
80160f44:	0a000066 	beq	801610e4 <_RME_Pgt_Add+0x22c>
80160f48:	e1a00c20 	lsr	r0, r0, #24
80160f4c:	e3500003 	cmp	r0, #3
80160f50:	1a00005b 	bne	801610c4 <_RME_Pgt_Add+0x20c>
80160f54:	e5983014 	ldr	r3, [r8, #20]
80160f58:	e209907f 	and	r9, r9, #127	@ 0x7f
80160f5c:	e1590003 	cmp	r9, r3
80160f60:	2a000041 	bcs	8016106c <_RME_Pgt_Add+0x1b4>
80160f64:	e598300c 	ldr	r3, [r8, #12]
80160f68:	e0839289 	add	r9, r3, r9, lsl #5
80160f6c:	e1a00009 	mov	r0, r9
80160f70:	ebfffde2 	bl	80160700 <__RME_A7A_Read_Acquire>
80160f74:	e7e73850 	ubfx	r3, r0, #16, #8
80160f78:	e3530002 	cmp	r3, #2
80160f7c:	0a000058 	beq	801610e4 <_RME_Pgt_Add+0x22c>
80160f80:	e1a00c20 	lsr	r0, r0, #24
80160f84:	e3500004 	cmp	r0, #4
80160f88:	1a00004d 	bne	801610c4 <_RME_Pgt_Add+0x20c>
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
80160f8c:	e5943008 	ldr	r3, [r4, #8]
80160f90:	e3130002 	tst	r3, #2
80160f94:	0a00004c 	beq	801610cc <_RME_Pgt_Add+0x214>
    RME_CAP_CHECK(Pgt_Src,RME_PGT_FLAG_ADD_SRC);
80160f98:	e5992008 	ldr	r2, [r9, #8]
80160f9c:	e3120001 	tst	r2, #1
80160fa0:	0a000049 	beq	801610cc <_RME_Pgt_Add+0x214>
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
80160fa4:	e1550a23 	cmp	r5, r3, lsr #20
80160fa8:	8a000047 	bhi	801610cc <_RME_Pgt_Add+0x214>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
80160fac:	e7eb3453 	ubfx	r3, r3, #8, #12
    if((Pos_Dst>RME_PGT_FLAG_HIGH(Pgt_Dst->Head.Flag))||
80160fb0:	e1530005 	cmp	r3, r5
80160fb4:	8a000044 	bhi	801610cc <_RME_Pgt_Add+0x214>
       (Pos_Dst<RME_PGT_FLAG_LOW(Pgt_Dst->Head.Flag))||
80160fb8:	e1560a22 	cmp	r6, r2, lsr #20
80160fbc:	8a000042 	bhi	801610cc <_RME_Pgt_Add+0x214>
       (Pos_Src<RME_PGT_FLAG_LOW(Pgt_Src->Head.Flag)))
80160fc0:	e7eb2452 	ubfx	r2, r2, #8, #12
       (Pos_Src>RME_PGT_FLAG_HIGH(Pgt_Src->Head.Flag))||
80160fc4:	e1520006 	cmp	r2, r6
80160fc8:	8a00003f 	bhi	801610cc <_RME_Pgt_Add+0x214>
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
80160fcc:	e5943014 	ldr	r3, [r4, #20]
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
80160fd0:	e5992014 	ldr	r2, [r9, #20]
    Szord_Dst=RME_PGT_SZORD(Pgt_Dst->Order);
80160fd4:	e1a08823 	lsr	r8, r3, #16
    Szord_Src=RME_PGT_SZORD(Pgt_Src->Order);
80160fd8:	e1a01822 	lsr	r1, r2, #16
    if(Szord_Dst>Szord_Src)
80160fdc:	e1580001 	cmp	r8, r1
80160fe0:	8a00003b 	bhi	801610d4 <_RME_Pgt_Add+0x21c>
       ((Pos_Src>>RME_PGT_NMORD(Pgt_Src->Order))!=0U))
80160fe4:	e6ff2072 	uxth	r2, r2
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
80160fe8:	e6ff3073 	uxth	r3, r3
       ((Pos_Src>>RME_PGT_NMORD(Pgt_Src->Order))!=0U))
80160fec:	e1a02236 	lsr	r2, r6, r2
    if(((Pos_Dst>>RME_PGT_NMORD(Pgt_Dst->Order))!=0U)||
80160ff0:	e1923335 	orrs	r3, r2, r5, lsr r3
80160ff4:	1a000036 	bne	801610d4 <_RME_Pgt_Add+0x21c>
    if(Szord_Src<RME_WORD_BIT)
80160ff8:	e351001f 	cmp	r1, #31
80160ffc:	8a000004 	bhi	80161014 <_RME_Pgt_Add+0x15c>
        if(RME_POW2(Szord_Src)<=(Index<<Szord_Dst))
80161000:	e59d3030 	ldr	r3, [sp, #48]	@ 0x30
80161004:	e3a02001 	mov	r2, #1
80161008:	e1a03813 	lsl	r3, r3, r8
8016100c:	e1530112 	cmp	r3, r2, lsl r1
80161010:	2a00002f 	bcs	801610d4 <_RME_Pgt_Add+0x21c>
    if(__RME_Pgt_Lookup(Pgt_Src,Pos_Src,&Paddr_Src,&Flag_Src)<0)
80161014:	e1a01006 	mov	r1, r6
80161018:	e28d3004 	add	r3, sp, #4
8016101c:	e1a00009 	mov	r0, r9
80161020:	e1a0200d 	mov	r2, sp
80161024:	eb001408 	bl	8016604c <__RME_Pgt_Lookup>
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
80161028:	e59d1000 	ldr	r1, [sp]
    if(Szord_Dst<RME_WORD_BIT)
8016102c:	e358001f 	cmp	r8, #31
    if(((Flag_Dst)&(~Flag_Src))!=0U)
80161030:	e59d0004 	ldr	r0, [sp, #4]
        Paddr_Dst=Paddr_Src+(Index<<Szord_Dst);
80161034:	959d3030 	ldrls	r3, [sp, #48]	@ 0x30
80161038:	90811813 	addls	r1, r1, r3, lsl r8
    if(((Flag_Dst)&(~Flag_Src))!=0U)
8016103c:	e1d76000 	bics	r6, r7, r0
80161040:	1a000025 	bne	801610dc <_RME_Pgt_Add+0x224>
    if(__RME_Pgt_Page_Map(Pgt_Dst,Paddr_Dst,Pos_Dst,Flag_Dst)<0)
80161044:	e1a03007 	mov	r3, r7
80161048:	e1a02005 	mov	r2, r5
8016104c:	e1a00004 	mov	r0, r4
80161050:	eb0013f8 	bl	80166038 <__RME_Pgt_Page_Map>
    return 0;
80161054:	e1a00006 	mov	r0, r6
}
80161058:	e28dd008 	add	sp, sp, #8
8016105c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Src,RME_CAP_TYPE_PGT,
80161060:	e5983014 	ldr	r3, [r8, #20]
80161064:	e1590003 	cmp	r9, r3
80161068:	3affffbd 	bcc	80160f64 <_RME_Pgt_Add+0xac>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
8016106c:	e3e00002 	mvn	r0, #2
80161070:	eafffff8 	b	80161058 <_RME_Pgt_Add+0x1a0>
80161074:	e5902014 	ldr	r2, [r0, #20]
80161078:	e1a03421 	lsr	r3, r1, #8
8016107c:	e1530002 	cmp	r3, r2
80161080:	2afffff9 	bcs	8016106c <_RME_Pgt_Add+0x1b4>
80161084:	e590a00c 	ldr	sl, [r0, #12]
80161088:	e08aa283 	add	sl, sl, r3, lsl #5
8016108c:	e1a0000a 	mov	r0, sl
80161090:	ebfffd9a 	bl	80160700 <__RME_A7A_Read_Acquire>
80161094:	e7e73850 	ubfx	r3, r0, #16, #8
80161098:	e3530002 	cmp	r3, #2
8016109c:	0a000010 	beq	801610e4 <_RME_Pgt_Add+0x22c>
801610a0:	e1a00c20 	lsr	r0, r0, #24
801610a4:	e3500003 	cmp	r0, #3
801610a8:	1a000005 	bne	801610c4 <_RME_Pgt_Add+0x20c>
801610ac:	e59a3014 	ldr	r3, [sl, #20]
801610b0:	e204407f 	and	r4, r4, #127	@ 0x7f
801610b4:	e1540003 	cmp	r4, r3
801610b8:	2affffeb 	bcs	8016106c <_RME_Pgt_Add+0x1b4>
801610bc:	e59a100c 	ldr	r1, [sl, #12]
801610c0:	eaffff8a 	b	80160ef0 <_RME_Pgt_Add+0x38>
801610c4:	e3e00001 	mvn	r0, #1
801610c8:	eaffffe2 	b	80161058 <_RME_Pgt_Add+0x1a0>
    RME_CAP_CHECK(Pgt_Dst,RME_PGT_FLAG_ADD_DST);
801610cc:	e3e00006 	mvn	r0, #6
801610d0:	eaffffe0 	b	80161058 <_RME_Pgt_Add+0x1a0>
        return RME_ERR_PGT_ADDR;
801610d4:	e3e00064 	mvn	r0, #100	@ 0x64
801610d8:	eaffffde 	b	80161058 <_RME_Pgt_Add+0x1a0>
        return RME_ERR_PGT_PERM;
801610dc:	e3e00067 	mvn	r0, #103	@ 0x67
801610e0:	eaffffdc 	b	80161058 <_RME_Pgt_Add+0x1a0>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Dst,RME_CAP_TYPE_PGT,
801610e4:	e3e00008 	mvn	r0, #8
801610e8:	eaffffda 	b	80161058 <_RME_Pgt_Add+0x1a0>

801610ec <_RME_Pgt_Con>:
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
801610ec:	e3110080 	tst	r1, #128	@ 0x80
{
801610f0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
801610f4:	e1a04001 	mov	r4, r1
801610f8:	e1a06000 	mov	r6, r0
801610fc:	e1a07002 	mov	r7, r2
80161100:	e1a05003 	mov	r5, r3
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
80161104:	1a000056 	bne	80161264 <_RME_Pgt_Con+0x178>
80161108:	e5903014 	ldr	r3, [r0, #20]
8016110c:	e1510003 	cmp	r1, r3
80161110:	3590100c 	ldrcc	r1, [r0, #12]
80161114:	2a000050 	bcs	8016125c <_RME_Pgt_Con+0x170>
80161118:	e0814284 	add	r4, r1, r4, lsl #5
8016111c:	e1a00004 	mov	r0, r4
80161120:	ebfffd76 	bl	80160700 <__RME_A7A_Read_Acquire>
80161124:	e7e73850 	ubfx	r3, r0, #16, #8
80161128:	e3530002 	cmp	r3, #2
8016112c:	0a000066 	beq	801612cc <_RME_Pgt_Con+0x1e0>
80161130:	e1a00c20 	lsr	r0, r0, #24
80161134:	e3500004 	cmp	r0, #4
80161138:	1a00005d 	bne	801612b4 <_RME_Pgt_Con+0x1c8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
8016113c:	e3150080 	tst	r5, #128	@ 0x80
80161140:	0a000042 	beq	80161250 <_RME_Pgt_Con+0x164>
80161144:	e5962014 	ldr	r2, [r6, #20]
80161148:	e1a03425 	lsr	r3, r5, #8
8016114c:	e1530002 	cmp	r3, r2
80161150:	2a000041 	bcs	8016125c <_RME_Pgt_Con+0x170>
80161154:	e596600c 	ldr	r6, [r6, #12]
80161158:	e0866283 	add	r6, r6, r3, lsl #5
8016115c:	e1a00006 	mov	r0, r6
80161160:	ebfffd66 	bl	80160700 <__RME_A7A_Read_Acquire>
80161164:	e7e73850 	ubfx	r3, r0, #16, #8
80161168:	e3530002 	cmp	r3, #2
8016116c:	0a000056 	beq	801612cc <_RME_Pgt_Con+0x1e0>
80161170:	e1a00c20 	lsr	r0, r0, #24
80161174:	e3500003 	cmp	r0, #3
80161178:	1a00004d 	bne	801612b4 <_RME_Pgt_Con+0x1c8>
8016117c:	e5963014 	ldr	r3, [r6, #20]
80161180:	e205507f 	and	r5, r5, #127	@ 0x7f
80161184:	e1550003 	cmp	r5, r3
80161188:	2a000033 	bcs	8016125c <_RME_Pgt_Con+0x170>
8016118c:	e596200c 	ldr	r2, [r6, #12]
80161190:	e0825285 	add	r5, r2, r5, lsl #5
80161194:	e1a00005 	mov	r0, r5
80161198:	ebfffd58 	bl	80160700 <__RME_A7A_Read_Acquire>
8016119c:	e7e73850 	ubfx	r3, r0, #16, #8
801611a0:	e3530002 	cmp	r3, #2
801611a4:	0a000048 	beq	801612cc <_RME_Pgt_Con+0x1e0>
801611a8:	e1a00c20 	lsr	r0, r0, #24
801611ac:	e3500004 	cmp	r0, #4
801611b0:	1a00003f 	bne	801612b4 <_RME_Pgt_Con+0x1c8>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
801611b4:	e5943008 	ldr	r3, [r4, #8]
801611b8:	e3130010 	tst	r3, #16
801611bc:	0a000040 	beq	801612c4 <_RME_Pgt_Con+0x1d8>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
801611c0:	e5952008 	ldr	r2, [r5, #8]
801611c4:	e3120008 	tst	r2, #8
801611c8:	0a00003d 	beq	801612c4 <_RME_Pgt_Con+0x1d8>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
801611cc:	e1570a23 	cmp	r7, r3, lsr #20
801611d0:	8a00003b 	bhi	801612c4 <_RME_Pgt_Con+0x1d8>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
801611d4:	e7eb3453 	ubfx	r3, r3, #8, #12
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
801611d8:	e1530007 	cmp	r3, r7
801611dc:	8a000038 	bhi	801612c4 <_RME_Pgt_Con+0x1d8>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
801611e0:	e5942014 	ldr	r2, [r4, #20]
801611e4:	e6ff3072 	uxth	r3, r2
801611e8:	e1b03337 	lsrs	r3, r7, r3
801611ec:	1a000032 	bne	801612bc <_RME_Pgt_Con+0x1d0>
    Order_Child=RME_PGT_NMORD(Pgt_Child->Order)+RME_PGT_SZORD(Pgt_Child->Order);
801611f0:	e5953014 	ldr	r3, [r5, #20]
801611f4:	e1a01823 	lsr	r1, r3, #16
801611f8:	e6f13073 	uxtah	r3, r1, r3
    if(Szord_Parent!=Order_Child)
801611fc:	e1530822 	cmp	r3, r2, lsr #16
80161200:	1a00002d 	bne	801612bc <_RME_Pgt_Con+0x1d0>
    if(__RME_Pgt_Pgdir_Map(Pgt_Parent,Pos,Pgt_Child,Flag_Child)<0)
80161204:	e59d3018 	ldr	r3, [sp, #24]
80161208:	e1a02005 	mov	r2, r5
8016120c:	e1a00004 	mov	r0, r4
80161210:	e1a01007 	mov	r1, r7
80161214:	eb001389 	bl	80166040 <__RME_Pgt_Pgdir_Map>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
80161218:	e1d430b0 	ldrh	r3, [r4]
    return 0;
8016121c:	e3a00000 	mov	r0, #0
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
80161220:	e3530000 	cmp	r3, #0
80161224:	15944004 	ldrne	r4, [r4, #4]
    Old=(rme_cnt_t)(*Ptr);
80161228:	e5943004 	ldr	r3, [r4, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
8016122c:	e2833001 	add	r3, r3, #1
80161230:	e5843004 	str	r3, [r4, #4]
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
80161234:	e1d530b0 	ldrh	r3, [r5]
80161238:	e3530000 	cmp	r3, #0
8016123c:	15955004 	ldrne	r5, [r5, #4]
    Old=(rme_cnt_t)(*Ptr);
80161240:	e5953004 	ldr	r3, [r5, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80161244:	e2833001 	add	r3, r3, #1
80161248:	e5853004 	str	r3, [r5, #4]
    return 0;
8016124c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_PGT,
80161250:	e5963014 	ldr	r3, [r6, #20]
80161254:	e1550003 	cmp	r5, r3
80161258:	3affffcb 	bcc	8016118c <_RME_Pgt_Con+0xa0>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
8016125c:	e3e00002 	mvn	r0, #2
80161260:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
80161264:	e5902014 	ldr	r2, [r0, #20]
80161268:	e1a03421 	lsr	r3, r1, #8
8016126c:	e1530002 	cmp	r3, r2
80161270:	2afffff9 	bcs	8016125c <_RME_Pgt_Con+0x170>
80161274:	e590800c 	ldr	r8, [r0, #12]
80161278:	e0888283 	add	r8, r8, r3, lsl #5
8016127c:	e1a00008 	mov	r0, r8
80161280:	ebfffd1e 	bl	80160700 <__RME_A7A_Read_Acquire>
80161284:	e7e73850 	ubfx	r3, r0, #16, #8
80161288:	e3530002 	cmp	r3, #2
8016128c:	0a00000e 	beq	801612cc <_RME_Pgt_Con+0x1e0>
80161290:	e1a00c20 	lsr	r0, r0, #24
80161294:	e3500003 	cmp	r0, #3
80161298:	1a000005 	bne	801612b4 <_RME_Pgt_Con+0x1c8>
8016129c:	e5983014 	ldr	r3, [r8, #20]
801612a0:	e204407f 	and	r4, r4, #127	@ 0x7f
801612a4:	e1540003 	cmp	r4, r3
801612a8:	2affffeb 	bcs	8016125c <_RME_Pgt_Con+0x170>
801612ac:	e598100c 	ldr	r1, [r8, #12]
801612b0:	eaffff98 	b	80161118 <_RME_Pgt_Con+0x2c>
801612b4:	e3e00001 	mvn	r0, #1
801612b8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return RME_ERR_PGT_ADDR;
801612bc:	e3e00064 	mvn	r0, #100	@ 0x64
}
801612c0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_CON_PARENT);
801612c4:	e3e00006 	mvn	r0, #6
801612c8:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_PGT,
801612cc:	e3e00008 	mvn	r0, #8
801612d0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

801612d4 <_RME_Pgt_Des>:
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
801612d4:	e3110080 	tst	r1, #128	@ 0x80
{
801612d8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
801612dc:	e1a04001 	mov	r4, r1
801612e0:	e1a06000 	mov	r6, r0
801612e4:	e1a07002 	mov	r7, r2
801612e8:	e1a05003 	mov	r5, r3
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
801612ec:	1a000051 	bne	80161438 <_RME_Pgt_Des+0x164>
801612f0:	e5903014 	ldr	r3, [r0, #20]
801612f4:	e1510003 	cmp	r1, r3
801612f8:	3590100c 	ldrcc	r1, [r0, #12]
801612fc:	2a00004b 	bcs	80161430 <_RME_Pgt_Des+0x15c>
80161300:	e0814284 	add	r4, r1, r4, lsl #5
80161304:	e1a00004 	mov	r0, r4
80161308:	ebfffcfc 	bl	80160700 <__RME_A7A_Read_Acquire>
8016130c:	e7e73850 	ubfx	r3, r0, #16, #8
80161310:	e3530002 	cmp	r3, #2
80161314:	0a000061 	beq	801614a0 <_RME_Pgt_Des+0x1cc>
80161318:	e1a00c20 	lsr	r0, r0, #24
8016131c:	e3500003 	cmp	r0, #3
80161320:	1a000058 	bne	80161488 <_RME_Pgt_Des+0x1b4>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
80161324:	e3150080 	tst	r5, #128	@ 0x80
80161328:	0a00003d 	beq	80161424 <_RME_Pgt_Des+0x150>
8016132c:	e5962014 	ldr	r2, [r6, #20]
80161330:	e1a03425 	lsr	r3, r5, #8
80161334:	e1530002 	cmp	r3, r2
80161338:	2a00003c 	bcs	80161430 <_RME_Pgt_Des+0x15c>
8016133c:	e596600c 	ldr	r6, [r6, #12]
80161340:	e0866283 	add	r6, r6, r3, lsl #5
80161344:	e1a00006 	mov	r0, r6
80161348:	ebfffcec 	bl	80160700 <__RME_A7A_Read_Acquire>
8016134c:	e7e73850 	ubfx	r3, r0, #16, #8
80161350:	e3530002 	cmp	r3, #2
80161354:	0a000051 	beq	801614a0 <_RME_Pgt_Des+0x1cc>
80161358:	e1a00c20 	lsr	r0, r0, #24
8016135c:	e3500003 	cmp	r0, #3
80161360:	1a000048 	bne	80161488 <_RME_Pgt_Des+0x1b4>
80161364:	e5963014 	ldr	r3, [r6, #20]
80161368:	e205507f 	and	r5, r5, #127	@ 0x7f
8016136c:	e1550003 	cmp	r5, r3
80161370:	2a00002e 	bcs	80161430 <_RME_Pgt_Des+0x15c>
80161374:	e596200c 	ldr	r2, [r6, #12]
80161378:	e0825285 	add	r5, r2, r5, lsl #5
8016137c:	e1a00005 	mov	r0, r5
80161380:	ebfffcde 	bl	80160700 <__RME_A7A_Read_Acquire>
80161384:	e7e73850 	ubfx	r3, r0, #16, #8
80161388:	e3530002 	cmp	r3, #2
8016138c:	0a000043 	beq	801614a0 <_RME_Pgt_Des+0x1cc>
80161390:	e1a00c20 	lsr	r0, r0, #24
80161394:	e3500003 	cmp	r0, #3
80161398:	1a00003a 	bne	80161488 <_RME_Pgt_Des+0x1b4>
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
8016139c:	e5943008 	ldr	r3, [r4, #8]
801613a0:	e3130020 	tst	r3, #32
801613a4:	0a000039 	beq	80161490 <_RME_Pgt_Des+0x1bc>
    RME_CAP_CHECK(Pgt_Child, RME_PGT_FLAG_CHILD);
801613a8:	e5952008 	ldr	r2, [r5, #8]
801613ac:	e3120008 	tst	r2, #8
801613b0:	0a000036 	beq	80161490 <_RME_Pgt_Des+0x1bc>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
801613b4:	e1570a23 	cmp	r7, r3, lsr #20
801613b8:	8a000034 	bhi	80161490 <_RME_Pgt_Des+0x1bc>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Parent->Head.Flag)))
801613bc:	e7eb3453 	ubfx	r3, r3, #8, #12
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Parent->Head.Flag))||
801613c0:	e1530007 	cmp	r3, r7
801613c4:	8a000031 	bhi	80161490 <_RME_Pgt_Des+0x1bc>
    if((Pos>>RME_PGT_NMORD(Pgt_Parent->Order))!=0U)
801613c8:	e1d431b4 	ldrh	r3, [r4, #20]
801613cc:	e1b03337 	lsrs	r3, r7, r3
801613d0:	1a000030 	bne	80161498 <_RME_Pgt_Des+0x1c4>
    if(__RME_Pgt_Pgdir_Unmap(Pgt_Parent,Pos,Pgt_Child)<0)
801613d4:	e1a02005 	mov	r2, r5
801613d8:	e1a01007 	mov	r1, r7
801613dc:	e1a00004 	mov	r0, r4
801613e0:	eb001317 	bl	80166044 <__RME_Pgt_Pgdir_Unmap>
801613e4:	e3500000 	cmp	r0, #0
801613e8:	ba00002e 	blt	801614a8 <_RME_Pgt_Des+0x1d4>
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
801613ec:	e1d430b0 	ldrh	r3, [r4]
    return 0;
801613f0:	e3a00000 	mov	r0, #0
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Parent,struct RME_Cap_Pgt*);
801613f4:	e3530000 	cmp	r3, #0
801613f8:	15944004 	ldrne	r4, [r4, #4]
    Old=(rme_cnt_t)(*Ptr);
801613fc:	e5943004 	ldr	r3, [r4, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80161400:	e2433001 	sub	r3, r3, #1
80161404:	e5843004 	str	r3, [r4, #4]
    Pgt_Root=RME_CAP_CONV_ROOT(Pgt_Child,struct RME_Cap_Pgt*);
80161408:	e1d530b0 	ldrh	r3, [r5]
8016140c:	e3530000 	cmp	r3, #0
80161410:	15955004 	ldrne	r5, [r5, #4]
    Old=(rme_cnt_t)(*Ptr);
80161414:	e5953004 	ldr	r3, [r5, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80161418:	e2433001 	sub	r3, r3, #1
8016141c:	e5853004 	str	r3, [r5, #4]
    return 0;
80161420:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Child,RME_CAP_TYPE_CPT,
80161424:	e5963014 	ldr	r3, [r6, #20]
80161428:	e1550003 	cmp	r5, r3
8016142c:	3affffd0 	bcc	80161374 <_RME_Pgt_Des+0xa0>
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
80161430:	e3e00002 	mvn	r0, #2
80161434:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
80161438:	e5902014 	ldr	r2, [r0, #20]
8016143c:	e1a03421 	lsr	r3, r1, #8
80161440:	e1530002 	cmp	r3, r2
80161444:	2afffff9 	bcs	80161430 <_RME_Pgt_Des+0x15c>
80161448:	e590800c 	ldr	r8, [r0, #12]
8016144c:	e0888283 	add	r8, r8, r3, lsl #5
80161450:	e1a00008 	mov	r0, r8
80161454:	ebfffca9 	bl	80160700 <__RME_A7A_Read_Acquire>
80161458:	e7e73850 	ubfx	r3, r0, #16, #8
8016145c:	e3530002 	cmp	r3, #2
80161460:	0a00000e 	beq	801614a0 <_RME_Pgt_Des+0x1cc>
80161464:	e1a00c20 	lsr	r0, r0, #24
80161468:	e3500003 	cmp	r0, #3
8016146c:	1a000005 	bne	80161488 <_RME_Pgt_Des+0x1b4>
80161470:	e5983014 	ldr	r3, [r8, #20]
80161474:	e204407f 	and	r4, r4, #127	@ 0x7f
80161478:	e1540003 	cmp	r4, r3
8016147c:	2affffeb 	bcs	80161430 <_RME_Pgt_Des+0x15c>
80161480:	e598100c 	ldr	r1, [r8, #12]
80161484:	eaffff9d 	b	80161300 <_RME_Pgt_Des+0x2c>
80161488:	e3e00001 	mvn	r0, #1
8016148c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    RME_CAP_CHECK(Pgt_Parent, RME_PGT_FLAG_DES_PARENT);
80161490:	e3e00006 	mvn	r0, #6
80161494:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return RME_ERR_PGT_ADDR;
80161498:	e3e00064 	mvn	r0, #100	@ 0x64
8016149c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    RME_CPT_GETCAP(Cpt,Cap_Pgt_Parent,RME_CAP_TYPE_CPT,
801614a0:	e3e00008 	mvn	r0, #8
801614a4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        return RME_ERR_PGT_MAP;
801614a8:	e3e00065 	mvn	r0, #101	@ 0x65
}
801614ac:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

801614b0 <RME_Int_Print>:
{
801614b0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if(Int==0)
801614b4:	e2507000 	subs	r7, r0, #0
        return 1;
801614b8:	03a06001 	moveq	r6, #1
    if(Int==0)
801614bc:	0a00001c 	beq	80161534 <RME_Int_Print+0x84>
    if(Int<0)
801614c0:	a3a06001 	movge	r6, #1
        Num=0;
801614c4:	a3a00000 	movge	r0, #0
    if(Int<0)
801614c8:	ba00001b 	blt	8016153c <RME_Int_Print+0x8c>
        Iter/=10;
801614cc:	e30c2ccd 	movw	r2, #52429	@ 0xcccd
801614d0:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
801614d4:	e0831792 	umull	r1, r3, r2, r7
        if(Iter!=0)
801614d8:	e1b031a3 	lsrs	r3, r3, #3
801614dc:	0a00001c 	beq	80161554 <RME_Int_Print+0xa4>
    Div=1;
801614e0:	e3a04001 	mov	r4, #1
            Div*=10;
801614e4:	e3a0100a 	mov	r1, #10
        Count++;
801614e8:	e1a05004 	mov	r5, r4
        Iter/=10;
801614ec:	e083c392 	umull	ip, r3, r2, r3
            Div*=10;
801614f0:	e0040491 	mul	r4, r1, r4
        if(Iter!=0)
801614f4:	e1b031a3 	lsrs	r3, r3, #3
        Count++;
801614f8:	e2855001 	add	r5, r5, #1
        if(Iter!=0)
801614fc:	1afffffa 	bne	801614ec <RME_Int_Print+0x3c>
    Num+=Count;
80161500:	e0856000 	add	r6, r5, r0
        Div/=10;
80161504:	e30c8ccd 	movw	r8, #52429	@ 0xcccd
80161508:	e34c8ccc 	movt	r8, #52428	@ 0xcccc
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
8016150c:	e733f417 	udiv	r3, r7, r4
80161510:	e2830030 	add	r0, r3, #48	@ 0x30
        Count--;
80161514:	e2455001 	sub	r5, r5, #1
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
80161518:	e6af0070 	sxtb	r0, r0
        Iter=Iter%Div;
8016151c:	e0677394 	mls	r7, r4, r3, r7
        Div/=10;
80161520:	e0843498 	umull	r3, r4, r8, r4
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
80161524:	eb001189 	bl	80165b50 <__RME_Putchar>
        Div/=10;
80161528:	e1a041a4 	lsr	r4, r4, #3
    while(Count>0)
8016152c:	e3550000 	cmp	r5, #0
80161530:	1afffff5 	bne	8016150c <RME_Int_Print+0x5c>
}
80161534:	e1a00006 	mov	r0, r6
80161538:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        __RME_Putchar('-');
8016153c:	e3a0002d 	mov	r0, #45	@ 0x2d
        Abs=-Int;
80161540:	e2677000 	rsb	r7, r7, #0
80161544:	e3a06002 	mov	r6, #2
        __RME_Putchar('-');
80161548:	eb001180 	bl	80165b50 <__RME_Putchar>
        Num=1;
8016154c:	e3a00001 	mov	r0, #1
80161550:	eaffffdd 	b	801614cc <RME_Int_Print+0x1c>
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
80161554:	e2870030 	add	r0, r7, #48	@ 0x30
80161558:	e6af0070 	sxtb	r0, r0
8016155c:	eb00117b 	bl	80165b50 <__RME_Putchar>
    while(Count>0)
80161560:	eafffff3 	b	80161534 <RME_Int_Print+0x84>

80161564 <RME_Hex_Print>:
{
80161564:	e92d4070 	push	{r4, r5, r6, lr}
    if(Uint==0U)
80161568:	e2505000 	subs	r5, r0, #0
8016156c:	0a000017 	beq	801615d0 <RME_Hex_Print+0x6c>
    while((Iter>>(RME_WORD_BIT-4U))==0U)
80161570:	e1b04e25 	lsrs	r4, r5, #28
80161574:	13a06008 	movne	r6, #8
    Count=RME_POW2(RME_WORD_ORDER-2U)-Count;
80161578:	11a04006 	movne	r4, r6
    while((Iter>>(RME_WORD_BIT-4U))==0U)
8016157c:	1a000007 	bne	801615a0 <RME_Hex_Print+0x3c>
80161580:	e1a03005 	mov	r3, r5
        Iter<<=4;
80161584:	e1a03203 	lsl	r3, r3, #4
        Count++;
80161588:	e2844001 	add	r4, r4, #1
    while((Iter>>(RME_WORD_BIT-4U))==0U)
8016158c:	e1b02e23 	lsrs	r2, r3, #28
80161590:	0afffffb 	beq	80161584 <RME_Hex_Print+0x20>
    while(Count>0U)
80161594:	e2744008 	rsbs	r4, r4, #8
    return (rme_cnt_t)Num;
80161598:	e1a06004 	mov	r6, r4
    while(Count>0U)
8016159c:	0a000009 	beq	801615c8 <RME_Hex_Print+0x64>
        Count--;
801615a0:	e2444001 	sub	r4, r4, #1
        Iter=(Uint>>(Count<<2U))&0x0FU;
801615a4:	e1a03104 	lsl	r3, r4, #2
801615a8:	e1a03335 	lsr	r3, r5, r3
801615ac:	e203300f 	and	r3, r3, #15
        if(Iter<10U)
801615b0:	e3530009 	cmp	r3, #9
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
801615b4:	e2830037 	add	r0, r3, #55	@ 0x37
            __RME_Putchar((rme_s8_t)Iter+'0');
801615b8:	92830030 	addls	r0, r3, #48	@ 0x30
            __RME_Putchar((rme_s8_t)Iter+'A'-10);
801615bc:	eb001163 	bl	80165b50 <__RME_Putchar>
    while(Count>0U)
801615c0:	e3540000 	cmp	r4, #0
801615c4:	1afffff5 	bne	801615a0 <RME_Hex_Print+0x3c>
}
801615c8:	e1a00006 	mov	r0, r6
801615cc:	e8bd8070 	pop	{r4, r5, r6, pc}
        return 1;
801615d0:	e3a06001 	mov	r6, #1
        __RME_Putchar('0');
801615d4:	e3a00030 	mov	r0, #48	@ 0x30
801615d8:	eb00115c 	bl	80165b50 <__RME_Putchar>
}
801615dc:	e1a00006 	mov	r0, r6
801615e0:	e8bd8070 	pop	{r4, r5, r6, pc}

801615e4 <RME_Str_Print>:
{
801615e4:	e92d4070 	push	{r4, r5, r6, lr}
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
801615e8:	e3a04000 	mov	r4, #0
801615ec:	e2405001 	sub	r5, r0, #1
801615f0:	ea000003 	b	80161604 <RME_Str_Print+0x20>
801615f4:	e2844001 	add	r4, r4, #1
        __RME_Putchar(String[Count]);
801615f8:	eb001154 	bl	80165b50 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
801615fc:	e35400ff 	cmp	r4, #255	@ 0xff
80161600:	0a000002 	beq	80161610 <RME_Str_Print+0x2c>
        if(String[Count]==(rme_s8_t)'\0')
80161604:	e1f500d1 	ldrsb	r0, [r5, #1]!
80161608:	e3500000 	cmp	r0, #0
8016160c:	1afffff8 	bne	801615f4 <RME_Str_Print+0x10>
}
80161610:	e1a00004 	mov	r0, r4
80161614:	e8bd8070 	pop	{r4, r5, r6, pc}

80161618 <RME_Log>:
{
80161618:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
8016161c:	e3064050 	movw	r4, #24656	@ 0x6050
80161620:	e3484016 	movt	r4, #32790	@ 0x8016
80161624:	e1a07000 	mov	r7, r0
80161628:	e1a05001 	mov	r5, r1
8016162c:	e1a08002 	mov	r8, r2
80161630:	e1a06003 	mov	r6, r3
80161634:	e28490fe 	add	r9, r4, #254	@ 0xfe
        if(String[Count]==(rme_s8_t)'\0')
80161638:	e3a0000d 	mov	r0, #13
        __RME_Putchar(String[Count]);
8016163c:	eb001143 	bl	80165b50 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
80161640:	e1540009 	cmp	r4, r9
80161644:	0a000002 	beq	80161654 <RME_Log+0x3c>
        if(String[Count]==(rme_s8_t)'\0')
80161648:	e1f400d1 	ldrsb	r0, [r4, #1]!
8016164c:	e3500000 	cmp	r0, #0
80161650:	1afffff9 	bne	8016163c <RME_Log+0x24>
80161654:	e2474001 	sub	r4, r7, #1
80161658:	e28770fe 	add	r7, r7, #254	@ 0xfe
8016165c:	ea000002 	b	8016166c <RME_Log+0x54>
        __RME_Putchar(String[Count]);
80161660:	eb00113a 	bl	80165b50 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
80161664:	e1570004 	cmp	r7, r4
80161668:	0a000002 	beq	80161678 <RME_Log+0x60>
        if(String[Count]==(rme_s8_t)'\0')
8016166c:	e1f400d1 	ldrsb	r0, [r4, #1]!
80161670:	e3500000 	cmp	r0, #0
80161674:	1afffff9 	bne	80161660 <RME_Log+0x48>
80161678:	e3064078 	movw	r4, #24696	@ 0x6078
8016167c:	e3a00020 	mov	r0, #32
80161680:	e3484016 	movt	r4, #32790	@ 0x8016
80161684:	e28470fe 	add	r7, r4, #254	@ 0xfe
        __RME_Putchar(String[Count]);
80161688:	eb001130 	bl	80165b50 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
8016168c:	e1570004 	cmp	r7, r4
80161690:	0a000002 	beq	801616a0 <RME_Log+0x88>
        if(String[Count]==(rme_s8_t)'\0')
80161694:	e1f400d1 	ldrsb	r0, [r4, #1]!
80161698:	e3500000 	cmp	r0, #0
8016169c:	1afffff9 	bne	80161688 <RME_Log+0x70>
    if(Int==0)
801616a0:	e3550000 	cmp	r5, #0
801616a4:	0a000019 	beq	80161710 <RME_Log+0xf8>
    if(Int<0)
801616a8:	ba000047 	blt	801617cc <RME_Log+0x1b4>
        Iter/=10;
801616ac:	e30c2ccd 	movw	r2, #52429	@ 0xcccd
801616b0:	e34c2ccc 	movt	r2, #52428	@ 0xcccc
801616b4:	e0831592 	umull	r1, r3, r2, r5
        if(Iter!=0)
801616b8:	e1b031a3 	lsrs	r3, r3, #3
801616bc:	0a000046 	beq	801617dc <RME_Log+0x1c4>
    Div=1;
801616c0:	e3a04001 	mov	r4, #1
            Div*=10;
801616c4:	e3a0100a 	mov	r1, #10
        Count++;
801616c8:	e1a07004 	mov	r7, r4
        Iter/=10;
801616cc:	e0830392 	umull	r0, r3, r2, r3
            Div*=10;
801616d0:	e0040491 	mul	r4, r1, r4
        if(Iter!=0)
801616d4:	e1b031a3 	lsrs	r3, r3, #3
        Count++;
801616d8:	e2877001 	add	r7, r7, #1
        if(Iter!=0)
801616dc:	1afffffa 	bne	801616cc <RME_Log+0xb4>
        Div/=10;
801616e0:	e30c9ccd 	movw	r9, #52429	@ 0xcccd
801616e4:	e34c9ccc 	movt	r9, #52428	@ 0xcccc
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
801616e8:	e733f415 	udiv	r3, r5, r4
801616ec:	e2830030 	add	r0, r3, #48	@ 0x30
        Count--;
801616f0:	e2477001 	sub	r7, r7, #1
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
801616f4:	e6af0070 	sxtb	r0, r0
        Iter=Iter%Div;
801616f8:	e0655394 	mls	r5, r4, r3, r5
        Div/=10;
801616fc:	e0843499 	umull	r3, r4, r9, r4
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
80161700:	eb001112 	bl	80165b50 <__RME_Putchar>
        Div/=10;
80161704:	e1a041a4 	lsr	r4, r4, #3
    while(Count>0)
80161708:	e3570000 	cmp	r7, #0
8016170c:	1afffff5 	bne	801616e8 <RME_Log+0xd0>
        if(String[Count]==(rme_s8_t)'\0')
80161710:	e3064084 	movw	r4, #24708	@ 0x6084
80161714:	e3a0000d 	mov	r0, #13
80161718:	e3484016 	movt	r4, #32790	@ 0x8016
8016171c:	e28470fe 	add	r7, r4, #254	@ 0xfe
        Count++;
80161720:	e1a05004 	mov	r5, r4
        __RME_Putchar(String[Count]);
80161724:	eb001109 	bl	80165b50 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
80161728:	e1550007 	cmp	r5, r7
8016172c:	0a000002 	beq	8016173c <RME_Log+0x124>
        if(String[Count]==(rme_s8_t)'\0')
80161730:	e1f500d1 	ldrsb	r0, [r5, #1]!
80161734:	e3500000 	cmp	r0, #0
80161738:	1afffff9 	bne	80161724 <RME_Log+0x10c>
8016173c:	e2485001 	sub	r5, r8, #1
80161740:	e28880fe 	add	r8, r8, #254	@ 0xfe
80161744:	ea000002 	b	80161754 <RME_Log+0x13c>
        __RME_Putchar(String[Count]);
80161748:	eb001100 	bl	80165b50 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
8016174c:	e1580005 	cmp	r8, r5
80161750:	0a000002 	beq	80161760 <RME_Log+0x148>
        if(String[Count]==(rme_s8_t)'\0')
80161754:	e1f500d1 	ldrsb	r0, [r5, #1]!
80161758:	e3500000 	cmp	r0, #0
8016175c:	1afffff9 	bne	80161748 <RME_Log+0x130>
80161760:	e3065088 	movw	r5, #24712	@ 0x6088
80161764:	e3a00020 	mov	r0, #32
80161768:	e3485016 	movt	r5, #32790	@ 0x8016
8016176c:	e28580fe 	add	r8, r5, #254	@ 0xfe
        __RME_Putchar(String[Count]);
80161770:	eb0010f6 	bl	80165b50 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
80161774:	e1550008 	cmp	r5, r8
80161778:	0a000002 	beq	80161788 <RME_Log+0x170>
        if(String[Count]==(rme_s8_t)'\0')
8016177c:	e1f500d1 	ldrsb	r0, [r5, #1]!
80161780:	e3500000 	cmp	r0, #0
80161784:	1afffff9 	bne	80161770 <RME_Log+0x158>
80161788:	e2465001 	sub	r5, r6, #1
8016178c:	e28660fe 	add	r6, r6, #254	@ 0xfe
80161790:	ea000002 	b	801617a0 <RME_Log+0x188>
        __RME_Putchar(String[Count]);
80161794:	eb0010ed 	bl	80165b50 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
80161798:	e1560005 	cmp	r6, r5
8016179c:	0a000002 	beq	801617ac <RME_Log+0x194>
        if(String[Count]==(rme_s8_t)'\0')
801617a0:	e1f500d1 	ldrsb	r0, [r5, #1]!
801617a4:	e3500000 	cmp	r0, #0
801617a8:	1afffff9 	bne	80161794 <RME_Log+0x17c>
801617ac:	e3a0000d 	mov	r0, #13
        __RME_Putchar(String[Count]);
801617b0:	eb0010e6 	bl	80165b50 <__RME_Putchar>
    for(Count=0U;Count<RME_DBGLOG_MAX;Count++)
801617b4:	e1540007 	cmp	r4, r7
801617b8:	08bd87f0 	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
        if(String[Count]==(rme_s8_t)'\0')
801617bc:	e1f400d1 	ldrsb	r0, [r4, #1]!
801617c0:	e3500000 	cmp	r0, #0
801617c4:	1afffff9 	bne	801617b0 <RME_Log+0x198>
801617c8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        __RME_Putchar('-');
801617cc:	e3a0002d 	mov	r0, #45	@ 0x2d
        Abs=-Int;
801617d0:	e2655000 	rsb	r5, r5, #0
        __RME_Putchar('-');
801617d4:	eb0010dd 	bl	80165b50 <__RME_Putchar>
        Num=1;
801617d8:	eaffffb3 	b	801616ac <RME_Log+0x94>
        __RME_Putchar((rme_s8_t)(Iter/Div)+'0');
801617dc:	e2850030 	add	r0, r5, #48	@ 0x30
801617e0:	e6af0070 	sxtb	r0, r0
801617e4:	eb0010d9 	bl	80165b50 <__RME_Putchar>
    while(Count>0)
801617e8:	eaffffc8 	b	80161710 <RME_Log+0xf8>

801617ec <_RME_Run_High>:
{
801617ec:	e92d4010 	push	{r4, lr}
801617f0:	e1a04000 	mov	r4, r0
        if(Local->Run.Bitmap[Count]!=0U)
801617f4:	e5900010 	ldr	r0, [r0, #16]
801617f8:	e3500000 	cmp	r0, #0
801617fc:	1a000008 	bne	80161824 <_RME_Run_High+0x38>
    RME_ASSERT(Count>=0);
80161800:	e306308c 	movw	r3, #24716	@ 0x608c
80161804:	e3062098 	movw	r2, #24728	@ 0x6098
80161808:	e3483016 	movt	r3, #32790	@ 0x8016
8016180c:	e30600a4 	movw	r0, #24740	@ 0x60a4
80161810:	e3482016 	movt	r2, #32790	@ 0x8016
80161814:	e3011186 	movw	r1, #4486	@ 0x1186
80161818:	e3480016 	movt	r0, #32790	@ 0x8016
8016181c:	ebffff7d 	bl	80161618 <RME_Log>
80161820:	eafffffe 	b	80161820 <_RME_Run_High+0x34>
    Prio=RME_MSB_GET(Local->Run.Bitmap[Count]);
80161824:	ebfffbc3 	bl	80160738 <__RME_A7A_MSB_Get>
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
80161828:	e0844180 	add	r4, r4, r0, lsl #3
8016182c:	e5940014 	ldr	r0, [r4, #20]
}
80161830:	e8bd8010 	pop	{r4, pc}

80161834 <_RME_Thd_Sched_Bind>:
    rme_ptr_t Type_Stat;
    rme_ptr_t Hyp_Attr;
    rme_ptr_t End;

    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80161834:	e3110080 	tst	r1, #128	@ 0x80
{
80161838:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
8016183c:	e1a05001 	mov	r5, r1
80161840:	e59d8028 	ldr	r8, [sp, #40]	@ 0x28
80161844:	e1a04000 	mov	r4, r0
80161848:	e1a06002 	mov	r6, r2
8016184c:	e1a07003 	mov	r7, r3
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80161850:	1a00006e 	bne	80161a10 <_RME_Thd_Sched_Bind+0x1dc>
80161854:	e5903014 	ldr	r3, [r0, #20]
80161858:	e1510003 	cmp	r1, r3
8016185c:	3590100c 	ldrcc	r1, [r0, #12]
80161860:	2a00009b 	bcs	80161ad4 <_RME_Thd_Sched_Bind+0x2a0>
80161864:	e0815285 	add	r5, r1, r5, lsl #5
80161868:	e1a00005 	mov	r0, r5
8016186c:	ebfffba3 	bl	80160700 <__RME_A7A_Read_Acquire>
80161870:	e7e73850 	ubfx	r3, r0, #16, #8
80161874:	e3530002 	cmp	r3, #2
80161878:	0a0000c5 	beq	80161b94 <_RME_Thd_Sched_Bind+0x360>
8016187c:	e1a00c20 	lsr	r0, r0, #24
80161880:	e3500006 	cmp	r0, #6
80161884:	1a0000b0 	bne	80161b4c <_RME_Thd_Sched_Bind+0x318>
                   struct RME_Cap_Thd*,Thd_Op,Type_Stat);
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
80161888:	e3160080 	tst	r6, #128	@ 0x80
8016188c:	0a000073 	beq	80161a60 <_RME_Thd_Sched_Bind+0x22c>
80161890:	e5942014 	ldr	r2, [r4, #20]
80161894:	e1a03426 	lsr	r3, r6, #8
80161898:	e1530002 	cmp	r3, r2
8016189c:	2a00008c 	bcs	80161ad4 <_RME_Thd_Sched_Bind+0x2a0>
801618a0:	e594900c 	ldr	r9, [r4, #12]
801618a4:	e0899283 	add	r9, r9, r3, lsl #5
801618a8:	e1a00009 	mov	r0, r9
801618ac:	ebfffb93 	bl	80160700 <__RME_A7A_Read_Acquire>
801618b0:	e7e73850 	ubfx	r3, r0, #16, #8
801618b4:	e3530002 	cmp	r3, #2
801618b8:	0a0000b5 	beq	80161b94 <_RME_Thd_Sched_Bind+0x360>
801618bc:	e1a00c20 	lsr	r0, r0, #24
801618c0:	e3500003 	cmp	r0, #3
801618c4:	1a0000a0 	bne	80161b4c <_RME_Thd_Sched_Bind+0x318>
801618c8:	e5993014 	ldr	r3, [r9, #20]
801618cc:	e206607f 	and	r6, r6, #127	@ 0x7f
801618d0:	e1560003 	cmp	r6, r3
801618d4:	2a00007e 	bcs	80161ad4 <_RME_Thd_Sched_Bind+0x2a0>
801618d8:	e599200c 	ldr	r2, [r9, #12]
801618dc:	e0826286 	add	r6, r2, r6, lsl #5
801618e0:	e1a00006 	mov	r0, r6
801618e4:	ebfffb85 	bl	80160700 <__RME_A7A_Read_Acquire>
801618e8:	e7e73850 	ubfx	r3, r0, #16, #8
801618ec:	e3530002 	cmp	r3, #2
801618f0:	0a0000a7 	beq	80161b94 <_RME_Thd_Sched_Bind+0x360>
801618f4:	e1a00c20 	lsr	r0, r0, #24
801618f8:	e3500006 	cmp	r0, #6
801618fc:	1a000092 	bne	80161b4c <_RME_Thd_Sched_Bind+0x318>
                   struct RME_Cap_Thd*,Thd_Sched,Type_Stat);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
80161900:	e5953008 	ldr	r3, [r5, #8]
80161904:	e3130002 	tst	r3, #2
80161908:	0a00009f 	beq	80161b8c <_RME_Thd_Sched_Bind+0x358>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
8016190c:	e5963008 	ldr	r3, [r6, #8]
80161910:	e3130004 	tst	r3, #4
80161914:	0a00009c 	beq	80161b8c <_RME_Thd_Sched_Bind+0x358>
    
    /* Check if we need the signal endpoint for this operation */
    if(Cap_Sig!=RME_CID_NULL)
80161918:	e3570902 	cmp	r7, #32768	@ 0x8000
8016191c:	0a000058 	beq	80161a84 <_RME_Thd_Sched_Bind+0x250>
    {
        RME_COV_MARKER();

        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
80161920:	e3170080 	tst	r7, #128	@ 0x80
80161924:	1a000058 	bne	80161a8c <_RME_Thd_Sched_Bind+0x258>
80161928:	e5943014 	ldr	r3, [r4, #20]
8016192c:	e1570003 	cmp	r7, r3
80161930:	2a000067 	bcs	80161ad4 <_RME_Thd_Sched_Bind+0x2a0>
80161934:	e594300c 	ldr	r3, [r4, #12]
80161938:	e0837287 	add	r7, r3, r7, lsl #5
8016193c:	e1a00007 	mov	r0, r7
80161940:	ebfffb6e 	bl	80160700 <__RME_A7A_Read_Acquire>
80161944:	e7e73850 	ubfx	r3, r0, #16, #8
80161948:	e3530002 	cmp	r3, #2
8016194c:	0a000090 	beq	80161b94 <_RME_Thd_Sched_Bind+0x360>
80161950:	e1a00c20 	lsr	r0, r0, #24
80161954:	e3500008 	cmp	r0, #8
80161958:	1a00007b 	bne	80161b4c <_RME_Thd_Sched_Bind+0x318>
                       struct RME_Cap_Sig*,Sig_Op,Type_Stat);
        RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SCHED);
8016195c:	e5973008 	ldr	r3, [r7, #8]
80161960:	e3130020 	tst	r3, #32
80161964:	0a000088 	beq	80161b8c <_RME_Thd_Sched_Bind+0x358>

        Sig_Op=RME_NULL;
    }

    /* Check if the target thread is already bound. If yes, we just quit */
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
80161968:	e595300c 	ldr	r3, [r5, #12]
    Local_Old=Thread->Sched.Local;
    if(Local_Old!=RME_THD_FREE)
8016196c:	e5932014 	ldr	r2, [r3, #20]
80161970:	e3720001 	cmn	r2, #1
80161974:	1a00007f 	bne	80161b78 <_RME_Thd_Sched_Bind+0x344>
        /* No action required */
    }
    
    /* See if the parent thread is on the same core with the current processor */
    Local_New=RME_CPU_LOCAL();
    Scheduler=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
80161978:	e596100c 	ldr	r1, [r6, #12]
    if(Scheduler->Sched.Local!=Local_New)
8016197c:	e3070000 	movw	r0, #28672	@ 0x7000
80161980:	e3480096 	movt	r0, #32918	@ 0x8096
80161984:	e5912014 	ldr	r2, [r1, #20]
80161988:	e1520000 	cmp	r2, r0
8016198c:	1a000079 	bne	80161b78 <_RME_Thd_Sched_Bind+0x344>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if we are trying to bind to ourself - prohibited */
    if(Thread==Scheduler)
80161990:	e1530001 	cmp	r3, r1
80161994:	0a000082 	beq	80161ba4 <_RME_Thd_Sched_Bind+0x370>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* See if the priority relationship is correct */
    if(Scheduler->Sched.Prio_Max<Prio)
80161998:	e5912024 	ldr	r2, [r1, #36]	@ 0x24
8016199c:	e59dc024 	ldr	ip, [sp, #36]	@ 0x24
801619a0:	e152000c 	cmp	r2, ip
801619a4:	3a00007c 	bcc	80161b9c <_RME_Thd_Sched_Bind+0x368>
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Check whether the coprocessor context attribute is compatible with this core */
    Hyp_Attr=Thread->Ctx.Hyp_Attr;
801619a8:	e5932044 	ldr	r2, [r3, #68]	@ 0x44
        RME_COV_MARKER();

        return RME_ERR_CPT_FLAG;
    }
#else
    if(RME_THD_ATTR(Hyp_Attr)!=0U)
801619ac:	e3d2c102 	bics	ip, r2, #-2147483648	@ 0x80000000
801619b0:	1a000075 	bne	80161b8c <_RME_Thd_Sched_Bind+0x358>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Check the hypervisor context buffer passed in to see whether it is good */
    if((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)!=0U))
801619b4:	e258c000 	subs	ip, r8, #0
801619b8:	e1a02fa2 	lsr	r2, r2, #31
801619bc:	13a0c001 	movne	ip, #1
801619c0:	e11c0002 	tst	ip, r2
801619c4:	0a00002a 	beq	80161a74 <_RME_Thd_Sched_Bind+0x240>
    {
        RME_COV_MARKER();
        
        /* Register save area must be aligned to word boundary */
        if(RME_IS_ALIGNED(Haddr)!=0U)
801619c8:	e2182003 	ands	r2, r8, #3
801619cc:	13a02001 	movne	r2, #1
        {
            RME_COV_MARKER();
            
            /* It needs to be safely accessible to the kernel as well */
#if(RME_HYP_VA_BASE!=0U)
            if(Haddr<RME_HYP_VA_BASE)
801619d0:	e378021e 	cmn	r8, #-536870911	@ 0xe0000001
801619d4:	83a0c000 	movhi	ip, #0
801619d8:	93a0c001 	movls	ip, #1
801619dc:	e192200c 	orrs	r2, r2, ip
801619e0:	1a000025 	bne	80161a7c <_RME_Thd_Sched_Bind+0x248>
            }
            else
            {
#endif
                End=Haddr+RME_REG_SIZE(RME_THD_ATTR(Thread->Ctx.Hyp_Attr));
                if((End<=Haddr)||(End>(RME_HYP_VA_BASE+RME_HYP_VA_SIZE)))
801619e4:	e3a02000 	mov	r2, #0
                End=Haddr+RME_REG_SIZE(RME_THD_ATTR(Thread->Ctx.Hyp_Attr));
801619e8:	e288c044 	add	ip, r8, #68	@ 0x44
                if((End<=Haddr)||(End>(RME_HYP_VA_BASE+RME_HYP_VA_SIZE)))
801619ec:	e3422002 	movt	r2, #8194	@ 0x2002
801619f0:	e15c0002 	cmp	ip, r2
801619f4:	9158000c 	cmpls	r8, ip
801619f8:	2a00001f 	bcs	80161a7c <_RME_Thd_Sched_Bind+0x248>
    if(*Ptr==Old)
801619fc:	e5932014 	ldr	r2, [r3, #20]
80161a00:	e3720001 	cmn	r2, #1
80161a04:	0a000034 	beq	80161adc <_RME_Thd_Sched_Bind+0x2a8>
                     (rme_ptr_t)Local_Old,
                     (rme_ptr_t)Local_New)==RME_CASFAIL)
    {
        RME_COV_MARKER();

        return RME_ERR_PTH_CONFLICT;
80161a08:	e3e000c9 	mvn	r0, #201	@ 0xc9
80161a0c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80161a10:	e5902014 	ldr	r2, [r0, #20]
80161a14:	e1a03421 	lsr	r3, r1, #8
80161a18:	e1530002 	cmp	r3, r2
80161a1c:	2a00002c 	bcs	80161ad4 <_RME_Thd_Sched_Bind+0x2a0>
80161a20:	e590900c 	ldr	r9, [r0, #12]
80161a24:	e0899283 	add	r9, r9, r3, lsl #5
80161a28:	e1a00009 	mov	r0, r9
80161a2c:	ebfffb33 	bl	80160700 <__RME_A7A_Read_Acquire>
80161a30:	e7e73850 	ubfx	r3, r0, #16, #8
80161a34:	e3530002 	cmp	r3, #2
80161a38:	0a000055 	beq	80161b94 <_RME_Thd_Sched_Bind+0x360>
80161a3c:	e1a00c20 	lsr	r0, r0, #24
80161a40:	e3500003 	cmp	r0, #3
80161a44:	1a000040 	bne	80161b4c <_RME_Thd_Sched_Bind+0x318>
80161a48:	e5993014 	ldr	r3, [r9, #20]
80161a4c:	e205507f 	and	r5, r5, #127	@ 0x7f
80161a50:	e1550003 	cmp	r5, r3
80161a54:	2a00001e 	bcs	80161ad4 <_RME_Thd_Sched_Bind+0x2a0>
80161a58:	e599100c 	ldr	r1, [r9, #12]
80161a5c:	eaffff80 	b	80161864 <_RME_Thd_Sched_Bind+0x30>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Sched,RME_CAP_TYPE_THD,
80161a60:	e5943014 	ldr	r3, [r4, #20]
80161a64:	e1560003 	cmp	r6, r3
80161a68:	2a000019 	bcs	80161ad4 <_RME_Thd_Sched_Bind+0x2a0>
80161a6c:	e594200c 	ldr	r2, [r4, #12]
80161a70:	eaffff99 	b	801618dc <_RME_Thd_Sched_Bind+0xa8>
    else if(((Haddr!=RME_NULL)&&((Hyp_Attr&RME_THD_HYP_FLAG)==0U))||
80161a74:	e15c0002 	cmp	ip, r2
80161a78:	0affffdf 	beq	801619fc <_RME_Thd_Sched_Bind+0x1c8>
                return RME_ERR_PTH_HADDR;
80161a7c:	e3e000ca 	mvn	r0, #202	@ 0xca
80161a80:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        Sig_Op=RME_NULL;
80161a84:	e3a07000 	mov	r7, #0
80161a88:	eaffffb6 	b	80161968 <_RME_Thd_Sched_Bind+0x134>
        RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
80161a8c:	e5942014 	ldr	r2, [r4, #20]
80161a90:	e1a03427 	lsr	r3, r7, #8
80161a94:	e1530002 	cmp	r3, r2
80161a98:	2a00000d 	bcs	80161ad4 <_RME_Thd_Sched_Bind+0x2a0>
80161a9c:	e594400c 	ldr	r4, [r4, #12]
80161aa0:	e0844283 	add	r4, r4, r3, lsl #5
80161aa4:	e1a00004 	mov	r0, r4
80161aa8:	ebfffb14 	bl	80160700 <__RME_A7A_Read_Acquire>
80161aac:	e7e73850 	ubfx	r3, r0, #16, #8
80161ab0:	e3530002 	cmp	r3, #2
80161ab4:	0a000036 	beq	80161b94 <_RME_Thd_Sched_Bind+0x360>
80161ab8:	e1a00c20 	lsr	r0, r0, #24
80161abc:	e3500003 	cmp	r0, #3
80161ac0:	1a000021 	bne	80161b4c <_RME_Thd_Sched_Bind+0x318>
80161ac4:	e5943014 	ldr	r3, [r4, #20]
80161ac8:	e207707f 	and	r7, r7, #127	@ 0x7f
80161acc:	e1570003 	cmp	r7, r3
80161ad0:	3affff97 	bcc	80161934 <_RME_Thd_Sched_Bind+0x100>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80161ad4:	e3e00002 	mvn	r0, #2
80161ad8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        *Ptr=New;
80161adc:	e5830014 	str	r0, [r3, #20]
        RME_COV_MARKER();
        /* No action required */
    }
    
    /* Increase the reference count of the scheduler thread struct - same core */
    Scheduler->Sched.Sched_Ref++;
80161ae0:	e5912030 	ldr	r2, [r1, #48]	@ 0x30
80161ae4:	e2822001 	add	r2, r2, #1
80161ae8:	e5812030 	str	r2, [r1, #48]	@ 0x30
    Thread->Sched.Sched_Thd=Scheduler;
    Thread->Sched.Prio=Prio;
    Thread->Sched.TID=(rme_ptr_t)TID;
    
    /* The state must be TIMEOUT or EXCPEND at this point */
    RME_ASSERT((Thread->Sched.State==RME_THD_TIMEOUT)||
80161aec:	e593201c 	ldr	r2, [r3, #28]
    Thread->Sched.Sched_Thd=Scheduler;
80161af0:	e5831034 	str	r1, [r3, #52]	@ 0x34
    Thread->Sched.Prio=Prio;
80161af4:	e59d1024 	ldr	r1, [sp, #36]	@ 0x24
    RME_ASSERT((Thread->Sched.State==RME_THD_TIMEOUT)||
80161af8:	e2422002 	sub	r2, r2, #2
80161afc:	e3520001 	cmp	r2, #1
    Thread->Sched.Prio=Prio;
80161b00:	e5831020 	str	r1, [r3, #32]
    Thread->Sched.TID=(rme_ptr_t)TID;
80161b04:	e59d1020 	ldr	r1, [sp, #32]
80161b08:	e5831010 	str	r1, [r3, #16]
    RME_ASSERT((Thread->Sched.State==RME_THD_TIMEOUT)||
80161b0c:	8a000010 	bhi	80161b54 <_RME_Thd_Sched_Bind+0x320>
               (Thread->Sched.State==RME_THD_EXCPEND));

    /* Tie the signal endpoint to it if not zero */
    if(Sig_Op==0U)
80161b10:	e3570000 	cmp	r7, #0
    {
        RME_COV_MARKER();

        Thread->Sched.Sched_Sig=0U;
80161b14:	05837038 	streq	r7, [r3, #56]	@ 0x38
    if(Sig_Op==0U)
80161b18:	0a000006 	beq	80161b38 <_RME_Thd_Sched_Bind+0x304>
    else
    {
        RME_COV_MARKER();

        /* Convert to root cap */
        Thread->Sched.Sched_Sig=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
80161b1c:	e1d720b0 	ldrh	r2, [r7]
80161b20:	e3520000 	cmp	r2, #0
80161b24:	15977004 	ldrne	r7, [r7, #4]
80161b28:	e5837038 	str	r7, [r3, #56]	@ 0x38
    Old=(rme_cnt_t)(*Ptr);
80161b2c:	e5972004 	ldr	r2, [r7, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80161b30:	e2822001 	add	r2, r2, #1
80161b34:	e5872004 	str	r2, [r7, #4]
        /* Increase refcnt */
        RME_FETCH_ADD(&(Thread->Sched.Sched_Sig->Head.Root_Ref),1U);
    }
    
    /* Set hypervisor context address if we're hypervisor-managed */
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)!=0U)
80161b38:	e5932044 	ldr	r2, [r3, #68]	@ 0x44
80161b3c:	e3520000 	cmp	r2, #0
80161b40:	ba00000e 	blt	80161b80 <_RME_Thd_Sched_Bind+0x34c>
    {
        RME_COV_MARKER();
        /* No action required */
    }
    
    return 0;
80161b44:	e3a00000 	mov	r0, #0
}
80161b48:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80161b4c:	e3e00001 	mvn	r0, #1
80161b50:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_ASSERT((Thread->Sched.State==RME_THD_TIMEOUT)||
80161b54:	e306308c 	movw	r3, #24716	@ 0x608c
80161b58:	e3062098 	movw	r2, #24728	@ 0x6098
80161b5c:	e3483016 	movt	r3, #32790	@ 0x8016
80161b60:	e30600a4 	movw	r0, #24740	@ 0x60a4
80161b64:	e3482016 	movt	r2, #32790	@ 0x8016
80161b68:	e3011620 	movw	r1, #5664	@ 0x1620
80161b6c:	e3480016 	movt	r0, #32790	@ 0x8016
80161b70:	ebfffea8 	bl	80161618 <RME_Log>
80161b74:	eafffffe 	b	80161b74 <_RME_Thd_Sched_Bind+0x340>
        return RME_ERR_PTH_INVSTATE;
80161b78:	e3e000cb 	mvn	r0, #203	@ 0xcb
80161b7c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)Haddr;
80161b80:	e5838048 	str	r8, [r3, #72]	@ 0x48
    return 0;
80161b84:	e3a00000 	mov	r0, #0
80161b88:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
80161b8c:	e3e00006 	mvn	r0, #6
80161b90:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80161b94:	e3e00008 	mvn	r0, #8
80161b98:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return RME_ERR_PTH_PRIO;
80161b9c:	e3e000cc 	mvn	r0, #204	@ 0xcc
80161ba0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return RME_ERR_PTH_NOTIF;
80161ba4:	e3e000ce 	mvn	r0, #206	@ 0xce
80161ba8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

80161bac <_RME_Inv_Ret>:
{
    struct RME_Thd_Struct* Thread;
    struct RME_Inv_Struct* Invocation;

    /* See if we can return; If we can, get the structure */
    Thread=RME_CPU_LOCAL()->Thd_Cur;
80161bac:	e3073000 	movw	r3, #28672	@ 0x7000
80161bb0:	e3483096 	movt	r3, #32918	@ 0x8096
{
80161bb4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    Thread=RME_CPU_LOCAL()->Thd_Cur;
80161bb8:	e5936004 	ldr	r6, [r3, #4]
    Invocation=RME_INVSTK_TOP(Thread);
80161bbc:	e1a05006 	mov	r5, r6
80161bc0:	e5b5404c 	ldr	r4, [r5, #76]!	@ 0x4c
    if(RME_UNLIKELY(Invocation==RME_NULL))
80161bc4:	e3540000 	cmp	r4, #0
80161bc8:	11540005 	cmpne	r4, r5
80161bcc:	03a0a001 	moveq	sl, #1
80161bd0:	13a0a000 	movne	sl, #0
80161bd4:	0a000053 	beq	80161d28 <_RME_Inv_Ret+0x17c>
        RME_COV_MARKER();
        /* No action required */
    }

    /* See if this port allows return-on-fault */
    if(RME_UNLIKELY((Is_Exc!=0U)&&(Invocation->Is_Exc_Ret==0U)))
80161bd8:	e3520000 	cmp	r2, #0
80161bdc:	e1a08000 	mov	r8, r0
80161be0:	e1a09001 	mov	r9, r1
80161be4:	e1a07002 	mov	r7, r2
80161be8:	0a00002a 	beq	80161c98 <_RME_Inv_Ret+0xec>
80161bec:	e5943018 	ldr	r3, [r4, #24]
80161bf0:	e3530000 	cmp	r3, #0
80161bf4:	0a00004e 	beq	80161d34 <_RME_Inv_Ret+0x188>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Pop it from the stack */
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
80161bf8:	e5943004 	ldr	r3, [r4, #4]
80161bfc:	e1a01004 	mov	r1, r4
80161c00:	e491201c 	ldr	r2, [r1], #28
    Next->Prev=Prev;
80161c04:	e5823004 	str	r3, [r2, #4]
    Prev->Next=Next;
80161c08:	e5832000 	str	r2, [r3]
    /* Decrease invocation depth - no atomic operation needed */
    Thread->Ctx.Invstk_Depth--;
80161c0c:	e5963054 	ldr	r3, [r6, #84]	@ 0x54
80161c10:	e2433001 	sub	r3, r3, #1
80161c14:	e5863054 	str	r3, [r6, #84]	@ 0x54

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well. */
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
80161c18:	eb00109d 	bl	80165e94 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
80161c1c:	e1a01009 	mov	r1, r9
80161c20:	e1a00008 	mov	r0, r8
80161c24:	eb00109f 	bl	80165ea8 <__RME_Inv_Retval_Set>

    /* We have successfully returned, set the invocation as inactive. We need
     * a barrier here to avoid potential destruction of the return value. */
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
80161c28:	e1a0100a 	mov	r1, sl
80161c2c:	e284000c 	add	r0, r4, #12
80161c30:	ebfffab5 	bl	8016070c <__RME_A7A_Write_Release>
    /* Decide the system call's return value */
    if(RME_UNLIKELY(Is_Exc!=0U))
    {
        RME_COV_MARKER();

        __RME_Svc_Retval_Set(Reg, RME_ERR_SIV_FAULT);
80161c34:	e30f1ed2 	movw	r1, #65234	@ 0xfed2
80161c38:	e1a00008 	mov	r0, r8
80161c3c:	e34f1fff 	movt	r1, #65535	@ 0xffff
80161c40:	eb001066 	bl	80165de0 <__RME_Svc_Retval_Set>

        __RME_Svc_Retval_Set(Reg,0);
    }

    /* Same assumptions as in invocation activation */
    Invocation=RME_INVSTK_TOP(Thread);
80161c44:	e596304c 	ldr	r3, [r6, #76]	@ 0x4c
    if(Invocation!=RME_NULL)
80161c48:	e1550003 	cmp	r5, r3
80161c4c:	13530000 	cmpne	r3, #0
80161c50:	1a000026 	bne	80161cf0 <_RME_Inv_Ret+0x144>
    else
    {
        RME_COV_MARKER();
        
#if(RME_PGT_RAW_ENABLE==0U)
        RME_ASSERT(RME_CAP_IS_ROOT(Thread->Sched.Prc->Pgt)!=0U);
80161c54:	e596302c 	ldr	r3, [r6, #44]	@ 0x2c
80161c58:	e5930018 	ldr	r0, [r3, #24]
80161c5c:	e1d040b0 	ldrh	r4, [r0]
80161c60:	e3540000 	cmp	r4, #0
80161c64:	0a000008 	beq	80161c8c <_RME_Inv_Ret+0xe0>
80161c68:	e306308c 	movw	r3, #24716	@ 0x608c
80161c6c:	e3062098 	movw	r2, #24728	@ 0x6098
80161c70:	e3483016 	movt	r3, #32790	@ 0x8016
80161c74:	e30600a4 	movw	r0, #24740	@ 0x60a4
80161c78:	e3482016 	movt	r2, #32790	@ 0x8016
80161c7c:	e3011e4a 	movw	r1, #7754	@ 0x1e4a
80161c80:	e3480016 	movt	r0, #32790	@ 0x8016
80161c84:	ebfffe63 	bl	80161618 <RME_Log>
80161c88:	eafffffe 	b	80161c88 <_RME_Inv_Ret+0xdc>
#endif
        __RME_Pgt_Set(Thread->Sched.Prc->Pgt);
80161c8c:	eb0010cf 	bl	80165fd0 <__RME_Pgt_Set>
    }
    
    return 0;
80161c90:	e1a00004 	mov	r0, r4
80161c94:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
80161c98:	e5943004 	ldr	r3, [r4, #4]
80161c9c:	e1a01004 	mov	r1, r4
80161ca0:	e491201c 	ldr	r2, [r1], #28
    Next->Prev=Prev;
80161ca4:	e5823004 	str	r3, [r2, #4]
    Prev->Next=Next;
80161ca8:	e5832000 	str	r2, [r3]
    Thread->Ctx.Invstk_Depth--;
80161cac:	e5963054 	ldr	r3, [r6, #84]	@ 0x54
80161cb0:	e2433001 	sub	r3, r3, #1
80161cb4:	e5863054 	str	r3, [r6, #84]	@ 0x54
    __RME_Inv_Reg_Restore(Reg,&(Invocation->Ret));
80161cb8:	eb001075 	bl	80165e94 <__RME_Inv_Reg_Restore>
    __RME_Inv_Retval_Set(Reg,(rme_ret_t)Retval);
80161cbc:	e1a01009 	mov	r1, r9
80161cc0:	e1a00008 	mov	r0, r8
80161cc4:	eb001077 	bl	80165ea8 <__RME_Inv_Retval_Set>
    RME_WRITE_RELEASE(&(Invocation->Thd_Act),0U);
80161cc8:	e1a01007 	mov	r1, r7
80161ccc:	e284000c 	add	r0, r4, #12
80161cd0:	ebfffa8d 	bl	8016070c <__RME_A7A_Write_Release>
        __RME_Svc_Retval_Set(Reg,0);
80161cd4:	e1a01007 	mov	r1, r7
80161cd8:	e1a00008 	mov	r0, r8
80161cdc:	eb00103f 	bl	80165de0 <__RME_Svc_Retval_Set>
    Invocation=RME_INVSTK_TOP(Thread);
80161ce0:	e596304c 	ldr	r3, [r6, #76]	@ 0x4c
    if(Invocation!=RME_NULL)
80161ce4:	e1550003 	cmp	r5, r3
80161ce8:	13530000 	cmpne	r3, #0
80161cec:	0affffd8 	beq	80161c54 <_RME_Inv_Ret+0xa8>
        RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
80161cf0:	e5933008 	ldr	r3, [r3, #8]
80161cf4:	e5930018 	ldr	r0, [r3, #24]
80161cf8:	e1d040b0 	ldrh	r4, [r0]
80161cfc:	e3540000 	cmp	r4, #0
80161d00:	0affffe1 	beq	80161c8c <_RME_Inv_Ret+0xe0>
80161d04:	e306308c 	movw	r3, #24716	@ 0x608c
80161d08:	e3062098 	movw	r2, #24728	@ 0x6098
80161d0c:	e3483016 	movt	r3, #32790	@ 0x8016
80161d10:	e30600a4 	movw	r0, #24740	@ 0x60a4
80161d14:	e3482016 	movt	r2, #32790	@ 0x8016
80161d18:	e3011e41 	movw	r1, #7745	@ 0x1e41
80161d1c:	e3480016 	movt	r0, #32790	@ 0x8016
80161d20:	ebfffe3c 	bl	80161618 <RME_Log>
80161d24:	eafffffe 	b	80161d24 <_RME_Inv_Ret+0x178>
        return RME_ERR_SIV_EMPTY;
80161d28:	e30f0ed0 	movw	r0, #65232	@ 0xfed0
80161d2c:	e34f0fff 	movt	r0, #65535	@ 0xffff
80161d30:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        return RME_ERR_SIV_FAULT;
80161d34:	e30f0ed2 	movw	r0, #65234	@ 0xfed2
80161d38:	e34f0fff 	movt	r0, #65535	@ 0xffff
}
80161d3c:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

80161d40 <_RME_Run_Del>:
    Local=Thd->Sched.Local;
80161d40:	e5902014 	ldr	r2, [r0, #20]
    Prio=Thd->Sched.Prio;
80161d44:	e5901020 	ldr	r1, [r0, #32]
    RME_ASSERT(Local!=RME_THD_FREE);
80161d48:	e3720001 	cmn	r2, #1
80161d4c:	0a000012 	beq	80161d9c <_RME_Run_Del+0x5c>
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
80161d50:	e8900009 	ldm	r0, {r0, r3}
    Next->Prev=Prev;
80161d54:	e5803004 	str	r3, [r0, #4]
    Prev->Next=Next;
80161d58:	e5830000 	str	r0, [r3]
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
80161d5c:	e2813002 	add	r3, r1, #2
80161d60:	e1a03183 	lsl	r3, r3, #3
80161d64:	e0820003 	add	r0, r2, r3
80161d68:	e2833004 	add	r3, r3, #4
80161d6c:	e0823003 	add	r3, r2, r3
80161d70:	e5900004 	ldr	r0, [r0, #4]
80161d74:	e1500003 	cmp	r0, r3
80161d78:	112fff1e 	bxne	lr
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
80161d7c:	e1a032a1 	lsr	r3, r1, #5
80161d80:	e3a00001 	mov	r0, #1
80161d84:	e201101f 	and	r1, r1, #31
80161d88:	e0822103 	add	r2, r2, r3, lsl #2
80161d8c:	e5923010 	ldr	r3, [r2, #16]
80161d90:	e1c31110 	bic	r1, r3, r0, lsl r1
80161d94:	e5821010 	str	r1, [r2, #16]
        RME_COV_MARKER();
80161d98:	e12fff1e 	bx	lr
    RME_ASSERT(Local!=RME_THD_FREE);
80161d9c:	e306308c 	movw	r3, #24716	@ 0x608c
80161da0:	e3062098 	movw	r2, #24728	@ 0x6098
80161da4:	e3483016 	movt	r3, #32790	@ 0x8016
80161da8:	e30600a4 	movw	r0, #24740	@ 0x60a4
80161dac:	e3482016 	movt	r2, #32790	@ 0x8016
80161db0:	e3011155 	movw	r1, #4437	@ 0x1155
80161db4:	e3480016 	movt	r0, #32790	@ 0x8016
{
80161db8:	e92d4010 	push	{r4, lr}
    RME_ASSERT(Local!=RME_THD_FREE);
80161dbc:	ebfffe15 	bl	80161618 <RME_Log>
80161dc0:	eafffffe 	b	80161dc0 <_RME_Run_Del+0x80>

80161dc4 <_RME_Run_Ins>:
    Local=Thd->Sched.Local;
80161dc4:	e5903014 	ldr	r3, [r0, #20]
    Prio=Thd->Sched.Prio;
80161dc8:	e5902020 	ldr	r2, [r0, #32]
    RME_ASSERT(Local!=RME_THD_FREE);
80161dcc:	e3730001 	cmn	r3, #1
80161dd0:	0a00000e 	beq	80161e10 <_RME_Run_Ins+0x4c>
    _RME_List_Ins(&(Thd->Sched.Run),
80161dd4:	e0831182 	add	r1, r3, r2, lsl #3
80161dd8:	e2811014 	add	r1, r1, #20
80161ddc:	e591c004 	ldr	ip, [r1, #4]
    Next->Prev=New;
80161de0:	e5810004 	str	r0, [r1, #4]
    New->Next=Next;
80161de4:	e5801000 	str	r1, [r0]
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
80161de8:	e1a012a2 	lsr	r1, r2, #5
80161dec:	e202201f 	and	r2, r2, #31
    New->Prev=Prev;
80161df0:	e580c004 	str	ip, [r0, #4]
80161df4:	e0833101 	add	r3, r3, r1, lsl #2
    Prev->Next=New;
80161df8:	e58c0000 	str	r0, [ip]
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
80161dfc:	e3a00001 	mov	r0, #1
80161e00:	e5931010 	ldr	r1, [r3, #16]
80161e04:	e1812210 	orr	r2, r1, r0, lsl r2
80161e08:	e5832010 	str	r2, [r3, #16]
80161e0c:	e12fff1e 	bx	lr
    RME_ASSERT(Local!=RME_THD_FREE);
80161e10:	e306308c 	movw	r3, #24716	@ 0x608c
80161e14:	e3062098 	movw	r2, #24728	@ 0x6098
80161e18:	e3483016 	movt	r3, #32790	@ 0x8016
80161e1c:	e30600a4 	movw	r0, #24740	@ 0x60a4
80161e20:	e3482016 	movt	r2, #32790	@ 0x8016
80161e24:	e301113b 	movw	r1, #4411	@ 0x113b
80161e28:	e3480016 	movt	r0, #32790	@ 0x8016
{
80161e2c:	e92d4010 	push	{r4, lr}
    RME_ASSERT(Local!=RME_THD_FREE);
80161e30:	ebfffdf8 	bl	80161618 <RME_Log>
80161e34:	eafffffe 	b	80161e34 <_RME_Run_Ins+0x70>

80161e38 <_RME_Run_Swt.isra.0>:
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
80161e38:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
80161e3c:	e1a06000 	mov	r6, r0
    Reg_New=&(Thd_New->Ctx.Reg->Reg);
80161e40:	e5927048 	ldr	r7, [r2, #72]	@ 0x48
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
80161e44:	e1a05001 	mov	r5, r1
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
80161e48:	e5910048 	ldr	r0, [r1, #72]	@ 0x48
80161e4c:	e1a01006 	mov	r1, r6
static rme_ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
80161e50:	e1a04002 	mov	r4, r2
    __RME_Thd_Reg_Copy(Reg_Cur,Reg);
80161e54:	eb000fe8 	bl	80165dfc <__RME_Thd_Reg_Copy>
    __RME_Thd_Reg_Copy(Reg,Reg_New);
80161e58:	e1a01007 	mov	r1, r7
80161e5c:	e1a00006 	mov	r0, r6
80161e60:	eb000fe5 	bl	80165dfc <__RME_Thd_Reg_Copy>
    Inv_Top=RME_INVSTK_TOP(Thd);
80161e64:	e1a03005 	mov	r3, r5
80161e68:	e5b3204c 	ldr	r2, [r3, #76]!	@ 0x4c
    if(Inv_Top==RME_NULL)
80161e6c:	e3520000 	cmp	r2, #0
80161e70:	11520003 	cmpne	r2, r3
        return Inv_Top->Prc->Pgt;
80161e74:	15923008 	ldrne	r3, [r2, #8]
        return Thd->Sched.Prc->Pgt;
80161e78:	0595302c 	ldreq	r3, [r5, #44]	@ 0x2c
        return Inv_Top->Prc->Pgt;
80161e7c:	e5931018 	ldr	r1, [r3, #24]
    Inv_Top=RME_INVSTK_TOP(Thd);
80161e80:	e1a03004 	mov	r3, r4
80161e84:	e5b3204c 	ldr	r2, [r3, #76]!	@ 0x4c
    if(Inv_Top==RME_NULL)
80161e88:	e3520000 	cmp	r2, #0
80161e8c:	11520003 	cmpne	r2, r3
        return Thd->Sched.Prc->Pgt;
80161e90:	0594302c 	ldreq	r3, [r4, #44]	@ 0x2c
        return Inv_Top->Prc->Pgt;
80161e94:	15923008 	ldrne	r3, [r2, #8]
80161e98:	e5930018 	ldr	r0, [r3, #24]
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_Cur)!=0U);
80161e9c:	e1d130b0 	ldrh	r3, [r1]
80161ea0:	e3530000 	cmp	r3, #0
80161ea4:	1a000011 	bne	80161ef0 <_RME_Run_Swt.isra.0+0xb8>
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_New)!=0U);
80161ea8:	e1d030b0 	ldrh	r3, [r0]
80161eac:	e3530000 	cmp	r3, #0
80161eb0:	1a000005 	bne	80161ecc <_RME_Run_Swt.isra.0+0x94>
    if(RME_CAP_GETOBJ(Pgt_Cur,rme_ptr_t)!=RME_CAP_GETOBJ(Pgt_New,rme_ptr_t))
80161eb4:	e591200c 	ldr	r2, [r1, #12]
80161eb8:	e590300c 	ldr	r3, [r0, #12]
80161ebc:	e1520003 	cmp	r2, r3
80161ec0:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
}
80161ec4:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
        __RME_Pgt_Set(Pgt_New);
80161ec8:	ea001040 	b	80165fd0 <__RME_Pgt_Set>
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_New)!=0U);
80161ecc:	e306308c 	movw	r3, #24716	@ 0x608c
80161ed0:	e3062098 	movw	r2, #24728	@ 0x6098
80161ed4:	e3483016 	movt	r3, #32790	@ 0x8016
80161ed8:	e30600a4 	movw	r0, #24740	@ 0x60a4
80161edc:	e3482016 	movt	r2, #32790	@ 0x8016
80161ee0:	e301120c 	movw	r1, #4620	@ 0x120c
80161ee4:	e3480016 	movt	r0, #32790	@ 0x8016
80161ee8:	ebfffdca 	bl	80161618 <RME_Log>
80161eec:	eafffffe 	b	80161eec <_RME_Run_Swt.isra.0+0xb4>
    RME_ASSERT(RME_CAP_IS_ROOT(Pgt_Cur)!=0U);
80161ef0:	e306308c 	movw	r3, #24716	@ 0x608c
80161ef4:	e3062098 	movw	r2, #24728	@ 0x6098
80161ef8:	e3483016 	movt	r3, #32790	@ 0x8016
80161efc:	e30600a4 	movw	r0, #24740	@ 0x60a4
80161f00:	e3482016 	movt	r2, #32790	@ 0x8016
80161f04:	e301120b 	movw	r1, #4619	@ 0x120b
80161f08:	e3480016 	movt	r0, #32790	@ 0x8016
80161f0c:	ebfffdc1 	bl	80161618 <RME_Log>
80161f10:	eafffffe 	b	80161f10 <_RME_Run_Swt.isra.0+0xd8>

80161f14 <_RME_Run_Notif>:
{
80161f14:	e92d4070 	push	{r4, r5, r6, lr}
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
80161f18:	e2802008 	add	r2, r0, #8
80161f1c:	e5903008 	ldr	r3, [r0, #8]
80161f20:	e1530002 	cmp	r3, r2
80161f24:	0a000012 	beq	80161f74 <_RME_Run_Notif+0x60>
    if(Thd->Sched.Sched_Sig!=0U)
80161f28:	e5904038 	ldr	r4, [r0, #56]	@ 0x38
80161f2c:	e3540000 	cmp	r4, #0
80161f30:	08bd8070 	popeq	{r4, r5, r6, pc}
    Thd_Sig=Cap_Sig->Thd;
80161f34:	e5945018 	ldr	r5, [r4, #24]
    if(Thd_Sig!=RME_NULL)
80161f38:	e3550000 	cmp	r5, #0
80161f3c:	0a000004 	beq	80161f54 <_RME_Run_Notif+0x40>
        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
80161f40:	e5952014 	ldr	r2, [r5, #20]
80161f44:	e3073000 	movw	r3, #28672	@ 0x7000
80161f48:	e3483096 	movt	r3, #32918	@ 0x8096
80161f4c:	e1520003 	cmp	r2, r3
80161f50:	0a00000f 	beq	80161f94 <_RME_Run_Notif+0x80>
    Old=(rme_cnt_t)(*Ptr);
80161f54:	e5943014 	ldr	r3, [r4, #20]
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
80161f58:	e373010a 	cmn	r3, #-2147483646	@ 0x80000002
    *Ptr=(rme_ptr_t)(Old+Addend);
80161f5c:	e2833001 	add	r3, r3, #1
80161f60:	e5843014 	str	r3, [r4, #20]
    Old=(rme_cnt_t)(*Ptr);
80161f64:	85943014 	ldrhi	r3, [r4, #20]
    *Ptr=(rme_ptr_t)(Old+Addend);
80161f68:	82433001 	subhi	r3, r3, #1
80161f6c:	85843014 	strhi	r3, [r4, #20]
}
80161f70:	e8bd8070 	pop	{r4, r5, r6, pc}
    Sched_Thd=Thd->Sched.Sched_Thd;
80161f74:	e5902034 	ldr	r2, [r0, #52]	@ 0x34
        _RME_List_Ins(&(Thd->Sched.Notif), 
80161f78:	e5921040 	ldr	r1, [r2, #64]	@ 0x40
80161f7c:	e282c03c 	add	ip, r2, #60	@ 0x3c
    Next->Prev=New;
80161f80:	e5823040 	str	r3, [r2, #64]	@ 0x40
    New->Next=Next;
80161f84:	e580c008 	str	ip, [r0, #8]
    New->Prev=Prev;
80161f88:	e580100c 	str	r1, [r0, #12]
    Prev->Next=New;
80161f8c:	e5813000 	str	r3, [r1]
}
80161f90:	eaffffe4 	b	80161f28 <_RME_Run_Notif+0x14>
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
80161f94:	e5950048 	ldr	r0, [r5, #72]	@ 0x48
80161f98:	e3a01001 	mov	r1, #1
80161f9c:	eb000f8f 	bl	80165de0 <__RME_Svc_Retval_Set>
        if(Thd_Sig->Sched.Slice!=0U)
80161fa0:	e5953018 	ldr	r3, [r5, #24]
80161fa4:	e3530000 	cmp	r3, #0
80161fa8:	0a000014 	beq	80162000 <_RME_Run_Notif+0xec>
    Local=Thd->Sched.Local;
80161fac:	e5953014 	ldr	r3, [r5, #20]
            Thd_Sig->Sched.State=RME_THD_READY;
80161fb0:	e3a01000 	mov	r1, #0
    Prio=Thd->Sched.Prio;
80161fb4:	e5952020 	ldr	r2, [r5, #32]
            Thd_Sig->Sched.State=RME_THD_READY;
80161fb8:	e585101c 	str	r1, [r5, #28]
    RME_ASSERT(Local!=RME_THD_FREE);
80161fbc:	e3730001 	cmn	r3, #1
80161fc0:	0a000015 	beq	8016201c <_RME_Run_Notif+0x108>
    _RME_List_Ins(&(Thd->Sched.Run),
80161fc4:	e083c182 	add	ip, r3, r2, lsl #3
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
80161fc8:	e1a012a2 	lsr	r1, r2, #5
80161fcc:	e202201f 	and	r2, r2, #31
    _RME_List_Ins(&(Thd->Sched.Run),
80161fd0:	e59c0018 	ldr	r0, [ip, #24]
80161fd4:	e0831101 	add	r1, r3, r1, lsl #2
80161fd8:	e28c3014 	add	r3, ip, #20
    Next->Prev=New;
80161fdc:	e58c5018 	str	r5, [ip, #24]
    New->Prev=Prev;
80161fe0:	e5850004 	str	r0, [r5, #4]
    New->Next=Next;
80161fe4:	e5853000 	str	r3, [r5]
    Prev->Next=New;
80161fe8:	e5805000 	str	r5, [r0]
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
80161fec:	e3a00001 	mov	r0, #1
80161ff0:	e5913010 	ldr	r3, [r1, #16]
80161ff4:	e1832210 	orr	r2, r3, r0, lsl r2
80161ff8:	e5812010 	str	r2, [r1, #16]
}
80161ffc:	ea000003 	b	80162010 <_RME_Run_Notif+0xfc>
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
80162000:	e3a03002 	mov	r3, #2
            _RME_Run_Notif(Thd_Sig);
80162004:	e1a00005 	mov	r0, r5
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
80162008:	e585301c 	str	r3, [r5, #28]
            _RME_Run_Notif(Thd_Sig);
8016200c:	ebffffc0 	bl	80161f14 <_RME_Run_Notif>
        Cap_Sig->Thd=RME_NULL;
80162010:	e3a03000 	mov	r3, #0
80162014:	e5843018 	str	r3, [r4, #24]
80162018:	e8bd8070 	pop	{r4, r5, r6, pc}
    RME_ASSERT(Local!=RME_THD_FREE);
8016201c:	e306308c 	movw	r3, #24716	@ 0x608c
80162020:	e3062098 	movw	r2, #24728	@ 0x6098
80162024:	e3483016 	movt	r3, #32790	@ 0x8016
80162028:	e30600a4 	movw	r0, #24740	@ 0x60a4
8016202c:	e3482016 	movt	r2, #32790	@ 0x8016
80162030:	e301113b 	movw	r1, #4411	@ 0x113b
80162034:	e3480016 	movt	r0, #32790	@ 0x8016
80162038:	ebfffd76 	bl	80161618 <RME_Log>
8016203c:	eafffffe 	b	8016203c <_RME_Run_Notif+0x128>

80162040 <RME_Kmain>:
{
80162040:	e92d4010 	push	{r4, lr}
    __RME_Int_Disable();
80162044:	ebfff9b3 	bl	80160718 <__RME_Int_Disable>
    __RME_Lowlvl_Init();
80162048:	eb000ec8 	bl	80165b70 <__RME_Lowlvl_Init>
    __RME_Pgt_Kom_Init();
8016204c:	eb000f45 	bl	80165d68 <__RME_Pgt_Kom_Init>
    for(Count=0U;Count<Word;Count++)
80162050:	e3073000 	movw	r3, #28672	@ 0x7000
        RME_KOT_VA_BASE[Count]=0U;
80162054:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
80162058:	e3483016 	movt	r3, #32790	@ 0x8016
8016205c:	e2832502 	add	r2, r3, #8388608	@ 0x800000
80162060:	f4430a8d 	vst1.32	{d16-d17}, [r3]!
    for(Count=0U;Count<Word;Count++)
80162064:	e1520003 	cmp	r2, r3
80162068:	1afffffc 	bne	80162060 <RME_Kmain+0x20>
    __RME_Boot();
8016206c:	eb000f3f 	bl	80165d70 <__RME_Boot>
}
80162070:	e3a00000 	mov	r0, #0
80162074:	e8bd8010 	pop	{r4, pc}

80162078 <_RME_Tim_Handler>:
{
80162078:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    Thd_Cur=Local->Thd_Cur;
8016207c:	e3074000 	movw	r4, #28672	@ 0x7000
80162080:	e3484096 	movt	r4, #32918	@ 0x8096
{
80162084:	e1a06000 	mov	r6, r0
    Thd_Cur=Local->Thd_Cur;
80162088:	e5942004 	ldr	r2, [r4, #4]
    if(Thd_Cur->Sched.Slice<RME_THD_INF_TIME)
8016208c:	e5923018 	ldr	r3, [r2, #24]
80162090:	e373010e 	cmn	r3, #-2147483645	@ 0x80000003
80162094:	8a000003 	bhi	801620a8 <_RME_Tim_Handler+0x30>
        if(Slice<Thd_Cur->Sched.Slice)
80162098:	e1530001 	cmp	r3, r1
8016209c:	9a00003b 	bls	80162190 <_RME_Tim_Handler+0x118>
            Thd_Cur->Sched.Slice-=Slice;
801620a0:	e0431001 	sub	r1, r3, r1
801620a4:	e5821018 	str	r1, [r2, #24]
    _RME_Kern_Snd(Local->Sig_Tim);
801620a8:	e5945008 	ldr	r5, [r4, #8]
    Thd_Sig=Cap_Sig->Thd;
801620ac:	e5957018 	ldr	r7, [r5, #24]
    if(Thd_Sig!=RME_NULL)
801620b0:	e3570000 	cmp	r7, #0
801620b4:	0a000002 	beq	801620c4 <_RME_Tim_Handler+0x4c>
        if(Thd_Sig->Sched.Local==RME_CPU_LOCAL())
801620b8:	e5973014 	ldr	r3, [r7, #20]
801620bc:	e1530004 	cmp	r3, r4
801620c0:	0a000049 	beq	801621ec <_RME_Tim_Handler+0x174>
    Old=(rme_cnt_t)(*Ptr);
801620c4:	e5953014 	ldr	r3, [r5, #20]
        if(RME_FETCH_ADD(&(Cap_Sig->Sig_Num),1U)>=RME_MAX_SIG_NUM)
801620c8:	e373010a 	cmn	r3, #-2147483646	@ 0x80000002
    *Ptr=(rme_ptr_t)(Old+Addend);
801620cc:	e2833001 	add	r3, r3, #1
801620d0:	e5853014 	str	r3, [r5, #20]
    Old=(rme_cnt_t)(*Ptr);
801620d4:	85953014 	ldrhi	r3, [r5, #20]
    *Ptr=(rme_ptr_t)(Old+Addend);
801620d8:	82433001 	subhi	r3, r3, #1
801620dc:	85853014 	strhi	r3, [r5, #20]
        if(Local->Run.Bitmap[Count]!=0U)
801620e0:	e5940010 	ldr	r0, [r4, #16]
801620e4:	e3500000 	cmp	r0, #0
801620e8:	1a000008 	bne	80162110 <_RME_Tim_Handler+0x98>
    RME_ASSERT(Count>=0);
801620ec:	e306308c 	movw	r3, #24716	@ 0x608c
801620f0:	e3062098 	movw	r2, #24728	@ 0x6098
801620f4:	e3483016 	movt	r3, #32790	@ 0x8016
801620f8:	e30600a4 	movw	r0, #24740	@ 0x60a4
801620fc:	e3482016 	movt	r2, #32790	@ 0x8016
80162100:	e3011186 	movw	r1, #4486	@ 0x1186
80162104:	e3480016 	movt	r0, #32790	@ 0x8016
80162108:	ebfffd42 	bl	80161618 <RME_Log>
8016210c:	eafffffe 	b	8016210c <_RME_Tim_Handler+0x94>
    Prio=RME_MSB_GET(Local->Run.Bitmap[Count]);
80162110:	ebfff988 	bl	80160738 <__RME_A7A_MSB_Get>
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
80162114:	e0840180 	add	r0, r4, r0, lsl #3
80162118:	e5905014 	ldr	r5, [r0, #20]
    RME_ASSERT(Thd_New!=RME_NULL);
8016211c:	e3550000 	cmp	r5, #0
80162120:	0a00004c 	beq	80162258 <_RME_Tim_Handler+0x1e0>
    Thd_Cur=Local->Thd_Cur;
80162124:	e5941004 	ldr	r1, [r4, #4]
    if(Thd_New==Thd_Cur)
80162128:	e1510005 	cmp	r1, r5
8016212c:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
    if(Thd_Cur->Sched.State==RME_THD_READY)
80162130:	e591301c 	ldr	r3, [r1, #28]
80162134:	e3530000 	cmp	r3, #0
80162138:	1a000003 	bne	8016214c <_RME_Tim_Handler+0xd4>
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
8016213c:	e5952020 	ldr	r2, [r5, #32]
80162140:	e5913020 	ldr	r3, [r1, #32]
80162144:	e1520003 	cmp	r2, r3
80162148:	98bd81f0 	popls	{r4, r5, r6, r7, r8, pc}
    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
8016214c:	e595301c 	ldr	r3, [r5, #28]
80162150:	e3530000 	cmp	r3, #0
80162154:	0a000008 	beq	8016217c <_RME_Tim_Handler+0x104>
80162158:	e306308c 	movw	r3, #24716	@ 0x608c
8016215c:	e3062098 	movw	r2, #24728	@ 0x6098
80162160:	e3483016 	movt	r3, #32790	@ 0x8016
80162164:	e30600a4 	movw	r0, #24740	@ 0x60a4
80162168:	e3482016 	movt	r2, #32790	@ 0x8016
8016216c:	e3011b0e 	movw	r1, #6926	@ 0x1b0e
80162170:	e3480016 	movt	r0, #32790	@ 0x8016
80162174:	ebfffd27 	bl	80161618 <RME_Log>
80162178:	eafffffe 	b	80162178 <_RME_Tim_Handler+0x100>
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
8016217c:	e1a02005 	mov	r2, r5
80162180:	e1a00006 	mov	r0, r6
80162184:	ebffff2b 	bl	80161e38 <_RME_Run_Swt.isra.0>
    Local->Thd_Cur=Thd_New;
80162188:	e5845004 	str	r5, [r4, #4]
}
8016218c:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
    Local=Thd->Sched.Local;
80162190:	e5921014 	ldr	r1, [r2, #20]
            Thd_Cur->Sched.Slice=0U;
80162194:	e3a03000 	mov	r3, #0
    Prio=Thd->Sched.Prio;
80162198:	e5920020 	ldr	r0, [r2, #32]
            Thd_Cur->Sched.Slice=0U;
8016219c:	e5823018 	str	r3, [r2, #24]
    RME_ASSERT(Local!=RME_THD_FREE);
801621a0:	e3710001 	cmn	r1, #1
801621a4:	0a00004c 	beq	801622dc <_RME_Tim_Handler+0x264>
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
801621a8:	e592c004 	ldr	ip, [r2, #4]
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
801621ac:	e2803002 	add	r3, r0, #2
    _RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
801621b0:	e592e000 	ldr	lr, [r2]
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
801621b4:	e1a03183 	lsl	r3, r3, #3
    Next->Prev=Prev;
801621b8:	e58ec004 	str	ip, [lr, #4]
    Prev->Next=Next;
801621bc:	e58ce000 	str	lr, [ip]
    if(Local->Run.List[Prio].Next==&(Local->Run.List[Prio]))
801621c0:	e081c003 	add	ip, r1, r3
801621c4:	e2833004 	add	r3, r3, #4
801621c8:	e0813003 	add	r3, r1, r3
801621cc:	e59cc004 	ldr	ip, [ip, #4]
801621d0:	e15c0003 	cmp	ip, r3
801621d4:	0a000038 	beq	801622bc <_RME_Tim_Handler+0x244>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
801621d8:	e3a03002 	mov	r3, #2
            _RME_Run_Notif(Thd_Cur);
801621dc:	e1a00002 	mov	r0, r2
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
801621e0:	e582301c 	str	r3, [r2, #28]
            _RME_Run_Notif(Thd_Cur);
801621e4:	ebffff4a 	bl	80161f14 <_RME_Run_Notif>
801621e8:	eaffffae 	b	801620a8 <_RME_Tim_Handler+0x30>
        __RME_Svc_Retval_Set(&(Thd_Sig->Ctx.Reg->Reg),1);
801621ec:	e5970048 	ldr	r0, [r7, #72]	@ 0x48
801621f0:	e3a01001 	mov	r1, #1
801621f4:	eb000ef9 	bl	80165de0 <__RME_Svc_Retval_Set>
        if(Thd_Sig->Sched.Slice!=0U)
801621f8:	e5973018 	ldr	r3, [r7, #24]
801621fc:	e3530000 	cmp	r3, #0
80162200:	0a00001d 	beq	8016227c <_RME_Tim_Handler+0x204>
    Local=Thd->Sched.Local;
80162204:	e5973014 	ldr	r3, [r7, #20]
            Thd_Sig->Sched.State=RME_THD_READY;
80162208:	e3a02000 	mov	r2, #0
8016220c:	e587201c 	str	r2, [r7, #28]
    Prio=Thd->Sched.Prio;
80162210:	e5972020 	ldr	r2, [r7, #32]
    RME_ASSERT(Local!=RME_THD_FREE);
80162214:	e3730001 	cmn	r3, #1
80162218:	0a00001e 	beq	80162298 <_RME_Tim_Handler+0x220>
    _RME_List_Ins(&(Thd->Sched.Run),
8016221c:	e083c182 	add	ip, r3, r2, lsl #3
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
80162220:	e1a012a2 	lsr	r1, r2, #5
80162224:	e202201f 	and	r2, r2, #31
    _RME_List_Ins(&(Thd->Sched.Run),
80162228:	e59c0018 	ldr	r0, [ip, #24]
8016222c:	e0831101 	add	r1, r3, r1, lsl #2
80162230:	e28c3014 	add	r3, ip, #20
    Next->Prev=New;
80162234:	e58c7018 	str	r7, [ip, #24]
    New->Prev=Prev;
80162238:	e5870004 	str	r0, [r7, #4]
    New->Next=Next;
8016223c:	e5873000 	str	r3, [r7]
    Prev->Next=New;
80162240:	e5807000 	str	r7, [r0]
    RME_BITMAP_SET(Local->Run.Bitmap,Prio);
80162244:	e3a00001 	mov	r0, #1
80162248:	e5913010 	ldr	r3, [r1, #16]
8016224c:	e1832210 	orr	r2, r3, r0, lsl r2
80162250:	e5812010 	str	r2, [r1, #16]
}
80162254:	ea00000c 	b	8016228c <_RME_Tim_Handler+0x214>
    RME_ASSERT(Thd_New!=RME_NULL);
80162258:	e306308c 	movw	r3, #24716	@ 0x608c
8016225c:	e3062098 	movw	r2, #24728	@ 0x6098
80162260:	e3483016 	movt	r3, #32790	@ 0x8016
80162264:	e30600a4 	movw	r0, #24740	@ 0x60a4
80162268:	e3482016 	movt	r2, #32790	@ 0x8016
8016226c:	e3011ae3 	movw	r1, #6883	@ 0x1ae3
80162270:	e3480016 	movt	r0, #32790	@ 0x8016
80162274:	ebfffce7 	bl	80161618 <RME_Log>
80162278:	eafffffe 	b	80162278 <_RME_Tim_Handler+0x200>
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
8016227c:	e3a03002 	mov	r3, #2
            _RME_Run_Notif(Thd_Sig);
80162280:	e1a00007 	mov	r0, r7
            Thd_Sig->Sched.State=RME_THD_TIMEOUT;
80162284:	e587301c 	str	r3, [r7, #28]
            _RME_Run_Notif(Thd_Sig);
80162288:	ebffff21 	bl	80161f14 <_RME_Run_Notif>
        Cap_Sig->Thd=RME_NULL;
8016228c:	e3a03000 	mov	r3, #0
80162290:	e5853018 	str	r3, [r5, #24]
80162294:	eaffff91 	b	801620e0 <_RME_Tim_Handler+0x68>
    RME_ASSERT(Local!=RME_THD_FREE);
80162298:	e306308c 	movw	r3, #24716	@ 0x608c
8016229c:	e3062098 	movw	r2, #24728	@ 0x6098
801622a0:	e3483016 	movt	r3, #32790	@ 0x8016
801622a4:	e30600a4 	movw	r0, #24740	@ 0x60a4
801622a8:	e3482016 	movt	r2, #32790	@ 0x8016
801622ac:	e301113b 	movw	r1, #4411	@ 0x113b
801622b0:	e3480016 	movt	r0, #32790	@ 0x8016
801622b4:	ebfffcd7 	bl	80161618 <RME_Log>
801622b8:	eafffffe 	b	801622b8 <_RME_Tim_Handler+0x240>
        RME_BITMAP_CLR(Local->Run.Bitmap,Prio);
801622bc:	e1a032a0 	lsr	r3, r0, #5
801622c0:	e3a0c001 	mov	ip, #1
801622c4:	e200001f 	and	r0, r0, #31
801622c8:	e0811103 	add	r1, r1, r3, lsl #2
801622cc:	e5913010 	ldr	r3, [r1, #16]
801622d0:	e1c3001c 	bic	r0, r3, ip, lsl r0
801622d4:	e5810010 	str	r0, [r1, #16]
801622d8:	eaffffbe 	b	801621d8 <_RME_Tim_Handler+0x160>
    RME_ASSERT(Local!=RME_THD_FREE);
801622dc:	e306308c 	movw	r3, #24716	@ 0x608c
801622e0:	e3062098 	movw	r2, #24728	@ 0x6098
801622e4:	e3483016 	movt	r3, #32790	@ 0x8016
801622e8:	e30600a4 	movw	r0, #24740	@ 0x60a4
801622ec:	e3482016 	movt	r2, #32790	@ 0x8016
801622f0:	e3011155 	movw	r1, #4437	@ 0x1155
801622f4:	e3480016 	movt	r0, #32790	@ 0x8016
801622f8:	ebfffcc6 	bl	80161618 <RME_Log>
801622fc:	eafffffe 	b	801622fc <_RME_Tim_Handler+0x284>

80162300 <_RME_Kot_Mark>:
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
80162300:	e310000f 	tst	r0, #15
80162304:	1a000061 	bne	80162490 <_RME_Kot_Mark+0x190>
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
80162308:	e7e4c250 	ubfx	ip, r0, #4, #5
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
8016230c:	e281147f 	add	r1, r1, #2130706432	@ 0x7f000000
80162310:	e2411001 	sub	r1, r1, #1
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
80162314:	e280347f 	add	r3, r0, #2130706432	@ 0x7f000000
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
80162318:	e0811000 	add	r1, r1, r0
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
8016231c:	e3e00000 	mvn	r0, #0
    Start=Start>>RME_WORD_ORDER;
80162320:	e1a034a3 	lsr	r3, r3, #9
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
80162324:	e1e02221 	mvn	r2, r1, lsr #4
    End=End>>RME_WORD_ORDER;
80162328:	e1a014a1 	lsr	r1, r1, #9
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
8016232c:	e202201f 	and	r2, r2, #31
    if(Start==End)
80162330:	e1530001 	cmp	r3, r1
{
80162334:	e92d4070 	push	{r4, r5, r6, lr}
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
80162338:	e1a02230 	lsr	r2, r0, r2
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
8016233c:	e1a04c10 	lsl	r4, r0, ip
    if(Start==End)
80162340:	0a000037 	beq	80162424 <_RME_Kot_Mark+0x124>
        Old_Val=RME_KOT_VA_BASE[Start];
80162344:	e3075000 	movw	r5, #28672	@ 0x7000
80162348:	e3485016 	movt	r5, #32790	@ 0x8016
8016234c:	e795c103 	ldr	ip, [r5, r3, lsl #2]
        if((Old_Val&Mask_Begin)!=0U)
80162350:	e114000c 	tst	r4, ip
80162354:	18bd8070 	popne	{r4, r5, r6, pc}
    if(*Ptr==Old)
80162358:	e795e103 	ldr	lr, [r5, r3, lsl #2]
8016235c:	e15c000e 	cmp	ip, lr
80162360:	18bd8070 	popne	{r4, r5, r6, pc}
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
80162364:	e184c00c 	orr	ip, r4, ip
        *Ptr=New;
80162368:	e785c103 	str	ip, [r5, r3, lsl #2]
        for(Count=Start+1U;Count<End;Count++)
8016236c:	e283c001 	add	ip, r3, #1
80162370:	e151000c 	cmp	r1, ip
80162374:	9a000047 	bls	80162498 <_RME_Kot_Mark+0x198>
80162378:	e085e10c 	add	lr, r5, ip, lsl #2
8016237c:	e24ee004 	sub	lr, lr, #4
            if(Old_Val!=0U)
80162380:	e5be6004 	ldr	r6, [lr, #4]!
80162384:	e3560000 	cmp	r6, #0
80162388:	1a000002 	bne	80162398 <_RME_Kot_Mark+0x98>
    if(*Ptr==Old)
8016238c:	e795610c 	ldr	r6, [r5, ip, lsl #2]
80162390:	e3560000 	cmp	r6, #0
80162394:	0a00002e 	beq	80162454 <_RME_Kot_Mark+0x154>
            for(Count--;Count>Start;Count--)
80162398:	e24cc001 	sub	ip, ip, #1
8016239c:	e15c0003 	cmp	ip, r3
801623a0:	9a00001a 	bls	80162410 <_RME_Kot_Mark+0x110>
801623a4:	e1e02003 	mvn	r2, r3
801623a8:	e082200c 	add	r2, r2, ip
801623ac:	e04c0003 	sub	r0, ip, r3
801623b0:	e3520002 	cmp	r2, #2
801623b4:	9a00000c 	bls	801623ec <_RME_Kot_Mark+0xec>
801623b8:	e1a02120 	lsr	r2, r0, #2
801623bc:	e24c110f 	sub	r1, ip, #-1073741821	@ 0xc0000003
                RME_KOT_VA_BASE[Count]=0U;
801623c0:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
801623c4:	e0851101 	add	r1, r5, r1, lsl #2
801623c8:	e0412202 	sub	r2, r1, r2, lsl #4
801623cc:	f4410a8f 	vst1.32	{d16-d17}, [r1]
            for(Count--;Count>Start;Count--)
801623d0:	e2411010 	sub	r1, r1, #16
801623d4:	e1510002 	cmp	r1, r2
801623d8:	1afffffb 	bne	801623cc <_RME_Kot_Mark+0xcc>
801623dc:	e3c02003 	bic	r2, r0, #3
801623e0:	e1520000 	cmp	r2, r0
801623e4:	e04cc002 	sub	ip, ip, r2
801623e8:	0a000008 	beq	80162410 <_RME_Kot_Mark+0x110>
801623ec:	e24c1001 	sub	r1, ip, #1
                RME_KOT_VA_BASE[Count]=0U;
801623f0:	e3a02000 	mov	r2, #0
            for(Count--;Count>Start;Count--)
801623f4:	e1530001 	cmp	r3, r1
                RME_KOT_VA_BASE[Count]=0U;
801623f8:	e785210c 	str	r2, [r5, ip, lsl #2]
            for(Count--;Count>Start;Count--)
801623fc:	2a000003 	bcs	80162410 <_RME_Kot_Mark+0x110>
                RME_KOT_VA_BASE[Count]=0U;
80162400:	e7852101 	str	r2, [r5, r1, lsl #2]
            for(Count--;Count>Start;Count--)
80162404:	e24cc002 	sub	ip, ip, #2
80162408:	e153000c 	cmp	r3, ip
                RME_KOT_VA_BASE[Count]=0U;
8016240c:	3785210c 	strcc	r2, [r5, ip, lsl #2]
    Old=*Ptr;
80162410:	e7952103 	ldr	r2, [r5, r3, lsl #2]
            return RME_ERR_KOT_BMP;
80162414:	e3e00000 	mvn	r0, #0
    *Ptr=Old&Operand;
80162418:	e1c22004 	bic	r2, r2, r4
8016241c:	e7852103 	str	r2, [r5, r3, lsl #2]
}
80162420:	e8bd8070 	pop	{r4, r5, r6, pc}
        Old_Val=RME_KOT_VA_BASE[Start];
80162424:	e3071000 	movw	r1, #28672	@ 0x7000
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
80162428:	e0022004 	and	r2, r2, r4
        Old_Val=RME_KOT_VA_BASE[Start];
8016242c:	e3481016 	movt	r1, #32790	@ 0x8016
80162430:	e791e103 	ldr	lr, [r1, r3, lsl #2]
        if((Old_Val&(Mask_Begin&Mask_End))!=0U)
80162434:	e012400e 	ands	r4, r2, lr
80162438:	18bd8070 	popne	{r4, r5, r6, pc}
    if(*Ptr==Old)
8016243c:	e791c103 	ldr	ip, [r1, r3, lsl #2]
80162440:	e15e000c 	cmp	lr, ip
        if(RME_COMP_SWAP(&RME_KOT_VA_BASE[Start],
80162444:	0182200e 	orreq	r2, r2, lr
    return 0;
80162448:	01a00004 	moveq	r0, r4
        *Ptr=New;
8016244c:	07812103 	streq	r2, [r1, r3, lsl #2]
        return 1U;
80162450:	e8bd8070 	pop	{r4, r5, r6, pc}
        *Ptr=New;
80162454:	e785010c 	str	r0, [r5, ip, lsl #2]
        for(Count=Start+1U;Count<End;Count++)
80162458:	e28c6001 	add	r6, ip, #1
8016245c:	e1510006 	cmp	r1, r6
80162460:	11a0c006 	movne	ip, r6
80162464:	1affffc5 	bne	80162380 <_RME_Kot_Mark+0x80>
            Old_Val=RME_KOT_VA_BASE[End];
80162468:	e7950101 	ldr	r0, [r5, r1, lsl #2]
            if((Old_Val&Mask_End)!=0U)
8016246c:	e1120000 	tst	r2, r0
80162470:	1affffc9 	bne	8016239c <_RME_Kot_Mark+0x9c>
    if(*Ptr==Old)
80162474:	e795e101 	ldr	lr, [r5, r1, lsl #2]
80162478:	e150000e 	cmp	r0, lr
8016247c:	1affffc6 	bne	8016239c <_RME_Kot_Mark+0x9c>
                if(RME_COMP_SWAP(&RME_KOT_VA_BASE[End],
80162480:	e1822000 	orr	r2, r2, r0
    return 0;
80162484:	e3a00000 	mov	r0, #0
        *Ptr=New;
80162488:	e7852101 	str	r2, [r5, r1, lsl #2]
        if(Undo!=0U)
8016248c:	e8bd8070 	pop	{r4, r5, r6, pc}
        return RME_ERR_KOT_BMP;
80162490:	e3e00000 	mvn	r0, #0
}
80162494:	e12fff1e 	bx	lr
            Old_Val=RME_KOT_VA_BASE[End];
80162498:	e7950101 	ldr	r0, [r5, r1, lsl #2]
            if((Old_Val&Mask_End)!=0U)
8016249c:	e1120000 	tst	r2, r0
801624a0:	1affffda 	bne	80162410 <_RME_Kot_Mark+0x110>
    if(*Ptr==Old)
801624a4:	e795c101 	ldr	ip, [r5, r1, lsl #2]
801624a8:	e150000c 	cmp	r0, ip
801624ac:	1affffd7 	bne	80162410 <_RME_Kot_Mark+0x110>
801624b0:	eafffff2 	b	80162480 <_RME_Kot_Mark+0x180>

801624b4 <_RME_Cpt_Crt>:
{
801624b4:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
801624b8:	e1a07003 	mov	r7, r3
801624bc:	e59d8024 	ldr	r8, [sp, #36]	@ 0x24
801624c0:	e59d9020 	ldr	r9, [sp, #32]
    if((Entry_Num==0U)||(Entry_Num>RME_CID_2L))
801624c4:	e2483001 	sub	r3, r8, #1
801624c8:	e353007f 	cmp	r3, #127	@ 0x7f
801624cc:	8a000063 	bhi	80162660 <_RME_Cpt_Crt+0x1ac>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
801624d0:	e3110080 	tst	r1, #128	@ 0x80
801624d4:	e1a06000 	mov	r6, r0
801624d8:	e1a04001 	mov	r4, r1
801624dc:	e1a05002 	mov	r5, r2
801624e0:	0a000047 	beq	80162604 <_RME_Cpt_Crt+0x150>
801624e4:	e5902014 	ldr	r2, [r0, #20]
801624e8:	e1a03421 	lsr	r3, r1, #8
801624ec:	e1530002 	cmp	r3, r2
801624f0:	2a00005a 	bcs	80162660 <_RME_Cpt_Crt+0x1ac>
801624f4:	e590a00c 	ldr	sl, [r0, #12]
801624f8:	e08aa283 	add	sl, sl, r3, lsl #5
801624fc:	e1a0000a 	mov	r0, sl
80162500:	ebfff87e 	bl	80160700 <__RME_A7A_Read_Acquire>
80162504:	e7e73850 	ubfx	r3, r0, #16, #8
80162508:	e3530002 	cmp	r3, #2
8016250c:	0a000073 	beq	801626e0 <_RME_Cpt_Crt+0x22c>
80162510:	e1a00c20 	lsr	r0, r0, #24
80162514:	e3500003 	cmp	r0, #3
80162518:	1a00006c 	bne	801626d0 <_RME_Cpt_Crt+0x21c>
8016251c:	e59a3014 	ldr	r3, [sl, #20]
80162520:	e204407f 	and	r4, r4, #127	@ 0x7f
80162524:	e1540003 	cmp	r4, r3
80162528:	2a00004c 	bcs	80162660 <_RME_Cpt_Crt+0x1ac>
8016252c:	e59a100c 	ldr	r1, [sl, #12]
80162530:	e0814284 	add	r4, r1, r4, lsl #5
80162534:	e1a00004 	mov	r0, r4
80162538:	ebfff870 	bl	80160700 <__RME_A7A_Read_Acquire>
8016253c:	e7e73850 	ubfx	r3, r0, #16, #8
80162540:	e3530002 	cmp	r3, #2
80162544:	0a000065 	beq	801626e0 <_RME_Cpt_Crt+0x22c>
80162548:	e1a00c20 	lsr	r0, r0, #24
8016254c:	e3500003 	cmp	r0, #3
80162550:	1a00005e 	bne	801626d0 <_RME_Cpt_Crt+0x21c>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
80162554:	e3150080 	tst	r5, #128	@ 0x80
80162558:	1a00002e 	bne	80162618 <_RME_Cpt_Crt+0x164>
8016255c:	e5963014 	ldr	r3, [r6, #20]
80162560:	e1550003 	cmp	r5, r3
80162564:	2a00003d 	bcs	80162660 <_RME_Cpt_Crt+0x1ac>
80162568:	e596200c 	ldr	r2, [r6, #12]
8016256c:	e0825285 	add	r5, r2, r5, lsl #5
80162570:	e1a00005 	mov	r0, r5
80162574:	ebfff861 	bl	80160700 <__RME_A7A_Read_Acquire>
80162578:	e7e73850 	ubfx	r3, r0, #16, #8
8016257c:	e3530002 	cmp	r3, #2
80162580:	0a000056 	beq	801626e0 <_RME_Cpt_Crt+0x22c>
80162584:	e1a00c20 	lsr	r0, r0, #24
80162588:	e3500002 	cmp	r0, #2
8016258c:	1a00004f 	bne	801626d0 <_RME_Cpt_Crt+0x21c>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
80162590:	e5943008 	ldr	r3, [r4, #8]
80162594:	e3130001 	tst	r3, #1
80162598:	0a00004e 	beq	801626d8 <_RME_Cpt_Crt+0x224>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_CPT,Raddr,Vaddr,RME_CPT_SIZE(Entry_Num));
8016259c:	e5953008 	ldr	r3, [r5, #8]
801625a0:	e3130001 	tst	r3, #1
801625a4:	0a00004b 	beq	801626d8 <_RME_Cpt_Crt+0x224>
801625a8:	e5953014 	ldr	r3, [r5, #20]
801625ac:	e1530009 	cmp	r3, r9
801625b0:	e0836009 	add	r6, r3, r9
801625b4:	31a03009 	movcc	r3, r9
801625b8:	e1530006 	cmp	r3, r6
801625bc:	8a000045 	bhi	801626d8 <_RME_Cpt_Crt+0x224>
801625c0:	e1a01288 	lsl	r1, r8, #5
801625c4:	e0913006 	adds	r3, r1, r6
801625c8:	2a000042 	bcs	801626d8 <_RME_Cpt_Crt+0x224>
801625cc:	e5952018 	ldr	r2, [r5, #24]
801625d0:	e2433001 	sub	r3, r3, #1
801625d4:	e1520003 	cmp	r2, r3
801625d8:	3a00003e 	bcc	801626d8 <_RME_Cpt_Crt+0x224>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
801625dc:	e5943014 	ldr	r3, [r4, #20]
801625e0:	e1530007 	cmp	r3, r7
801625e4:	9a00001d 	bls	80162660 <_RME_Cpt_Crt+0x1ac>
801625e8:	e594300c 	ldr	r3, [r4, #12]
    if(*Ptr==Old)
801625ec:	e7934287 	ldr	r4, [r3, r7, lsl #5]
    RME_CPT_GETSLOT(Cpt_Op,Cap_Crt,struct RME_Cap_Cpt*,Cpt_Crt);
801625f0:	e0835287 	add	r5, r3, r7, lsl #5
    if(*Ptr==Old)
801625f4:	e3540000 	cmp	r4, #0
801625f8:	0a00001a 	beq	80162668 <_RME_Cpt_Crt+0x1b4>
    RME_CPT_OCCUPY(Cpt_Crt);
801625fc:	e3e00004 	mvn	r0, #4
}
80162600:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
80162604:	e5903014 	ldr	r3, [r0, #20]
80162608:	e1510003 	cmp	r1, r3
8016260c:	2a000013 	bcs	80162660 <_RME_Cpt_Crt+0x1ac>
80162610:	e590100c 	ldr	r1, [r0, #12]
80162614:	eaffffc5 	b	80162530 <_RME_Cpt_Crt+0x7c>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
80162618:	e5962014 	ldr	r2, [r6, #20]
8016261c:	e1a03425 	lsr	r3, r5, #8
80162620:	e1530002 	cmp	r3, r2
80162624:	2a00000d 	bcs	80162660 <_RME_Cpt_Crt+0x1ac>
80162628:	e596600c 	ldr	r6, [r6, #12]
8016262c:	e0866283 	add	r6, r6, r3, lsl #5
80162630:	e1a00006 	mov	r0, r6
80162634:	ebfff831 	bl	80160700 <__RME_A7A_Read_Acquire>
80162638:	e7e73850 	ubfx	r3, r0, #16, #8
8016263c:	e3530002 	cmp	r3, #2
80162640:	0a000026 	beq	801626e0 <_RME_Cpt_Crt+0x22c>
80162644:	e1a00c20 	lsr	r0, r0, #24
80162648:	e3500003 	cmp	r0, #3
8016264c:	1a00001f 	bne	801626d0 <_RME_Cpt_Crt+0x21c>
80162650:	e5963014 	ldr	r3, [r6, #20]
80162654:	e205507f 	and	r5, r5, #127	@ 0x7f
80162658:	e1550003 	cmp	r5, r3
8016265c:	3affffc1 	bcc	80162568 <_RME_Cpt_Crt+0xb4>
        return RME_ERR_CPT_RANGE;
80162660:	e3e00002 	mvn	r0, #2
80162664:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_OCCUPY(Cpt_Crt);
80162668:	e3072114 	movw	r2, #28948	@ 0x7114
        *Ptr=New;
8016266c:	e3a00801 	mov	r0, #65536	@ 0x10000
    RME_CPT_OCCUPY(Cpt_Crt);
80162670:	e3482096 	movt	r2, #32918	@ 0x8096
        *Ptr=New;
80162674:	e7830287 	str	r0, [r3, r7, lsl #5]
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
80162678:	e1a00006 	mov	r0, r6
    RME_CPT_OCCUPY(Cpt_Crt);
8016267c:	e5923000 	ldr	r3, [r2]
80162680:	e5853010 	str	r3, [r5, #16]
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
80162684:	ebffff1d 	bl	80162300 <_RME_Kot_Mark>
80162688:	e3500000 	cmp	r0, #0
8016268c:	a1a03006 	movge	r3, r6
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
80162690:	a1a02004 	movge	r2, r4
    if(_RME_Kot_Mark(Vaddr,RME_CPT_SIZE(Entry_Num))<0)
80162694:	ba000013 	blt	801626e8 <_RME_Cpt_Crt+0x234>
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
80162698:	e4832020 	str	r2, [r3], #32
    for(Count=0U;Count<Entry_Num;Count++)
8016269c:	e2844001 	add	r4, r4, #1
801626a0:	e1580004 	cmp	r8, r4
801626a4:	8afffffb 	bhi	80162698 <_RME_Cpt_Crt+0x1e4>
    Cpt_Crt->Head.Root_Ref=0U;
801626a8:	e5852004 	str	r2, [r5, #4]
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
801626ac:	e3a030ff 	mov	r3, #255	@ 0xff
    Cpt_Crt->Head.Object=Vaddr;
801626b0:	e585600c 	str	r6, [r5, #12]
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
801626b4:	e1a00005 	mov	r0, r5
    Cpt_Crt->Head.Flag=RME_CPT_FLAG_ALL;
801626b8:	e5853008 	str	r3, [r5, #8]
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
801626bc:	e3a01403 	mov	r1, #50331648	@ 0x3000000
    Cpt_Crt->Entry_Num=Entry_Num;
801626c0:	e5858014 	str	r8, [r5, #20]
    RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),
801626c4:	ebfff810 	bl	8016070c <__RME_A7A_Write_Release>
    return 0;
801626c8:	e3a00000 	mov	r0, #0
801626cc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
801626d0:	e3e00001 	mvn	r0, #1
801626d4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
801626d8:	e3e00006 	mvn	r0, #6
801626dc:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Crt,RME_CAP_TYPE_CPT,
801626e0:	e3e00008 	mvn	r0, #8
801626e4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
        RME_WRITE_RELEASE(&(Cpt_Crt->Head.Type_Stat),0U);
801626e8:	e1a00005 	mov	r0, r5
801626ec:	e1a01004 	mov	r1, r4
801626f0:	ebfff805 	bl	8016070c <__RME_A7A_Write_Release>
        return RME_ERR_CPT_KOT;
801626f4:	e3e00003 	mvn	r0, #3
801626f8:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

801626fc <_RME_Pgt_Crt>:
{
801626fc:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
80162700:	e24dd00c 	sub	sp, sp, #12
80162704:	e59db03c 	ldr	fp, [sp, #60]	@ 0x3c
80162708:	e59d9040 	ldr	r9, [sp, #64]	@ 0x40
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
8016270c:	e08b8009 	add	r8, fp, r9
80162710:	e3580020 	cmp	r8, #32
80162714:	8a000098 	bhi	8016297c <_RME_Pgt_Crt+0x280>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162718:	e3110080 	tst	r1, #128	@ 0x80
8016271c:	e1a07000 	mov	r7, r0
80162720:	e1a04001 	mov	r4, r1
80162724:	e1a0a002 	mov	sl, r2
80162728:	e1a05003 	mov	r5, r3
8016272c:	0a000055 	beq	80162888 <_RME_Pgt_Crt+0x18c>
80162730:	e5902014 	ldr	r2, [r0, #20]
80162734:	e1a03421 	lsr	r3, r1, #8
80162738:	e1530002 	cmp	r3, r2
8016273c:	2a000055 	bcs	80162898 <_RME_Pgt_Crt+0x19c>
80162740:	e590200c 	ldr	r2, [r0, #12]
80162744:	e0826283 	add	r6, r2, r3, lsl #5
80162748:	e1a00006 	mov	r0, r6
8016274c:	ebfff7eb 	bl	80160700 <__RME_A7A_Read_Acquire>
80162750:	e7e72850 	ubfx	r2, r0, #16, #8
80162754:	e3520002 	cmp	r2, #2
80162758:	0a000089 	beq	80162984 <_RME_Pgt_Crt+0x288>
8016275c:	e1a00c20 	lsr	r0, r0, #24
80162760:	e3500003 	cmp	r0, #3
80162764:	1a000080 	bne	8016296c <_RME_Pgt_Crt+0x270>
80162768:	e5962014 	ldr	r2, [r6, #20]
8016276c:	e204407f 	and	r4, r4, #127	@ 0x7f
80162770:	e1540002 	cmp	r4, r2
80162774:	2a000047 	bcs	80162898 <_RME_Pgt_Crt+0x19c>
80162778:	e596100c 	ldr	r1, [r6, #12]
8016277c:	e0814284 	add	r4, r1, r4, lsl #5
80162780:	e1a00004 	mov	r0, r4
80162784:	ebfff7dd 	bl	80160700 <__RME_A7A_Read_Acquire>
80162788:	e7e73850 	ubfx	r3, r0, #16, #8
8016278c:	e3530002 	cmp	r3, #2
80162790:	0a00007b 	beq	80162984 <_RME_Pgt_Crt+0x288>
80162794:	e1a00c20 	lsr	r0, r0, #24
80162798:	e3500003 	cmp	r0, #3
8016279c:	1a000072 	bne	8016296c <_RME_Pgt_Crt+0x270>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
801627a0:	e31a0080 	tst	sl, #128	@ 0x80
801627a4:	1a00003d 	bne	801628a0 <_RME_Pgt_Crt+0x1a4>
801627a8:	e5973014 	ldr	r3, [r7, #20]
801627ac:	e15a0003 	cmp	sl, r3
801627b0:	2a000038 	bcs	80162898 <_RME_Pgt_Crt+0x19c>
801627b4:	e597200c 	ldr	r2, [r7, #12]
801627b8:	e082a28a 	add	sl, r2, sl, lsl #5
801627bc:	e1a0000a 	mov	r0, sl
801627c0:	ebfff7ce 	bl	80160700 <__RME_A7A_Read_Acquire>
801627c4:	e7e73850 	ubfx	r3, r0, #16, #8
801627c8:	e3530002 	cmp	r3, #2
801627cc:	0a00006c 	beq	80162984 <_RME_Pgt_Crt+0x288>
801627d0:	e1a00c20 	lsr	r0, r0, #24
801627d4:	e3500002 	cmp	r0, #2
801627d8:	1a000063 	bne	8016296c <_RME_Pgt_Crt+0x270>
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
801627dc:	e5943008 	ldr	r3, [r4, #8]
801627e0:	e3130001 	tst	r3, #1
801627e4:	0a000062 	beq	80162974 <_RME_Pgt_Crt+0x278>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
801627e8:	e59a3008 	ldr	r3, [sl, #8]
        Table_Size=RME_PGT_SIZE_TOP(Num_Order);
801627ec:	e3a06001 	mov	r6, #1
801627f0:	e1a06916 	lsl	r6, r6, r9
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_PGT,Raddr,Vaddr,Table_Size);
801627f4:	e3130002 	tst	r3, #2
801627f8:	0a00005d 	beq	80162974 <_RME_Pgt_Crt+0x278>
801627fc:	e59a3014 	ldr	r3, [sl, #20]
80162800:	e59d2030 	ldr	r2, [sp, #48]	@ 0x30
80162804:	e1530002 	cmp	r3, r2
80162808:	e0837002 	add	r7, r3, r2
8016280c:	31a03002 	movcc	r3, r2
80162810:	e1570003 	cmp	r7, r3
80162814:	3a000056 	bcc	80162974 <_RME_Pgt_Crt+0x278>
80162818:	e0963007 	adds	r3, r6, r7
8016281c:	2a000054 	bcs	80162974 <_RME_Pgt_Crt+0x278>
80162820:	e59a2018 	ldr	r2, [sl, #24]
80162824:	e2433001 	sub	r3, r3, #1
80162828:	e1520003 	cmp	r2, r3
8016282c:	3a000050 	bcc	80162974 <_RME_Pgt_Crt+0x278>
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
80162830:	e58d7000 	str	r7, [sp]
80162834:	e1a03009 	mov	r3, r9
80162838:	e1a0200b 	mov	r2, fp
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
8016283c:	e2688020 	rsb	r8, r8, #32
    if(__RME_Pgt_Check(Base,Is_Top,Size_Order,Num_Order,Vaddr)<0)
80162840:	e1cd03d4 	ldrd	r0, [sp, #52]	@ 0x34
80162844:	eb000de2 	bl	80165fd4 <__RME_Pgt_Check>
    if((Base&RME_MASK_END(Size_Order+Num_Order-1U))!=0U)
80162848:	e59d2034 	ldr	r2, [sp, #52]	@ 0x34
8016284c:	e3e03000 	mvn	r3, #0
80162850:	e0123833 	ands	r3, r2, r3, lsr r8
80162854:	1a000048 	bne	8016297c <_RME_Pgt_Crt+0x280>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
80162858:	e5943014 	ldr	r3, [r4, #20]
8016285c:	e1530005 	cmp	r3, r5
80162860:	9a00000c 	bls	80162898 <_RME_Pgt_Crt+0x19c>
80162864:	e594300c 	ldr	r3, [r4, #12]
    if(*Ptr==Old)
80162868:	e793a285 	ldr	sl, [r3, r5, lsl #5]
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Crt);
8016286c:	e0838285 	add	r8, r3, r5, lsl #5
    if(*Ptr==Old)
80162870:	e35a0000 	cmp	sl, #0
    RME_CPT_OCCUPY(Pgt_Crt);
80162874:	13e04004 	mvnne	r4, #4
    if(*Ptr==Old)
80162878:	0a00001d 	beq	801628f4 <_RME_Pgt_Crt+0x1f8>
}
8016287c:	e1a00004 	mov	r0, r4
80162880:	e28dd00c 	add	sp, sp, #12
80162884:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162888:	e5903014 	ldr	r3, [r0, #20]
8016288c:	e1510003 	cmp	r1, r3
80162890:	3590100c 	ldrcc	r1, [r0, #12]
80162894:	3affffb8 	bcc	8016277c <_RME_Pgt_Crt+0x80>
80162898:	e3e04002 	mvn	r4, #2
8016289c:	eafffff6 	b	8016287c <_RME_Pgt_Crt+0x180>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
801628a0:	e5972014 	ldr	r2, [r7, #20]
801628a4:	e1a0342a 	lsr	r3, sl, #8
801628a8:	e1530002 	cmp	r3, r2
801628ac:	2afffff9 	bcs	80162898 <_RME_Pgt_Crt+0x19c>
801628b0:	e597700c 	ldr	r7, [r7, #12]
801628b4:	e0877283 	add	r7, r7, r3, lsl #5
801628b8:	e1a00007 	mov	r0, r7
801628bc:	ebfff78f 	bl	80160700 <__RME_A7A_Read_Acquire>
801628c0:	e7e73850 	ubfx	r3, r0, #16, #8
801628c4:	e3530002 	cmp	r3, #2
801628c8:	0a00002d 	beq	80162984 <_RME_Pgt_Crt+0x288>
801628cc:	e1a00c20 	lsr	r0, r0, #24
801628d0:	e3500003 	cmp	r0, #3
801628d4:	1a000024 	bne	8016296c <_RME_Pgt_Crt+0x270>
801628d8:	e5973014 	ldr	r3, [r7, #20]
801628dc:	e20a607f 	and	r6, sl, #127	@ 0x7f
801628e0:	e1560003 	cmp	r6, r3
801628e4:	2affffeb 	bcs	80162898 <_RME_Pgt_Crt+0x19c>
801628e8:	e597200c 	ldr	r2, [r7, #12]
801628ec:	e082a286 	add	sl, r2, r6, lsl #5
801628f0:	eaffffb1 	b	801627bc <_RME_Pgt_Crt+0xc0>
    RME_CPT_OCCUPY(Pgt_Crt);
801628f4:	e3072114 	movw	r2, #28948	@ 0x7114
        *Ptr=New;
801628f8:	e3a00801 	mov	r0, #65536	@ 0x10000
    RME_CPT_OCCUPY(Pgt_Crt);
801628fc:	e3482096 	movt	r2, #32918	@ 0x8096
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
80162900:	e1a01006 	mov	r1, r6
        *Ptr=New;
80162904:	e7830285 	str	r0, [r3, r5, lsl #5]
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
80162908:	e1a00007 	mov	r0, r7
    RME_CPT_OCCUPY(Pgt_Crt);
8016290c:	e5923000 	ldr	r3, [r2]
80162910:	e5883010 	str	r3, [r8, #16]
    if(_RME_Kot_Mark(Vaddr,Table_Size)!=0)
80162914:	ebfffe79 	bl	80162300 <_RME_Kot_Mark>
80162918:	e2504000 	subs	r4, r0, #0
8016291c:	1a00001a 	bne	8016298c <_RME_Pgt_Crt+0x290>
    Pgt_Crt->Base=Base|Is_Top;
80162920:	e1cd23d4 	ldrd	r2, [sp, #52]	@ 0x34
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
80162924:	e189980b 	orr	r9, r9, fp, lsl #16
    if(__RME_Pgt_Init(Pgt_Crt)<0)
80162928:	e1a00008 	mov	r0, r8
    Pgt_Crt->Base=Base|Is_Top;
8016292c:	e1833002 	orr	r3, r3, r2
    Pgt_Crt->Head.Flag=RME_PGT_FLAG_FULL_RANGE|RME_PGT_FLAG_ALL;
80162930:	e3a020ff 	mov	r2, #255	@ 0xff
80162934:	e34f2ff0 	movt	r2, #65520	@ 0xfff0
80162938:	e5882008 	str	r2, [r8, #8]
    Pgt_Crt->Base=Base|Is_Top;
8016293c:	e5883018 	str	r3, [r8, #24]
    Pgt_Crt->Head.Object=Vaddr;
80162940:	e588700c 	str	r7, [r8, #12]
    Pgt_Crt->Head.Root_Ref=0U;
80162944:	e5884004 	str	r4, [r8, #4]
    Pgt_Crt->Order=RME_PGT_ORDER(Size_Order,Num_Order);
80162948:	e5889014 	str	r9, [r8, #20]
    Pgt_Crt->ASID=0U;
8016294c:	e588401c 	str	r4, [r8, #28]
    if(__RME_Pgt_Init(Pgt_Crt)<0)
80162950:	eb000db5 	bl	8016602c <__RME_Pgt_Init>
    RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),
80162954:	e1a00008 	mov	r0, r8
80162958:	e3a01301 	mov	r1, #67108864	@ 0x4000000
8016295c:	ebfff76a 	bl	8016070c <__RME_A7A_Write_Release>
}
80162960:	e1a00004 	mov	r0, r4
80162964:	e28dd00c 	add	sp, sp, #12
80162968:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
8016296c:	e3e04001 	mvn	r4, #1
80162970:	eaffffc1 	b	8016287c <_RME_Pgt_Crt+0x180>
    RME_CAP_CHECK(Cpt_Op, RME_CPT_FLAG_CRT);
80162974:	e3e04006 	mvn	r4, #6
80162978:	eaffffbf 	b	8016287c <_RME_Pgt_Crt+0x180>
        return RME_ERR_PGT_HW;
8016297c:	e3e04066 	mvn	r4, #102	@ 0x66
80162980:	eaffffbd 	b	8016287c <_RME_Pgt_Crt+0x180>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162984:	e3e04008 	mvn	r4, #8
80162988:	eaffffbb 	b	8016287c <_RME_Pgt_Crt+0x180>
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
8016298c:	e1a0100a 	mov	r1, sl
80162990:	e1a00008 	mov	r0, r8
        return RME_ERR_CPT_KOT;
80162994:	e3e04003 	mvn	r4, #3
        RME_WRITE_RELEASE(&(Pgt_Crt->Head.Type_Stat),0U);
80162998:	ebfff75b 	bl	8016070c <__RME_A7A_Write_Release>
        return RME_ERR_CPT_KOT;
8016299c:	eaffffb6 	b	8016287c <_RME_Pgt_Crt+0x180>

801629a0 <_RME_Thd_Crt>:
{
801629a0:	e92d4ff8 	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
801629a4:	e1a07003 	mov	r7, r3
801629a8:	e59d902c 	ldr	r9, [sp, #44]	@ 0x2c
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
801629ac:	e3073000 	movw	r3, #28672	@ 0x7000
801629b0:	e3483096 	movt	r3, #32918	@ 0x8096
{
801629b4:	e59da028 	ldr	sl, [sp, #40]	@ 0x28
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
801629b8:	e5933004 	ldr	r3, [r3, #4]
{
801629bc:	e59d8030 	ldr	r8, [sp, #48]	@ 0x30
    if((RME_CPU_LOCAL()->Thd_Cur)->Sched.Prio_Max<Prio_Max)
801629c0:	e5933024 	ldr	r3, [r3, #36]	@ 0x24
801629c4:	e1530009 	cmp	r3, r9
801629c8:	3a0000ce 	bcc	80162d08 <_RME_Thd_Crt+0x368>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
801629cc:	e3110080 	tst	r1, #128	@ 0x80
801629d0:	e1a04000 	mov	r4, r0
801629d4:	e1a05001 	mov	r5, r1
801629d8:	e1a06002 	mov	r6, r2
801629dc:	0a00005c 	beq	80162b54 <_RME_Thd_Crt+0x1b4>
801629e0:	e5902014 	ldr	r2, [r0, #20]
801629e4:	e1a03421 	lsr	r3, r1, #8
801629e8:	e1530002 	cmp	r3, r2
801629ec:	2a00005c 	bcs	80162b64 <_RME_Thd_Crt+0x1c4>
801629f0:	e590b00c 	ldr	fp, [r0, #12]
801629f4:	e08bb283 	add	fp, fp, r3, lsl #5
801629f8:	e1a0000b 	mov	r0, fp
801629fc:	ebfff73f 	bl	80160700 <__RME_A7A_Read_Acquire>
80162a00:	e7e73850 	ubfx	r3, r0, #16, #8
80162a04:	e3530002 	cmp	r3, #2
80162a08:	0a0000bc 	beq	80162d00 <_RME_Thd_Crt+0x360>
80162a0c:	e1a00c20 	lsr	r0, r0, #24
80162a10:	e3500003 	cmp	r0, #3
80162a14:	1a0000b5 	bne	80162cf0 <_RME_Thd_Crt+0x350>
80162a18:	e59b3014 	ldr	r3, [fp, #20]
80162a1c:	e205507f 	and	r5, r5, #127	@ 0x7f
80162a20:	e1550003 	cmp	r5, r3
80162a24:	2a00004e 	bcs	80162b64 <_RME_Thd_Crt+0x1c4>
80162a28:	e59b100c 	ldr	r1, [fp, #12]
80162a2c:	e0815285 	add	r5, r1, r5, lsl #5
80162a30:	e1a00005 	mov	r0, r5
80162a34:	ebfff731 	bl	80160700 <__RME_A7A_Read_Acquire>
80162a38:	e7e73850 	ubfx	r3, r0, #16, #8
80162a3c:	e3530002 	cmp	r3, #2
80162a40:	0a0000ae 	beq	80162d00 <_RME_Thd_Crt+0x360>
80162a44:	e1a00c20 	lsr	r0, r0, #24
80162a48:	e3500003 	cmp	r0, #3
80162a4c:	1a0000a7 	bne	80162cf0 <_RME_Thd_Crt+0x350>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
80162a50:	e3160080 	tst	r6, #128	@ 0x80
80162a54:	1a000044 	bne	80162b6c <_RME_Thd_Crt+0x1cc>
80162a58:	e5943014 	ldr	r3, [r4, #20]
80162a5c:	e1560003 	cmp	r6, r3
80162a60:	2a00003f 	bcs	80162b64 <_RME_Thd_Crt+0x1c4>
80162a64:	e594200c 	ldr	r2, [r4, #12]
80162a68:	e0826286 	add	r6, r2, r6, lsl #5
80162a6c:	e1a00006 	mov	r0, r6
80162a70:	ebfff722 	bl	80160700 <__RME_A7A_Read_Acquire>
80162a74:	e7e73850 	ubfx	r3, r0, #16, #8
80162a78:	e3530002 	cmp	r3, #2
80162a7c:	0a00009f 	beq	80162d00 <_RME_Thd_Crt+0x360>
80162a80:	e1a00c20 	lsr	r0, r0, #24
80162a84:	e3500002 	cmp	r0, #2
80162a88:	1a000098 	bne	80162cf0 <_RME_Thd_Crt+0x350>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
80162a8c:	e31a0080 	tst	sl, #128	@ 0x80
80162a90:	1a000049 	bne	80162bbc <_RME_Thd_Crt+0x21c>
80162a94:	e5943014 	ldr	r3, [r4, #20]
80162a98:	e15a0003 	cmp	sl, r3
80162a9c:	2a000030 	bcs	80162b64 <_RME_Thd_Crt+0x1c4>
80162aa0:	e594300c 	ldr	r3, [r4, #12]
80162aa4:	e083a28a 	add	sl, r3, sl, lsl #5
80162aa8:	e1a0000a 	mov	r0, sl
80162aac:	ebfff713 	bl	80160700 <__RME_A7A_Read_Acquire>
80162ab0:	e7e73850 	ubfx	r3, r0, #16, #8
80162ab4:	e3530002 	cmp	r3, #2
80162ab8:	0a000090 	beq	80162d00 <_RME_Thd_Crt+0x360>
80162abc:	e1a00c20 	lsr	r0, r0, #24
80162ac0:	e3500005 	cmp	r0, #5
80162ac4:	1a000089 	bne	80162cf0 <_RME_Thd_Crt+0x350>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
80162ac8:	e5953008 	ldr	r3, [r5, #8]
80162acc:	e3130001 	tst	r3, #1
80162ad0:	0a000088 	beq	80162cf8 <_RME_Thd_Crt+0x358>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_THD);
80162ad4:	e59a3008 	ldr	r3, [sl, #8]
80162ad8:	e3130002 	tst	r3, #2
80162adc:	0a000085 	beq	80162cf8 <_RME_Thd_Crt+0x358>
        Size=RME_HYP_SIZE;
80162ae0:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
80162ae4:	e5963008 	ldr	r3, [r6, #8]
        Size=RME_HYP_SIZE;
80162ae8:	e3520000 	cmp	r2, #0
80162aec:	03a0109c 	moveq	r1, #156	@ 0x9c
80162af0:	13a01058 	movne	r1, #88	@ 0x58
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_THD,Raddr,Vaddr,Size);
80162af4:	e3130004 	tst	r3, #4
80162af8:	0a00007e 	beq	80162cf8 <_RME_Thd_Crt+0x358>
80162afc:	e5963014 	ldr	r3, [r6, #20]
80162b00:	e1530008 	cmp	r3, r8
80162b04:	e0834008 	add	r4, r3, r8
80162b08:	31a03008 	movcc	r3, r8
80162b0c:	e1530004 	cmp	r3, r4
80162b10:	8a000078 	bhi	80162cf8 <_RME_Thd_Crt+0x358>
80162b14:	e0913004 	adds	r3, r1, r4
80162b18:	2a000076 	bcs	80162cf8 <_RME_Thd_Crt+0x358>
80162b1c:	e5962018 	ldr	r2, [r6, #24]
80162b20:	e2433001 	sub	r3, r3, #1
80162b24:	e1520003 	cmp	r2, r3
80162b28:	3a000072 	bcc	80162cf8 <_RME_Thd_Crt+0x358>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
80162b2c:	e5953014 	ldr	r3, [r5, #20]
80162b30:	e1530007 	cmp	r3, r7
80162b34:	9a00000a 	bls	80162b64 <_RME_Thd_Crt+0x1c4>
80162b38:	e595300c 	ldr	r3, [r5, #12]
    if(*Ptr==Old)
80162b3c:	e7935287 	ldr	r5, [r3, r7, lsl #5]
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
80162b40:	e0836287 	add	r6, r3, r7, lsl #5
    if(*Ptr==Old)
80162b44:	e3550000 	cmp	r5, #0
80162b48:	0a00002e 	beq	80162c08 <_RME_Thd_Crt+0x268>
    RME_CPT_OCCUPY(Thd_Crt);
80162b4c:	e3e00004 	mvn	r0, #4
}
80162b50:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162b54:	e5903014 	ldr	r3, [r0, #20]
80162b58:	e1510003 	cmp	r1, r3
80162b5c:	3590100c 	ldrcc	r1, [r0, #12]
80162b60:	3affffb1 	bcc	80162a2c <_RME_Thd_Crt+0x8c>
80162b64:	e3e00002 	mvn	r0, #2
80162b68:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
80162b6c:	e5942014 	ldr	r2, [r4, #20]
80162b70:	e1a03426 	lsr	r3, r6, #8
80162b74:	e1530002 	cmp	r3, r2
80162b78:	2afffff9 	bcs	80162b64 <_RME_Thd_Crt+0x1c4>
80162b7c:	e594b00c 	ldr	fp, [r4, #12]
80162b80:	e08bb283 	add	fp, fp, r3, lsl #5
80162b84:	e1a0000b 	mov	r0, fp
80162b88:	ebfff6dc 	bl	80160700 <__RME_A7A_Read_Acquire>
80162b8c:	e7e73850 	ubfx	r3, r0, #16, #8
80162b90:	e3530002 	cmp	r3, #2
80162b94:	0a000059 	beq	80162d00 <_RME_Thd_Crt+0x360>
80162b98:	e1a00c20 	lsr	r0, r0, #24
80162b9c:	e3500003 	cmp	r0, #3
80162ba0:	1a000052 	bne	80162cf0 <_RME_Thd_Crt+0x350>
80162ba4:	e59b3014 	ldr	r3, [fp, #20]
80162ba8:	e206607f 	and	r6, r6, #127	@ 0x7f
80162bac:	e1560003 	cmp	r6, r3
80162bb0:	2affffeb 	bcs	80162b64 <_RME_Thd_Crt+0x1c4>
80162bb4:	e59b200c 	ldr	r2, [fp, #12]
80162bb8:	eaffffaa 	b	80162a68 <_RME_Thd_Crt+0xc8>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
80162bbc:	e5942014 	ldr	r2, [r4, #20]
80162bc0:	e1a0342a 	lsr	r3, sl, #8
80162bc4:	e1530002 	cmp	r3, r2
80162bc8:	2affffe5 	bcs	80162b64 <_RME_Thd_Crt+0x1c4>
80162bcc:	e594400c 	ldr	r4, [r4, #12]
80162bd0:	e0844283 	add	r4, r4, r3, lsl #5
80162bd4:	e1a00004 	mov	r0, r4
80162bd8:	ebfff6c8 	bl	80160700 <__RME_A7A_Read_Acquire>
80162bdc:	e7e73850 	ubfx	r3, r0, #16, #8
80162be0:	e3530002 	cmp	r3, #2
80162be4:	0a000045 	beq	80162d00 <_RME_Thd_Crt+0x360>
80162be8:	e1a00c20 	lsr	r0, r0, #24
80162bec:	e3500003 	cmp	r0, #3
80162bf0:	1a00003e 	bne	80162cf0 <_RME_Thd_Crt+0x350>
80162bf4:	e5943014 	ldr	r3, [r4, #20]
80162bf8:	e20aa07f 	and	sl, sl, #127	@ 0x7f
80162bfc:	e15a0003 	cmp	sl, r3
80162c00:	3affffa6 	bcc	80162aa0 <_RME_Thd_Crt+0x100>
80162c04:	eaffffd6 	b	80162b64 <_RME_Thd_Crt+0x1c4>
    RME_CPT_OCCUPY(Thd_Crt);
80162c08:	e3072114 	movw	r2, #28948	@ 0x7114
        *Ptr=New;
80162c0c:	e3a00801 	mov	r0, #65536	@ 0x10000
    RME_CPT_OCCUPY(Thd_Crt);
80162c10:	e3482096 	movt	r2, #32918	@ 0x8096
        *Ptr=New;
80162c14:	e7830287 	str	r0, [r3, r7, lsl #5]
    if(_RME_Kot_Mark(Vaddr,Size)<0)
80162c18:	e1a00004 	mov	r0, r4
    RME_CPT_OCCUPY(Thd_Crt);
80162c1c:	e5923000 	ldr	r3, [r2]
80162c20:	e5863010 	str	r3, [r6, #16]
    if(_RME_Kot_Mark(Vaddr,Size)<0)
80162c24:	ebfffdb5 	bl	80162300 <_RME_Kot_Mark>
80162c28:	e3500000 	cmp	r0, #0
80162c2c:	ba000037 	blt	80162d10 <_RME_Thd_Crt+0x370>
    Thread->Sched.Slice=0U;
80162c30:	eddf0b3c 	vldr	d16, [pc, #240]	@ 80162d28 <_RME_Thd_Crt+0x388>
    Thread->Sched.TID=0U;
80162c34:	e5845010 	str	r5, [r4, #16]
    Thread->Sched.Slice=0U;
80162c38:	e2843018 	add	r3, r4, #24
    _RME_List_Crt(&(Thread->Sched.Notif));
80162c3c:	e2842008 	add	r2, r4, #8
    Thread->Sched.Signal=0U;
80162c40:	e3a01000 	mov	r1, #0
    Thread->Sched.Slice=0U;
80162c44:	f443078f 	vst1.32	{d16}, [r3]
    Head->Next=Head;
80162c48:	ee802b90 	vdup.32	d16, r2
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
80162c4c:	e1da30b0 	ldrh	r3, [sl]
    Thread->Sched.Local=RME_THD_FREE;
80162c50:	e3e00000 	mvn	r0, #0
    Thread->Ctx.Invstk_Depth=0U;
80162c54:	e3a05000 	mov	r5, #0
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
80162c58:	e3530000 	cmp	r3, #0
    if(Is_Hyp==0U)
80162c5c:	e59d3038 	ldr	r3, [sp, #56]	@ 0x38
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
80162c60:	159aa004 	ldrne	sl, [sl, #4]
    Thread->Sched.Local=RME_THD_FREE;
80162c64:	e5840014 	str	r0, [r4, #20]
    if(Is_Hyp==0U)
80162c68:	e3530000 	cmp	r3, #0
    Thread->Sched.Signal=0U;
80162c6c:	e5841028 	str	r1, [r4, #40]	@ 0x28
    _RME_List_Crt(&(Thread->Sched.Event));
80162c70:	e284303c 	add	r3, r4, #60	@ 0x3c
    Thread->Sched.Sched_Ref=0U;
80162c74:	e5841030 	str	r1, [r4, #48]	@ 0x30
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
80162c78:	e1a00006 	mov	r0, r6
    Thread->Sched.Sched_Sig=0U;
80162c7c:	e5841038 	str	r1, [r4, #56]	@ 0x38
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
80162c80:	e3a01406 	mov	r1, #100663296	@ 0x6000000
    Thread->Sched.Prc=Prc_Root;
80162c84:	e584a02c 	str	sl, [r4, #44]	@ 0x2c
    Thread->Sched.Prio_Max=Prio_Max;
80162c88:	e5849024 	str	r9, [r4, #36]	@ 0x24
    Head->Next=Head;
80162c8c:	f442078f 	vst1.32	{d16}, [r2]
    Head->Prev=Head;
80162c90:	e5843040 	str	r3, [r4, #64]	@ 0x40
    Head->Next=Head;
80162c94:	e584303c 	str	r3, [r4, #60]	@ 0x3c
        Thread->Ctx.Reg=(struct RME_Thd_Reg*)(Vaddr+RME_HYP_SIZE);
80162c98:	02843058 	addeq	r3, r4, #88	@ 0x58
        Thread->Ctx.Hyp_Attr=Attr|RME_THD_HYP_FLAG;
80162c9c:	159d3034 	ldrne	r3, [sp, #52]	@ 0x34
    Thread->Ctx.Invstk_Depth=0U;
80162ca0:	e5845054 	str	r5, [r4, #84]	@ 0x54
        Thread->Ctx.Hyp_Attr=Attr|RME_THD_HYP_FLAG;
80162ca4:	13833102 	orrne	r3, r3, #-2147483648	@ 0x80000000
80162ca8:	158d3034 	strne	r3, [sp, #52]	@ 0x34
        Thread->Ctx.Reg=RME_HYP_VA_BASE;
80162cac:	13a03202 	movne	r3, #536870912	@ 0x20000000
80162cb0:	e5843048 	str	r3, [r4, #72]	@ 0x48
80162cb4:	e59d3034 	ldr	r3, [sp, #52]	@ 0x34
80162cb8:	e5843044 	str	r3, [r4, #68]	@ 0x44
    _RME_List_Crt(&(Thread->Ctx.Invstk));
80162cbc:	e284304c 	add	r3, r4, #76	@ 0x4c
    Head->Prev=Head;
80162cc0:	e5843050 	str	r3, [r4, #80]	@ 0x50
    Head->Next=Head;
80162cc4:	e584304c 	str	r3, [r4, #76]	@ 0x4c
    Thd_Crt->Head.Flag=RME_THD_FLAG_ALL;
80162cc8:	e30031ff 	movw	r3, #511	@ 0x1ff
    Thd_Crt->Head.Root_Ref=0U;
80162ccc:	e5865004 	str	r5, [r6, #4]
    Thd_Crt->Head.Object=Vaddr;
80162cd0:	e586400c 	str	r4, [r6, #12]
    Thd_Crt->Head.Flag=RME_THD_FLAG_ALL;
80162cd4:	e5863008 	str	r3, [r6, #8]
    Old=(rme_cnt_t)(*Ptr);
80162cd8:	e59a3004 	ldr	r3, [sl, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80162cdc:	e2833001 	add	r3, r3, #1
80162ce0:	e58a3004 	str	r3, [sl, #4]
    RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),
80162ce4:	ebfff688 	bl	8016070c <__RME_A7A_Write_Release>
    return 0;
80162ce8:	e1a00005 	mov	r0, r5
80162cec:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162cf0:	e3e00001 	mvn	r0, #1
80162cf4:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
80162cf8:	e3e00006 	mvn	r0, #6
80162cfc:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162d00:	e3e00008 	mvn	r0, #8
80162d04:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return RME_ERR_PTH_PRIO;
80162d08:	e3e000cc 	mvn	r0, #204	@ 0xcc
80162d0c:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        RME_WRITE_RELEASE(&(Thd_Crt->Head.Type_Stat),0U);
80162d10:	e1a00006 	mov	r0, r6
80162d14:	e1a01005 	mov	r1, r5
80162d18:	ebfff67b 	bl	8016070c <__RME_A7A_Write_Release>
        return RME_ERR_CPT_KOT;
80162d1c:	e3e00003 	mvn	r0, #3
80162d20:	e8bd8ff8 	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
80162d24:	e320f000 	nop	{0}
80162d28:	00000000 	.word	0x00000000
80162d2c:	00000002 	.word	0x00000002

80162d30 <_RME_Inv_Crt>:
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162d30:	e3110080 	tst	r1, #128	@ 0x80
{
80162d34:	e92d47f0 	push	{r4, r5, r6, r7, r8, r9, sl, lr}
80162d38:	e1a05001 	mov	r5, r1
80162d3c:	e59d9020 	ldr	r9, [sp, #32]
80162d40:	e1a04000 	mov	r4, r0
80162d44:	e59d8024 	ldr	r8, [sp, #36]	@ 0x24
80162d48:	e1a06002 	mov	r6, r2
80162d4c:	e1a07003 	mov	r7, r3
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162d50:	1a000061 	bne	80162edc <_RME_Inv_Crt+0x1ac>
80162d54:	e5903014 	ldr	r3, [r0, #20]
80162d58:	e1510003 	cmp	r1, r3
80162d5c:	3590100c 	ldrcc	r1, [r0, #12]
80162d60:	2a000083 	bcs	80162f74 <_RME_Inv_Crt+0x244>
80162d64:	e0815285 	add	r5, r1, r5, lsl #5
80162d68:	e1a00005 	mov	r0, r5
80162d6c:	ebfff663 	bl	80160700 <__RME_A7A_Read_Acquire>
80162d70:	e7e73850 	ubfx	r3, r0, #16, #8
80162d74:	e3530002 	cmp	r3, #2
80162d78:	0a0000a1 	beq	80163004 <_RME_Inv_Crt+0x2d4>
80162d7c:	e1a00c20 	lsr	r0, r0, #24
80162d80:	e3500003 	cmp	r0, #3
80162d84:	1a00009a 	bne	80162ff4 <_RME_Inv_Crt+0x2c4>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
80162d88:	e3190080 	tst	r9, #128	@ 0x80
80162d8c:	0a00004d 	beq	80162ec8 <_RME_Inv_Crt+0x198>
80162d90:	e5942014 	ldr	r2, [r4, #20]
80162d94:	e1a03429 	lsr	r3, r9, #8
80162d98:	e1530002 	cmp	r3, r2
80162d9c:	2a000074 	bcs	80162f74 <_RME_Inv_Crt+0x244>
80162da0:	e594a00c 	ldr	sl, [r4, #12]
80162da4:	e08aa283 	add	sl, sl, r3, lsl #5
80162da8:	e1a0000a 	mov	r0, sl
80162dac:	ebfff653 	bl	80160700 <__RME_A7A_Read_Acquire>
80162db0:	e7e73850 	ubfx	r3, r0, #16, #8
80162db4:	e3530002 	cmp	r3, #2
80162db8:	0a000091 	beq	80163004 <_RME_Inv_Crt+0x2d4>
80162dbc:	e1a00c20 	lsr	r0, r0, #24
80162dc0:	e3500003 	cmp	r0, #3
80162dc4:	1a00008a 	bne	80162ff4 <_RME_Inv_Crt+0x2c4>
80162dc8:	e59a3014 	ldr	r3, [sl, #20]
80162dcc:	e209907f 	and	r9, r9, #127	@ 0x7f
80162dd0:	e1590003 	cmp	r9, r3
80162dd4:	2a000066 	bcs	80162f74 <_RME_Inv_Crt+0x244>
80162dd8:	e59a300c 	ldr	r3, [sl, #12]
80162ddc:	e0839289 	add	r9, r3, r9, lsl #5
80162de0:	e1a00009 	mov	r0, r9
80162de4:	ebfff645 	bl	80160700 <__RME_A7A_Read_Acquire>
80162de8:	e7e73850 	ubfx	r3, r0, #16, #8
80162dec:	e3530002 	cmp	r3, #2
80162df0:	0a000083 	beq	80163004 <_RME_Inv_Crt+0x2d4>
80162df4:	e1a00c20 	lsr	r0, r0, #24
80162df8:	e3500005 	cmp	r0, #5
80162dfc:	1a00007c 	bne	80162ff4 <_RME_Inv_Crt+0x2c4>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
80162e00:	e3160080 	tst	r6, #128	@ 0x80
80162e04:	1a000048 	bne	80162f2c <_RME_Inv_Crt+0x1fc>
80162e08:	e5943014 	ldr	r3, [r4, #20]
80162e0c:	e1560003 	cmp	r6, r3
80162e10:	2a000057 	bcs	80162f74 <_RME_Inv_Crt+0x244>
80162e14:	e594200c 	ldr	r2, [r4, #12]
80162e18:	e0826286 	add	r6, r2, r6, lsl #5
80162e1c:	e1a00006 	mov	r0, r6
80162e20:	ebfff636 	bl	80160700 <__RME_A7A_Read_Acquire>
80162e24:	e7e73850 	ubfx	r3, r0, #16, #8
80162e28:	e3530002 	cmp	r3, #2
80162e2c:	0a000074 	beq	80163004 <_RME_Inv_Crt+0x2d4>
80162e30:	e1a00c20 	lsr	r0, r0, #24
80162e34:	e3500002 	cmp	r0, #2
80162e38:	1a00006d 	bne	80162ff4 <_RME_Inv_Crt+0x2c4>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
80162e3c:	e5953008 	ldr	r3, [r5, #8]
80162e40:	e3130001 	tst	r3, #1
80162e44:	0a00006c 	beq	80162ffc <_RME_Inv_Crt+0x2cc>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_INV);
80162e48:	e5993008 	ldr	r3, [r9, #8]
80162e4c:	e3130001 	tst	r3, #1
80162e50:	0a000069 	beq	80162ffc <_RME_Inv_Crt+0x2cc>
    RME_KOM_CHECK(Kom_Op,RME_KOM_FLAG_INV,Raddr,Vaddr,RME_INV_SIZE);
80162e54:	e5963008 	ldr	r3, [r6, #8]
80162e58:	e3130008 	tst	r3, #8
80162e5c:	0a000066 	beq	80162ffc <_RME_Inv_Crt+0x2cc>
80162e60:	e5963014 	ldr	r3, [r6, #20]
80162e64:	e0834008 	add	r4, r3, r8
80162e68:	e1530008 	cmp	r3, r8
80162e6c:	31a03008 	movcc	r3, r8
80162e70:	e3740025 	cmn	r4, #37	@ 0x25
80162e74:	93a02000 	movls	r2, #0
80162e78:	83a02001 	movhi	r2, #1
80162e7c:	e1540003 	cmp	r4, r3
80162e80:	33822001 	orrcc	r2, r2, #1
80162e84:	e3520000 	cmp	r2, #0
80162e88:	1a00005b 	bne	80162ffc <_RME_Inv_Crt+0x2cc>
80162e8c:	e5962018 	ldr	r2, [r6, #24]
80162e90:	e2843023 	add	r3, r4, #35	@ 0x23
80162e94:	e1520003 	cmp	r2, r3
80162e98:	3a000057 	bcc	80162ffc <_RME_Inv_Crt+0x2cc>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
80162e9c:	e5953014 	ldr	r3, [r5, #20]
80162ea0:	e1530007 	cmp	r3, r7
80162ea4:	9a000032 	bls	80162f74 <_RME_Inv_Crt+0x244>
80162ea8:	e595300c 	ldr	r3, [r5, #12]
    if(*Ptr==Old)
80162eac:	e7938287 	ldr	r8, [r3, r7, lsl #5]
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
80162eb0:	e0836287 	add	r6, r3, r7, lsl #5
    if(*Ptr==Old)
80162eb4:	e3580000 	cmp	r8, #0
    RME_CPT_OCCUPY(Inv_Crt);
80162eb8:	13e05004 	mvnne	r5, #4
    if(*Ptr==Old)
80162ebc:	0a00002e 	beq	80162f7c <_RME_Inv_Crt+0x24c>
}
80162ec0:	e1a00005 	mov	r0, r5
80162ec4:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
80162ec8:	e5943014 	ldr	r3, [r4, #20]
80162ecc:	e1590003 	cmp	r9, r3
80162ed0:	2a000027 	bcs	80162f74 <_RME_Inv_Crt+0x244>
80162ed4:	e594300c 	ldr	r3, [r4, #12]
80162ed8:	eaffffbf 	b	80162ddc <_RME_Inv_Crt+0xac>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162edc:	e5902014 	ldr	r2, [r0, #20]
80162ee0:	e1a03421 	lsr	r3, r1, #8
80162ee4:	e1530002 	cmp	r3, r2
80162ee8:	2a000021 	bcs	80162f74 <_RME_Inv_Crt+0x244>
80162eec:	e590a00c 	ldr	sl, [r0, #12]
80162ef0:	e08aa283 	add	sl, sl, r3, lsl #5
80162ef4:	e1a0000a 	mov	r0, sl
80162ef8:	ebfff600 	bl	80160700 <__RME_A7A_Read_Acquire>
80162efc:	e7e73850 	ubfx	r3, r0, #16, #8
80162f00:	e3530002 	cmp	r3, #2
80162f04:	0a00003e 	beq	80163004 <_RME_Inv_Crt+0x2d4>
80162f08:	e1a00c20 	lsr	r0, r0, #24
80162f0c:	e3500003 	cmp	r0, #3
80162f10:	1a000037 	bne	80162ff4 <_RME_Inv_Crt+0x2c4>
80162f14:	e59a3014 	ldr	r3, [sl, #20]
80162f18:	e205507f 	and	r5, r5, #127	@ 0x7f
80162f1c:	e1550003 	cmp	r5, r3
80162f20:	2a000013 	bcs	80162f74 <_RME_Inv_Crt+0x244>
80162f24:	e59a100c 	ldr	r1, [sl, #12]
80162f28:	eaffff8d 	b	80162d64 <_RME_Inv_Crt+0x34>
    RME_CPT_GETCAP(Cpt,Cap_Kom,RME_CAP_TYPE_KOM,
80162f2c:	e5942014 	ldr	r2, [r4, #20]
80162f30:	e1a03426 	lsr	r3, r6, #8
80162f34:	e1530002 	cmp	r3, r2
80162f38:	2a00000d 	bcs	80162f74 <_RME_Inv_Crt+0x244>
80162f3c:	e594400c 	ldr	r4, [r4, #12]
80162f40:	e0844283 	add	r4, r4, r3, lsl #5
80162f44:	e1a00004 	mov	r0, r4
80162f48:	ebfff5ec 	bl	80160700 <__RME_A7A_Read_Acquire>
80162f4c:	e7e73850 	ubfx	r3, r0, #16, #8
80162f50:	e3530002 	cmp	r3, #2
80162f54:	0a00002a 	beq	80163004 <_RME_Inv_Crt+0x2d4>
80162f58:	e1a00c20 	lsr	r0, r0, #24
80162f5c:	e3500003 	cmp	r0, #3
80162f60:	1a000023 	bne	80162ff4 <_RME_Inv_Crt+0x2c4>
80162f64:	e5943014 	ldr	r3, [r4, #20]
80162f68:	e206607f 	and	r6, r6, #127	@ 0x7f
80162f6c:	e1560003 	cmp	r6, r3
80162f70:	3affffa7 	bcc	80162e14 <_RME_Inv_Crt+0xe4>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162f74:	e3e05002 	mvn	r5, #2
80162f78:	eaffffd0 	b	80162ec0 <_RME_Inv_Crt+0x190>
    RME_CPT_OCCUPY(Inv_Crt);
80162f7c:	e3072114 	movw	r2, #28948	@ 0x7114
        *Ptr=New;
80162f80:	e3a01801 	mov	r1, #65536	@ 0x10000
    RME_CPT_OCCUPY(Inv_Crt);
80162f84:	e3482096 	movt	r2, #32918	@ 0x8096
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
80162f88:	e1a00004 	mov	r0, r4
        *Ptr=New;
80162f8c:	e7831287 	str	r1, [r3, r7, lsl #5]
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
80162f90:	e3a01024 	mov	r1, #36	@ 0x24
    RME_CPT_OCCUPY(Inv_Crt);
80162f94:	e5923000 	ldr	r3, [r2]
80162f98:	e5863010 	str	r3, [r6, #16]
    if(_RME_Kot_Mark(Vaddr,RME_INV_SIZE)!=0)
80162f9c:	ebfffcd7 	bl	80162300 <_RME_Kot_Mark>
80162fa0:	e2505000 	subs	r5, r0, #0
80162fa4:	1a000018 	bne	8016300c <_RME_Inv_Crt+0x2dc>
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
80162fa8:	e1d930b0 	ldrh	r3, [r9]
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
80162fac:	e1a00006 	mov	r0, r6
80162fb0:	e3a01407 	mov	r1, #117440512	@ 0x7000000
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
80162fb4:	e3530000 	cmp	r3, #0
    Invocation->Thd_Act=RME_NULL;
80162fb8:	e3a03000 	mov	r3, #0
    Prc_Root=RME_CAP_CONV_ROOT(Prc_Op,struct RME_Cap_Prc*);
80162fbc:	15999004 	ldrne	r9, [r9, #4]
    Invocation->Thd_Act=RME_NULL;
80162fc0:	e584300c 	str	r3, [r4, #12]
    Invocation->Is_Exc_Ret=0U;
80162fc4:	e5843018 	str	r3, [r4, #24]
    Invocation->Prc=Prc_Root;
80162fc8:	e5849008 	str	r9, [r4, #8]
    Inv_Crt->Head.Root_Ref=0U;
80162fcc:	e5863004 	str	r3, [r6, #4]
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
80162fd0:	e3a03003 	mov	r3, #3
    Inv_Crt->Head.Object=Vaddr;
80162fd4:	e586400c 	str	r4, [r6, #12]
    Inv_Crt->Head.Flag=RME_INV_FLAG_ALL;
80162fd8:	e5863008 	str	r3, [r6, #8]
    Old=(rme_cnt_t)(*Ptr);
80162fdc:	e5993004 	ldr	r3, [r9, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80162fe0:	e2833001 	add	r3, r3, #1
80162fe4:	e5893004 	str	r3, [r9, #4]
    RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),
80162fe8:	ebfff5c7 	bl	8016070c <__RME_A7A_Write_Release>
}
80162fec:	e1a00005 	mov	r0, r5
80162ff0:	e8bd87f0 	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80162ff4:	e3e05001 	mvn	r5, #1
80162ff8:	eaffffb0 	b	80162ec0 <_RME_Inv_Crt+0x190>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
80162ffc:	e3e05006 	mvn	r5, #6
80163000:	eaffffae 	b	80162ec0 <_RME_Inv_Crt+0x190>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80163004:	e3e05008 	mvn	r5, #8
80163008:	eaffffac 	b	80162ec0 <_RME_Inv_Crt+0x190>
        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
8016300c:	e1a01008 	mov	r1, r8
80163010:	e1a00006 	mov	r0, r6
        return RME_ERR_CPT_KOT;
80163014:	e3e05003 	mvn	r5, #3
        RME_WRITE_RELEASE(&(Inv_Crt->Head.Type_Stat),0U);
80163018:	ebfff5bb 	bl	8016070c <__RME_A7A_Write_Release>
        return RME_ERR_CPT_KOT;
8016301c:	eaffffa7 	b	80162ec0 <_RME_Inv_Crt+0x190>

80163020 <_RME_Kot_Erase>:
{
80163020:	e1a02001 	mov	r2, r1
    if((Kaddr&RME_MASK_END(RME_KOM_SLOT_ORDER-1U))!=0U)
80163024:	e210100f 	ands	r1, r0, #15
80163028:	1a00005a 	bne	80163198 <_RME_Kot_Erase+0x178>
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
8016302c:	e282247f 	add	r2, r2, #2130706432	@ 0x7f000000
    Start=(Kaddr-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
80163030:	e280c47f 	add	ip, r0, #2130706432	@ 0x7f000000
    End=(Kaddr+Size-1U-RME_KOM_VA_BASE)>>RME_KOM_SLOT_ORDER;
80163034:	e2422001 	sub	r2, r2, #1
80163038:	e0822000 	add	r2, r2, r0
    Start=Start>>RME_WORD_ORDER;
8016303c:	e1a0c4ac 	lsr	ip, ip, #9
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
80163040:	e1e03222 	mvn	r3, r2, lsr #4
    End=End>>RME_WORD_ORDER;
80163044:	e1a024a2 	lsr	r2, r2, #9
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
80163048:	e203301f 	and	r3, r3, #31
{
8016304c:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
    if(Start==End)
80163050:	e15c0002 	cmp	ip, r2
    Mask_Begin=RME_MASK_BEGIN(Start&RME_MASK_END(RME_WORD_ORDER-1U));
80163054:	e7e45250 	ubfx	r5, r0, #4, #5
80163058:	e3e00000 	mvn	r0, #0
8016305c:	e1a05510 	lsl	r5, r0, r5
    Mask_End=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1U));
80163060:	e1a08330 	lsr	r8, r0, r3
    if(Start==End)
80163064:	0a000015 	beq	801630c0 <_RME_Kot_Erase+0xa0>
        if((RME_KOT_VA_BASE[Start]&Mask_Begin)!=Mask_Begin)
80163068:	e3076000 	movw	r6, #28672	@ 0x7000
8016306c:	e3486016 	movt	r6, #32790	@ 0x8016
80163070:	e796310c 	ldr	r3, [r6, ip, lsl #2]
80163074:	e1d51003 	bics	r1, r5, r3
80163078:	e0033005 	and	r3, r3, r5
8016307c:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
        for(Count=Start+1U;Count<End-1U;Count++)
80163080:	e28c7001 	add	r7, ip, #1
80163084:	e242e001 	sub	lr, r2, #1
80163088:	e157000e 	cmp	r7, lr
8016308c:	2a00003a 	bcs	8016317c <_RME_Kot_Erase+0x15c>
80163090:	e0864107 	add	r4, r6, r7, lsl #2
80163094:	e1a03007 	mov	r3, r7
80163098:	e2440004 	sub	r0, r4, #4
8016309c:	ea000001 	b	801630a8 <_RME_Kot_Erase+0x88>
801630a0:	e153000e 	cmp	r3, lr
801630a4:	0a00000f 	beq	801630e8 <_RME_Kot_Erase+0xc8>
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
801630a8:	e5b01004 	ldr	r1, [r0, #4]!
        for(Count=Start+1U;Count<End-1U;Count++)
801630ac:	e2833001 	add	r3, r3, #1
            if(RME_KOT_VA_BASE[Count]!=RME_MASK_FULL)
801630b0:	e3710001 	cmn	r1, #1
801630b4:	0afffff9 	beq	801630a0 <_RME_Kot_Erase+0x80>
        return RME_ERR_KOT_BMP;
801630b8:	e3e00000 	mvn	r0, #0
801630bc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if((RME_KOT_VA_BASE[Start]&(Mask_Begin&Mask_End))!=(Mask_Begin&Mask_End))
801630c0:	e3072000 	movw	r2, #28672	@ 0x7000
801630c4:	e0055008 	and	r5, r5, r8
801630c8:	e3482016 	movt	r2, #32790	@ 0x8016
801630cc:	e792310c 	ldr	r3, [r2, ip, lsl #2]
801630d0:	e1d53003 	bics	r3, r5, r3
    return 0;
801630d4:	01a00001 	moveq	r0, r1
    Old=*Ptr;
801630d8:	0792310c 	ldreq	r3, [r2, ip, lsl #2]
    *Ptr=Old&Operand;
801630dc:	01c33005 	biceq	r3, r3, r5
801630e0:	0782310c 	streq	r3, [r2, ip, lsl #2]
    return Old;
801630e4:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
801630e8:	e7963102 	ldr	r3, [r6, r2, lsl #2]
801630ec:	e1d83003 	bics	r3, r8, r3
801630f0:	1afffff0 	bne	801630b8 <_RME_Kot_Erase+0x98>
    Old=*Ptr;
801630f4:	e796310c 	ldr	r3, [r6, ip, lsl #2]
    *Ptr=Old&Operand;
801630f8:	e1c35005 	bic	r5, r3, r5
801630fc:	e2423003 	sub	r3, r2, #3
80163100:	e043300c 	sub	r3, r3, ip
80163104:	e786510c 	str	r5, [r6, ip, lsl #2]
        for(Count=Start+1U;Count<End-1U;Count++)
80163108:	e3530002 	cmp	r3, #2
8016310c:	e2423002 	sub	r3, r2, #2
80163110:	e043c00c 	sub	ip, r3, ip
80163114:	9a00000a 	bls	80163144 <_RME_Kot_Erase+0x124>
80163118:	e1a0112c 	lsr	r1, ip, #2
8016311c:	e1a03004 	mov	r3, r4
            RME_KOT_VA_BASE[Count]=0U;
80163120:	f2c00050 	vmov.i32	q8, #0	@ 0x00000000
80163124:	e0841201 	add	r1, r4, r1, lsl #4
80163128:	f4430a8d 	vst1.32	{d16-d17}, [r3]!
        for(Count=Start+1U;Count<End-1U;Count++)
8016312c:	e1530001 	cmp	r3, r1
80163130:	1afffffc 	bne	80163128 <_RME_Kot_Erase+0x108>
80163134:	e3cc3003 	bic	r3, ip, #3
80163138:	e15c0003 	cmp	ip, r3
8016313c:	e0877003 	add	r7, r7, r3
80163140:	0a000008 	beq	80163168 <_RME_Kot_Erase+0x148>
80163144:	e2871001 	add	r1, r7, #1
            RME_KOT_VA_BASE[Count]=0U;
80163148:	e3a03000 	mov	r3, #0
        for(Count=Start+1U;Count<End-1U;Count++)
8016314c:	e151000e 	cmp	r1, lr
            RME_KOT_VA_BASE[Count]=0U;
80163150:	e7863107 	str	r3, [r6, r7, lsl #2]
        for(Count=Start+1U;Count<End-1U;Count++)
80163154:	2a000003 	bcs	80163168 <_RME_Kot_Erase+0x148>
            RME_KOT_VA_BASE[Count]=0U;
80163158:	e7863101 	str	r3, [r6, r1, lsl #2]
        for(Count=Start+1U;Count<End-1U;Count++)
8016315c:	e2877002 	add	r7, r7, #2
80163160:	e15e0007 	cmp	lr, r7
            RME_KOT_VA_BASE[Count]=0U;
80163164:	87863107 	strhi	r3, [r6, r7, lsl #2]
    Old=*Ptr;
80163168:	e7963102 	ldr	r3, [r6, r2, lsl #2]
    return 0;
8016316c:	e3a00000 	mov	r0, #0
    *Ptr=Old&Operand;
80163170:	e1c33008 	bic	r3, r3, r8
80163174:	e7863102 	str	r3, [r6, r2, lsl #2]
    return Old;
80163178:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
        if((RME_KOT_VA_BASE[End]&Mask_End)!=Mask_End)
8016317c:	e7961102 	ldr	r1, [r6, r2, lsl #2]
80163180:	e1d81001 	bics	r1, r8, r1
80163184:	18bd81f0 	popne	{r4, r5, r6, r7, r8, pc}
    Old=*Ptr;
80163188:	e796110c 	ldr	r1, [r6, ip, lsl #2]
    *Ptr=Old&Operand;
8016318c:	e1c13003 	bic	r3, r1, r3
80163190:	e786310c 	str	r3, [r6, ip, lsl #2]
        for(Count=Start+1U;Count<End-1U;Count++)
80163194:	eafffff3 	b	80163168 <_RME_Kot_Erase+0x148>
        return RME_ERR_KOT_BMP;
80163198:	e3e00000 	mvn	r0, #0
}
8016319c:	e12fff1e 	bx	lr

801631a0 <_RME_Thd_Del.isra.0>:
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
801631a0:	e3120080 	tst	r2, #128	@ 0x80
static rme_ret_t _RME_Thd_Del(struct RME_Cap_Cpt* Cpt,
801631a4:	e92d4070 	push	{r4, r5, r6, lr}
801631a8:	e1a06002 	mov	r6, r2
801631ac:	e1a05003 	mov	r5, r3
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
801631b0:	1a000029 	bne	8016325c <_RME_Thd_Del.isra.0+0xbc>
801631b4:	e1520001 	cmp	r2, r1
801631b8:	2a000043 	bcs	801632cc <_RME_Thd_Del.isra.0+0x12c>
801631bc:	e0806282 	add	r6, r0, r2, lsl #5
801631c0:	e1a00006 	mov	r0, r6
801631c4:	ebfff54d 	bl	80160700 <__RME_A7A_Read_Acquire>
801631c8:	e7e73850 	ubfx	r3, r0, #16, #8
801631cc:	e3530002 	cmp	r3, #2
801631d0:	0a000077 	beq	801633b4 <_RME_Thd_Del.isra.0+0x214>
801631d4:	e1a00c20 	lsr	r0, r0, #24
801631d8:	e3500003 	cmp	r0, #3
801631dc:	1a000069 	bne	80163388 <_RME_Thd_Del.isra.0+0x1e8>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
801631e0:	e5963008 	ldr	r3, [r6, #8]
801631e4:	e3130002 	tst	r3, #2
801631e8:	0a000083 	beq	801633fc <_RME_Thd_Del.isra.0+0x25c>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
801631ec:	e5963014 	ldr	r3, [r6, #20]
801631f0:	e1530005 	cmp	r3, r5
801631f4:	9a000034 	bls	801632cc <_RME_Thd_Del.isra.0+0x12c>
801631f8:	e596600c 	ldr	r6, [r6, #12]
801631fc:	e0864285 	add	r4, r6, r5, lsl #5
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
80163200:	e1a00004 	mov	r0, r4
80163204:	ebfff53d 	bl	80160700 <__RME_A7A_Read_Acquire>
80163208:	e7e73850 	ubfx	r3, r0, #16, #8
8016320c:	e3530002 	cmp	r3, #2
80163210:	1a000067 	bne	801633b4 <_RME_Thd_Del.isra.0+0x214>
80163214:	e1a03c20 	lsr	r3, r0, #24
80163218:	e3530006 	cmp	r3, #6
8016321c:	1a000059 	bne	80163388 <_RME_Thd_Del.isra.0+0x1e8>
80163220:	e5943004 	ldr	r3, [r4, #4]
80163224:	e3530000 	cmp	r3, #0
80163228:	1a000075 	bne	80163404 <_RME_Thd_Del.isra.0+0x264>
8016322c:	e6ffc070 	uxth	ip, r0
80163230:	e35c0000 	cmp	ip, #0
80163234:	1a00001b 	bne	801632a8 <_RME_Thd_Del.isra.0+0x108>
    Thread=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
80163238:	e594200c 	ldr	r2, [r4, #12]
    if(Thread->Sched.Local!=RME_THD_FREE)
8016323c:	e5923014 	ldr	r3, [r2, #20]
80163240:	e3730001 	cmn	r3, #1
80163244:	1a00005c 	bne	801633bc <_RME_Thd_Del.isra.0+0x21c>
    if(*Ptr==Old)
80163248:	e7961285 	ldr	r1, [r6, r5, lsl #5]
8016324c:	e1500001 	cmp	r0, r1
80163250:	0a00001f 	beq	801632d4 <_RME_Thd_Del.isra.0+0x134>
    RME_CAP_DELETE(Thd_Del,Type_Stat);
80163254:	e1a00003 	mov	r0, r3
}
80163258:	e8bd8070 	pop	{r4, r5, r6, pc}
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
8016325c:	e1a04422 	lsr	r4, r2, #8
80163260:	e1540001 	cmp	r4, r1
80163264:	2a000018 	bcs	801632cc <_RME_Thd_Del.isra.0+0x12c>
80163268:	e0804284 	add	r4, r0, r4, lsl #5
8016326c:	e1a00004 	mov	r0, r4
80163270:	ebfff522 	bl	80160700 <__RME_A7A_Read_Acquire>
80163274:	e7e73850 	ubfx	r3, r0, #16, #8
80163278:	e3530002 	cmp	r3, #2
8016327c:	0a00004c 	beq	801633b4 <_RME_Thd_Del.isra.0+0x214>
80163280:	e1a00c20 	lsr	r0, r0, #24
80163284:	e3500003 	cmp	r0, #3
80163288:	1a00003e 	bne	80163388 <_RME_Thd_Del.isra.0+0x1e8>
8016328c:	e5943014 	ldr	r3, [r4, #20]
80163290:	e206607f 	and	r6, r6, #127	@ 0x7f
80163294:	e1560003 	cmp	r6, r3
80163298:	2a00000b 	bcs	801632cc <_RME_Thd_Del.isra.0+0x12c>
8016329c:	e594400c 	ldr	r4, [r4, #12]
801632a0:	e0846286 	add	r6, r4, r6, lsl #5
801632a4:	eaffffc5 	b	801631c0 <_RME_Thd_Del.isra.0+0x20>
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
801632a8:	e306308c 	movw	r3, #24716	@ 0x608c
801632ac:	e3062098 	movw	r2, #24728	@ 0x6098
801632b0:	e3483016 	movt	r3, #32790	@ 0x8016
801632b4:	e30600a4 	movw	r0, #24740	@ 0x60a4
801632b8:	e3482016 	movt	r2, #32790	@ 0x8016
801632bc:	e30114f3 	movw	r1, #5363	@ 0x14f3
801632c0:	e3480016 	movt	r0, #32790	@ 0x8016
801632c4:	ebfff8d3 	bl	80161618 <RME_Log>
801632c8:	eafffffe 	b	801632c8 <_RME_Thd_Del.isra.0+0x128>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
801632cc:	e3e00002 	mvn	r0, #2
801632d0:	e8bd8070 	pop	{r4, r5, r6, pc}
        *Ptr=New;
801632d4:	e786c285 	str	ip, [r6, r5, lsl #5]
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
801632d8:	e1a0e002 	mov	lr, r2
801632dc:	e5be304c 	ldr	r3, [lr, #76]!	@ 0x4c
801632e0:	e153000e 	cmp	r3, lr
801632e4:	0a000042 	beq	801633f4 <_RME_Thd_Del.isra.0+0x254>
        _RME_List_Del(Invocation->Head.Prev,Invocation->Head.Next);
801632e8:	e1c300d0 	ldrd	r0, [r3]
    Next->Prev=Prev;
801632ec:	e5801004 	str	r1, [r0, #4]
    Prev->Next=Next;
801632f0:	e5810000 	str	r0, [r1]
        Invocation->Thd_Act=0U;
801632f4:	e583c00c 	str	ip, [r3, #12]
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
801632f8:	e592304c 	ldr	r3, [r2, #76]	@ 0x4c
        Thread->Ctx.Invstk_Depth--;
801632fc:	e5921054 	ldr	r1, [r2, #84]	@ 0x54
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
80163300:	e153000e 	cmp	r3, lr
        Thread->Ctx.Invstk_Depth--;
80163304:	e2411001 	sub	r1, r1, #1
80163308:	e5821054 	str	r1, [r2, #84]	@ 0x54
    while(Thread->Ctx.Invstk.Next!=&(Thread->Ctx.Invstk))
8016330c:	1afffff5 	bne	801632e8 <_RME_Thd_Del.isra.0+0x148>
    RME_ASSERT(Thread->Ctx.Invstk_Depth==0U);
80163310:	e3510000 	cmp	r1, #0
80163314:	1a00001d 	bne	80163390 <_RME_Thd_Del.isra.0+0x1f0>
    RME_FETCH_ADD(&(Thread->Sched.Prc->Head.Root_Ref), -1);
80163318:	e592102c 	ldr	r1, [r2, #44]	@ 0x2c
    Old=(rme_cnt_t)(*Ptr);
8016331c:	e5913004 	ldr	r3, [r1, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80163320:	e2433001 	sub	r3, r3, #1
80163324:	e5813004 	str	r3, [r1, #4]
    if((Thread->Ctx.Hyp_Attr&RME_THD_HYP_FLAG)==0U)
80163328:	e5923044 	ldr	r3, [r2, #68]	@ 0x44
8016332c:	e3530000 	cmp	r3, #0
80163330:	ba000006 	blt	80163350 <_RME_Thd_Del.isra.0+0x1b0>
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
80163334:	e3a0109c 	mov	r1, #156	@ 0x9c
80163338:	e1a00002 	mov	r0, r2
8016333c:	ebffff37 	bl	80163020 <_RME_Kot_Erase>
80163340:	e3500000 	cmp	r0, #0
80163344:	1a000021 	bne	801633d0 <_RME_Thd_Del.isra.0+0x230>
    return 0;
80163348:	e3a00000 	mov	r0, #0
8016334c:	e8bd8070 	pop	{r4, r5, r6, pc}
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
80163350:	e3a01058 	mov	r1, #88	@ 0x58
80163354:	e1a00002 	mov	r0, r2
80163358:	ebffff30 	bl	80163020 <_RME_Kot_Erase>
8016335c:	e3500000 	cmp	r0, #0
80163360:	0afffff8 	beq	80163348 <_RME_Thd_Del.isra.0+0x1a8>
80163364:	e306308c 	movw	r3, #24716	@ 0x608c
80163368:	e3062098 	movw	r2, #24728	@ 0x6098
8016336c:	e3483016 	movt	r3, #32790	@ 0x8016
80163370:	e30600a4 	movw	r0, #24740	@ 0x60a4
80163374:	e3482016 	movt	r2, #32790	@ 0x8016
80163378:	e3011525 	movw	r1, #5413	@ 0x1525
8016337c:	e3480016 	movt	r0, #32790	@ 0x8016
80163380:	ebfff8a4 	bl	80161618 <RME_Log>
80163384:	eafffffe 	b	80163384 <_RME_Thd_Del.isra.0+0x1e4>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80163388:	e3e00001 	mvn	r0, #1
8016338c:	e8bd8070 	pop	{r4, r5, r6, pc}
    RME_ASSERT(Thread->Ctx.Invstk_Depth==0U);
80163390:	e306308c 	movw	r3, #24716	@ 0x608c
80163394:	e3062098 	movw	r2, #24728	@ 0x6098
80163398:	e3483016 	movt	r3, #32790	@ 0x8016
8016339c:	e30600a4 	movw	r0, #24740	@ 0x60a4
801633a0:	e3482016 	movt	r2, #32790	@ 0x8016
801633a4:	e3011514 	movw	r1, #5396	@ 0x1514
801633a8:	e3480016 	movt	r0, #32790	@ 0x8016
801633ac:	ebfff899 	bl	80161618 <RME_Log>
801633b0:	eafffffe 	b	801633b0 <_RME_Thd_Del.isra.0+0x210>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
801633b4:	e3e00008 	mvn	r0, #8
801633b8:	e8bd8070 	pop	{r4, r5, r6, pc}
    if(*Ptr==Old)
801633bc:	e7963285 	ldr	r3, [r6, r5, lsl #5]
801633c0:	e1500003 	cmp	r0, r3
801633c4:	0a000016 	beq	80163424 <_RME_Thd_Del.isra.0+0x284>
        return RME_ERR_PTH_INVSTATE;
801633c8:	e3e000cb 	mvn	r0, #203	@ 0xcb
801633cc:	e8bd8070 	pop	{r4, r5, r6, pc}
        RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Thread,
801633d0:	e306308c 	movw	r3, #24716	@ 0x608c
801633d4:	e3062098 	movw	r2, #24728	@ 0x6098
801633d8:	e3483016 	movt	r3, #32790	@ 0x8016
801633dc:	e30600a4 	movw	r0, #24740	@ 0x60a4
801633e0:	e3482016 	movt	r2, #32790	@ 0x8016
801633e4:	e301151e 	movw	r1, #5406	@ 0x151e
801633e8:	e3480016 	movt	r0, #32790	@ 0x8016
801633ec:	ebfff889 	bl	80161618 <RME_Log>
801633f0:	eafffffe 	b	801633f0 <_RME_Thd_Del.isra.0+0x250>
    RME_ASSERT(Thread->Ctx.Invstk_Depth==0U);
801633f4:	e5921054 	ldr	r1, [r2, #84]	@ 0x54
801633f8:	eaffffc4 	b	80163310 <_RME_Thd_Del.isra.0+0x170>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
801633fc:	e3e00006 	mvn	r0, #6
80163400:	e8bd8070 	pop	{r4, r5, r6, pc}
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
80163404:	e6ff3070 	uxth	r3, r0
80163408:	e3530000 	cmp	r3, #0
8016340c:	1a000002 	bne	8016341c <_RME_Thd_Del.isra.0+0x27c>
    if(*Ptr==Old)
80163410:	e7963285 	ldr	r3, [r6, r5, lsl #5]
80163414:	e1500003 	cmp	r0, r3
80163418:	0a000005 	beq	80163434 <_RME_Thd_Del.isra.0+0x294>
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
8016341c:	e3e00005 	mvn	r0, #5
80163420:	e8bd8070 	pop	{r4, r5, r6, pc}
        RME_CAP_DEFROST(Thd_Del,Type_Stat);
80163424:	e3c028ff 	bic	r2, r0, #16711680	@ 0xff0000
        return RME_ERR_PTH_INVSTATE;
80163428:	e3e000cb 	mvn	r0, #203	@ 0xcb
        *Ptr=New;
8016342c:	e7862285 	str	r2, [r6, r5, lsl #5]
        return 1U;
80163430:	e8bd8070 	pop	{r4, r5, r6, pc}
    RME_CAP_DEL_CHECK(Thd_Del,Type_Stat,RME_CAP_TYPE_THD);
80163434:	e3c028ff 	bic	r2, r0, #16711680	@ 0xff0000
80163438:	e3e00005 	mvn	r0, #5
        *Ptr=New;
8016343c:	e7862285 	str	r2, [r6, r5, lsl #5]
        return 1U;
80163440:	e8bd8070 	pop	{r4, r5, r6, pc}
80163444:	00000000 	andeq	r0, r0, r0

80163448 <_RME_CPU_Local_Init>:
{
80163448:	e52de004 	push	{lr}		@ (str lr, [sp, #-4]!)
    Local->Thd_Cur=RME_NULL;
8016344c:	e280c004 	add	ip, r0, #4
{
80163450:	ed2d8b04 	vpush	{d8-d9}
80163454:	eea00b90 	vdup.32	q8, r0
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
80163458:	ed9f8b56 	vldr	d8, [pc, #344]	@ 801635b8 <_RME_CPU_Local_Init+0x170>
8016345c:	ed9f9b57 	vldr	d9, [pc, #348]	@ 801635c0 <_RME_CPU_Local_Init+0x178>
80163460:	eddf6b58 	vldr	d22, [pc, #352]	@ 801635c8 <_RME_CPU_Local_Init+0x180>
80163464:	eddf7b59 	vldr	d23, [pc, #356]	@ 801635d0 <_RME_CPU_Local_Init+0x188>
80163468:	eddf8b5a 	vldr	d24, [pc, #360]	@ 801635d8 <_RME_CPU_Local_Init+0x190>
8016346c:	eddf9b5b 	vldr	d25, [pc, #364]	@ 801635e0 <_RME_CPU_Local_Init+0x198>
80163470:	eddf4b5c 	vldr	d20, [pc, #368]	@ 801635e8 <_RME_CPU_Local_Init+0x1a0>
80163474:	eddf5b5d 	vldr	d21, [pc, #372]	@ 801635f0 <_RME_CPU_Local_Init+0x1a8>
80163478:	f22088c8 	vadd.i32	q4, q8, q4
    Local->Thd_Cur=RME_NULL;
8016347c:	f2c02010 	vmov.i32	d18, #0	@ 0x00000000
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
80163480:	ed9f0b5c 	vldr	d0, [pc, #368]	@ 801635f8 <_RME_CPU_Local_Init+0x1b0>
80163484:	ed9f1b5d 	vldr	d1, [pc, #372]	@ 80163600 <_RME_CPU_Local_Init+0x1b8>
80163488:	ed9f2b5e 	vldr	d2, [pc, #376]	@ 80163608 <_RME_CPU_Local_Init+0x1c0>
8016348c:	ed9f3b5f 	vldr	d3, [pc, #380]	@ 80163610 <_RME_CPU_Local_Init+0x1c8>
80163490:	f26068e6 	vadd.i32	q11, q8, q11
80163494:	f26048e4 	vadd.i32	q10, q8, q10
80163498:	f26088e8 	vadd.i32	q12, q8, q12
    Local->CPUID=CPUID;
8016349c:	e5801000 	str	r1, [r0]
    Head->Next=Head;
801634a0:	e2802014 	add	r2, r0, #20
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
801634a4:	ed9f4b5b 	vldr	d4, [pc, #364]	@ 80163618 <_RME_CPU_Local_Init+0x1d0>
801634a8:	ed9f5b5c 	vldr	d5, [pc, #368]	@ 80163620 <_RME_CPU_Local_Init+0x1d8>
801634ac:	ed9f6b5d 	vldr	d6, [pc, #372]	@ 80163628 <_RME_CPU_Local_Init+0x1e0>
801634b0:	ed9f7b5e 	vldr	d7, [pc, #376]	@ 80163630 <_RME_CPU_Local_Init+0x1e8>
    Local->Sig_Vct=RME_NULL;
801634b4:	e3a03000 	mov	r3, #0
    Head->Next=Head;
801634b8:	e280e024 	add	lr, r0, #36	@ 0x24
    Local->Sig_Vct=RME_NULL;
801634bc:	e580300c 	str	r3, [r0, #12]
    Head->Next=Head;
801634c0:	e2801054 	add	r1, r0, #84	@ 0x54
    Local->Thd_Cur=RME_NULL;
801634c4:	f44c278f 	vst1.32	{d18}, [ip]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
801634c8:	f22028c2 	vadd.i32	q1, q8, q1
    Head->Next=Head;
801634cc:	f4028a8f 	vst1.32	{d8-d9}, [r2]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
801634d0:	f22008c0 	vadd.i32	q0, q8, q0
    Head->Next=Head;
801634d4:	e280c034 	add	ip, r0, #52	@ 0x34
801634d8:	e2802044 	add	r2, r0, #68	@ 0x44
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
801634dc:	eddfeb55 	vldr	d30, [pc, #340]	@ 80163638 <_RME_CPU_Local_Init+0x1f0>
801634e0:	eddffb56 	vldr	d31, [pc, #344]	@ 80163640 <_RME_CPU_Local_Init+0x1f8>
801634e4:	eddfcb57 	vldr	d28, [pc, #348]	@ 80163648 <_RME_CPU_Local_Init+0x200>
801634e8:	eddfdb58 	vldr	d29, [pc, #352]	@ 80163650 <_RME_CPU_Local_Init+0x208>
    Head->Next=Head;
801634ec:	f44e6a8f 	vst1.32	{d22-d23}, [lr]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
801634f0:	f22048c4 	vadd.i32	q2, q8, q2
    Head->Next=Head;
801634f4:	f44c8a8f 	vst1.32	{d24-d25}, [ip]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
801634f8:	f22068c6 	vadd.i32	q3, q8, q3
    Head->Next=Head;
801634fc:	f4424a8f 	vst1.32	{d20-d21}, [r2]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
80163500:	eddfab54 	vldr	d26, [pc, #336]	@ 80163658 <_RME_CPU_Local_Init+0x210>
80163504:	eddfbb55 	vldr	d27, [pc, #340]	@ 80163660 <_RME_CPU_Local_Init+0x218>
    Head->Next=Head;
80163508:	e2802064 	add	r2, r0, #100	@ 0x64
8016350c:	e280c074 	add	ip, r0, #116	@ 0x74
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
80163510:	ed9f8b54 	vldr	d8, [pc, #336]	@ 80163668 <_RME_CPU_Local_Init+0x220>
80163514:	ed9f9b55 	vldr	d9, [pc, #340]	@ 80163670 <_RME_CPU_Local_Init+0x228>
80163518:	eddf6b56 	vldr	d22, [pc, #344]	@ 80163678 <_RME_CPU_Local_Init+0x230>
8016351c:	eddf7b57 	vldr	d23, [pc, #348]	@ 80163680 <_RME_CPU_Local_Init+0x238>
    Head->Next=Head;
80163520:	f4010a8f 	vst1.32	{d0-d1}, [r1]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
80163524:	f260e8ee 	vadd.i32	q15, q8, q15
    Head->Next=Head;
80163528:	f4022a8f 	vst1.32	{d2-d3}, [r2]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
8016352c:	f260c8ec 	vadd.i32	q14, q8, q14
    Head->Next=Head;
80163530:	e2802084 	add	r2, r0, #132	@ 0x84
80163534:	e2801094 	add	r1, r0, #148	@ 0x94
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
80163538:	eddf4b52 	vldr	d20, [pc, #328]	@ 80163688 <_RME_CPU_Local_Init+0x240>
8016353c:	eddf5b53 	vldr	d21, [pc, #332]	@ 80163690 <_RME_CPU_Local_Init+0x248>
80163540:	eddf2b54 	vldr	d18, [pc, #336]	@ 80163698 <_RME_CPU_Local_Init+0x250>
80163544:	eddf3b55 	vldr	d19, [pc, #340]	@ 801636a0 <_RME_CPU_Local_Init+0x258>
80163548:	ed9f2b56 	vldr	d2, [pc, #344]	@ 801636a8 <_RME_CPU_Local_Init+0x260>
8016354c:	ed9f3b57 	vldr	d3, [pc, #348]	@ 801636b0 <_RME_CPU_Local_Init+0x268>
    Head->Next=Head;
80163550:	f40c4a8f 	vst1.32	{d4-d5}, [ip]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
80163554:	f22088c8 	vadd.i32	q4, q8, q4
    Head->Next=Head;
80163558:	f4026a8f 	vst1.32	{d6-d7}, [r2]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
8016355c:	f260a8ea 	vadd.i32	q13, q8, q13
80163560:	f26068e6 	vadd.i32	q11, q8, q11
    Head->Next=Head;
80163564:	e28020a4 	add	r2, r0, #164	@ 0xa4
80163568:	e280c0b4 	add	ip, r0, #180	@ 0xb4
8016356c:	f441ea8f 	vst1.32	{d30-d31}, [r1]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
80163570:	f26048e4 	vadd.i32	q10, q8, q10
    Head->Next=Head;
80163574:	f442ca8f 	vst1.32	{d28-d29}, [r2]
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
80163578:	f26028e2 	vadd.i32	q9, q8, q9
    Head->Next=Head;
8016357c:	e28010c4 	add	r1, r0, #196	@ 0xc4
80163580:	e28020d4 	add	r2, r0, #212	@ 0xd4
        _RME_List_Crt(&(Local->Run.List[Prio_Cnt]));
80163584:	f26008c2 	vadd.i32	q8, q8, q1
    Head->Next=Head;
80163588:	f44caa8f 	vst1.32	{d26-d27}, [ip]
8016358c:	f4018a8f 	vst1.32	{d8-d9}, [r1]
80163590:	e280c0e4 	add	ip, r0, #228	@ 0xe4
80163594:	e28010f4 	add	r1, r0, #244	@ 0xf4
80163598:	f4426a8f 	vst1.32	{d22-d23}, [r2]
8016359c:	e2802f41 	add	r2, r0, #260	@ 0x104
801635a0:	f44c4a8f 	vst1.32	{d20-d21}, [ip]
801635a4:	f4412a8f 	vst1.32	{d18-d19}, [r1]
801635a8:	f4420a8f 	vst1.32	{d16-d17}, [r2]
    for(Prio_Cnt=0U;Prio_Cnt<RME_PREEMPT_PRIO_NUM;Prio_Cnt++)
801635ac:	e5803010 	str	r3, [r0, #16]
}
801635b0:	ecbd8b04 	vpop	{d8-d9}
801635b4:	e49df004 	pop	{pc}		@ (ldr pc, [sp], #4)
801635b8:	00000014 	.word	0x00000014
801635bc:	00000014 	.word	0x00000014
801635c0:	0000001c 	.word	0x0000001c
801635c4:	0000001c 	.word	0x0000001c
801635c8:	00000024 	.word	0x00000024
801635cc:	00000024 	.word	0x00000024
801635d0:	0000002c 	.word	0x0000002c
801635d4:	0000002c 	.word	0x0000002c
801635d8:	00000034 	.word	0x00000034
801635dc:	00000034 	.word	0x00000034
801635e0:	0000003c 	.word	0x0000003c
801635e4:	0000003c 	.word	0x0000003c
801635e8:	00000044 	.word	0x00000044
801635ec:	00000044 	.word	0x00000044
801635f0:	0000004c 	.word	0x0000004c
801635f4:	0000004c 	.word	0x0000004c
801635f8:	00000054 	.word	0x00000054
801635fc:	00000054 	.word	0x00000054
80163600:	0000005c 	.word	0x0000005c
80163604:	0000005c 	.word	0x0000005c
80163608:	00000064 	.word	0x00000064
8016360c:	00000064 	.word	0x00000064
80163610:	0000006c 	.word	0x0000006c
80163614:	0000006c 	.word	0x0000006c
80163618:	00000074 	.word	0x00000074
8016361c:	00000074 	.word	0x00000074
80163620:	0000007c 	.word	0x0000007c
80163624:	0000007c 	.word	0x0000007c
80163628:	00000084 	.word	0x00000084
8016362c:	00000084 	.word	0x00000084
80163630:	0000008c 	.word	0x0000008c
80163634:	0000008c 	.word	0x0000008c
80163638:	00000094 	.word	0x00000094
8016363c:	00000094 	.word	0x00000094
80163640:	0000009c 	.word	0x0000009c
80163644:	0000009c 	.word	0x0000009c
80163648:	000000a4 	.word	0x000000a4
8016364c:	000000a4 	.word	0x000000a4
80163650:	000000ac 	.word	0x000000ac
80163654:	000000ac 	.word	0x000000ac
80163658:	000000b4 	.word	0x000000b4
8016365c:	000000b4 	.word	0x000000b4
80163660:	000000bc 	.word	0x000000bc
80163664:	000000bc 	.word	0x000000bc
80163668:	000000c4 	.word	0x000000c4
8016366c:	000000c4 	.word	0x000000c4
80163670:	000000cc 	.word	0x000000cc
80163674:	000000cc 	.word	0x000000cc
80163678:	000000d4 	.word	0x000000d4
8016367c:	000000d4 	.word	0x000000d4
80163680:	000000dc 	.word	0x000000dc
80163684:	000000dc 	.word	0x000000dc
80163688:	000000e4 	.word	0x000000e4
8016368c:	000000e4 	.word	0x000000e4
80163690:	000000ec 	.word	0x000000ec
80163694:	000000ec 	.word	0x000000ec
80163698:	000000f4 	.word	0x000000f4
8016369c:	000000f4 	.word	0x000000f4
801636a0:	000000fc 	.word	0x000000fc
801636a4:	000000fc 	.word	0x000000fc
801636a8:	00000104 	.word	0x00000104
801636ac:	00000104 	.word	0x00000104
801636b0:	0000010c 	.word	0x0000010c
801636b4:	0000010c 	.word	0x0000010c

801636b8 <_RME_Kern_High>:
{
801636b8:	e92d4070 	push	{r4, r5, r6, lr}
801636bc:	e1a06000 	mov	r6, r0
        if(Local->Run.Bitmap[Count]!=0U)
801636c0:	e5910010 	ldr	r0, [r1, #16]
801636c4:	e3500000 	cmp	r0, #0
801636c8:	1a000008 	bne	801636f0 <_RME_Kern_High+0x38>
    RME_ASSERT(Count>=0);
801636cc:	e306308c 	movw	r3, #24716	@ 0x608c
801636d0:	e3062098 	movw	r2, #24728	@ 0x6098
801636d4:	e3483016 	movt	r3, #32790	@ 0x8016
801636d8:	e30600a4 	movw	r0, #24740	@ 0x60a4
801636dc:	e3482016 	movt	r2, #32790	@ 0x8016
801636e0:	e3011186 	movw	r1, #4486	@ 0x1186
801636e4:	e3480016 	movt	r0, #32790	@ 0x8016
801636e8:	ebfff7ca 	bl	80161618 <RME_Log>
801636ec:	eafffffe 	b	801636ec <_RME_Kern_High+0x34>
    Prio=RME_MSB_GET(Local->Run.Bitmap[Count]);
801636f0:	e1a04001 	mov	r4, r1
801636f4:	ebfff40f 	bl	80160738 <__RME_A7A_MSB_Get>
    return (struct RME_Thd_Struct*)(Local->Run.List[Prio].Next);
801636f8:	e0843180 	add	r3, r4, r0, lsl #3
801636fc:	e5935014 	ldr	r5, [r3, #20]
    RME_ASSERT(Thd_New!=RME_NULL);
80163700:	e3550000 	cmp	r5, #0
80163704:	0a00001a 	beq	80163774 <_RME_Kern_High+0xbc>
    Thd_Cur=Local->Thd_Cur;
80163708:	e5941004 	ldr	r1, [r4, #4]
    if(Thd_New==Thd_Cur)
8016370c:	e1510005 	cmp	r1, r5
80163710:	08bd8070 	popeq	{r4, r5, r6, pc}
    if(Thd_Cur->Sched.State==RME_THD_READY)
80163714:	e591301c 	ldr	r3, [r1, #28]
80163718:	e3530000 	cmp	r3, #0
8016371c:	1a000003 	bne	80163730 <_RME_Kern_High+0x78>
        if(Thd_New->Sched.Prio<=Thd_Cur->Sched.Prio)
80163720:	e5952020 	ldr	r2, [r5, #32]
80163724:	e5913020 	ldr	r3, [r1, #32]
80163728:	e1520003 	cmp	r2, r3
8016372c:	98bd8070 	popls	{r4, r5, r6, pc}
    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
80163730:	e595301c 	ldr	r3, [r5, #28]
80163734:	e3530000 	cmp	r3, #0
80163738:	0a000008 	beq	80163760 <_RME_Kern_High+0xa8>
8016373c:	e306308c 	movw	r3, #24716	@ 0x608c
80163740:	e3062098 	movw	r2, #24728	@ 0x6098
80163744:	e3483016 	movt	r3, #32790	@ 0x8016
80163748:	e30600a4 	movw	r0, #24740	@ 0x60a4
8016374c:	e3482016 	movt	r2, #32790	@ 0x8016
80163750:	e3011b0e 	movw	r1, #6926	@ 0x1b0e
80163754:	e3480016 	movt	r0, #32790	@ 0x8016
80163758:	ebfff7ae 	bl	80161618 <RME_Log>
8016375c:	eafffffe 	b	8016375c <_RME_Kern_High+0xa4>
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
80163760:	e1a02005 	mov	r2, r5
80163764:	e1a00006 	mov	r0, r6
80163768:	ebfff9b2 	bl	80161e38 <_RME_Run_Swt.isra.0>
    Local->Thd_Cur=Thd_New;
8016376c:	e5845004 	str	r5, [r4, #4]
}
80163770:	e8bd8070 	pop	{r4, r5, r6, pc}
    RME_ASSERT(Thd_New!=RME_NULL);
80163774:	e306308c 	movw	r3, #24716	@ 0x608c
80163778:	e3062098 	movw	r2, #24728	@ 0x6098
8016377c:	e3483016 	movt	r3, #32790	@ 0x8016
80163780:	e30600a4 	movw	r0, #24740	@ 0x60a4
80163784:	e3482016 	movt	r2, #32790	@ 0x8016
80163788:	e3011ae3 	movw	r1, #6883	@ 0x1ae3
8016378c:	e3480016 	movt	r0, #32790	@ 0x8016
80163790:	ebfff7a0 	bl	80161618 <RME_Log>
80163794:	eafffffe 	b	80163794 <_RME_Kern_High+0xdc>

80163798 <_RME_Svc_Handler>:
{
80163798:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
8016379c:	e24dd06c 	sub	sp, sp, #108	@ 0x6c
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
801637a0:	e28d2034 	add	r2, sp, #52	@ 0x34
801637a4:	e28d3038 	add	r3, sp, #56	@ 0x38
801637a8:	e28d1030 	add	r1, sp, #48	@ 0x30
{
801637ac:	e1a05000 	mov	r5, r0
    __RME_Svc_Param_Get(Reg, &Svc, &Cid, Param);
801637b0:	eb00097f 	bl	80165db4 <__RME_Svc_Param_Get>
    Svc_Num=Svc&RME_MASK_END(5U);
801637b4:	e59dc030 	ldr	ip, [sp, #48]	@ 0x30
    if(Svc_Num==RME_SVC_INV_RET)
801637b8:	e21c203f 	ands	r2, ip, #63	@ 0x3f
801637bc:	0a000017 	beq	80163820 <_RME_Svc_Handler+0x88>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
801637c0:	e3074000 	movw	r4, #28672	@ 0x7000
801637c4:	e3484096 	movt	r4, #32918	@ 0x8096
801637c8:	e5947004 	ldr	r7, [r4, #4]
    Inv_Top=RME_INVSTK_TOP(Thd_Cur);
801637cc:	e1a03007 	mov	r3, r7
801637d0:	e5b3104c 	ldr	r1, [r3, #76]!	@ 0x4c
    if(Inv_Top==RME_NULL)
801637d4:	e3510000 	cmp	r1, #0
801637d8:	11510003 	cmpne	r1, r3
        Cpt=Thd_Cur->Sched.Prc->Cpt;
801637dc:	0597302c 	ldreq	r3, [r7, #44]	@ 0x2c
        Cpt=Inv_Top->Prc->Cpt;
801637e0:	15913008 	ldrne	r3, [r1, #8]
    if(Svc_Num==RME_SVC_INV_ACT)
801637e4:	e3520001 	cmp	r2, #1
        Cpt=Inv_Top->Prc->Cpt;
801637e8:	e5936014 	ldr	r6, [r3, #20]
    if(Svc_Num==RME_SVC_INV_ACT)
801637ec:	0a000012 	beq	8016383c <_RME_Svc_Handler+0xa4>
    switch(Svc_Num)
801637f0:	e2423002 	sub	r3, r2, #2
801637f4:	e3530007 	cmp	r3, #7
801637f8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
801637fc:	ea000448 	b	80164924 <_RME_Svc_Handler+0x118c>
80163800:	801639c8 	.word	0x801639c8
80163804:	80163a98 	.word	0x80163a98
80163808:	80163af8 	.word	0x80163af8
8016380c:	80163b8c 	.word	0x80163b8c
80163810:	80163cbc 	.word	0x80163cbc
80163814:	80163db0 	.word	0x80163db0
80163818:	80163ee4 	.word	0x80163ee4
8016381c:	801638f8 	.word	0x801638f8
        Retval=_RME_Inv_Ret(Reg,                                            /* volatile struct RME_Reg_Struct* Reg */
80163820:	e59d1038 	ldr	r1, [sp, #56]	@ 0x38
80163824:	e1a00005 	mov	r0, r5
80163828:	ebfff8df 	bl	80161bac <_RME_Inv_Ret>
        RME_SWITCH_RETURN(Reg, Retval);
8016382c:	e2501000 	subs	r1, r0, #0
80163830:	ba00002c 	blt	801638e8 <_RME_Svc_Handler+0x150>
}
80163834:	e28dd06c 	add	sp, sp, #108	@ 0x6c
80163838:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            (rme_cid_t)Param[0],                            /* rme_cid_t Cap_Inv */
8016383c:	e59d9038 	ldr	r9, [sp, #56]	@ 0x38
        Retval=_RME_Inv_Act(Cpt,
80163840:	e59d703c 	ldr	r7, [sp, #60]	@ 0x3c
80163844:	e596200c 	ldr	r2, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
80163848:	e3190080 	tst	r9, #128	@ 0x80
8016384c:	e5963014 	ldr	r3, [r6, #20]
80163850:	0a000212 	beq	801640a0 <_RME_Svc_Handler+0x908>
80163854:	e1a08429 	lsr	r8, r9, #8
80163858:	e1530008 	cmp	r3, r8
8016385c:	9a00025d 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80163860:	e0828288 	add	r8, r2, r8, lsl #5
80163864:	e1a00008 	mov	r0, r8
80163868:	ebfff3a4 	bl	80160700 <__RME_A7A_Read_Acquire>
8016386c:	e7e73850 	ubfx	r3, r0, #16, #8
80163870:	e3530002 	cmp	r3, #2
80163874:	0a0003fc 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163878:	e1a00c20 	lsr	r0, r0, #24
8016387c:	e3500003 	cmp	r0, #3
80163880:	1a0002e4 	bne	80164418 <_RME_Svc_Handler+0xc80>
80163884:	e5982014 	ldr	r2, [r8, #20]
80163888:	e209307f 	and	r3, r9, #127	@ 0x7f
8016388c:	e1530002 	cmp	r3, r2
80163890:	2a000250 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80163894:	e598600c 	ldr	r6, [r8, #12]
80163898:	e0866283 	add	r6, r6, r3, lsl #5
8016389c:	e1a00006 	mov	r0, r6
801638a0:	ebfff396 	bl	80160700 <__RME_A7A_Read_Acquire>
801638a4:	e7e73850 	ubfx	r3, r0, #16, #8
801638a8:	e3530002 	cmp	r3, #2
801638ac:	0a0003ee 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801638b0:	e1a00c20 	lsr	r0, r0, #24
801638b4:	e3500007 	cmp	r0, #7
801638b8:	1a0002d6 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
801638bc:	e5963008 	ldr	r3, [r6, #8]
801638c0:	e3130002 	tst	r3, #2
801638c4:	0a000261 	beq	80164250 <_RME_Svc_Handler+0xab8>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
801638c8:	e596600c 	ldr	r6, [r6, #12]
    if(RME_UNLIKELY(Thd_Act!=0U))
801638cc:	e596300c 	ldr	r3, [r6, #12]
801638d0:	e3530000 	cmp	r3, #0
801638d4:	1a000002 	bne	801638e4 <_RME_Svc_Handler+0x14c>
    if(*Ptr==Old)
801638d8:	e596300c 	ldr	r3, [r6, #12]
801638dc:	e3530000 	cmp	r3, #0
801638e0:	0a00030b 	beq	80164514 <_RME_Svc_Handler+0xd7c>
        return RME_ERR_SIV_ACT;
801638e4:	e3e01f4b 	mvn	r1, #300	@ 0x12c
    __RME_Svc_Retval_Set(Reg,Retval);
801638e8:	e1a00005 	mov	r0, r5
801638ec:	eb00093b 	bl	80165de0 <__RME_Svc_Retval_Set>
}
801638f0:	e28dd06c 	add	sp, sp, #108	@ 0x6c
801638f4:	e8bd8ff0 	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
            Retval=_RME_Thd_Swt(Cpt,
801638f8:	e1cd83d8 	ldrd	r8, [sp, #56]	@ 0x38
    if(Cap_Thd<RME_CID_NULL)
801638fc:	e3580902 	cmp	r8, #32768	@ 0x8000
80163900:	aa0001f6 	bge	801640e0 <_RME_Svc_Handler+0x948>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80163904:	e3180080 	tst	r8, #128	@ 0x80
80163908:	1a00029e 	bne	80164388 <_RME_Svc_Handler+0xbf0>
8016390c:	e5963014 	ldr	r3, [r6, #20]
80163910:	e1580003 	cmp	r8, r3
80163914:	2a00022f 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80163918:	e596300c 	ldr	r3, [r6, #12]
8016391c:	e0838288 	add	r8, r3, r8, lsl #5
80163920:	e1a00008 	mov	r0, r8
80163924:	ebfff375 	bl	80160700 <__RME_A7A_Read_Acquire>
80163928:	e7e73850 	ubfx	r3, r0, #16, #8
8016392c:	e3530002 	cmp	r3, #2
80163930:	0a0003cd 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163934:	e1a00c20 	lsr	r0, r0, #24
80163938:	e3500006 	cmp	r0, #6
8016393c:	1a0002b5 	bne	80164418 <_RME_Svc_Handler+0xc80>
        RME_CAP_CHECK(Thd_Cap_New,RME_THD_FLAG_SWT);
80163940:	e5983008 	ldr	r3, [r8, #8]
80163944:	e3130c01 	tst	r3, #256	@ 0x100
80163948:	0a000240 	beq	80164250 <_RME_Svc_Handler+0xab8>
        Thd_New=RME_CAP_GETOBJ(Thd_Cap_New,struct RME_Thd_Struct*);
8016394c:	e598600c 	ldr	r6, [r8, #12]
        if(Thd_New->Sched.Local!=Local)
80163950:	e5963014 	ldr	r3, [r6, #20]
80163954:	e1530004 	cmp	r3, r4
80163958:	1a0002eb 	bne	8016450c <_RME_Svc_Handler+0xd74>
        if(Thd_Cur->Sched.Prio!=Thd_New->Sched.Prio)
8016395c:	e5972020 	ldr	r2, [r7, #32]
80163960:	e5963020 	ldr	r3, [r6, #32]
80163964:	e1520003 	cmp	r2, r3
80163968:	1a00035c 	bne	801646e0 <_RME_Svc_Handler+0xf48>
           (Thd_New->Sched.State==RME_THD_TIMEOUT)||
8016396c:	e596301c 	ldr	r3, [r6, #28]
80163970:	e2433001 	sub	r3, r3, #1
        if((Thd_New->Sched.State==RME_THD_BLOCKED)||
80163974:	e3530002 	cmp	r3, #2
80163978:	9a0002e3 	bls	8016450c <_RME_Svc_Handler+0xd74>
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
8016397c:	e3590000 	cmp	r9, #0
80163980:	0a000002 	beq	80163990 <_RME_Svc_Handler+0x1f8>
80163984:	e5973018 	ldr	r3, [r7, #24]
80163988:	e373010e 	cmn	r3, #-2147483645	@ 0x80000003
8016398c:	9a0002a3 	bls	80164420 <_RME_Svc_Handler+0xc88>
    __RME_Svc_Retval_Set(Reg,0);
80163990:	e3a01000 	mov	r1, #0
80163994:	e1a00005 	mov	r0, r5
80163998:	eb000910 	bl	80165de0 <__RME_Svc_Retval_Set>
    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
8016399c:	e596301c 	ldr	r3, [r6, #28]
801639a0:	e3530000 	cmp	r3, #0
801639a4:	1a0002b6 	bne	80164484 <_RME_Svc_Handler+0xcec>
    if(Thd_Cur==Thd_New)
801639a8:	e1570006 	cmp	r7, r6
801639ac:	0affffa0 	beq	80163834 <_RME_Svc_Handler+0x9c>
    _RME_Run_Swt(Reg,Thd_Cur,Thd_New);
801639b0:	e1a02006 	mov	r2, r6
801639b4:	e1a01007 	mov	r1, r7
801639b8:	e1a00005 	mov	r0, r5
801639bc:	ebfff91d 	bl	80161e38 <_RME_Run_Swt.isra.0>
    Local->Thd_Cur=Thd_New;
801639c0:	e5846004 	str	r6, [r4, #4]
            RME_SWITCH_RETURN(Reg,Retval);
801639c4:	eaffff9a 	b	80163834 <_RME_Svc_Handler+0x9c>
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
801639c8:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
801639cc:	e596300c 	ldr	r3, [r6, #12]
801639d0:	e5962014 	ldr	r2, [r6, #20]
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
801639d4:	e3170080 	tst	r7, #128	@ 0x80
801639d8:	0a0001bc 	beq	801640d0 <_RME_Svc_Handler+0x938>
801639dc:	e1a06427 	lsr	r6, r7, #8
801639e0:	e1520006 	cmp	r2, r6
801639e4:	9a0001fb 	bls	801641d8 <_RME_Svc_Handler+0xa40>
801639e8:	e0836286 	add	r6, r3, r6, lsl #5
801639ec:	e1a00006 	mov	r0, r6
801639f0:	ebfff342 	bl	80160700 <__RME_A7A_Read_Acquire>
801639f4:	e7e73850 	ubfx	r3, r0, #16, #8
801639f8:	e3530002 	cmp	r3, #2
801639fc:	0a00039a 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163a00:	e1a00c20 	lsr	r0, r0, #24
80163a04:	e3500003 	cmp	r0, #3
80163a08:	1a000282 	bne	80164418 <_RME_Svc_Handler+0xc80>
80163a0c:	e5962014 	ldr	r2, [r6, #20]
80163a10:	e207307f 	and	r3, r7, #127	@ 0x7f
80163a14:	e1530002 	cmp	r3, r2
80163a18:	2a0001ee 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80163a1c:	e596600c 	ldr	r6, [r6, #12]
80163a20:	e0866283 	add	r6, r6, r3, lsl #5
80163a24:	e1a00006 	mov	r0, r6
80163a28:	ebfff334 	bl	80160700 <__RME_A7A_Read_Acquire>
80163a2c:	e7e73850 	ubfx	r3, r0, #16, #8
80163a30:	e3530002 	cmp	r3, #2
80163a34:	0a00038c 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163a38:	e1a00c20 	lsr	r0, r0, #24
80163a3c:	e3500008 	cmp	r0, #8
80163a40:	1a000274 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
80163a44:	e5963008 	ldr	r3, [r6, #8]
80163a48:	e3130001 	tst	r3, #1
80163a4c:	0a0001ff 	beq	80164250 <_RME_Svc_Handler+0xab8>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
80163a50:	e1d630b0 	ldrh	r3, [r6]
80163a54:	e3530000 	cmp	r3, #0
80163a58:	15966004 	ldrne	r6, [r6, #4]
    Thd_Rcv=Sig_Root->Thd;
80163a5c:	e5967018 	ldr	r7, [r6, #24]
    if(Thd_Rcv!=RME_NULL)
80163a60:	e3570000 	cmp	r7, #0
80163a64:	0a000002 	beq	80163a74 <_RME_Svc_Handler+0x2dc>
        if(Thd_Rcv->Sched.Local==Local)
80163a68:	e5973014 	ldr	r3, [r7, #20]
80163a6c:	e1530004 	cmp	r3, r4
80163a70:	0a00032f 	beq	80164734 <_RME_Svc_Handler+0xf9c>
    Old=(rme_cnt_t)(*Ptr);
80163a74:	e5963014 	ldr	r3, [r6, #20]
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
80163a78:	e373010a 	cmn	r3, #-2147483646	@ 0x80000002
    *Ptr=(rme_ptr_t)(Old+Addend);
80163a7c:	e2833001 	add	r3, r3, #1
80163a80:	e5863014 	str	r3, [r6, #20]
        if(RME_FETCH_ADD(&(Sig_Root->Sig_Num),1U)>=RME_MAX_SIG_NUM)
80163a84:	8a000399 	bhi	801648f0 <_RME_Svc_Handler+0x1158>
        __RME_Svc_Retval_Set(Reg,0);
80163a88:	e3a01000 	mov	r1, #0
80163a8c:	e1a00005 	mov	r0, r5
80163a90:	eb0008d2 	bl	80165de0 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
80163a94:	eaffff66 	b	80163834 <_RME_Svc_Handler+0x9c>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Sig */
80163a98:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
            Retval=_RME_Sig_Rcv(Cpt,
80163a9c:	e59d803c 	ldr	r8, [sp, #60]	@ 0x3c
80163aa0:	e596300c 	ldr	r3, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
80163aa4:	e3170080 	tst	r7, #128	@ 0x80
80163aa8:	e5962014 	ldr	r2, [r6, #20]
80163aac:	1a0001b1 	bne	80164178 <_RME_Svc_Handler+0x9e0>
80163ab0:	e1570002 	cmp	r7, r2
80163ab4:	2a0001c7 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80163ab8:	e0836287 	add	r6, r3, r7, lsl #5
80163abc:	e1a00006 	mov	r0, r6
80163ac0:	ebfff30e 	bl	80160700 <__RME_A7A_Read_Acquire>
80163ac4:	e7e73850 	ubfx	r3, r0, #16, #8
80163ac8:	e3530002 	cmp	r3, #2
80163acc:	0a000366 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163ad0:	e1a00c20 	lsr	r0, r0, #24
80163ad4:	e3500008 	cmp	r0, #8
80163ad8:	1a00024e 	bne	80164418 <_RME_Svc_Handler+0xc80>
    switch(Option)
80163adc:	e3580003 	cmp	r8, #3
80163ae0:	979ff108 	ldrls	pc, [pc, r8, lsl #2]
80163ae4:	eaffff7e 	b	801638e4 <_RME_Svc_Handler+0x14c>
80163ae8:	80164268 	.word	0x80164268
80163aec:	80164258 	.word	0x80164258
80163af0:	80164244 	.word	0x80164244
80163af4:	801641e0 	.word	0x801641e0
            Retval=_RME_Kfn_Act(Cpt,
80163af8:	e59d4034 	ldr	r4, [sp, #52]	@ 0x34
                                RME_PARAM_D0(Param[0]),                     /* rme_ptr_t Func_ID */
80163afc:	e59d9038 	ldr	r9, [sp, #56]	@ 0x38
            Retval=_RME_Kfn_Act(Cpt,
80163b00:	e59d703c 	ldr	r7, [sp, #60]	@ 0x3c
{
    struct RME_Cap_Kfn* Kfn_Op;
    rme_ptr_t Type_Stat;
    
    /* Get the capability slot */
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
80163b04:	e3140080 	tst	r4, #128	@ 0x80
            Retval=_RME_Kfn_Act(Cpt,
80163b08:	e59d8040 	ldr	r8, [sp, #64]	@ 0x40
80163b0c:	e6ffa079 	uxth	sl, r9
80163b10:	e1a09829 	lsr	r9, r9, #16
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
80163b14:	1a000182 	bne	80164124 <_RME_Svc_Handler+0x98c>
80163b18:	e5963014 	ldr	r3, [r6, #20]
80163b1c:	e1540003 	cmp	r4, r3
80163b20:	3596100c 	ldrcc	r1, [r6, #12]
80163b24:	30814284 	addcc	r4, r1, r4, lsl #5
80163b28:	2a0001aa 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80163b2c:	e1a00004 	mov	r0, r4
80163b30:	ebfff2f2 	bl	80160700 <__RME_A7A_Read_Acquire>
80163b34:	e7e73850 	ubfx	r3, r0, #16, #8
80163b38:	e3530002 	cmp	r3, #2
80163b3c:	0a00034a 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163b40:	e1a00c20 	lsr	r0, r0, #24
80163b44:	e3500001 	cmp	r0, #1
80163b48:	1a000232 	bne	80164418 <_RME_Svc_Handler+0xc80>
                   struct RME_Cap_Kfn*,Kfn_Op,Type_Stat);    

    /* Check if the range of calling is allowed - kernel function specific */
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
80163b4c:	e5941008 	ldr	r1, [r4, #8]
80163b50:	e15a0821 	cmp	sl, r1, lsr #16
80163b54:	8a0001bd 	bhi	80164250 <_RME_Svc_Handler+0xab8>
       (Func_ID<RME_KFN_FLAG_LOW(Kfn_Op->Head.Flag)))
80163b58:	e6ff1071 	uxth	r1, r1
    if((Func_ID>RME_KFN_FLAG_HIGH(Kfn_Op->Head.Flag))||
80163b5c:	e15a0001 	cmp	sl, r1
80163b60:	3a0001ba 	bcc	80164250 <_RME_Svc_Handler+0xab8>
        RME_COV_MARKER();
        /* No action required */
    }

    /* Return whatever the function returns */
    return __RME_Kfn_Handler(Cpt,Reg,Func_ID,Sub_ID,Param1,Param2);
80163b64:	e58d8004 	str	r8, [sp, #4]
80163b68:	e1a01005 	mov	r1, r5
80163b6c:	e58d7000 	str	r7, [sp]
80163b70:	e1a03009 	mov	r3, r9
80163b74:	e1a0200a 	mov	r2, sl
80163b78:	e1a00006 	mov	r0, r6
80163b7c:	eb0008cb 	bl	80165eb0 <__RME_Kfn_Handler>
            RME_SWITCH_RETURN(Reg, Retval);
80163b80:	e2501000 	subs	r1, r0, #0
80163b84:	aaffff2a 	bge	80163834 <_RME_Svc_Handler+0x9c>
80163b88:	eaffff56 	b	801638e8 <_RME_Svc_Handler+0x150>
                                       (rme_cid_t)Param[0]);                /* rme_cid_t Cap_Thd */
80163b8c:	e59d8038 	ldr	r8, [sp, #56]	@ 0x38
80163b90:	e596200c 	ldr	r2, [r6, #12]
80163b94:	e5963014 	ldr	r3, [r6, #20]
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80163b98:	e3180080 	tst	r8, #128	@ 0x80
80163b9c:	0a000147 	beq	801640c0 <_RME_Svc_Handler+0x928>
80163ba0:	e1a07428 	lsr	r7, r8, #8
80163ba4:	e1530007 	cmp	r3, r7
80163ba8:	9a00018a 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80163bac:	e0827287 	add	r7, r2, r7, lsl #5
80163bb0:	e1a00007 	mov	r0, r7
80163bb4:	ebfff2d1 	bl	80160700 <__RME_A7A_Read_Acquire>
80163bb8:	e7e73850 	ubfx	r3, r0, #16, #8
80163bbc:	e3530002 	cmp	r3, #2
80163bc0:	0a000329 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163bc4:	e1a00c20 	lsr	r0, r0, #24
80163bc8:	e3500003 	cmp	r0, #3
80163bcc:	1a000211 	bne	80164418 <_RME_Svc_Handler+0xc80>
80163bd0:	e5972014 	ldr	r2, [r7, #20]
80163bd4:	e208307f 	and	r3, r8, #127	@ 0x7f
80163bd8:	e1530002 	cmp	r3, r2
80163bdc:	2a00017d 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80163be0:	e597600c 	ldr	r6, [r7, #12]
80163be4:	e0866283 	add	r6, r6, r3, lsl #5
80163be8:	e1a00006 	mov	r0, r6
80163bec:	ebfff2c3 	bl	80160700 <__RME_A7A_Read_Acquire>
80163bf0:	e7e73850 	ubfx	r3, r0, #16, #8
80163bf4:	e3530002 	cmp	r3, #2
80163bf8:	0a00031b 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163bfc:	e1a00c20 	lsr	r0, r0, #24
80163c00:	e3500006 	cmp	r0, #6
80163c04:	1a000203 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
80163c08:	e5963008 	ldr	r3, [r6, #8]
80163c0c:	e3130010 	tst	r3, #16
80163c10:	0a00018e 	beq	80164250 <_RME_Svc_Handler+0xab8>
    Thread=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
80163c14:	e596600c 	ldr	r6, [r6, #12]
    if(Thread->Sched.Local!=Local)
80163c18:	e5963014 	ldr	r3, [r6, #20]
80163c1c:	e1530004 	cmp	r3, r4
80163c20:	1a000239 	bne	8016450c <_RME_Svc_Handler+0xd74>
    if(Thread->Sched.Sched_Ref!=0U)
80163c24:	e5963030 	ldr	r3, [r6, #48]	@ 0x30
80163c28:	e3530000 	cmp	r3, #0
80163c2c:	1a000335 	bne	80164908 <_RME_Svc_Handler+0x1170>
    Thread->Sched.Sched_Thd->Sched.Sched_Ref--;
80163c30:	e5962034 	ldr	r2, [r6, #52]	@ 0x34
80163c34:	e5923030 	ldr	r3, [r2, #48]	@ 0x30
80163c38:	e2433001 	sub	r3, r3, #1
80163c3c:	e5823030 	str	r3, [r2, #48]	@ 0x30
    if(Thread->Sched.Notif.Next!=&(Thread->Sched.Notif))
80163c40:	e1a03006 	mov	r3, r6
80163c44:	e5b32008 	ldr	r2, [r3, #8]!
80163c48:	e1520003 	cmp	r2, r3
80163c4c:	0a000004 	beq	80163c64 <_RME_Svc_Handler+0x4cc>
    Head->Next=Head;
80163c50:	ee803b90 	vdup.32	d16, r3
        _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
80163c54:	e596100c 	ldr	r1, [r6, #12]
    Next->Prev=Prev;
80163c58:	e5821004 	str	r1, [r2, #4]
    Prev->Next=Next;
80163c5c:	e5812000 	str	r2, [r1]
    Head->Next=Head;
80163c60:	f443078f 	vst1.32	{d16}, [r3]
    if(Thread->Sched.Sched_Sig!=RME_NULL)
80163c64:	e5963038 	ldr	r3, [r6, #56]	@ 0x38
    __RME_Svc_Retval_Set(Reg,0);  
80163c68:	e3a01000 	mov	r1, #0
80163c6c:	e1a00005 	mov	r0, r5
    if(Thread->Sched.Sched_Sig!=RME_NULL)
80163c70:	e3530000 	cmp	r3, #0
    Old=(rme_cnt_t)(*Ptr);
80163c74:	15932004 	ldrne	r2, [r3, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80163c78:	12422001 	subne	r2, r2, #1
80163c7c:	15832004 	strne	r2, [r3, #4]
    __RME_Svc_Retval_Set(Reg,0);  
80163c80:	eb000856 	bl	80165de0 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_READY)
80163c84:	e596301c 	ldr	r3, [r6, #28]
80163c88:	e3530000 	cmp	r3, #0
80163c8c:	0a0001a6 	beq	8016432c <_RME_Svc_Handler+0xb94>
    else if(Thread->Sched.State==RME_THD_BLOCKED)
80163c90:	e3530001 	cmp	r3, #1
80163c94:	0a000293 	beq	801646e8 <_RME_Svc_Handler+0xf50>
    if(Local->Thd_Cur==Thread)
80163c98:	e5943004 	ldr	r3, [r4, #4]
    Thread->Sched.Slice=0U;
80163c9c:	e3a02000 	mov	r2, #0
80163ca0:	e5862018 	str	r2, [r6, #24]
    if(Local->Thd_Cur==Thread)
80163ca4:	e1560003 	cmp	r6, r3
80163ca8:	0a0001a4 	beq	80164340 <_RME_Svc_Handler+0xba8>
    RME_WRITE_RELEASE((rme_ptr_t*)&(Thread->Sched.Local),
80163cac:	e3e01000 	mvn	r1, #0
80163cb0:	e2860014 	add	r0, r6, #20
80163cb4:	ebfff294 	bl	8016070c <__RME_A7A_Write_Release>
            RME_SWITCH_RETURN(Reg,Retval);
80163cb8:	eafffedd 	b	80163834 <_RME_Svc_Handler+0x9c>
            Retval=_RME_Thd_Exec_Set(Cpt,
80163cbc:	e59da034 	ldr	sl, [sp, #52]	@ 0x34
80163cc0:	e28d7038 	add	r7, sp, #56	@ 0x38
80163cc4:	e596300c 	ldr	r3, [r6, #12]
80163cc8:	e5962014 	ldr	r2, [r6, #20]
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80163ccc:	e31a0080 	tst	sl, #128	@ 0x80
            Retval=_RME_Thd_Exec_Set(Cpt,
80163cd0:	e8970380 	ldm	r7, {r7, r8, r9}
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80163cd4:	0a0000f5 	beq	801640b0 <_RME_Svc_Handler+0x918>
80163cd8:	e1a0642a 	lsr	r6, sl, #8
80163cdc:	e1520006 	cmp	r2, r6
80163ce0:	9a00013c 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80163ce4:	e0836286 	add	r6, r3, r6, lsl #5
80163ce8:	e1a00006 	mov	r0, r6
80163cec:	ebfff283 	bl	80160700 <__RME_A7A_Read_Acquire>
80163cf0:	e7e73850 	ubfx	r3, r0, #16, #8
80163cf4:	e3530002 	cmp	r3, #2
80163cf8:	0a0002db 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163cfc:	e1a00c20 	lsr	r0, r0, #24
80163d00:	e3500003 	cmp	r0, #3
80163d04:	1a0001c3 	bne	80164418 <_RME_Svc_Handler+0xc80>
80163d08:	e5962014 	ldr	r2, [r6, #20]
80163d0c:	e20a307f 	and	r3, sl, #127	@ 0x7f
80163d10:	e1530002 	cmp	r3, r2
80163d14:	2a00012f 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80163d18:	e596a00c 	ldr	sl, [r6, #12]
80163d1c:	e08aa283 	add	sl, sl, r3, lsl #5
80163d20:	e1a0000a 	mov	r0, sl
80163d24:	ebfff275 	bl	80160700 <__RME_A7A_Read_Acquire>
80163d28:	e7e73850 	ubfx	r3, r0, #16, #8
80163d2c:	e3530002 	cmp	r3, #2
80163d30:	0a0002cd 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163d34:	e1a00c20 	lsr	r0, r0, #24
80163d38:	e3500006 	cmp	r0, #6
80163d3c:	1a0001b5 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
80163d40:	e59a3008 	ldr	r3, [sl, #8]
80163d44:	e3130001 	tst	r3, #1
80163d48:	0a000140 	beq	80164250 <_RME_Svc_Handler+0xab8>
    Thread=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
80163d4c:	e59a600c 	ldr	r6, [sl, #12]
    if(Thread->Sched.Local!=Local)
80163d50:	e5963014 	ldr	r3, [r6, #20]
80163d54:	e1530004 	cmp	r3, r4
80163d58:	1a0001eb 	bne	8016450c <_RME_Svc_Handler+0xd74>
    if((Entry!=RME_NULL)&&(Stack!=RME_NULL))
80163d5c:	e3570000 	cmp	r7, #0
80163d60:	13580000 	cmpne	r8, #0
80163d64:	1a000167 	bne	80164308 <_RME_Svc_Handler+0xb70>
    __RME_Svc_Retval_Set(Reg,0);  
80163d68:	e3a01000 	mov	r1, #0
80163d6c:	e1a00005 	mov	r0, r5
80163d70:	eb00081a 	bl	80165de0 <__RME_Svc_Retval_Set>
    if(Thread->Sched.State==RME_THD_EXCPEND)
80163d74:	e596301c 	ldr	r3, [r6, #28]
80163d78:	e3530003 	cmp	r3, #3
80163d7c:	1afffeac 	bne	80163834 <_RME_Svc_Handler+0x9c>
        if(Thread->Sched.Slice!=0U)
80163d80:	e5963018 	ldr	r3, [r6, #24]
80163d84:	e3530000 	cmp	r3, #0
80163d88:	0a000220 	beq	80164610 <_RME_Svc_Handler+0xe78>
            Thread->Sched.State=RME_THD_READY;
80163d8c:	e3a03000 	mov	r3, #0
            _RME_Run_Ins(Thread);
80163d90:	e1a00006 	mov	r0, r6
            Thread->Sched.State=RME_THD_READY;
80163d94:	e586301c 	str	r3, [r6, #28]
            _RME_Run_Ins(Thread);
80163d98:	ebfff809 	bl	80161dc4 <_RME_Run_Ins>
    _RME_Kern_High(Reg,Local);
80163d9c:	e3071000 	movw	r1, #28672	@ 0x7000
80163da0:	e1a00005 	mov	r0, r5
80163da4:	e3481096 	movt	r1, #32918	@ 0x8096
80163da8:	ebfffe42 	bl	801636b8 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
80163dac:	eafffea0 	b	80163834 <_RME_Svc_Handler+0x9c>
            Retval=_RME_Thd_Sched_Prio(Cpt,
80163db0:	e59dc034 	ldr	ip, [sp, #52]	@ 0x34
                                       (rme_cid_t)RME_PARAM_D0(Param[2]),   /* rme_cid_t Cap_Thd2 */
80163db4:	e1cd23dc 	ldrd	r2, [sp, #60]	@ 0x3c
                                       (rme_cid_t)RME_PARAM_D0(Param[0]),   /* rme_cid_t Cap_Thd0 */
80163db8:	e59da038 	ldr	sl, [sp, #56]	@ 0x38
    if((Number==0U)||(Number>3U))
80163dbc:	e24c1001 	sub	r1, ip, #1
            Retval=_RME_Thd_Sched_Prio(Cpt,
80163dc0:	e58dc020 	str	ip, [sp, #32]
    if((Number==0U)||(Number>3U))
80163dc4:	e3510002 	cmp	r1, #2
            Retval=_RME_Thd_Sched_Prio(Cpt,
80163dc8:	e1a07822 	lsr	r7, r2, #16
80163dcc:	e6ff1072 	uxth	r1, r2
80163dd0:	e1a0e82a 	lsr	lr, sl, #16
80163dd4:	e6ff2073 	uxth	r2, r3
80163dd8:	e1a03823 	lsr	r3, r3, #16
80163ddc:	e6ff007a 	uxth	r0, sl
80163de0:	e58de024 	str	lr, [sp, #36]	@ 0x24
80163de4:	e58d7028 	str	r7, [sp, #40]	@ 0x28
80163de8:	e58d302c 	str	r3, [sp, #44]	@ 0x2c
    if((Number==0U)||(Number>3U))
80163dec:	8a0001c6 	bhi	8016450c <_RME_Svc_Handler+0xd74>
    Prio[1]=Prio1;
80163df0:	e58d7054 	str	r7, [sp, #84]	@ 0x54
80163df4:	e28da044 	add	sl, sp, #68	@ 0x44
    Cap_Thd[2]=Cap_Thd2;
80163df8:	e58d204c 	str	r2, [sp, #76]	@ 0x4c
80163dfc:	e28d8050 	add	r8, sp, #80	@ 0x50
    Prio[0]=Prio0;
80163e00:	e58de050 	str	lr, [sp, #80]	@ 0x50
80163e04:	e28d705c 	add	r7, sp, #92	@ 0x5c
80163e08:	e08a910c 	add	r9, sl, ip, lsl #2
    Cap_Thd[1]=Cap_Thd1;
80163e0c:	e1cd04f4 	strd	r0, [sp, #68]	@ 0x44
    Prio[2]=Prio2;
80163e10:	e58d3058 	str	r3, [sp, #88]	@ 0x58
    for(Count=0U;Count<Number;Count++)
80163e14:	e58d501c 	str	r5, [sp, #28]
80163e18:	ea00001a 	b	80163e88 <_RME_Svc_Handler+0x6f0>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
80163e1c:	e5963014 	ldr	r3, [r6, #20]
80163e20:	e15b0003 	cmp	fp, r3
80163e24:	2a0001f1 	bcs	801645f0 <_RME_Svc_Handler+0xe58>
80163e28:	e596300c 	ldr	r3, [r6, #12]
80163e2c:	e083b28b 	add	fp, r3, fp, lsl #5
80163e30:	e1a0000b 	mov	r0, fp
80163e34:	ebfff231 	bl	80160700 <__RME_A7A_Read_Acquire>
80163e38:	e7e73850 	ubfx	r3, r0, #16, #8
80163e3c:	e3530002 	cmp	r3, #2
80163e40:	0a0001ec 	beq	801645f8 <_RME_Svc_Handler+0xe60>
80163e44:	e1a00c20 	lsr	r0, r0, #24
80163e48:	e3500006 	cmp	r0, #6
80163e4c:	1a0001ec 	bne	80164604 <_RME_Svc_Handler+0xe6c>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
80163e50:	e59b3008 	ldr	r3, [fp, #8]
80163e54:	e3130008 	tst	r3, #8
80163e58:	0a000249 	beq	80164784 <_RME_Svc_Handler+0xfec>
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
80163e5c:	e59b300c 	ldr	r3, [fp, #12]
        if(Thread[Count]->Sched.Local!=Local)
80163e60:	e5932014 	ldr	r2, [r3, #20]
        Thread[Count]=(struct RME_Thd_Struct*)(Thd_Op[Count]->Head.Object);
80163e64:	e4873004 	str	r3, [r7], #4
        if(Thread[Count]->Sched.Local!=Local)
80163e68:	e1520004 	cmp	r2, r4
80163e6c:	1a0001a5 	bne	80164508 <_RME_Svc_Handler+0xd70>
        if(Thread[Count]->Sched.Prio_Max<Prio[Count])
80163e70:	e5932024 	ldr	r2, [r3, #36]	@ 0x24
80163e74:	e4983004 	ldr	r3, [r8], #4
80163e78:	e1520003 	cmp	r2, r3
80163e7c:	3a000216 	bcc	801646dc <_RME_Svc_Handler+0xf44>
    for(Count=0U;Count<Number;Count++)
80163e80:	e159000a 	cmp	r9, sl
80163e84:	0a0001f1 	beq	80164650 <_RME_Svc_Handler+0xeb8>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
80163e88:	e49ab004 	ldr	fp, [sl], #4
80163e8c:	e31b0080 	tst	fp, #128	@ 0x80
80163e90:	0affffe1 	beq	80163e1c <_RME_Svc_Handler+0x684>
80163e94:	e5962014 	ldr	r2, [r6, #20]
80163e98:	e1a0342b 	lsr	r3, fp, #8
80163e9c:	e1530002 	cmp	r3, r2
80163ea0:	2a0001d2 	bcs	801645f0 <_RME_Svc_Handler+0xe58>
80163ea4:	e596200c 	ldr	r2, [r6, #12]
80163ea8:	e0825283 	add	r5, r2, r3, lsl #5
80163eac:	e1a00005 	mov	r0, r5
80163eb0:	ebfff212 	bl	80160700 <__RME_A7A_Read_Acquire>
80163eb4:	e7e72850 	ubfx	r2, r0, #16, #8
80163eb8:	e3520002 	cmp	r2, #2
80163ebc:	0a0001cd 	beq	801645f8 <_RME_Svc_Handler+0xe60>
80163ec0:	e1a00c20 	lsr	r0, r0, #24
80163ec4:	e3500003 	cmp	r0, #3
80163ec8:	1a0001cd 	bne	80164604 <_RME_Svc_Handler+0xe6c>
80163ecc:	e5952014 	ldr	r2, [r5, #20]
80163ed0:	e20bb07f 	and	fp, fp, #127	@ 0x7f
80163ed4:	e15b0002 	cmp	fp, r2
80163ed8:	2a0001c4 	bcs	801645f0 <_RME_Svc_Handler+0xe58>
80163edc:	e595300c 	ldr	r3, [r5, #12]
80163ee0:	eaffffd1 	b	80163e2c <_RME_Svc_Handler+0x694>
            Retval=_RME_Thd_Time_Xfer(Cpt,
80163ee4:	e59d7040 	ldr	r7, [sp, #64]	@ 0x40
                                      (rme_cid_t)Param[1],                  /* rme_cid_t Cap_Thd_Src */
80163ee8:	e1cd83d8 	ldrd	r8, [sp, #56]	@ 0x38
    if(Time==0U)
80163eec:	e3570000 	cmp	r7, #0
80163ef0:	0a000185 	beq	8016450c <_RME_Svc_Handler+0xd74>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
80163ef4:	e3180080 	tst	r8, #128	@ 0x80
80163ef8:	0a0000b1 	beq	801641c4 <_RME_Svc_Handler+0xa2c>
80163efc:	e5962014 	ldr	r2, [r6, #20]
80163f00:	e1a03428 	lsr	r3, r8, #8
80163f04:	e1530002 	cmp	r3, r2
80163f08:	2a0000b2 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80163f0c:	e596a00c 	ldr	sl, [r6, #12]
80163f10:	e08aa283 	add	sl, sl, r3, lsl #5
80163f14:	e1a0000a 	mov	r0, sl
80163f18:	ebfff1f8 	bl	80160700 <__RME_A7A_Read_Acquire>
80163f1c:	e7e73850 	ubfx	r3, r0, #16, #8
80163f20:	e3530002 	cmp	r3, #2
80163f24:	0a000250 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163f28:	e1a00c20 	lsr	r0, r0, #24
80163f2c:	e3500003 	cmp	r0, #3
80163f30:	1a000138 	bne	80164418 <_RME_Svc_Handler+0xc80>
80163f34:	e59a2014 	ldr	r2, [sl, #20]
80163f38:	e208307f 	and	r3, r8, #127	@ 0x7f
80163f3c:	e1530002 	cmp	r3, r2
80163f40:	2a0000a4 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80163f44:	e59a800c 	ldr	r8, [sl, #12]
80163f48:	e0888283 	add	r8, r8, r3, lsl #5
80163f4c:	e1a00008 	mov	r0, r8
80163f50:	ebfff1ea 	bl	80160700 <__RME_A7A_Read_Acquire>
80163f54:	e7e73850 	ubfx	r3, r0, #16, #8
80163f58:	e3530002 	cmp	r3, #2
80163f5c:	0a000242 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163f60:	e1a00c20 	lsr	r0, r0, #24
80163f64:	e3500006 	cmp	r0, #6
80163f68:	1a00012a 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
80163f6c:	e3190080 	tst	r9, #128	@ 0x80
80163f70:	1a0000c0 	bne	80164278 <_RME_Svc_Handler+0xae0>
80163f74:	e5963014 	ldr	r3, [r6, #20]
80163f78:	e1590003 	cmp	r9, r3
80163f7c:	2a000095 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80163f80:	e596200c 	ldr	r2, [r6, #12]
80163f84:	e0826289 	add	r6, r2, r9, lsl #5
80163f88:	e1a00006 	mov	r0, r6
80163f8c:	ebfff1db 	bl	80160700 <__RME_A7A_Read_Acquire>
80163f90:	e7e73850 	ubfx	r3, r0, #16, #8
80163f94:	e3530002 	cmp	r3, #2
80163f98:	0a000233 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80163f9c:	e1a00c20 	lsr	r0, r0, #24
80163fa0:	e3500006 	cmp	r0, #6
80163fa4:	1a00011b 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Thd_Dst_Op,RME_THD_FLAG_XFER_DST);
80163fa8:	e5983008 	ldr	r3, [r8, #8]
80163fac:	e3130080 	tst	r3, #128	@ 0x80
80163fb0:	0a0000a6 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CAP_CHECK(Thd_Src_Op,RME_THD_FLAG_XFER_SRC);
80163fb4:	e5963008 	ldr	r3, [r6, #8]
80163fb8:	e3130040 	tst	r3, #64	@ 0x40
80163fbc:	0a0000a3 	beq	80164250 <_RME_Svc_Handler+0xab8>
    Thd_Src=RME_CAP_GETOBJ(Thd_Src_Op,struct RME_Thd_Struct*);
80163fc0:	e596600c 	ldr	r6, [r6, #12]
    if(Thd_Src->Sched.Local!=Local)
80163fc4:	e5963014 	ldr	r3, [r6, #20]
80163fc8:	e1530004 	cmp	r3, r4
80163fcc:	1a00014e 	bne	8016450c <_RME_Svc_Handler+0xd74>
    if(Thd_Src->Sched.Slice==0U)
80163fd0:	e5963018 	ldr	r3, [r6, #24]
80163fd4:	e3530000 	cmp	r3, #0
80163fd8:	0a00014b 	beq	8016450c <_RME_Svc_Handler+0xd74>
    Thd_Dst=RME_CAP_GETOBJ(Thd_Dst_Op,struct RME_Thd_Struct*);
80163fdc:	e598800c 	ldr	r8, [r8, #12]
    if(Thd_Dst->Sched.Local!=Local)
80163fe0:	e5982014 	ldr	r2, [r8, #20]
80163fe4:	e1520004 	cmp	r2, r4
80163fe8:	1a000147 	bne	8016450c <_RME_Svc_Handler+0xd74>
    if((Thd_Src->Sched.Prio_Max<Thd_Dst->Sched.Prio_Max)&&
80163fec:	e5961024 	ldr	r1, [r6, #36]	@ 0x24
80163ff0:	e5982024 	ldr	r2, [r8, #36]	@ 0x24
80163ff4:	e1510002 	cmp	r1, r2
80163ff8:	2a000002 	bcs	80164008 <_RME_Svc_Handler+0x870>
80163ffc:	e5982018 	ldr	r2, [r8, #24]
80164000:	e3720106 	cmn	r2, #-2147483647	@ 0x80000001
80164004:	1a0001b5 	bne	801646e0 <_RME_Svc_Handler+0xf48>
    if(Thd_Src->Sched.Slice<RME_THD_INF_TIME)
80164008:	e373010e 	cmn	r3, #-2147483645	@ 0x80000003
8016400c:	8a0000ae 	bhi	801642cc <_RME_Svc_Handler+0xb34>
        if(Time>=RME_THD_INF_TIME)
80164010:	e377010e 	cmn	r7, #-2147483645	@ 0x80000003
80164014:	81a07003 	movhi	r7, r3
80164018:	8a000001 	bhi	80164024 <_RME_Svc_Handler+0x88c>
            if(Thd_Src->Sched.Slice>Time)
8016401c:	e1570003 	cmp	r7, r3
80164020:	21a07003 	movcs	r7, r3
        if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
80164024:	e5982018 	ldr	r2, [r8, #24]
80164028:	e372010e 	cmn	r2, #-2147483645	@ 0x80000003
8016402c:	8a000009 	bhi	80164058 <_RME_Svc_Handler+0x8c0>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
80164030:	e0922007 	adds	r2, r2, r7
80164034:	23a03001 	movcs	r3, #1
80164038:	33a03000 	movcc	r3, #0
8016403c:	e372010e 	cmn	r2, #-2147483645	@ 0x80000003
80164040:	93a01000 	movls	r1, #0
80164044:	83a01001 	movhi	r1, #1
80164048:	e1913003 	orrs	r3, r1, r3
8016404c:	1a00022f 	bne	80164910 <_RME_Svc_Handler+0x1178>
            Thd_Dst->Sched.Slice+=Time_Xfer;
80164050:	e5882018 	str	r2, [r8, #24]
        Thd_Src->Sched.Slice-=Time_Xfer;
80164054:	e5963018 	ldr	r3, [r6, #24]
80164058:	e0433007 	sub	r3, r3, r7
8016405c:	e5863018 	str	r3, [r6, #24]
    if(Thd_Src->Sched.Slice==0U)
80164060:	e3530000 	cmp	r3, #0
80164064:	1a000002 	bne	80164074 <_RME_Svc_Handler+0x8dc>
        if(Thd_Src->Sched.State==RME_THD_READY)
80164068:	e596301c 	ldr	r3, [r6, #28]
8016406c:	e3530000 	cmp	r3, #0
80164070:	0a00016f 	beq	80164634 <_RME_Svc_Handler+0xe9c>
    __RME_Svc_Retval_Set(Reg,(rme_ret_t)(Thd_Dst->Sched.Slice));
80164074:	e5981018 	ldr	r1, [r8, #24]
80164078:	e1a00005 	mov	r0, r5
8016407c:	eb000757 	bl	80165de0 <__RME_Svc_Retval_Set>
    if(Thd_Dst->Sched.State==RME_THD_TIMEOUT)
80164080:	e598301c 	ldr	r3, [r8, #28]
80164084:	e3530002 	cmp	r3, #2
80164088:	1affff43 	bne	80163d9c <_RME_Svc_Handler+0x604>
        Thd_Dst->Sched.State=RME_THD_READY;
8016408c:	e3a03000 	mov	r3, #0
        _RME_Run_Ins(Thd_Dst);
80164090:	e1a00008 	mov	r0, r8
        Thd_Dst->Sched.State=RME_THD_READY;
80164094:	e588301c 	str	r3, [r8, #28]
        _RME_Run_Ins(Thd_Dst);
80164098:	ebfff749 	bl	80161dc4 <_RME_Run_Ins>
8016409c:	eaffff3e 	b	80163d9c <_RME_Svc_Handler+0x604>
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
801640a0:	e1590003 	cmp	r9, r3
801640a4:	2a00004b 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801640a8:	e0826289 	add	r6, r2, r9, lsl #5
801640ac:	eafffdfa 	b	8016389c <_RME_Svc_Handler+0x104>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
801640b0:	e15a0002 	cmp	sl, r2
801640b4:	2a000047 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801640b8:	e083a28a 	add	sl, r3, sl, lsl #5
801640bc:	eaffff17 	b	80163d20 <_RME_Svc_Handler+0x588>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
801640c0:	e1580003 	cmp	r8, r3
801640c4:	2a000043 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801640c8:	e0826288 	add	r6, r2, r8, lsl #5
801640cc:	eafffec5 	b	80163be8 <_RME_Svc_Handler+0x450>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
801640d0:	e1570002 	cmp	r7, r2
801640d4:	2a00003f 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801640d8:	e0836287 	add	r6, r3, r7, lsl #5
801640dc:	eafffe50 	b	80163a24 <_RME_Svc_Handler+0x28c>
        if((Is_Yield!=0U)&&(Thd_Cur->Sched.Slice<RME_THD_INF_TIME))
801640e0:	e3590000 	cmp	r9, #0
801640e4:	0a000002 	beq	801640f4 <_RME_Svc_Handler+0x95c>
801640e8:	e5973018 	ldr	r3, [r7, #24]
801640ec:	e373010e 	cmn	r3, #-2147483645	@ 0x80000003
801640f0:	9a0001a6 	bls	80164790 <_RME_Svc_Handler+0xff8>
            RME_ASSERT(Thd_Cur->Sched.State==RME_THD_READY);
801640f4:	e597301c 	ldr	r3, [r7, #28]
801640f8:	e3530000 	cmp	r3, #0
801640fc:	0a000126 	beq	8016459c <_RME_Svc_Handler+0xe04>
80164100:	e306308c 	movw	r3, #24716	@ 0x608c
80164104:	e3062098 	movw	r2, #24728	@ 0x6098
80164108:	e3483016 	movt	r3, #32790	@ 0x8016
8016410c:	e30600a4 	movw	r0, #24740	@ 0x60a4
80164110:	e3482016 	movt	r2, #32790	@ 0x8016
80164114:	e3011a15 	movw	r1, #6677	@ 0x1a15
80164118:	e3480016 	movt	r0, #32790	@ 0x8016
8016411c:	ebfff53d 	bl	80161618 <RME_Log>
80164120:	eafffffe 	b	80164120 <_RME_Svc_Handler+0x988>
    RME_CPT_GETCAP(Cpt,Cap_Kfn,RME_CAP_TYPE_KFN,
80164124:	e5962014 	ldr	r2, [r6, #20]
80164128:	e1a03424 	lsr	r3, r4, #8
8016412c:	e1530002 	cmp	r3, r2
80164130:	2a000028 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164134:	e596b00c 	ldr	fp, [r6, #12]
80164138:	e08bb283 	add	fp, fp, r3, lsl #5
8016413c:	e1a0000b 	mov	r0, fp
80164140:	ebfff16e 	bl	80160700 <__RME_A7A_Read_Acquire>
80164144:	e7e73850 	ubfx	r3, r0, #16, #8
80164148:	e3530002 	cmp	r3, #2
8016414c:	0a0001c6 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80164150:	e1a00c20 	lsr	r0, r0, #24
80164154:	e3500003 	cmp	r0, #3
80164158:	1a0000ae 	bne	80164418 <_RME_Svc_Handler+0xc80>
8016415c:	e59b3014 	ldr	r3, [fp, #20]
80164160:	e204107f 	and	r1, r4, #127	@ 0x7f
80164164:	e1510003 	cmp	r1, r3
80164168:	2a00001a 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
8016416c:	e59b400c 	ldr	r4, [fp, #12]
80164170:	e0844281 	add	r4, r4, r1, lsl #5
80164174:	eafffe6c 	b	80163b2c <_RME_Svc_Handler+0x394>
    RME_CPT_GETCAP(Cpt,Cap_Sig,RME_CAP_TYPE_SIG,
80164178:	e1a06427 	lsr	r6, r7, #8
8016417c:	e1520006 	cmp	r2, r6
80164180:	9a000014 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80164184:	e0836286 	add	r6, r3, r6, lsl #5
80164188:	e1a00006 	mov	r0, r6
8016418c:	ebfff15b 	bl	80160700 <__RME_A7A_Read_Acquire>
80164190:	e7e73850 	ubfx	r3, r0, #16, #8
80164194:	e3530002 	cmp	r3, #2
80164198:	0a0001b3 	beq	8016486c <_RME_Svc_Handler+0x10d4>
8016419c:	e1a00c20 	lsr	r0, r0, #24
801641a0:	e3500003 	cmp	r0, #3
801641a4:	1a00009b 	bne	80164418 <_RME_Svc_Handler+0xc80>
801641a8:	e5962014 	ldr	r2, [r6, #20]
801641ac:	e207307f 	and	r3, r7, #127	@ 0x7f
801641b0:	e1530002 	cmp	r3, r2
801641b4:	2a000007 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801641b8:	e596600c 	ldr	r6, [r6, #12]
801641bc:	e0866283 	add	r6, r6, r3, lsl #5
801641c0:	eafffe3d 	b	80163abc <_RME_Svc_Handler+0x324>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Dst,RME_CAP_TYPE_THD,
801641c4:	e5963014 	ldr	r3, [r6, #20]
801641c8:	e1580003 	cmp	r8, r3
801641cc:	3596300c 	ldrcc	r3, [r6, #12]
801641d0:	30838288 	addcc	r8, r3, r8, lsl #5
801641d4:	3affff5c 	bcc	80163f4c <_RME_Svc_Handler+0x7b4>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
801641d8:	e3e01002 	mvn	r1, #2
801641dc:	eafffdc1 	b	801638e8 <_RME_Svc_Handler+0x150>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NM);
801641e0:	e5963008 	ldr	r3, [r6, #8]
801641e4:	e3130010 	tst	r3, #16
801641e8:	0a000018 	beq	80164250 <_RME_Svc_Handler+0xab8>
    Sig_Root=RME_CAP_CONV_ROOT(Sig_Op,struct RME_Cap_Sig*);
801641ec:	e1d630b0 	ldrh	r3, [r6]
801641f0:	e3530000 	cmp	r3, #0
801641f4:	15966004 	ldrne	r6, [r6, #4]
    if(Sig_Root->Thd!=RME_NULL)
801641f8:	e5962018 	ldr	r2, [r6, #24]
801641fc:	e3520000 	cmp	r2, #0
80164200:	1afffdb7 	bne	801638e4 <_RME_Svc_Handler+0x14c>
    Thd_Cur=Local->Thd_Cur;
80164204:	e5940004 	ldr	r0, [r4, #4]
    RME_ASSERT(Thd_Cur->Sched.Slice!=0U);
80164208:	e5903018 	ldr	r3, [r0, #24]
8016420c:	e3530000 	cmp	r3, #0
80164210:	0a0000b3 	beq	801644e4 <_RME_Svc_Handler+0xd4c>
    if(Thd_Cur->Sched.Slice==RME_THD_INIT_TIME)
80164214:	e3730106 	cmn	r3, #-2147483647	@ 0x80000001
80164218:	0a0001be 	beq	80164918 <_RME_Svc_Handler+0x1180>
    Old_Value=Sig_Root->Sig_Num;
8016421c:	e5961014 	ldr	r1, [r6, #20]
    if(Old_Value>0U)
80164220:	e3510000 	cmp	r1, #0
80164224:	0a00009f 	beq	801644a8 <_RME_Svc_Handler+0xd10>
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
80164228:	e3d83002 	bics	r3, r8, #2
    if(*Ptr==Old)
8016422c:	e5963014 	ldr	r3, [r6, #20]
        if((Option==RME_RCV_BS)||(Option==RME_RCV_NS))
80164230:	1a000137 	bne	80164714 <_RME_Svc_Handler+0xf7c>
    if(*Ptr==Old)
80164234:	e1510003 	cmp	r1, r3
80164238:	0a0001a6 	beq	801648d8 <_RME_Svc_Handler+0x1140>
                return RME_ERR_SIV_CONFLICT;
8016423c:	e3e01e13 	mvn	r1, #304	@ 0x130
            RME_SWITCH_RETURN(Reg,Retval);
80164240:	eafffda8 	b	801638e8 <_RME_Svc_Handler+0x150>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_NS);
80164244:	e5963008 	ldr	r3, [r6, #8]
80164248:	e3130008 	tst	r3, #8
8016424c:	1affffe6 	bne	801641ec <_RME_Svc_Handler+0xa54>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
80164250:	e3e01006 	mvn	r1, #6
80164254:	eafffda3 	b	801638e8 <_RME_Svc_Handler+0x150>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BM);
80164258:	e5963008 	ldr	r3, [r6, #8]
8016425c:	e3130004 	tst	r3, #4
80164260:	1affffe1 	bne	801641ec <_RME_Svc_Handler+0xa54>
80164264:	eafffff9 	b	80164250 <_RME_Svc_Handler+0xab8>
            RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV_BS);
80164268:	e5963008 	ldr	r3, [r6, #8]
8016426c:	e3130002 	tst	r3, #2
80164270:	1affffdd 	bne	801641ec <_RME_Svc_Handler+0xa54>
80164274:	eafffff5 	b	80164250 <_RME_Svc_Handler+0xab8>
    RME_CPT_GETCAP(Cpt,Cap_Thd_Src,RME_CAP_TYPE_THD,
80164278:	e5962014 	ldr	r2, [r6, #20]
8016427c:	e1a03429 	lsr	r3, r9, #8
80164280:	e1530002 	cmp	r3, r2
80164284:	2affffd3 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164288:	e596600c 	ldr	r6, [r6, #12]
8016428c:	e0866283 	add	r6, r6, r3, lsl #5
80164290:	e1a00006 	mov	r0, r6
80164294:	ebfff119 	bl	80160700 <__RME_A7A_Read_Acquire>
80164298:	e7e73850 	ubfx	r3, r0, #16, #8
8016429c:	e3530002 	cmp	r3, #2
801642a0:	0a000171 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801642a4:	e1a00c20 	lsr	r0, r0, #24
801642a8:	e3500003 	cmp	r0, #3
801642ac:	1a000059 	bne	80164418 <_RME_Svc_Handler+0xc80>
801642b0:	e5963014 	ldr	r3, [r6, #20]
801642b4:	e209207f 	and	r2, r9, #127	@ 0x7f
801642b8:	e1520003 	cmp	r2, r3
801642bc:	2affffc5 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801642c0:	e596600c 	ldr	r6, [r6, #12]
801642c4:	e0866282 	add	r6, r6, r2, lsl #5
801642c8:	eaffff2e 	b	80163f88 <_RME_Svc_Handler+0x7f0>
        if(Time>=RME_THD_INF_TIME)
801642cc:	e377010e 	cmn	r7, #-2147483645	@ 0x80000003
801642d0:	9a0000ba 	bls	801645c0 <_RME_Svc_Handler+0xe28>
                if(Thd_Src->Sched.Slice!=RME_THD_INIT_TIME)
801642d4:	e2933106 	adds	r3, r3, #-2147483647	@ 0x80000001
801642d8:	13a03001 	movne	r3, #1
801642dc:	e3770106 	cmn	r7, #-2147483647	@ 0x80000001
801642e0:	13a03000 	movne	r3, #0
801642e4:	e3530000 	cmp	r3, #0
801642e8:	1a000166 	bne	80164888 <_RME_Svc_Handler+0x10f0>
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
801642ec:	e5981018 	ldr	r1, [r8, #24]
801642f0:	e371010e 	cmn	r1, #-2147483645	@ 0x80000003
801642f4:	8affff5f 	bhi	80164078 <_RME_Svc_Handler+0x8e0>
                Thd_Dst->Sched.Slice=RME_THD_INF_TIME;
801642f8:	e3e03106 	mvn	r3, #-2147483647	@ 0x80000001
801642fc:	e5883018 	str	r3, [r8, #24]
    if(Thd_Src->Sched.Slice==0U)
80164300:	e5963018 	ldr	r3, [r6, #24]
80164304:	eaffff55 	b	80164060 <_RME_Svc_Handler+0x8c8>
        __RME_Thd_Reg_Init(RME_THD_ATTR(Thread->Ctx.Hyp_Attr),
80164308:	e5960044 	ldr	r0, [r6, #68]	@ 0x44
8016430c:	e1a03009 	mov	r3, r9
80164310:	e5961048 	ldr	r1, [r6, #72]	@ 0x48
80164314:	e1a02008 	mov	r2, r8
80164318:	e3c00102 	bic	r0, r0, #-2147483648	@ 0x80000000
8016431c:	e58d1000 	str	r1, [sp]
80164320:	e1a01007 	mov	r1, r7
80164324:	eb0006af 	bl	80165de8 <__RME_Thd_Reg_Init>
80164328:	eafffe8e 	b	80163d68 <_RME_Svc_Handler+0x5d0>
        _RME_Run_Del(Thread);
8016432c:	e1a00006 	mov	r0, r6
80164330:	ebfff682 	bl	80161d40 <_RME_Run_Del>
        Thread->Sched.State=RME_THD_TIMEOUT;
80164334:	e3a03002 	mov	r3, #2
80164338:	e586301c 	str	r3, [r6, #28]
8016433c:	eafffe55 	b	80163c98 <_RME_Svc_Handler+0x500>
        Local->Thd_Cur=_RME_Run_High(Local);
80164340:	e3070000 	movw	r0, #28672	@ 0x7000
80164344:	e3480096 	movt	r0, #32918	@ 0x8096
80164348:	ebfff527 	bl	801617ec <_RME_Run_High>
8016434c:	e5840004 	str	r0, [r4, #4]
        _RME_Run_Ins(Local->Thd_Cur);
80164350:	ebfff69b 	bl	80161dc4 <_RME_Run_Ins>
        RME_ASSERT(Local->Thd_Cur->Sched.State==RME_THD_READY);
80164354:	e5942004 	ldr	r2, [r4, #4]
80164358:	e592301c 	ldr	r3, [r2, #28]
8016435c:	e3530000 	cmp	r3, #0
80164360:	0a0000af 	beq	80164624 <_RME_Svc_Handler+0xe8c>
80164364:	e306308c 	movw	r3, #24716	@ 0x608c
80164368:	e3062098 	movw	r2, #24728	@ 0x6098
8016436c:	e3483016 	movt	r3, #32790	@ 0x8016
80164370:	e30600a4 	movw	r0, #24740	@ 0x60a4
80164374:	e3482016 	movt	r2, #32790	@ 0x8016
80164378:	e30116cd 	movw	r1, #5837	@ 0x16cd
8016437c:	e3480016 	movt	r0, #32790	@ 0x8016
80164380:	ebfff4a4 	bl	80161618 <RME_Log>
80164384:	eafffffe 	b	80164384 <_RME_Svc_Handler+0xbec>
        RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80164388:	e5962014 	ldr	r2, [r6, #20]
8016438c:	e1a03428 	lsr	r3, r8, #8
80164390:	e1530002 	cmp	r3, r2
80164394:	2affff8f 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164398:	e596600c 	ldr	r6, [r6, #12]
8016439c:	e0866283 	add	r6, r6, r3, lsl #5
801643a0:	e1a00006 	mov	r0, r6
801643a4:	ebfff0d5 	bl	80160700 <__RME_A7A_Read_Acquire>
801643a8:	e7e73850 	ubfx	r3, r0, #16, #8
801643ac:	e3530002 	cmp	r3, #2
801643b0:	0a00012d 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801643b4:	e1a00c20 	lsr	r0, r0, #24
801643b8:	e3500003 	cmp	r0, #3
801643bc:	1a000015 	bne	80164418 <_RME_Svc_Handler+0xc80>
801643c0:	e5963014 	ldr	r3, [r6, #20]
801643c4:	e208807f 	and	r8, r8, #127	@ 0x7f
801643c8:	e1580003 	cmp	r8, r3
801643cc:	3afffd51 	bcc	80163918 <_RME_Svc_Handler+0x180>
801643d0:	eaffff80 	b	801641d8 <_RME_Svc_Handler+0xa40>
                                      (rme_cid_t)Param[0]);                 /* rme_cid_t Cap_Thd */
801643d4:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
801643d8:	e596200c 	ldr	r2, [r6, #12]
801643dc:	e5961014 	ldr	r1, [r6, #20]
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
801643e0:	e3170080 	tst	r7, #128	@ 0x80
801643e4:	0a000269 	beq	80164d90 <_RME_Svc_Handler+0x15f8>
801643e8:	e1510427 	cmp	r1, r7, lsr #8
801643ec:	e1a06427 	lsr	r6, r7, #8
801643f0:	9affff78 	bls	801641d8 <_RME_Svc_Handler+0xa40>
801643f4:	e0826286 	add	r6, r2, r6, lsl #5
801643f8:	e1a00006 	mov	r0, r6
801643fc:	ebfff0bf 	bl	80160700 <__RME_A7A_Read_Acquire>
80164400:	e7e73850 	ubfx	r3, r0, #16, #8
80164404:	e3530002 	cmp	r3, #2
80164408:	0a000117 	beq	8016486c <_RME_Svc_Handler+0x10d4>
8016440c:	e1a02c20 	lsr	r2, r0, #24
80164410:	e3520003 	cmp	r2, #3
80164414:	0a000280 	beq	80164e1c <_RME_Svc_Handler+0x1684>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
80164418:	e3e01001 	mvn	r1, #1
8016441c:	eafffd31 	b	801638e8 <_RME_Svc_Handler+0x150>
            Thd_Cur->Sched.Slice=0U;
80164420:	e3a03000 	mov	r3, #0
            _RME_Run_Del(Thd_Cur);
80164424:	e1a00007 	mov	r0, r7
            Thd_Cur->Sched.Slice=0U;
80164428:	e5873018 	str	r3, [r7, #24]
            _RME_Run_Del(Thd_Cur);
8016442c:	ebfff643 	bl	80161d40 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
80164430:	e3a03002 	mov	r3, #2
            _RME_Run_Notif(Thd_Cur);
80164434:	e1a00007 	mov	r0, r7
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
80164438:	e587301c 	str	r3, [r7, #28]
            _RME_Run_Notif(Thd_Cur);
8016443c:	ebfff6b4 	bl	80161f14 <_RME_Run_Notif>
            Thd_High=_RME_Run_High(Local);
80164440:	e1a00004 	mov	r0, r4
80164444:	ebfff4e8 	bl	801617ec <_RME_Run_High>
            if((Thd_High->Sched.Prio>Thd_New->Sched.Prio)||(Thd_Cur==Thd_New))
80164448:	e0471006 	sub	r1, r7, r6
8016444c:	e16f1f11 	clz	r1, r1
80164450:	e5963020 	ldr	r3, [r6, #32]
80164454:	e1a012a1 	lsr	r1, r1, #5
80164458:	e5902020 	ldr	r2, [r0, #32]
8016445c:	e1520003 	cmp	r2, r3
80164460:	83811001 	orrhi	r1, r1, #1
80164464:	e3510000 	cmp	r1, #0
80164468:	11a06000 	movne	r6, r0
8016446c:	1afffd47 	bne	80163990 <_RME_Svc_Handler+0x1f8>
    __RME_Svc_Retval_Set(Reg,0);
80164470:	e1a00005 	mov	r0, r5
80164474:	eb000659 	bl	80165de0 <__RME_Svc_Retval_Set>
    RME_ASSERT(Thd_New->Sched.State==RME_THD_READY);
80164478:	e596301c 	ldr	r3, [r6, #28]
8016447c:	e3530000 	cmp	r3, #0
80164480:	0afffd4a 	beq	801639b0 <_RME_Svc_Handler+0x218>
80164484:	e306308c 	movw	r3, #24716	@ 0x608c
80164488:	e3062098 	movw	r2, #24728	@ 0x6098
8016448c:	e3483016 	movt	r3, #32790	@ 0x8016
80164490:	e30600a4 	movw	r0, #24740	@ 0x60a4
80164494:	e3482016 	movt	r2, #32790	@ 0x8016
80164498:	e3011a20 	movw	r1, #6688	@ 0x1a20
8016449c:	e3480016 	movt	r0, #32790	@ 0x8016
801644a0:	ebfff45c 	bl	80161618 <RME_Log>
801644a4:	eafffffe 	b	801644a4 <_RME_Svc_Handler+0xd0c>
        if((Option==RME_RCV_BS)||(Option==RME_RCV_BM))
801644a8:	e3580001 	cmp	r8, #1
801644ac:	8afffd75 	bhi	80163a88 <_RME_Svc_Handler+0x2f0>
    if(*Ptr==Old)
801644b0:	e5963018 	ldr	r3, [r6, #24]
801644b4:	e3530000 	cmp	r3, #0
801644b8:	1affff5f 	bne	8016423c <_RME_Svc_Handler+0xaa4>
        *Ptr=New;
801644bc:	e5860018 	str	r0, [r6, #24]
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
801644c0:	e3a03001 	mov	r3, #1
            Thd_Cur->Sched.Signal=Sig_Root;
801644c4:	e5806028 	str	r6, [r0, #40]	@ 0x28
            Thd_Cur->Sched.State=RME_THD_BLOCKED;
801644c8:	e580301c 	str	r3, [r0, #28]
            _RME_Run_Del(Thd_Cur);
801644cc:	ebfff61b 	bl	80161d40 <_RME_Run_Del>
            _RME_Kern_High(Reg,Local);
801644d0:	e3071000 	movw	r1, #28672	@ 0x7000
801644d4:	e1a00005 	mov	r0, r5
801644d8:	e3481096 	movt	r1, #32918	@ 0x8096
801644dc:	ebfffc75 	bl	801636b8 <_RME_Kern_High>
            RME_SWITCH_RETURN(Reg,Retval);
801644e0:	eafffcd3 	b	80163834 <_RME_Svc_Handler+0x9c>
    RME_ASSERT(Thd_Cur->Sched.Slice!=0U);
801644e4:	e306308c 	movw	r3, #24716	@ 0x608c
801644e8:	e3062098 	movw	r2, #24728	@ 0x6098
801644ec:	e3483016 	movt	r3, #32790	@ 0x8016
801644f0:	e30600a4 	movw	r0, #24740	@ 0x60a4
801644f4:	e3482016 	movt	r2, #32790	@ 0x8016
801644f8:	e3011c51 	movw	r1, #7249	@ 0x1c51
801644fc:	e3480016 	movt	r0, #32790	@ 0x8016
80164500:	ebfff444 	bl	80161618 <RME_Log>
80164504:	eafffffe 	b	80164504 <_RME_Svc_Handler+0xd6c>
            return RME_ERR_PTH_INVSTATE;
80164508:	e59d501c 	ldr	r5, [sp, #28]
8016450c:	e3e010cb 	mvn	r1, #203	@ 0xcb
80164510:	eafffcf4 	b	801638e8 <_RME_Svc_Handler+0x150>
    Thd_Cur=RME_CPU_LOCAL()->Thd_Cur;
80164514:	e5944004 	ldr	r4, [r4, #4]
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
80164518:	e1a01005 	mov	r1, r5
8016451c:	e286001c 	add	r0, r6, #28
        *Ptr=New;
80164520:	e586400c 	str	r4, [r6, #12]
    __RME_Inv_Reg_Save(&(Invocation->Ret),Reg);
80164524:	eb000655 	bl	80165e80 <__RME_Inv_Reg_Save>
    _RME_List_Ins(&(Invocation->Head),
80164528:	e1a02004 	mov	r2, r4
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
8016452c:	e1a03007 	mov	r3, r7
    _RME_List_Ins(&(Invocation->Head),
80164530:	e5b2104c 	ldr	r1, [r2, #76]!	@ 0x4c
    Next->Prev=New;
80164534:	e5816004 	str	r6, [r1, #4]
    New->Prev=Prev;
80164538:	e8860006 	stm	r6, {r1, r2}
    Thd_Cur->Ctx.Invstk_Depth++;
8016453c:	e5942054 	ldr	r2, [r4, #84]	@ 0x54
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
80164540:	e5940044 	ldr	r0, [r4, #68]	@ 0x44
    Prev->Next=New;
80164544:	e584604c 	str	r6, [r4, #76]	@ 0x4c
    Thd_Cur->Ctx.Invstk_Depth++;
80164548:	e2822001 	add	r2, r2, #1
8016454c:	e5842054 	str	r2, [r4, #84]	@ 0x54
    __RME_Thd_Reg_Init(RME_THD_ATTR(Thd_Cur->Ctx.Hyp_Attr),
80164550:	e3c00102 	bic	r0, r0, #-2147483648	@ 0x80000000
80164554:	e5962014 	ldr	r2, [r6, #20]
80164558:	e5961010 	ldr	r1, [r6, #16]
8016455c:	e58d5000 	str	r5, [sp]
80164560:	eb000620 	bl	80165de8 <__RME_Thd_Reg_Init>
    RME_ASSERT(RME_CAP_IS_ROOT(Invocation->Prc->Pgt)!=0U);
80164564:	e5963008 	ldr	r3, [r6, #8]
80164568:	e5930018 	ldr	r0, [r3, #24]
8016456c:	e1d030b0 	ldrh	r3, [r0]
80164570:	e3530000 	cmp	r3, #0
80164574:	0a00006c 	beq	8016472c <_RME_Svc_Handler+0xf94>
80164578:	e306308c 	movw	r3, #24716	@ 0x608c
8016457c:	e3062098 	movw	r2, #24728	@ 0x6098
80164580:	e3483016 	movt	r3, #32790	@ 0x8016
80164584:	e30600a4 	movw	r0, #24740	@ 0x60a4
80164588:	e3482016 	movt	r2, #32790	@ 0x8016
8016458c:	e3011de9 	movw	r1, #7657	@ 0x1de9
80164590:	e3480016 	movt	r0, #32790	@ 0x8016
80164594:	ebfff41f 	bl	80161618 <RME_Log>
80164598:	eafffffe 	b	80164598 <_RME_Svc_Handler+0xe00>
            _RME_Run_Del(Thd_Cur);
8016459c:	e1a00007 	mov	r0, r7
801645a0:	ebfff5e6 	bl	80161d40 <_RME_Run_Del>
            _RME_Run_Ins(Thd_Cur);
801645a4:	e1a00007 	mov	r0, r7
801645a8:	ebfff605 	bl	80161dc4 <_RME_Run_Ins>
        Thd_New=_RME_Run_High(Local);
801645ac:	e3070000 	movw	r0, #28672	@ 0x7000
801645b0:	e3480096 	movt	r0, #32918	@ 0x8096
801645b4:	ebfff48c 	bl	801617ec <_RME_Run_High>
801645b8:	e1a06000 	mov	r6, r0
801645bc:	eafffcf3 	b	80163990 <_RME_Svc_Handler+0x1f8>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time);
801645c0:	e5983018 	ldr	r3, [r8, #24]
801645c4:	e0973003 	adds	r3, r7, r3
801645c8:	23a01001 	movcs	r1, #1
801645cc:	33a01000 	movcc	r1, #0
801645d0:	e373010e 	cmn	r3, #-2147483645	@ 0x80000003
801645d4:	93a02000 	movls	r2, #0
801645d8:	83a02001 	movhi	r2, #1
801645dc:	e1912002 	orrs	r2, r1, r2
801645e0:	1a0000ca 	bne	80164910 <_RME_Svc_Handler+0x1178>
            Thd_Dst->Sched.Slice+=Time;
801645e4:	e5883018 	str	r3, [r8, #24]
    if(Thd_Src->Sched.Slice==0U)
801645e8:	e5963018 	ldr	r3, [r6, #24]
801645ec:	eafffe9b 	b	80164060 <_RME_Svc_Handler+0x8c8>
        RME_CPT_GETCAP(Cpt,Cap_Thd[Count],RME_CAP_TYPE_THD,
801645f0:	e59d501c 	ldr	r5, [sp, #28]
801645f4:	eafffef7 	b	801641d8 <_RME_Svc_Handler+0xa40>
801645f8:	e59d501c 	ldr	r5, [sp, #28]
801645fc:	e3e01008 	mvn	r1, #8
80164600:	eafffcb8 	b	801638e8 <_RME_Svc_Handler+0x150>
80164604:	e59d501c 	ldr	r5, [sp, #28]
80164608:	e3e01001 	mvn	r1, #1
8016460c:	eafffcb5 	b	801638e8 <_RME_Svc_Handler+0x150>
            Thread->Sched.State=RME_THD_TIMEOUT;
80164610:	e3a03002 	mov	r3, #2
            _RME_Run_Notif(Thread);
80164614:	e1a00006 	mov	r0, r6
            Thread->Sched.State=RME_THD_TIMEOUT;
80164618:	e586301c 	str	r3, [r6, #28]
            _RME_Run_Notif(Thread);
8016461c:	ebfff63c 	bl	80161f14 <_RME_Run_Notif>
        _RME_Kern_High(Reg,Local);
80164620:	eafffddd 	b	80163d9c <_RME_Svc_Handler+0x604>
        _RME_Run_Swt(Reg,Thread,Local->Thd_Cur);
80164624:	e1a01006 	mov	r1, r6
80164628:	e1a00005 	mov	r0, r5
8016462c:	ebfff601 	bl	80161e38 <_RME_Run_Swt.isra.0>
80164630:	eafffd9d 	b	80163cac <_RME_Svc_Handler+0x514>
            _RME_Run_Del(Thd_Src);
80164634:	e1a00006 	mov	r0, r6
80164638:	ebfff5c0 	bl	80161d40 <_RME_Run_Del>
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
8016463c:	e3a03002 	mov	r3, #2
            _RME_Run_Notif(Thd_Src);
80164640:	e1a00006 	mov	r0, r6
            Thd_Src->Sched.State=RME_THD_TIMEOUT;
80164644:	e586301c 	str	r3, [r6, #28]
            _RME_Run_Notif(Thd_Src);
80164648:	ebfff631 	bl	80161f14 <_RME_Run_Notif>
8016464c:	eafffe88 	b	80164074 <_RME_Svc_Handler+0x8dc>
    __RME_Svc_Retval_Set(Reg,0);
80164650:	e59d501c 	ldr	r5, [sp, #28]
80164654:	e3a01000 	mov	r1, #0
80164658:	e1a00005 	mov	r0, r5
8016465c:	eb0005df 	bl	80165de0 <__RME_Svc_Retval_Set>
        if(Thread[Count]->Sched.State==RME_THD_READY)
80164660:	e59d405c 	ldr	r4, [sp, #92]	@ 0x5c
80164664:	e594301c 	ldr	r3, [r4, #28]
80164668:	e3530000 	cmp	r3, #0
8016466c:	0a00008b 	beq	801648a0 <_RME_Svc_Handler+0x1108>
            Thread[Count]->Sched.Prio=Prio[Count];
80164670:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
80164674:	e5843020 	str	r3, [r4, #32]
    for(Count=0U;Count<Number;Count++)
80164678:	e59d3020 	ldr	r3, [sp, #32]
8016467c:	e3530001 	cmp	r3, #1
80164680:	0afffdc5 	beq	80163d9c <_RME_Svc_Handler+0x604>
        if(Thread[Count]->Sched.State==RME_THD_READY)
80164684:	e59d4060 	ldr	r4, [sp, #96]	@ 0x60
80164688:	e594301c 	ldr	r3, [r4, #28]
8016468c:	e3530000 	cmp	r3, #0
80164690:	0a000089 	beq	801648bc <_RME_Svc_Handler+0x1124>
            Thread[Count]->Sched.Prio=Prio[Count];
80164694:	e59d3028 	ldr	r3, [sp, #40]	@ 0x28
80164698:	e5843020 	str	r3, [r4, #32]
    for(Count=0U;Count<Number;Count++)
8016469c:	e59d3020 	ldr	r3, [sp, #32]
801646a0:	e3530003 	cmp	r3, #3
801646a4:	1afffdbc 	bne	80163d9c <_RME_Svc_Handler+0x604>
        if(Thread[Count]->Sched.State==RME_THD_READY)
801646a8:	e59d4064 	ldr	r4, [sp, #100]	@ 0x64
801646ac:	e594301c 	ldr	r3, [r4, #28]
801646b0:	e3530000 	cmp	r3, #0
            Thread[Count]->Sched.Prio=Prio[Count];
801646b4:	159d302c 	ldrne	r3, [sp, #44]	@ 0x2c
801646b8:	15843020 	strne	r3, [r4, #32]
        if(Thread[Count]->Sched.State==RME_THD_READY)
801646bc:	1afffdb6 	bne	80163d9c <_RME_Svc_Handler+0x604>
            _RME_Run_Del(Thread[Count]);
801646c0:	e1a00004 	mov	r0, r4
801646c4:	ebfff59d 	bl	80161d40 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
801646c8:	e59d302c 	ldr	r3, [sp, #44]	@ 0x2c
            _RME_Run_Ins(Thread[Count]);
801646cc:	e1a00004 	mov	r0, r4
            Thread[Count]->Sched.Prio=Prio[Count];
801646d0:	e5843020 	str	r3, [r4, #32]
            _RME_Run_Ins(Thread[Count]);
801646d4:	ebfff5ba 	bl	80161dc4 <_RME_Run_Ins>
801646d8:	eafffdaf 	b	80163d9c <_RME_Svc_Handler+0x604>
            return RME_ERR_PTH_PRIO;
801646dc:	e59d501c 	ldr	r5, [sp, #28]
801646e0:	e3e010cc 	mvn	r1, #204	@ 0xcc
            RME_SWITCH_RETURN(Reg,Retval);
801646e4:	eafffc7f 	b	801638e8 <_RME_Svc_Handler+0x150>
        __RME_Svc_Retval_Set(&(Thread->Ctx.Reg->Reg),RME_ERR_SIV_FREE);
801646e8:	e5960048 	ldr	r0, [r6, #72]	@ 0x48
801646ec:	e30f1ece 	movw	r1, #65230	@ 0xfece
801646f0:	e34f1fff 	movt	r1, #65535	@ 0xffff
801646f4:	eb0005b9 	bl	80165de0 <__RME_Svc_Retval_Set>
        Thread->Sched.Signal->Thd=RME_NULL;
801646f8:	e5962028 	ldr	r2, [r6, #40]	@ 0x28
801646fc:	e3a03000 	mov	r3, #0
80164700:	e5823018 	str	r3, [r2, #24]
        Thread->Sched.State=RME_THD_TIMEOUT;
80164704:	e3a02002 	mov	r2, #2
        Thread->Sched.Signal=RME_NULL;
80164708:	e5863028 	str	r3, [r6, #40]	@ 0x28
        Thread->Sched.State=RME_THD_TIMEOUT;
8016470c:	e586201c 	str	r2, [r6, #28]
80164710:	eafffd60 	b	80163c98 <_RME_Svc_Handler+0x500>
    if(*Ptr==Old)
80164714:	e1510003 	cmp	r1, r3
80164718:	1afffec7 	bne	8016423c <_RME_Svc_Handler+0xaa4>
        *Ptr=New;
8016471c:	e5862014 	str	r2, [r6, #20]
            __RME_Svc_Retval_Set(Reg,(rme_ret_t)Old_Value);
80164720:	e1a00005 	mov	r0, r5
80164724:	eb0005ad 	bl	80165de0 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
80164728:	eafffc41 	b	80163834 <_RME_Svc_Handler+0x9c>
    __RME_Pgt_Set(Invocation->Prc->Pgt);
8016472c:	eb000627 	bl	80165fd0 <__RME_Pgt_Set>
        RME_SWITCH_RETURN(Reg,Retval);
80164730:	eafffc3f 	b	80163834 <_RME_Svc_Handler+0x9c>
        __RME_Svc_Retval_Set(Reg,0);
80164734:	e3a01000 	mov	r1, #0
80164738:	e1a00005 	mov	r0, r5
8016473c:	eb0005a7 	bl	80165de0 <__RME_Svc_Retval_Set>
        __RME_Svc_Retval_Set(&(Thd_Rcv->Ctx.Reg->Reg),1);
80164740:	e5970048 	ldr	r0, [r7, #72]	@ 0x48
80164744:	e3a01001 	mov	r1, #1
80164748:	eb0005a4 	bl	80165de0 <__RME_Svc_Retval_Set>
        if(Thd_Rcv->Sched.Slice!=0U)
8016474c:	e5973018 	ldr	r3, [r7, #24]
80164750:	e3530000 	cmp	r3, #0
80164754:	0a000046 	beq	80164874 <_RME_Svc_Handler+0x10dc>
            Thd_Rcv->Sched.State=RME_THD_READY;
80164758:	e3a03000 	mov	r3, #0
            _RME_Run_Ins(Thd_Rcv);
8016475c:	e1a00007 	mov	r0, r7
            Thd_Rcv->Sched.State=RME_THD_READY;
80164760:	e587301c 	str	r3, [r7, #28]
            _RME_Run_Ins(Thd_Rcv);
80164764:	ebfff596 	bl	80161dc4 <_RME_Run_Ins>
        _RME_Kern_High(Reg,Local);
80164768:	e3071000 	movw	r1, #28672	@ 0x7000
8016476c:	e1a00005 	mov	r0, r5
80164770:	e3481096 	movt	r1, #32918	@ 0x8096
80164774:	ebfffbcf 	bl	801636b8 <_RME_Kern_High>
        Sig_Root->Thd=RME_NULL;
80164778:	e3a03000 	mov	r3, #0
8016477c:	e5863018 	str	r3, [r6, #24]
            RME_SWITCH_RETURN(Reg,Retval);
80164780:	eafffc2b 	b	80163834 <_RME_Svc_Handler+0x9c>
        RME_CAP_CHECK(Thd_Op[Count],RME_THD_FLAG_SCHED_PRIO);
80164784:	e59d501c 	ldr	r5, [sp, #28]
80164788:	e3e01006 	mvn	r1, #6
8016478c:	eafffc55 	b	801638e8 <_RME_Svc_Handler+0x150>
            Thd_Cur->Sched.Slice=0U;
80164790:	e3a03000 	mov	r3, #0
            _RME_Run_Del(Thd_Cur);
80164794:	e1a00007 	mov	r0, r7
            Thd_Cur->Sched.Slice=0U;
80164798:	e5873018 	str	r3, [r7, #24]
            _RME_Run_Del(Thd_Cur);
8016479c:	ebfff567 	bl	80161d40 <_RME_Run_Del>
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
801647a0:	e3a03002 	mov	r3, #2
            _RME_Run_Notif(Thd_Cur);
801647a4:	e1a00007 	mov	r0, r7
            Thd_Cur->Sched.State=RME_THD_TIMEOUT;
801647a8:	e587301c 	str	r3, [r7, #28]
            _RME_Run_Notif(Thd_Cur);
801647ac:	ebfff5d8 	bl	80161f14 <_RME_Run_Notif>
801647b0:	eaffff7d 	b	801645ac <_RME_Svc_Handler+0xe14>
            Retval=_RME_Cpt_Del(Cpt,
801647b4:	e59d4034 	ldr	r4, [sp, #52]	@ 0x34
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Cpt */
801647b8:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
801647bc:	e596300c 	ldr	r3, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
801647c0:	e3140080 	tst	r4, #128	@ 0x80
801647c4:	e5962014 	ldr	r2, [r6, #20]
801647c8:	0a000302 	beq	801653d8 <_RME_Svc_Handler+0x1c40>
801647cc:	e1520424 	cmp	r2, r4, lsr #8
801647d0:	e1a06424 	lsr	r6, r4, #8
801647d4:	9afffe7f 	bls	801641d8 <_RME_Svc_Handler+0xa40>
801647d8:	e0836286 	add	r6, r3, r6, lsl #5
801647dc:	e1a00006 	mov	r0, r6
801647e0:	ebffefc6 	bl	80160700 <__RME_A7A_Read_Acquire>
801647e4:	e7e72850 	ubfx	r2, r0, #16, #8
801647e8:	e3520002 	cmp	r2, #2
801647ec:	0a00001e 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801647f0:	e1a03c20 	lsr	r3, r0, #24
801647f4:	e3530003 	cmp	r3, #3
801647f8:	1affff06 	bne	80164418 <_RME_Svc_Handler+0xc80>
801647fc:	e5963014 	ldr	r3, [r6, #20]
80164800:	e204407f 	and	r4, r4, #127	@ 0x7f
80164804:	e1540003 	cmp	r4, r3
80164808:	2afffe72 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
8016480c:	e596300c 	ldr	r3, [r6, #12]
80164810:	e0834284 	add	r4, r3, r4, lsl #5
80164814:	e1a00004 	mov	r0, r4
80164818:	ebffefb8 	bl	80160700 <__RME_A7A_Read_Acquire>
8016481c:	e7e72850 	ubfx	r2, r0, #16, #8
80164820:	e3520002 	cmp	r2, #2
80164824:	0a000010 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80164828:	e1a03c20 	lsr	r3, r0, #24
8016482c:	e3530003 	cmp	r3, #3
80164830:	1afffef8 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
80164834:	e5943008 	ldr	r3, [r4, #8]
80164838:	e3130002 	tst	r3, #2
8016483c:	0afffe83 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Del,struct RME_Cap_Cpt*,Cpt_Del);
80164840:	e5943014 	ldr	r3, [r4, #20]
80164844:	e1570003 	cmp	r7, r3
80164848:	2afffe62 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
8016484c:	e594400c 	ldr	r4, [r4, #12]
80164850:	e0846287 	add	r6, r4, r7, lsl #5
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
80164854:	e1a00006 	mov	r0, r6
80164858:	ebffefa8 	bl	80160700 <__RME_A7A_Read_Acquire>
8016485c:	e7e72850 	ubfx	r2, r0, #16, #8
80164860:	e1a03000 	mov	r3, r0
80164864:	e3520002 	cmp	r2, #2
80164868:	0a000195 	beq	80164ec4 <_RME_Svc_Handler+0x172c>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
8016486c:	e3e01008 	mvn	r1, #8
80164870:	eafffc1c 	b	801638e8 <_RME_Svc_Handler+0x150>
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
80164874:	e3a03002 	mov	r3, #2
            _RME_Run_Notif(Thd_Rcv);
80164878:	e1a00007 	mov	r0, r7
            Thd_Rcv->Sched.State=RME_THD_TIMEOUT;
8016487c:	e587301c 	str	r3, [r7, #28]
            _RME_Run_Notif(Thd_Rcv);
80164880:	ebfff5a3 	bl	80161f14 <_RME_Run_Notif>
80164884:	eaffffb7 	b	80164768 <_RME_Svc_Handler+0xfd0>
                    Thd_Src->Sched.Slice=0U;
80164888:	e3a03000 	mov	r3, #0
8016488c:	e5863018 	str	r3, [r6, #24]
            if(Thd_Dst->Sched.Slice<RME_THD_INF_TIME)
80164890:	e5983018 	ldr	r3, [r8, #24]
80164894:	e373010e 	cmn	r3, #-2147483645	@ 0x80000003
80164898:	8afffdf2 	bhi	80164068 <_RME_Svc_Handler+0x8d0>
8016489c:	eafffe95 	b	801642f8 <_RME_Svc_Handler+0xb60>
            _RME_Run_Del(Thread[Count]);
801648a0:	e1a00004 	mov	r0, r4
801648a4:	ebfff525 	bl	80161d40 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
801648a8:	e59d3024 	ldr	r3, [sp, #36]	@ 0x24
            _RME_Run_Ins(Thread[Count]);
801648ac:	e1a00004 	mov	r0, r4
            Thread[Count]->Sched.Prio=Prio[Count];
801648b0:	e5843020 	str	r3, [r4, #32]
            _RME_Run_Ins(Thread[Count]);
801648b4:	ebfff542 	bl	80161dc4 <_RME_Run_Ins>
801648b8:	eaffff6e 	b	80164678 <_RME_Svc_Handler+0xee0>
            _RME_Run_Del(Thread[Count]);
801648bc:	e1a00004 	mov	r0, r4
801648c0:	ebfff51e 	bl	80161d40 <_RME_Run_Del>
            Thread[Count]->Sched.Prio=Prio[Count];
801648c4:	e59d3028 	ldr	r3, [sp, #40]	@ 0x28
            _RME_Run_Ins(Thread[Count]);
801648c8:	e1a00004 	mov	r0, r4
            Thread[Count]->Sched.Prio=Prio[Count];
801648cc:	e5843020 	str	r3, [r4, #32]
            _RME_Run_Ins(Thread[Count]);
801648d0:	ebfff53b 	bl	80161dc4 <_RME_Run_Ins>
801648d4:	eaffff70 	b	8016469c <_RME_Svc_Handler+0xf04>
            if(RME_COMP_SWAP(&(Sig_Root->Sig_Num),
801648d8:	e2413001 	sub	r3, r1, #1
            __RME_Svc_Retval_Set(Reg,1);
801648dc:	e1a00005 	mov	r0, r5
        *Ptr=New;
801648e0:	e5863014 	str	r3, [r6, #20]
            __RME_Svc_Retval_Set(Reg,1);
801648e4:	e3a01001 	mov	r1, #1
801648e8:	eb00053c 	bl	80165de0 <__RME_Svc_Retval_Set>
            RME_SWITCH_RETURN(Reg,Retval);
801648ec:	eafffbd0 	b	80163834 <_RME_Svc_Handler+0x9c>
    Old=(rme_cnt_t)(*Ptr);
801648f0:	e5963014 	ldr	r3, [r6, #20]
            return RME_ERR_SIV_FULL;
801648f4:	e30f1ed1 	movw	r1, #65233	@ 0xfed1
801648f8:	e34f1fff 	movt	r1, #65535	@ 0xffff
    *Ptr=(rme_ptr_t)(Old+Addend);
801648fc:	e2433001 	sub	r3, r3, #1
80164900:	e5863014 	str	r3, [r6, #20]
            RME_SWITCH_RETURN(Reg,Retval);
80164904:	eafffbf7 	b	801638e8 <_RME_Svc_Handler+0x150>
        return RME_ERR_PTH_REFCNT;
80164908:	e3e010cd 	mvn	r1, #205	@ 0xcd
            RME_SWITCH_RETURN(Reg,Retval);
8016490c:	eafffbf5 	b	801638e8 <_RME_Svc_Handler+0x150>
            RME_TIME_CHECK(Thd_Dst->Sched.Slice,Time_Xfer);
80164910:	e3e010cf 	mvn	r1, #207	@ 0xcf
            RME_SWITCH_RETURN(Reg,Retval);
80164914:	eafffbf3 	b	801638e8 <_RME_Svc_Handler+0x150>
        return RME_ERR_SIV_BOOT;
80164918:	e30f1ecd 	movw	r1, #65229	@ 0xfecd
8016491c:	e34f1fff 	movt	r1, #65535	@ 0xffff
80164920:	eafffbf0 	b	801638e8 <_RME_Svc_Handler+0x150>
    switch(Svc_Num)
80164924:	e242200a 	sub	r2, r2, #10
80164928:	e3520017 	cmp	r2, #23
8016492c:	979ff102 	ldrls	pc, [pc, r2, lsl #2]
80164930:	ea000055 	b	80164a8c <_RME_Svc_Handler+0x12f4>
80164934:	801653a8 	.word	0x801653a8
80164938:	801647b4 	.word	0x801647b4
8016493c:	801653e4 	.word	0x801653e4
80164940:	80165368 	.word	0x80165368
80164944:	80165174 	.word	0x80165174
80164948:	8016512c 	.word	0x8016512c
8016494c:	80165068 	.word	0x80165068
80164950:	8016502c 	.word	0x8016502c
80164954:	8016561c 	.word	0x8016561c
80164958:	801655f8 	.word	0x801655f8
8016495c:	801655e0 	.word	0x801655e0
80164960:	801655c0 	.word	0x801655c0
80164964:	8016576c 	.word	0x8016576c
80164968:	801656a0 	.word	0x801656a0
8016496c:	80165968 	.word	0x80165968
80164970:	80164fe4 	.word	0x80164fe4
80164974:	80164cf4 	.word	0x80164cf4
80164978:	80164cbc 	.word	0x80164cbc
8016497c:	801643d4 	.word	0x801643d4
80164980:	80164b54 	.word	0x80164b54
80164984:	80164bfc 	.word	0x80164bfc
80164988:	80164bcc 	.word	0x80164bcc
8016498c:	80164994 	.word	0x80164994
80164990:	80164a94 	.word	0x80164a94
            Retval=_RME_Inv_Del(Cpt,
80164994:	e59d4034 	ldr	r4, [sp, #52]	@ 0x34
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Inv */
80164998:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
8016499c:	e596200c 	ldr	r2, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
801649a0:	e3140080 	tst	r4, #128	@ 0x80
801649a4:	e5963014 	ldr	r3, [r6, #20]
801649a8:	0a0000d7 	beq	80164d0c <_RME_Svc_Handler+0x1574>
801649ac:	e1530424 	cmp	r3, r4, lsr #8
801649b0:	e1a06424 	lsr	r6, r4, #8
801649b4:	9afffe07 	bls	801641d8 <_RME_Svc_Handler+0xa40>
801649b8:	e0826286 	add	r6, r2, r6, lsl #5
801649bc:	e1a00006 	mov	r0, r6
801649c0:	ebffef4e 	bl	80160700 <__RME_A7A_Read_Acquire>
801649c4:	e7e73850 	ubfx	r3, r0, #16, #8
801649c8:	e3530002 	cmp	r3, #2
801649cc:	0affffa6 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801649d0:	e1a02c20 	lsr	r2, r0, #24
801649d4:	e3520003 	cmp	r2, #3
801649d8:	1afffe8e 	bne	80164418 <_RME_Svc_Handler+0xc80>
801649dc:	e5962014 	ldr	r2, [r6, #20]
801649e0:	e204307f 	and	r3, r4, #127	@ 0x7f
801649e4:	e1530002 	cmp	r3, r2
801649e8:	2afffdfa 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801649ec:	e596400c 	ldr	r4, [r6, #12]
801649f0:	e0844283 	add	r4, r4, r3, lsl #5
801649f4:	e1a00004 	mov	r0, r4
801649f8:	ebffef40 	bl	80160700 <__RME_A7A_Read_Acquire>
801649fc:	e7e72850 	ubfx	r2, r0, #16, #8
80164a00:	e3520002 	cmp	r2, #2
80164a04:	0affff98 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80164a08:	e1a03c20 	lsr	r3, r0, #24
80164a0c:	e3530003 	cmp	r3, #3
80164a10:	1afffe80 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
80164a14:	e5943008 	ldr	r3, [r4, #8]
80164a18:	e3130002 	tst	r3, #2
80164a1c:	0afffe0b 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
80164a20:	e5943014 	ldr	r3, [r4, #20]
80164a24:	e1570003 	cmp	r7, r3
80164a28:	2afffdea 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164a2c:	e594600c 	ldr	r6, [r4, #12]
80164a30:	e0864287 	add	r4, r6, r7, lsl #5
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
80164a34:	e1a00004 	mov	r0, r4
80164a38:	ebffef30 	bl	80160700 <__RME_A7A_Read_Acquire>
80164a3c:	e7e72850 	ubfx	r2, r0, #16, #8
80164a40:	e1a03000 	mov	r3, r0
80164a44:	e3520002 	cmp	r2, #2
80164a48:	1affff87 	bne	8016486c <_RME_Svc_Handler+0x10d4>
80164a4c:	e1a02c20 	lsr	r2, r0, #24
80164a50:	e3520007 	cmp	r2, #7
80164a54:	1afffe6f 	bne	80164418 <_RME_Svc_Handler+0xc80>
80164a58:	e5942004 	ldr	r2, [r4, #4]
80164a5c:	e3520000 	cmp	r2, #0
80164a60:	e6ff2070 	uxth	r2, r0
80164a64:	1a0000bf 	bne	80164d68 <_RME_Svc_Handler+0x15d0>
80164a68:	e3520000 	cmp	r2, #0
80164a6c:	1a00010b 	bne	80164ea0 <_RME_Svc_Handler+0x1708>
    Invocation=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
80164a70:	e594000c 	ldr	r0, [r4, #12]
    if(Invocation->Thd_Act!=RME_NULL)
80164a74:	e590200c 	ldr	r2, [r0, #12]
80164a78:	e3520000 	cmp	r2, #0
80164a7c:	1a00012f 	bne	80164f40 <_RME_Svc_Handler+0x17a8>
    if(*Ptr==Old)
80164a80:	e7961287 	ldr	r1, [r6, r7, lsl #5]
80164a84:	e1530001 	cmp	r3, r1
80164a88:	0a000133 	beq	80164f5c <_RME_Svc_Handler+0x17c4>
    RME_CAP_DELETE(Inv_Del,Type_Stat);
80164a8c:	e3e01000 	mvn	r1, #0
80164a90:	eafffb94 	b	801638e8 <_RME_Svc_Handler+0x150>
                                (rme_cid_t)RME_PARAM_D0(Param[0]),          /* rme_cid_t Cap_Inv */
80164a94:	e59d9038 	ldr	r9, [sp, #56]	@ 0x38
            Retval=_RME_Inv_Set(Cpt,
80164a98:	e59d803c 	ldr	r8, [sp, #60]	@ 0x3c
80164a9c:	e59d7040 	ldr	r7, [sp, #64]	@ 0x40
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
80164aa0:	e3190080 	tst	r9, #128	@ 0x80
80164aa4:	e596300c 	ldr	r3, [r6, #12]
            Retval=_RME_Inv_Set(Cpt,
80164aa8:	e6ff2079 	uxth	r2, r9
80164aac:	e5961014 	ldr	r1, [r6, #20]
80164ab0:	e1a04829 	lsr	r4, r9, #16
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
80164ab4:	1a000013 	bne	80164b08 <_RME_Svc_Handler+0x1370>
80164ab8:	e1510002 	cmp	r1, r2
80164abc:	9afffdc5 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80164ac0:	e0836282 	add	r6, r3, r2, lsl #5
80164ac4:	e1a00006 	mov	r0, r6
80164ac8:	ebffef0c 	bl	80160700 <__RME_A7A_Read_Acquire>
80164acc:	e7e72850 	ubfx	r2, r0, #16, #8
80164ad0:	e3520002 	cmp	r2, #2
80164ad4:	0affff64 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80164ad8:	e1a03c20 	lsr	r3, r0, #24
80164adc:	e3530007 	cmp	r3, #7
80164ae0:	1afffe4c 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
80164ae4:	e5963008 	ldr	r3, [r6, #8]
80164ae8:	e3130001 	tst	r3, #1
80164aec:	0afffdd7 	beq	80164250 <_RME_Svc_Handler+0xab8>
    Invocation=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
80164af0:	e596300c 	ldr	r3, [r6, #12]
    return 0;
80164af4:	e3a01000 	mov	r1, #0
    Invocation->Entry=Entry;
80164af8:	e5838010 	str	r8, [r3, #16]
    Invocation->Stack=Stack;
80164afc:	e5837014 	str	r7, [r3, #20]
    Invocation->Is_Exc_Ret=Is_Exc_Ret;
80164b00:	e5834018 	str	r4, [r3, #24]
    return 0;
80164b04:	eafffb77 	b	801638e8 <_RME_Svc_Handler+0x150>
    RME_CPT_GETCAP(Cpt,Cap_Inv,RME_CAP_TYPE_INV,
80164b08:	e1510422 	cmp	r1, r2, lsr #8
80164b0c:	e1a02422 	lsr	r2, r2, #8
80164b10:	9afffdb0 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80164b14:	e0836282 	add	r6, r3, r2, lsl #5
80164b18:	e1a00006 	mov	r0, r6
80164b1c:	ebffeef7 	bl	80160700 <__RME_A7A_Read_Acquire>
80164b20:	e7e73850 	ubfx	r3, r0, #16, #8
80164b24:	e3530002 	cmp	r3, #2
80164b28:	0affff4f 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80164b2c:	e1a02c20 	lsr	r2, r0, #24
80164b30:	e3520003 	cmp	r2, #3
80164b34:	1afffe37 	bne	80164418 <_RME_Svc_Handler+0xc80>
80164b38:	e5962014 	ldr	r2, [r6, #20]
80164b3c:	e209307f 	and	r3, r9, #127	@ 0x7f
80164b40:	e1530002 	cmp	r3, r2
80164b44:	2afffda3 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164b48:	e596200c 	ldr	r2, [r6, #12]
80164b4c:	e0826283 	add	r6, r2, r3, lsl #5
80164b50:	eaffffdb 	b	80164ac4 <_RME_Svc_Handler+0x132c>
            Retval=_RME_Sig_Crt(Cpt,
80164b54:	e59d4034 	ldr	r4, [sp, #52]	@ 0x34
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
80164b58:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
80164b5c:	e596200c 	ldr	r2, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80164b60:	e3140080 	tst	r4, #128	@ 0x80
80164b64:	e5963014 	ldr	r3, [r6, #20]
80164b68:	1a00006b 	bne	80164d1c <_RME_Svc_Handler+0x1584>
80164b6c:	e1540003 	cmp	r4, r3
80164b70:	2afffd98 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164b74:	e0824284 	add	r4, r2, r4, lsl #5
80164b78:	e1a00004 	mov	r0, r4
80164b7c:	ebffeedf 	bl	80160700 <__RME_A7A_Read_Acquire>
80164b80:	e7e72850 	ubfx	r2, r0, #16, #8
80164b84:	e3520002 	cmp	r2, #2
80164b88:	0affff37 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80164b8c:	e1a03c20 	lsr	r3, r0, #24
80164b90:	e3530003 	cmp	r3, #3
80164b94:	1afffe1f 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_CRT);
80164b98:	e5943008 	ldr	r3, [r4, #8]
80164b9c:	e3130001 	tst	r3, #1
80164ba0:	0afffdaa 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
80164ba4:	e5943014 	ldr	r3, [r4, #20]
80164ba8:	e1570003 	cmp	r7, r3
80164bac:	2afffd89 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164bb0:	e594200c 	ldr	r2, [r4, #12]
    if(*Ptr==Old)
80164bb4:	e7924287 	ldr	r4, [r2, r7, lsl #5]
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
80164bb8:	e0820287 	add	r0, r2, r7, lsl #5
    if(*Ptr==Old)
80164bbc:	e3540000 	cmp	r4, #0
80164bc0:	0a0000f7 	beq	80164fa4 <_RME_Svc_Handler+0x180c>
    RME_CPT_OCCUPY(Sig_Crt);
80164bc4:	e3e01004 	mvn	r1, #4
80164bc8:	eafffb46 	b	801638e8 <_RME_Svc_Handler+0x150>
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
80164bcc:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
            Retval=_RME_Inv_Crt(Cpt,
80164bd0:	e1a00006 	mov	r0, r6
80164bd4:	e59d1040 	ldr	r1, [sp, #64]	@ 0x40
80164bd8:	e59d303c 	ldr	r3, [sp, #60]	@ 0x3c
80164bdc:	e58d1004 	str	r1, [sp, #4]
80164be0:	e58d3000 	str	r3, [sp]
80164be4:	e6ff3072 	uxth	r3, r2
80164be8:	e59d1034 	ldr	r1, [sp, #52]	@ 0x34
80164bec:	e1a02822 	lsr	r2, r2, #16
80164bf0:	ebfff84e 	bl	80162d30 <_RME_Inv_Crt>
80164bf4:	e1a01000 	mov	r1, r0
            break;
80164bf8:	eafffb3a 	b	801638e8 <_RME_Svc_Handler+0x150>
            Retval=_RME_Sig_Del(Cpt,
80164bfc:	e59d4034 	ldr	r4, [sp, #52]	@ 0x34
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Sig */
80164c00:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
80164c04:	e596200c 	ldr	r2, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80164c08:	e3140080 	tst	r4, #128	@ 0x80
80164c0c:	e5963014 	ldr	r3, [r6, #20]
80164c10:	1a000088 	bne	80164e38 <_RME_Svc_Handler+0x16a0>
80164c14:	e1540003 	cmp	r4, r3
80164c18:	2afffd6e 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164c1c:	e0824284 	add	r4, r2, r4, lsl #5
80164c20:	e1a00004 	mov	r0, r4
80164c24:	ebffeeb5 	bl	80160700 <__RME_A7A_Read_Acquire>
80164c28:	e7e72850 	ubfx	r2, r0, #16, #8
80164c2c:	e3520002 	cmp	r2, #2
80164c30:	0affff0d 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80164c34:	e1a03c20 	lsr	r3, r0, #24
80164c38:	e3530003 	cmp	r3, #3
80164c3c:	1afffdf5 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
80164c40:	e5943008 	ldr	r3, [r4, #8]
80164c44:	e3130002 	tst	r3, #2
80164c48:	0afffd80 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
80164c4c:	e5943014 	ldr	r3, [r4, #20]
80164c50:	e1570003 	cmp	r7, r3
80164c54:	2afffd5f 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164c58:	e594400c 	ldr	r4, [r4, #12]
80164c5c:	e0846287 	add	r6, r4, r7, lsl #5
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
80164c60:	e1a00006 	mov	r0, r6
80164c64:	ebffeea5 	bl	80160700 <__RME_A7A_Read_Acquire>
80164c68:	e7e72850 	ubfx	r2, r0, #16, #8
80164c6c:	e1a03000 	mov	r3, r0
80164c70:	e3520002 	cmp	r2, #2
80164c74:	1afffefc 	bne	8016486c <_RME_Svc_Handler+0x10d4>
80164c78:	e1a02c20 	lsr	r2, r0, #24
80164c7c:	e3520008 	cmp	r2, #8
80164c80:	1afffde4 	bne	80164418 <_RME_Svc_Handler+0xc80>
80164c84:	e5962004 	ldr	r2, [r6, #4]
80164c88:	e3520000 	cmp	r2, #0
80164c8c:	e6ff2070 	uxth	r2, r0
80164c90:	1a000092 	bne	80164ee0 <_RME_Svc_Handler+0x1748>
80164c94:	e3520000 	cmp	r2, #0
80164c98:	1a000099 	bne	80164f04 <_RME_Svc_Handler+0x176c>
    if(Sig_Del->Thd!=0U)
80164c9c:	e5961018 	ldr	r1, [r6, #24]
    if(*Ptr==Old)
80164ca0:	e7942287 	ldr	r2, [r4, r7, lsl #5]
    if(Sig_Del->Thd!=0U)
80164ca4:	e3510000 	cmp	r1, #0
80164ca8:	1a00009e 	bne	80164f28 <_RME_Svc_Handler+0x1790>
    if(*Ptr==Old)
80164cac:	e1500002 	cmp	r0, r2
        *Ptr=New;
80164cb0:	07841287 	streq	r1, [r4, r7, lsl #5]
    if(*Ptr==Old)
80164cb4:	1affff74 	bne	80164a8c <_RME_Svc_Handler+0x12f4>
80164cb8:	eafffb0a 	b	801638e8 <_RME_Svc_Handler+0x150>
                                       (rme_cid_t)RME_PARAM_D1(Param[0]),   /* rme_cid_t Cap_Thd_Sched */
80164cbc:	e1cd23d8 	ldrd	r2, [sp, #56]	@ 0x38
            Retval=_RME_Thd_Sched_Bind(Cpt,
80164cc0:	e59d1040 	ldr	r1, [sp, #64]	@ 0x40
80164cc4:	e1a00006 	mov	r0, r6
80164cc8:	e58d1008 	str	r1, [sp, #8]
80164ccc:	e6ff1073 	uxth	r1, r3
                                       (rme_tid_t)RME_PARAM_D1(Param[1]),   /* rme_tid_t TID */
80164cd0:	e1a03823 	lsr	r3, r3, #16
            Retval=_RME_Thd_Sched_Bind(Cpt,
80164cd4:	e58d1004 	str	r1, [sp, #4]
80164cd8:	e58d3000 	str	r3, [sp]
80164cdc:	e6ff3072 	uxth	r3, r2
80164ce0:	e59d1034 	ldr	r1, [sp, #52]	@ 0x34
80164ce4:	e1a02822 	lsr	r2, r2, #16
80164ce8:	ebfff2d1 	bl	80161834 <_RME_Thd_Sched_Bind>
80164cec:	e1a01000 	mov	r1, r0
            break;
80164cf0:	eafffafc 	b	801638e8 <_RME_Svc_Handler+0x150>
            Retval=_RME_Thd_Del(Cpt,
80164cf4:	e5961014 	ldr	r1, [r6, #20]
80164cf8:	e1cd23d4 	ldrd	r2, [sp, #52]	@ 0x34
80164cfc:	e596000c 	ldr	r0, [r6, #12]
80164d00:	ebfff926 	bl	801631a0 <_RME_Thd_Del.isra.0>
80164d04:	e1a01000 	mov	r1, r0
            break;
80164d08:	eafffaf6 	b	801638e8 <_RME_Svc_Handler+0x150>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80164d0c:	e1540003 	cmp	r4, r3
80164d10:	2afffd30 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164d14:	e0824284 	add	r4, r2, r4, lsl #5
80164d18:	eaffff35 	b	801649f4 <_RME_Svc_Handler+0x125c>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80164d1c:	e1530424 	cmp	r3, r4, lsr #8
80164d20:	e1a06424 	lsr	r6, r4, #8
80164d24:	9afffd2b 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80164d28:	e0826286 	add	r6, r2, r6, lsl #5
80164d2c:	e1a00006 	mov	r0, r6
80164d30:	ebffee72 	bl	80160700 <__RME_A7A_Read_Acquire>
80164d34:	e7e73850 	ubfx	r3, r0, #16, #8
80164d38:	e3530002 	cmp	r3, #2
80164d3c:	0afffeca 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80164d40:	e1a02c20 	lsr	r2, r0, #24
80164d44:	e3520003 	cmp	r2, #3
80164d48:	1afffdb2 	bne	80164418 <_RME_Svc_Handler+0xc80>
80164d4c:	e5962014 	ldr	r2, [r6, #20]
80164d50:	e204307f 	and	r3, r4, #127	@ 0x7f
80164d54:	e1530002 	cmp	r3, r2
80164d58:	2afffd1e 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164d5c:	e596400c 	ldr	r4, [r6, #12]
80164d60:	e0844283 	add	r4, r4, r3, lsl #5
80164d64:	eaffff83 	b	80164b78 <_RME_Svc_Handler+0x13e0>
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
80164d68:	e3520000 	cmp	r2, #0
80164d6c:	1a000005 	bne	80164d88 <_RME_Svc_Handler+0x15f0>
    if(*Ptr==Old)
80164d70:	e7962287 	ldr	r2, [r6, r7, lsl #5]
80164d74:	e1500002 	cmp	r0, r2
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
80164d78:	03c038ff 	biceq	r3, r0, #16711680	@ 0xff0000
80164d7c:	03e01005 	mvneq	r1, #5
        *Ptr=New;
80164d80:	07863287 	streq	r3, [r6, r7, lsl #5]
    if(*Ptr==Old)
80164d84:	0afffad7 	beq	801638e8 <_RME_Svc_Handler+0x150>
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
80164d88:	e3e01005 	mvn	r1, #5
80164d8c:	eafffad5 	b	801638e8 <_RME_Svc_Handler+0x150>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80164d90:	e1570001 	cmp	r7, r1
80164d94:	2afffd0f 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164d98:	e0827287 	add	r7, r2, r7, lsl #5
80164d9c:	e1a00007 	mov	r0, r7
80164da0:	ebffee56 	bl	80160700 <__RME_A7A_Read_Acquire>
80164da4:	e7e72850 	ubfx	r2, r0, #16, #8
80164da8:	e3520002 	cmp	r2, #2
80164dac:	0afffeae 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80164db0:	e1a03c20 	lsr	r3, r0, #24
80164db4:	e3530006 	cmp	r3, #6
80164db8:	1afffd96 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
80164dbc:	e5973008 	ldr	r3, [r7, #8]
80164dc0:	e3130020 	tst	r3, #32
80164dc4:	0afffd21 	beq	80164250 <_RME_Svc_Handler+0xab8>
    Scheduler=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
80164dc8:	e597200c 	ldr	r2, [r7, #12]
    if(Scheduler->Sched.Local!=RME_CPU_LOCAL())
80164dcc:	e5923014 	ldr	r3, [r2, #20]
80164dd0:	e1530004 	cmp	r3, r4
80164dd4:	1afffdcc 	bne	8016450c <_RME_Svc_Handler+0xd74>
    if(Scheduler->Sched.Event.Next==&(Scheduler->Sched.Event))
80164dd8:	e5b2303c 	ldr	r3, [r2, #60]!	@ 0x3c
80164ddc:	e1530002 	cmp	r3, r2
80164de0:	0a000027 	beq	80164e84 <_RME_Svc_Handler+0x16ec>
    _RME_List_Del(Thread->Sched.Notif.Prev,Thread->Sched.Notif.Next);
80164de4:	e8930006 	ldm	r3, {r1, r2}
    Head->Next=Head;
80164de8:	ee803b90 	vdup.32	d16, r3
    Next->Prev=Prev;
80164dec:	e5812004 	str	r2, [r1, #4]
    Prev->Next=Next;
80164df0:	e5821000 	str	r1, [r2]
    if(Thread->Sched.State==RME_THD_EXCPEND)
80164df4:	e5932014 	ldr	r2, [r3, #20]
    Head->Next=Head;
80164df8:	f443078f 	vst1.32	{d16}, [r3]
    if(Thread->Sched.State==RME_THD_EXCPEND)
80164dfc:	e3520003 	cmp	r2, #3
80164e00:	0a000021 	beq	80164e8c <_RME_Svc_Handler+0x16f4>
        Flag=0U;
80164e04:	e3520002 	cmp	r2, #2
80164e08:	03a01202 	moveq	r1, #536870912	@ 0x20000000
80164e0c:	13a01000 	movne	r1, #0
    return (rme_ret_t)(Thread->Sched.TID|Flag);
80164e10:	e5933008 	ldr	r3, [r3, #8]
80164e14:	e1811003 	orr	r1, r1, r3
80164e18:	eafffab2 	b	801638e8 <_RME_Svc_Handler+0x150>
    RME_CPT_GETCAP(Cpt,Cap_Thd,RME_CAP_TYPE_THD,
80164e1c:	e5962014 	ldr	r2, [r6, #20]
80164e20:	e207307f 	and	r3, r7, #127	@ 0x7f
80164e24:	e1530002 	cmp	r3, r2
80164e28:	2afffcea 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164e2c:	e596200c 	ldr	r2, [r6, #12]
80164e30:	e0827283 	add	r7, r2, r3, lsl #5
80164e34:	eaffffd8 	b	80164d9c <_RME_Svc_Handler+0x1604>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80164e38:	e1530424 	cmp	r3, r4, lsr #8
80164e3c:	e1a06424 	lsr	r6, r4, #8
80164e40:	9afffce4 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80164e44:	e0826286 	add	r6, r2, r6, lsl #5
80164e48:	e1a00006 	mov	r0, r6
80164e4c:	ebffee2b 	bl	80160700 <__RME_A7A_Read_Acquire>
80164e50:	e7e73850 	ubfx	r3, r0, #16, #8
80164e54:	e3530002 	cmp	r3, #2
80164e58:	0afffe83 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80164e5c:	e1a02c20 	lsr	r2, r0, #24
80164e60:	e3520003 	cmp	r2, #3
80164e64:	1afffd6b 	bne	80164418 <_RME_Svc_Handler+0xc80>
80164e68:	e5962014 	ldr	r2, [r6, #20]
80164e6c:	e204307f 	and	r3, r4, #127	@ 0x7f
80164e70:	e1530002 	cmp	r3, r2
80164e74:	2afffcd7 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80164e78:	e596400c 	ldr	r4, [r6, #12]
80164e7c:	e0844283 	add	r4, r4, r3, lsl #5
80164e80:	eaffff66 	b	80164c20 <_RME_Svc_Handler+0x1488>
        return RME_ERR_PTH_NOTIF;
80164e84:	e3e010ce 	mvn	r1, #206	@ 0xce
80164e88:	eafffa96 	b	801638e8 <_RME_Svc_Handler+0x150>
        if(Thread->Sched.Slice==0U)
80164e8c:	e5932010 	ldr	r2, [r3, #16]
            Flag|=RME_THD_TIMEOUT_FLAG;
80164e90:	e3520000 	cmp	r2, #0
80164e94:	13a01101 	movne	r1, #1073741824	@ 0x40000000
80164e98:	03a01206 	moveq	r1, #1610612736	@ 0x60000000
80164e9c:	eaffffdb 	b	80164e10 <_RME_Svc_Handler+0x1678>
    RME_CAP_DEL_CHECK(Inv_Del,Type_Stat,RME_CAP_TYPE_INV);
80164ea0:	e306308c 	movw	r3, #24716	@ 0x608c
80164ea4:	e3062098 	movw	r2, #24728	@ 0x6098
80164ea8:	e3483016 	movt	r3, #32790	@ 0x8016
80164eac:	e30600a4 	movw	r0, #24740	@ 0x60a4
80164eb0:	e3482016 	movt	r2, #32790	@ 0x8016
80164eb4:	e3011d3c 	movw	r1, #7484	@ 0x1d3c
80164eb8:	e3480016 	movt	r0, #32790	@ 0x8016
80164ebc:	ebfff1d5 	bl	80161618 <RME_Log>
80164ec0:	eafffffe 	b	80164ec0 <_RME_Svc_Handler+0x1728>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
80164ec4:	e1a02c20 	lsr	r2, r0, #24
80164ec8:	e3520003 	cmp	r2, #3
80164ecc:	1afffd51 	bne	80164418 <_RME_Svc_Handler+0xc80>
80164ed0:	e5962004 	ldr	r2, [r6, #4]
80164ed4:	e3520000 	cmp	r2, #0
80164ed8:	e6ff2070 	uxth	r2, r0
80164edc:	0a000186 	beq	801654fc <_RME_Svc_Handler+0x1d64>
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
80164ee0:	e3520000 	cmp	r2, #0
80164ee4:	1affffa7 	bne	80164d88 <_RME_Svc_Handler+0x15f0>
    if(*Ptr==Old)
80164ee8:	e7942287 	ldr	r2, [r4, r7, lsl #5]
80164eec:	e1530002 	cmp	r3, r2
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
80164ef0:	03c338ff 	biceq	r3, r3, #16711680	@ 0xff0000
80164ef4:	03e01005 	mvneq	r1, #5
        *Ptr=New;
80164ef8:	07843287 	streq	r3, [r4, r7, lsl #5]
    if(*Ptr==Old)
80164efc:	1affffa1 	bne	80164d88 <_RME_Svc_Handler+0x15f0>
80164f00:	eafffa78 	b	801638e8 <_RME_Svc_Handler+0x150>
    RME_CAP_DEL_CHECK(Sig_Del,Type_Stat,RME_CAP_TYPE_SIG);
80164f04:	e306308c 	movw	r3, #24716	@ 0x608c
80164f08:	e3062098 	movw	r2, #24728	@ 0x6098
80164f0c:	e3483016 	movt	r3, #32790	@ 0x8016
80164f10:	e30600a4 	movw	r0, #24740	@ 0x60a4
80164f14:	e3482016 	movt	r2, #32790	@ 0x8016
80164f18:	e3011aba 	movw	r1, #6842	@ 0x1aba
80164f1c:	e3480016 	movt	r0, #32790	@ 0x8016
80164f20:	ebfff1bc 	bl	80161618 <RME_Log>
80164f24:	eafffffe 	b	80164f24 <_RME_Svc_Handler+0x178c>
    if(*Ptr==Old)
80164f28:	e1500002 	cmp	r0, r2
        RME_CAP_DEFROST(Sig_Del,Type_Stat);
80164f2c:	03c038ff 	biceq	r3, r0, #16711680	@ 0xff0000
        return RME_ERR_SIV_ACT;
80164f30:	03e01f4b 	mvneq	r1, #300	@ 0x12c
        *Ptr=New;
80164f34:	07843287 	streq	r3, [r4, r7, lsl #5]
    if(*Ptr==Old)
80164f38:	1afffa69 	bne	801638e4 <_RME_Svc_Handler+0x14c>
80164f3c:	eafffa69 	b	801638e8 <_RME_Svc_Handler+0x150>
80164f40:	e7962287 	ldr	r2, [r6, r7, lsl #5]
80164f44:	e1530002 	cmp	r3, r2
        RME_CAP_DEFROST(Inv_Del,Type_Stat);
80164f48:	03c338ff 	biceq	r3, r3, #16711680	@ 0xff0000
        return RME_ERR_SIV_ACT;
80164f4c:	03e01f4b 	mvneq	r1, #300	@ 0x12c
        *Ptr=New;
80164f50:	07863287 	streq	r3, [r6, r7, lsl #5]
    if(*Ptr==Old)
80164f54:	1afffa62 	bne	801638e4 <_RME_Svc_Handler+0x14c>
80164f58:	eafffa62 	b	801638e8 <_RME_Svc_Handler+0x150>
        *Ptr=New;
80164f5c:	e7862287 	str	r2, [r6, r7, lsl #5]
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
80164f60:	e3a01024 	mov	r1, #36	@ 0x24
    RME_FETCH_ADD(&(Invocation->Prc->Head.Root_Ref), -1);
80164f64:	e5902008 	ldr	r2, [r0, #8]
    Old=(rme_cnt_t)(*Ptr);
80164f68:	e5923004 	ldr	r3, [r2, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80164f6c:	e2433001 	sub	r3, r3, #1
80164f70:	e5823004 	str	r3, [r2, #4]
    RME_ASSERT(_RME_Kot_Erase((rme_ptr_t)Invocation,RME_INV_SIZE)==0);
80164f74:	ebfff829 	bl	80163020 <_RME_Kot_Erase>
80164f78:	e2501000 	subs	r1, r0, #0
80164f7c:	0afffa59 	beq	801638e8 <_RME_Svc_Handler+0x150>
80164f80:	e306308c 	movw	r3, #24716	@ 0x608c
80164f84:	e3062098 	movw	r2, #24728	@ 0x6098
80164f88:	e3483016 	movt	r3, #32790	@ 0x8016
80164f8c:	e30600a4 	movw	r0, #24740	@ 0x60a4
80164f90:	e3482016 	movt	r2, #32790	@ 0x8016
80164f94:	e3011d56 	movw	r1, #7510	@ 0x1d56
80164f98:	e3480016 	movt	r0, #32790	@ 0x8016
80164f9c:	ebfff19d 	bl	80161618 <RME_Log>
80164fa0:	eafffffe 	b	80164fa0 <_RME_Svc_Handler+0x1808>
    RME_CPT_OCCUPY(Sig_Crt);
80164fa4:	e3073114 	movw	r3, #28948	@ 0x7114
        *Ptr=New;
80164fa8:	e3a01801 	mov	r1, #65536	@ 0x10000
    RME_CPT_OCCUPY(Sig_Crt);
80164fac:	e3483096 	movt	r3, #32918	@ 0x8096
        *Ptr=New;
80164fb0:	e7821287 	str	r1, [r2, r7, lsl #5]
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
80164fb4:	e3a0203f 	mov	r2, #63	@ 0x3f
    RME_CPT_OCCUPY(Sig_Crt);
80164fb8:	e5933000 	ldr	r3, [r3]
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
80164fbc:	e3a01302 	mov	r1, #134217728	@ 0x8000000
    RME_CPT_OCCUPY(Sig_Crt);
80164fc0:	e5803010 	str	r3, [r0, #16]
    Sig_Crt->Head.Root_Ref=0U;
80164fc4:	e5804004 	str	r4, [r0, #4]
    Sig_Crt->Head.Object=0U;
80164fc8:	e580400c 	str	r4, [r0, #12]
    Sig_Crt->Head.Flag=RME_SIG_FLAG_ALL;
80164fcc:	e5802008 	str	r2, [r0, #8]
    Sig_Crt->Sig_Num=0U;
80164fd0:	e5804014 	str	r4, [r0, #20]
    Sig_Crt->Thd=0U;
80164fd4:	e5804018 	str	r4, [r0, #24]
    RME_WRITE_RELEASE(&(Sig_Crt->Head.Type_Stat),
80164fd8:	ebffedcb 	bl	8016070c <__RME_A7A_Write_Release>
    return 0;
80164fdc:	e1a01004 	mov	r1, r4
80164fe0:	eafffa40 	b	801638e8 <_RME_Svc_Handler+0x150>
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
80164fe4:	e1cd23d8 	ldrd	r2, [sp, #56]	@ 0x38
            Retval=_RME_Thd_Crt(Cpt,
80164fe8:	e59d1040 	ldr	r1, [sp, #64]	@ 0x40
80164fec:	e20ce040 	and	lr, ip, #64	@ 0x40
80164ff0:	e1a0c3ac 	lsr	ip, ip, #7
80164ff4:	e1a00006 	mov	r0, r6
80164ff8:	e58dc00c 	str	ip, [sp, #12]
80164ffc:	e6ffc073 	uxth	ip, r3
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Prc */
80165000:	e1a03823 	lsr	r3, r3, #16
            Retval=_RME_Thd_Crt(Cpt,
80165004:	e58d1008 	str	r1, [sp, #8]
80165008:	e58d3000 	str	r3, [sp]
8016500c:	e6ff3072 	uxth	r3, r2
80165010:	e59d1034 	ldr	r1, [sp, #52]	@ 0x34
80165014:	e1a02822 	lsr	r2, r2, #16
80165018:	e58de010 	str	lr, [sp, #16]
8016501c:	e58dc004 	str	ip, [sp, #4]
80165020:	ebfff65e 	bl	801629a0 <_RME_Thd_Crt>
80165024:	e1a01000 	mov	r1, r0
            break;
80165028:	eafffa2e 	b	801638e8 <_RME_Svc_Handler+0x150>
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
8016502c:	e59d303c 	ldr	r3, [sp, #60]	@ 0x3c
            Retval=_RME_Pgt_Add(Cpt,
80165030:	e1a00006 	mov	r0, r6
80165034:	e59d2040 	ldr	r2, [sp, #64]	@ 0x40
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Pgt_Dst */
80165038:	e59d1038 	ldr	r1, [sp, #56]	@ 0x38
            Retval=_RME_Pgt_Add(Cpt,
8016503c:	e6ffc073 	uxth	ip, r3
80165040:	e58d2008 	str	r2, [sp, #8]
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Pgt_Src */
80165044:	e1a02823 	lsr	r2, r3, #16
            Retval=_RME_Pgt_Add(Cpt,
80165048:	e58d2000 	str	r2, [sp]
8016504c:	e6ff2071 	uxth	r2, r1
80165050:	e59d3034 	ldr	r3, [sp, #52]	@ 0x34
80165054:	e1a01821 	lsr	r1, r1, #16
80165058:	e58dc004 	str	ip, [sp, #4]
8016505c:	ebffef95 	bl	80160eb8 <_RME_Pgt_Add>
80165060:	e1a01000 	mov	r1, r0
            break;
80165064:	eafffa1f 	b	801638e8 <_RME_Svc_Handler+0x150>
            Retval=_RME_Pgt_Del(Cpt,
80165068:	e59d4034 	ldr	r4, [sp, #52]	@ 0x34
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Pgt */
8016506c:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
80165070:	e596200c 	ldr	r2, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80165074:	e3140080 	tst	r4, #128	@ 0x80
80165078:	e5963014 	ldr	r3, [r6, #20]
8016507c:	1a00006b 	bne	80165230 <_RME_Svc_Handler+0x1a98>
80165080:	e1540003 	cmp	r4, r3
80165084:	2afffc53 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165088:	e0824284 	add	r4, r2, r4, lsl #5
8016508c:	e1a00004 	mov	r0, r4
80165090:	ebffed9a 	bl	80160700 <__RME_A7A_Read_Acquire>
80165094:	e7e72850 	ubfx	r2, r0, #16, #8
80165098:	e3520002 	cmp	r2, #2
8016509c:	0afffdf2 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801650a0:	e1a03c20 	lsr	r3, r0, #24
801650a4:	e3530003 	cmp	r3, #3
801650a8:	1afffcda 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
801650ac:	e5943008 	ldr	r3, [r4, #8]
801650b0:	e3130002 	tst	r3, #2
801650b4:	0afffc65 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Pgt,struct RME_Cap_Pgt*,Pgt_Del);
801650b8:	e5943014 	ldr	r3, [r4, #20]
801650bc:	e1570003 	cmp	r7, r3
801650c0:	2afffc44 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801650c4:	e594800c 	ldr	r8, [r4, #12]
801650c8:	e0886287 	add	r6, r8, r7, lsl #5
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
801650cc:	e1a00006 	mov	r0, r6
801650d0:	ebffed8a 	bl	80160700 <__RME_A7A_Read_Acquire>
801650d4:	e7e73850 	ubfx	r3, r0, #16, #8
801650d8:	e1a04000 	mov	r4, r0
801650dc:	e3530002 	cmp	r3, #2
801650e0:	1afffde1 	bne	8016486c <_RME_Svc_Handler+0x10d4>
801650e4:	e1a03c20 	lsr	r3, r0, #24
801650e8:	e3530004 	cmp	r3, #4
801650ec:	1afffcc9 	bne	80164418 <_RME_Svc_Handler+0xc80>
801650f0:	e5963004 	ldr	r3, [r6, #4]
801650f4:	e3530000 	cmp	r3, #0
801650f8:	e6ff3070 	uxth	r3, r0
801650fc:	1a000071 	bne	801652c8 <_RME_Svc_Handler+0x1b30>
80165100:	e3530000 	cmp	r3, #0
80165104:	0a000078 	beq	801652ec <_RME_Svc_Handler+0x1b54>
80165108:	e306308c 	movw	r3, #24716	@ 0x608c
8016510c:	e3062098 	movw	r2, #24728	@ 0x6098
80165110:	e3483016 	movt	r3, #32790	@ 0x8016
80165114:	e30600a4 	movw	r0, #24740	@ 0x60a4
80165118:	e3482016 	movt	r2, #32790	@ 0x8016
8016511c:	e3a01d33 	mov	r1, #3264	@ 0xcc0
80165120:	e3480016 	movt	r0, #32790	@ 0x8016
80165124:	ebfff13b 	bl	80161618 <RME_Log>
80165128:	eafffffe 	b	80165128 <_RME_Svc_Handler+0x1990>
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
8016512c:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
            Retval=_RME_Pgt_Crt(Cpt,
80165130:	e1a00006 	mov	r0, r6
                                Param[2]&RME_MASK_BEGIN(1U),                /* rme_ptr_t Base */
80165134:	e59d3040 	ldr	r3, [sp, #64]	@ 0x40
            Retval=_RME_Pgt_Crt(Cpt,
80165138:	e1a0c42c 	lsr	ip, ip, #8
8016513c:	e6ef1072 	uxtb	r1, r2
80165140:	e58d100c 	str	r1, [sp, #12]
80165144:	e2031001 	and	r1, r3, #1
80165148:	e58d1008 	str	r1, [sp, #8]
8016514c:	e59d103c 	ldr	r1, [sp, #60]	@ 0x3c
80165150:	e3c33001 	bic	r3, r3, #1
80165154:	e88d000a 	stm	sp, {r1, r3}
80165158:	e58dc010 	str	ip, [sp, #16]
8016515c:	e7e73452 	ubfx	r3, r2, #8, #8
80165160:	e59d1034 	ldr	r1, [sp, #52]	@ 0x34
80165164:	e1a02822 	lsr	r2, r2, #16
80165168:	ebfff563 	bl	801626fc <_RME_Pgt_Crt>
8016516c:	e1a01000 	mov	r1, r0
            break;
80165170:	eafff9dc 	b	801638e8 <_RME_Svc_Handler+0x150>
            Retval=_RME_Cpt_Rem(Cpt,
80165174:	e59d4034 	ldr	r4, [sp, #52]	@ 0x34
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Rem */
80165178:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
8016517c:	e596200c 	ldr	r2, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
80165180:	e3140080 	tst	r4, #128	@ 0x80
80165184:	e5963014 	ldr	r3, [r6, #20]
80165188:	1a00003b 	bne	8016527c <_RME_Svc_Handler+0x1ae4>
8016518c:	e1540003 	cmp	r4, r3
80165190:	2afffc10 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165194:	e0824284 	add	r4, r2, r4, lsl #5
80165198:	e1a00004 	mov	r0, r4
8016519c:	ebffed57 	bl	80160700 <__RME_A7A_Read_Acquire>
801651a0:	e7e72850 	ubfx	r2, r0, #16, #8
801651a4:	e3520002 	cmp	r2, #2
801651a8:	0afffdaf 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801651ac:	e1a03c20 	lsr	r3, r0, #24
801651b0:	e3530003 	cmp	r3, #3
801651b4:	1afffc97 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_REM);
801651b8:	e5943008 	ldr	r3, [r4, #8]
801651bc:	e3130020 	tst	r3, #32
801651c0:	0afffc22 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Rem,struct RME_Cap_Struct*,Capobj_Rem);
801651c4:	e5943014 	ldr	r3, [r4, #20]
801651c8:	e1570003 	cmp	r7, r3
801651cc:	2afffc01 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801651d0:	e594400c 	ldr	r4, [r4, #12]
801651d4:	e0846287 	add	r6, r4, r7, lsl #5
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
801651d8:	e1a00006 	mov	r0, r6
801651dc:	ebffed47 	bl	80160700 <__RME_A7A_Read_Acquire>
801651e0:	e7e72850 	ubfx	r2, r0, #16, #8
801651e4:	e3520002 	cmp	r2, #2
801651e8:	1afffd9f 	bne	8016486c <_RME_Svc_Handler+0x10d4>
801651ec:	e6ff2070 	uxth	r2, r0
801651f0:	e3520000 	cmp	r2, #0
801651f4:	0a000053 	beq	80165348 <_RME_Svc_Handler+0x1bb0>
    Rem_Type=RME_CAP_TYPE(Type_Stat);
801651f8:	e1a02c20 	lsr	r2, r0, #24
    if((Rem_Type!=RME_CAP_TYPE_KOM)&&(Rem_Type!=RME_CAP_TYPE_KFN))
801651fc:	e2422001 	sub	r2, r2, #1
80165200:	e3520001 	cmp	r2, #1
80165204:	9a000051 	bls	80165350 <_RME_Svc_Handler+0x1bb8>
        Capobj_Root=(struct RME_Cap_Struct*)(Capobj_Rem->Head.Root_Ref);
80165208:	e5962004 	ldr	r2, [r6, #4]
    if(*Ptr==Old)
8016520c:	e7941287 	ldr	r1, [r4, r7, lsl #5]
80165210:	e1500001 	cmp	r0, r1
80165214:	1afffe1c 	bne	80164a8c <_RME_Svc_Handler+0x12f4>
        *Ptr=New;
80165218:	e3a01000 	mov	r1, #0
8016521c:	e7841287 	str	r1, [r4, r7, lsl #5]
    Old=(rme_cnt_t)(*Ptr);
80165220:	e5923004 	ldr	r3, [r2, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80165224:	e2433001 	sub	r3, r3, #1
80165228:	e5823004 	str	r3, [r2, #4]
    return (rme_ptr_t)Old;
8016522c:	eafff9ad 	b	801638e8 <_RME_Svc_Handler+0x150>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80165230:	e1530424 	cmp	r3, r4, lsr #8
80165234:	e1a06424 	lsr	r6, r4, #8
80165238:	9afffbe6 	bls	801641d8 <_RME_Svc_Handler+0xa40>
8016523c:	e0826286 	add	r6, r2, r6, lsl #5
80165240:	e1a00006 	mov	r0, r6
80165244:	ebffed2d 	bl	80160700 <__RME_A7A_Read_Acquire>
80165248:	e7e73850 	ubfx	r3, r0, #16, #8
8016524c:	e3530002 	cmp	r3, #2
80165250:	0afffd85 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80165254:	e1a02c20 	lsr	r2, r0, #24
80165258:	e3520003 	cmp	r2, #3
8016525c:	1afffc6d 	bne	80164418 <_RME_Svc_Handler+0xc80>
80165260:	e5962014 	ldr	r2, [r6, #20]
80165264:	e204307f 	and	r3, r4, #127	@ 0x7f
80165268:	e1530002 	cmp	r3, r2
8016526c:	2afffbd9 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165270:	e596400c 	ldr	r4, [r6, #12]
80165274:	e0844283 	add	r4, r4, r3, lsl #5
80165278:	eaffff83 	b	8016508c <_RME_Svc_Handler+0x18f4>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Rem,RME_CAP_TYPE_CPT,
8016527c:	e1530424 	cmp	r3, r4, lsr #8
80165280:	e1a06424 	lsr	r6, r4, #8
80165284:	9afffbd3 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80165288:	e0826286 	add	r6, r2, r6, lsl #5
8016528c:	e1a00006 	mov	r0, r6
80165290:	ebffed1a 	bl	80160700 <__RME_A7A_Read_Acquire>
80165294:	e7e73850 	ubfx	r3, r0, #16, #8
80165298:	e3530002 	cmp	r3, #2
8016529c:	0afffd72 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801652a0:	e1a02c20 	lsr	r2, r0, #24
801652a4:	e3520003 	cmp	r2, #3
801652a8:	1afffc5a 	bne	80164418 <_RME_Svc_Handler+0xc80>
801652ac:	e5962014 	ldr	r2, [r6, #20]
801652b0:	e204307f 	and	r3, r4, #127	@ 0x7f
801652b4:	e1530002 	cmp	r3, r2
801652b8:	2afffbc6 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801652bc:	e596400c 	ldr	r4, [r6, #12]
801652c0:	e0844283 	add	r4, r4, r3, lsl #5
801652c4:	eaffffb3 	b	80165198 <_RME_Svc_Handler+0x1a00>
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
801652c8:	e3530000 	cmp	r3, #0
801652cc:	1afffead 	bne	80164d88 <_RME_Svc_Handler+0x15f0>
    if(*Ptr==Old)
801652d0:	e7983287 	ldr	r3, [r8, r7, lsl #5]
801652d4:	e1500003 	cmp	r0, r3
    RME_CAP_DEL_CHECK(Pgt_Del,Type_Stat,RME_CAP_TYPE_PGT);
801652d8:	03c048ff 	biceq	r4, r0, #16711680	@ 0xff0000
801652dc:	03e01005 	mvneq	r1, #5
        *Ptr=New;
801652e0:	07884287 	streq	r4, [r8, r7, lsl #5]
    if(*Ptr==Old)
801652e4:	1afffea7 	bne	80164d88 <_RME_Svc_Handler+0x15f0>
801652e8:	eafff97e 	b	801638e8 <_RME_Svc_Handler+0x150>
    if(__RME_Pgt_Del_Check(Pgt_Del)<0)
801652ec:	e1a00006 	mov	r0, r6
801652f0:	eb00034e 	bl	80166030 <__RME_Pgt_Del_Check>
        Table_Size=RME_PGT_SIZE_TOP(RME_PGT_NMORD(Pgt_Del->Order));
801652f4:	e1d631b4 	ldrh	r3, [r6, #20]
801652f8:	e3a01001 	mov	r1, #1
801652fc:	e1a01311 	lsl	r1, r1, r3
    if(*Ptr==Old)
80165300:	e7983287 	ldr	r3, [r8, r7, lsl #5]
80165304:	e1540003 	cmp	r4, r3
80165308:	1afffddf 	bne	80164a8c <_RME_Svc_Handler+0x12f4>
    Object=RME_CAP_GETOBJ(Pgt_Del,rme_ptr_t);
8016530c:	e596000c 	ldr	r0, [r6, #12]
        *Ptr=New;
80165310:	e3a03000 	mov	r3, #0
80165314:	e7883287 	str	r3, [r8, r7, lsl #5]
    RME_ASSERT(_RME_Kot_Erase(Object,Table_Size)==0);
80165318:	ebfff740 	bl	80163020 <_RME_Kot_Erase>
8016531c:	e2501000 	subs	r1, r0, #0
80165320:	0afff970 	beq	801638e8 <_RME_Svc_Handler+0x150>
80165324:	e306308c 	movw	r3, #24716	@ 0x608c
80165328:	e3062098 	movw	r2, #24728	@ 0x6098
8016532c:	e3483016 	movt	r3, #32790	@ 0x8016
80165330:	e30600a4 	movw	r0, #24740	@ 0x60a4
80165334:	e3482016 	movt	r2, #32790	@ 0x8016
80165338:	e3001ce7 	movw	r1, #3303	@ 0xce7
8016533c:	e3480016 	movt	r0, #32790	@ 0x8016
80165340:	ebfff0b4 	bl	80161618 <RME_Log>
80165344:	eafffffe 	b	80165344 <_RME_Svc_Handler+0x1bac>
    RME_CAP_REM_CHECK(Capobj_Rem,Type_Stat);
80165348:	e3e01009 	mvn	r1, #9
8016534c:	eafff965 	b	801638e8 <_RME_Svc_Handler+0x150>
    if(*Ptr==Old)
80165350:	e7942287 	ldr	r2, [r4, r7, lsl #5]
80165354:	e1500002 	cmp	r0, r2
        *Ptr=New;
80165358:	03a01000 	moveq	r1, #0
8016535c:	07841287 	streq	r1, [r4, r7, lsl #5]
    if(*Ptr==Old)
80165360:	1afffdc9 	bne	80164a8c <_RME_Svc_Handler+0x12f4>
80165364:	eafff95f 	b	801638e8 <_RME_Svc_Handler+0x150>
            Retval=_RME_Cpt_Add(Cpt,
80165368:	e59d2034 	ldr	r2, [sp, #52]	@ 0x34
8016536c:	e1a00006 	mov	r0, r6
                                (rme_cid_t)RME_PARAM_D1(Param[1]),          /* rme_cid_t Cap_Cpt_Src */
80165370:	e59d303c 	ldr	r3, [sp, #60]	@ 0x3c
            Retval=_RME_Cpt_Add(Cpt,
80165374:	e182c80c 	orr	ip, r2, ip, lsl #16
80165378:	e59d2040 	ldr	r2, [sp, #64]	@ 0x40
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Cpt_Dst */
8016537c:	e59d1038 	ldr	r1, [sp, #56]	@ 0x38
            Retval=_RME_Cpt_Add(Cpt,
80165380:	e58d2004 	str	r2, [sp, #4]
80165384:	e6ff2073 	uxth	r2, r3
80165388:	e58d2000 	str	r2, [sp]
8016538c:	e6ff2071 	uxth	r2, r1
80165390:	e1a03823 	lsr	r3, r3, #16
80165394:	e1a01821 	lsr	r1, r1, #16
80165398:	e58dc008 	str	ip, [sp, #8]
8016539c:	ebffed37 	bl	80160880 <_RME_Cpt_Add>
801653a0:	e1a01000 	mov	r1, r0
            break;
801653a4:	eafff94f 	b	801638e8 <_RME_Svc_Handler+0x150>
                                (rme_cid_t)RME_PARAM_D1(Param[0]),          /* rme_cid_t Cap_Kom */
801653a8:	e59d2038 	ldr	r2, [sp, #56]	@ 0x38
            Retval=_RME_Cpt_Crt(Cpt,
801653ac:	e1a00006 	mov	r0, r6
801653b0:	e59d1040 	ldr	r1, [sp, #64]	@ 0x40
801653b4:	e59d303c 	ldr	r3, [sp, #60]	@ 0x3c
801653b8:	e58d1004 	str	r1, [sp, #4]
801653bc:	e58d3000 	str	r3, [sp]
801653c0:	e6ff3072 	uxth	r3, r2
801653c4:	e59d1034 	ldr	r1, [sp, #52]	@ 0x34
801653c8:	e1a02822 	lsr	r2, r2, #16
801653cc:	ebfff438 	bl	801624b4 <_RME_Cpt_Crt>
801653d0:	e1a01000 	mov	r1, r0
            break;
801653d4:	eafff943 	b	801638e8 <_RME_Svc_Handler+0x150>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Del,RME_CAP_TYPE_CPT,
801653d8:	e1540002 	cmp	r4, r2
801653dc:	3afffd0b 	bcc	80164810 <_RME_Svc_Handler+0x1078>
801653e0:	eafffb7c 	b	801641d8 <_RME_Svc_Handler+0xa40>
            Retval=_RME_Cpt_Frz(Cpt,
801653e4:	e59d4034 	ldr	r4, [sp, #52]	@ 0x34
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Frz */
801653e8:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
801653ec:	e596200c 	ldr	r2, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
801653f0:	e3140080 	tst	r4, #128	@ 0x80
801653f4:	e5963014 	ldr	r3, [r6, #20]
801653f8:	1a00002c 	bne	801654b0 <_RME_Svc_Handler+0x1d18>
801653fc:	e1540003 	cmp	r4, r3
80165400:	2afffb74 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165404:	e0824284 	add	r4, r2, r4, lsl #5
80165408:	e1a00004 	mov	r0, r4
8016540c:	ebffecbb 	bl	80160700 <__RME_A7A_Read_Acquire>
80165410:	e7e72850 	ubfx	r2, r0, #16, #8
80165414:	e3520002 	cmp	r2, #2
80165418:	0afffd13 	beq	8016486c <_RME_Svc_Handler+0x10d4>
8016541c:	e1a03c20 	lsr	r3, r0, #24
80165420:	e3530003 	cmp	r3, #3
80165424:	1afffbfb 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_FRZ);
80165428:	e5943008 	ldr	r3, [r4, #8]
8016542c:	e3130004 	tst	r3, #4
80165430:	0afffb86 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Frz,struct RME_Cap_Struct*,Capobj_Frz);
80165434:	e5943014 	ldr	r3, [r4, #20]
80165438:	e1570003 	cmp	r7, r3
8016543c:	2afffb65 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165440:	e594400c 	ldr	r4, [r4, #12]
80165444:	e0846287 	add	r6, r4, r7, lsl #5
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
80165448:	e1a00006 	mov	r0, r6
8016544c:	ebffecab 	bl	80160700 <__RME_A7A_Read_Acquire>
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
80165450:	e1b02c20 	lsrs	r2, r0, #24
    Type_Stat=RME_READ_ACQUIRE(&(Capobj_Frz->Head.Type_Stat));
80165454:	e1a03000 	mov	r3, r0
    if(RME_CAP_TYPE(Type_Stat)==RME_CAP_TYPE_NOP)
80165458:	0afffd8b 	beq	80164a8c <_RME_Svc_Handler+0x12f4>
    if(RME_CAP_ATTR(Type_Stat)==RME_CAP_ATTR_ROOT)
8016545c:	e6ff2070 	uxth	r2, r0
80165460:	e3520000 	cmp	r2, #0
80165464:	1a000002 	bne	80165474 <_RME_Svc_Handler+0x1cdc>
        if(Capobj_Frz->Head.Root_Ref!=0U)
80165468:	e5962004 	ldr	r2, [r6, #4]
8016546c:	e3520000 	cmp	r2, #0
80165470:	1afffe44 	bne	80164d88 <_RME_Svc_Handler+0x15f0>
    if(RME_CAP_STAT(Type_Stat)==RME_CAP_STAT_FROZEN)
80165474:	e7e72853 	ubfx	r2, r3, #16, #8
80165478:	e3520002 	cmp	r2, #2
8016547c:	0afffcfa 	beq	8016486c <_RME_Svc_Handler+0x10d4>
    Capobj_Frz->Head.Timestamp=RME_TIMESTAMP;
80165480:	e3072114 	movw	r2, #28948	@ 0x7114
80165484:	e3482096 	movt	r2, #32918	@ 0x8096
80165488:	e5922000 	ldr	r2, [r2]
8016548c:	e5862010 	str	r2, [r6, #16]
    if(*Ptr==Old)
80165490:	e7942287 	ldr	r2, [r4, r7, lsl #5]
80165494:	e1530002 	cmp	r3, r2
    return 0;
80165498:	13a01000 	movne	r1, #0
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
8016549c:	03c338ff 	biceq	r3, r3, #16711680	@ 0xff0000
    return 0;
801654a0:	03a01000 	moveq	r1, #0
    RME_COMP_SWAP(&(Capobj_Frz->Head.Type_Stat),Type_Stat,
801654a4:	03833802 	orreq	r3, r3, #131072	@ 0x20000
        *Ptr=New;
801654a8:	07843287 	streq	r3, [r4, r7, lsl #5]
        return 1U;
801654ac:	eafff90d 	b	801638e8 <_RME_Svc_Handler+0x150>
    RME_CPT_GETCAP(Cpt,Cap_Cpt_Frz,RME_CAP_TYPE_CPT,
801654b0:	e1530424 	cmp	r3, r4, lsr #8
801654b4:	e1a06424 	lsr	r6, r4, #8
801654b8:	9afffb46 	bls	801641d8 <_RME_Svc_Handler+0xa40>
801654bc:	e0826286 	add	r6, r2, r6, lsl #5
801654c0:	e1a00006 	mov	r0, r6
801654c4:	ebffec8d 	bl	80160700 <__RME_A7A_Read_Acquire>
801654c8:	e7e73850 	ubfx	r3, r0, #16, #8
801654cc:	e3530002 	cmp	r3, #2
801654d0:	0afffce5 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801654d4:	e1a02c20 	lsr	r2, r0, #24
801654d8:	e3520003 	cmp	r2, #3
801654dc:	1afffbcd 	bne	80164418 <_RME_Svc_Handler+0xc80>
801654e0:	e5962014 	ldr	r2, [r6, #20]
801654e4:	e204307f 	and	r3, r4, #127	@ 0x7f
801654e8:	e1530002 	cmp	r3, r2
801654ec:	2afffb39 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801654f0:	e596400c 	ldr	r4, [r6, #12]
801654f4:	e0844283 	add	r4, r4, r3, lsl #5
801654f8:	eaffffc2 	b	80165408 <_RME_Svc_Handler+0x1c70>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
801654fc:	e3520000 	cmp	r2, #0
80165500:	1a00001e 	bne	80165580 <_RME_Svc_Handler+0x1de8>
    Table=RME_CAP_GETOBJ(Cpt_Del,struct RME_Cap_Struct*);
80165504:	e596100c 	ldr	r1, [r6, #12]
    Entry_Num=Cpt_Del->Entry_Num;
80165508:	e5960014 	ldr	r0, [r6, #20]
    for(Count=0U;Count<Entry_Num;Count++)
8016550c:	e3500000 	cmp	r0, #0
80165510:	0a000006 	beq	80165530 <_RME_Svc_Handler+0x1d98>
        if(Table[Count].Head.Type_Stat!=0U)
80165514:	e591c000 	ldr	ip, [r1]
    for(Count=0U;Count<Entry_Num;Count++)
80165518:	e2822001 	add	r2, r2, #1
8016551c:	e2811020 	add	r1, r1, #32
        if(Table[Count].Head.Type_Stat!=0U)
80165520:	e35c0000 	cmp	ip, #0
80165524:	1a00001e 	bne	801655a4 <_RME_Svc_Handler+0x1e0c>
    for(Count=0U;Count<Entry_Num;Count++)
80165528:	e1500002 	cmp	r0, r2
8016552c:	1afffff8 	bne	80165514 <_RME_Svc_Handler+0x1d7c>
    Object=RME_CAP_GETOBJ(Cpt_Del,rme_ptr_t);
80165530:	e596000c 	ldr	r0, [r6, #12]
    Size=RME_CPT_SIZE(Cpt_Del->Entry_Num);
80165534:	e5961014 	ldr	r1, [r6, #20]
    if(*Ptr==Old)
80165538:	e7942287 	ldr	r2, [r4, r7, lsl #5]
8016553c:	e1530002 	cmp	r3, r2
80165540:	1afffd51 	bne	80164a8c <_RME_Svc_Handler+0x12f4>
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
80165544:	e1a01281 	lsl	r1, r1, #5
        *Ptr=New;
80165548:	e3a03000 	mov	r3, #0
8016554c:	e7843287 	str	r3, [r4, r7, lsl #5]
    RME_ASSERT(_RME_Kot_Erase(Object,Size)==0);
80165550:	ebfff6b2 	bl	80163020 <_RME_Kot_Erase>
80165554:	e2501000 	subs	r1, r0, #0
80165558:	0afff8e2 	beq	801638e8 <_RME_Svc_Handler+0x150>
8016555c:	e306308c 	movw	r3, #24716	@ 0x608c
80165560:	e3062098 	movw	r2, #24728	@ 0x6098
80165564:	e3483016 	movt	r3, #32790	@ 0x8016
80165568:	e30600a4 	movw	r0, #24740	@ 0x60a4
8016556c:	e3482016 	movt	r2, #32790	@ 0x8016
80165570:	e3001816 	movw	r1, #2070	@ 0x816
80165574:	e3480016 	movt	r0, #32790	@ 0x8016
80165578:	ebfff026 	bl	80161618 <RME_Log>
8016557c:	eafffffe 	b	8016557c <_RME_Svc_Handler+0x1de4>
    RME_CAP_DEL_CHECK(Cpt_Del,Type_Stat,RME_CAP_TYPE_CPT);
80165580:	e306308c 	movw	r3, #24716	@ 0x608c
80165584:	e3062098 	movw	r2, #24728	@ 0x6098
80165588:	e3483016 	movt	r3, #32790	@ 0x8016
8016558c:	e30600a4 	movw	r0, #24740	@ 0x60a4
80165590:	e3482016 	movt	r2, #32790	@ 0x8016
80165594:	e30017f5 	movw	r1, #2037	@ 0x7f5
80165598:	e3480016 	movt	r0, #32790	@ 0x8016
8016559c:	ebfff01d 	bl	80161618 <RME_Log>
801655a0:	eafffffe 	b	801655a0 <_RME_Svc_Handler+0x1e08>
    if(*Ptr==Old)
801655a4:	e7942287 	ldr	r2, [r4, r7, lsl #5]
801655a8:	e1530002 	cmp	r3, r2
            RME_CAP_DEFROST(Cpt_Del,Type_Stat);
801655ac:	03c338ff 	biceq	r3, r3, #16711680	@ 0xff0000
            return RME_ERR_CPT_EXIST;
801655b0:	03e01004 	mvneq	r1, #4
        *Ptr=New;
801655b4:	07843287 	streq	r3, [r4, r7, lsl #5]
    if(*Ptr==Old)
801655b8:	1afffd81 	bne	80164bc4 <_RME_Svc_Handler+0x142c>
801655bc:	eafff8c9 	b	801638e8 <_RME_Svc_Handler+0x150>
            Retval=_RME_Prc_Crt(Cpt,
801655c0:	e59d1040 	ldr	r1, [sp, #64]	@ 0x40
801655c4:	e1a00006 	mov	r0, r6
801655c8:	e1cd23d8 	ldrd	r2, [sp, #56]	@ 0x38
801655cc:	e58d1000 	str	r1, [sp]
801655d0:	e59d1034 	ldr	r1, [sp, #52]	@ 0x34
801655d4:	ebffed91 	bl	80160c20 <_RME_Prc_Crt>
801655d8:	e1a01000 	mov	r1, r0
            break;
801655dc:	eafff8c1 	b	801638e8 <_RME_Svc_Handler+0x150>
            Retval=_RME_Pgt_Des(Cpt,
801655e0:	e59d1038 	ldr	r1, [sp, #56]	@ 0x38
801655e4:	e1a00006 	mov	r0, r6
801655e8:	e1cd23dc 	ldrd	r2, [sp, #60]	@ 0x3c
801655ec:	ebffef38 	bl	801612d4 <_RME_Pgt_Des>
801655f0:	e1a01000 	mov	r1, r0
            break;
801655f4:	eafff8bb 	b	801638e8 <_RME_Svc_Handler+0x150>
            Retval=_RME_Pgt_Con(Cpt,
801655f8:	e28d1038 	add	r1, sp, #56	@ 0x38
801655fc:	e1a00006 	mov	r0, r6
80165600:	e891000e 	ldm	r1, {r1, r2, r3}
80165604:	e58d3000 	str	r3, [sp]
80165608:	e6ff3071 	uxth	r3, r1
8016560c:	e1a01821 	lsr	r1, r1, #16
80165610:	ebffeeb5 	bl	801610ec <_RME_Pgt_Con>
80165614:	e1a01000 	mov	r1, r0
            break;
80165618:	eafff8b2 	b	801638e8 <_RME_Svc_Handler+0x150>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Pgt */
8016561c:	e59d8038 	ldr	r8, [sp, #56]	@ 0x38
            Retval=_RME_Pgt_Rem(Cpt,
80165620:	e59d703c 	ldr	r7, [sp, #60]	@ 0x3c
80165624:	e596400c 	ldr	r4, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
80165628:	e3180080 	tst	r8, #128	@ 0x80
8016562c:	e5963014 	ldr	r3, [r6, #20]
80165630:	1a000118 	bne	80165a98 <_RME_Svc_Handler+0x2300>
80165634:	e1580003 	cmp	r8, r3
80165638:	2afffae6 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
8016563c:	e0844288 	add	r4, r4, r8, lsl #5
80165640:	e1a00004 	mov	r0, r4
80165644:	ebffec2d 	bl	80160700 <__RME_A7A_Read_Acquire>
80165648:	e7e72850 	ubfx	r2, r0, #16, #8
8016564c:	e3520002 	cmp	r2, #2
80165650:	0afffc85 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80165654:	e1a03c20 	lsr	r3, r0, #24
80165658:	e3530003 	cmp	r3, #3
8016565c:	1afffb6d 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Pgt_Rem,RME_PGT_FLAG_REM);
80165660:	e5943008 	ldr	r3, [r4, #8]
80165664:	e3130004 	tst	r3, #4
80165668:	0afffaf8 	beq	80164250 <_RME_Svc_Handler+0xab8>
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
8016566c:	e1570a23 	cmp	r7, r3, lsr #20
80165670:	8afffaf6 	bhi	80164250 <_RME_Svc_Handler+0xab8>
       (Pos<RME_PGT_FLAG_LOW(Pgt_Rem->Head.Flag)))
80165674:	e7eb3453 	ubfx	r3, r3, #8, #12
    if((Pos>RME_PGT_FLAG_HIGH(Pgt_Rem->Head.Flag))||
80165678:	e1570003 	cmp	r7, r3
8016567c:	3afffaf3 	bcc	80164250 <_RME_Svc_Handler+0xab8>
    if((Pos>>RME_PGT_NMORD(Pgt_Rem->Order))!=0U)
80165680:	e1d431b4 	ldrh	r3, [r4, #20]
80165684:	e1b06337 	lsrs	r6, r7, r3
80165688:	1a00012a 	bne	80165b38 <_RME_Svc_Handler+0x23a0>
    if(__RME_Pgt_Page_Unmap(Pgt_Rem,Pos)<0)
8016568c:	e1a01007 	mov	r1, r7
80165690:	e1a00004 	mov	r0, r4
80165694:	eb000268 	bl	8016603c <__RME_Pgt_Page_Unmap>
    return 0;
80165698:	e1a01006 	mov	r1, r6
8016569c:	eafff891 	b	801638e8 <_RME_Svc_Handler+0x150>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
801656a0:	e59d4038 	ldr	r4, [sp, #56]	@ 0x38
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Cpt */
801656a4:	e59d703c 	ldr	r7, [sp, #60]	@ 0x3c
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
801656a8:	e3140080 	tst	r4, #128	@ 0x80
801656ac:	1a000063 	bne	80165840 <_RME_Svc_Handler+0x20a8>
801656b0:	e5963014 	ldr	r3, [r6, #20]
801656b4:	e1540003 	cmp	r4, r3
801656b8:	2afffac6 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801656bc:	e596300c 	ldr	r3, [r6, #12]
801656c0:	e0834284 	add	r4, r3, r4, lsl #5
801656c4:	e1a00004 	mov	r0, r4
801656c8:	ebffec0c 	bl	80160700 <__RME_A7A_Read_Acquire>
801656cc:	e7e72850 	ubfx	r2, r0, #16, #8
801656d0:	e3520002 	cmp	r2, #2
801656d4:	0afffc64 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801656d8:	e1a03c20 	lsr	r3, r0, #24
801656dc:	e3530005 	cmp	r3, #5
801656e0:	1afffb4c 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
801656e4:	e3170080 	tst	r7, #128	@ 0x80
801656e8:	1a00007c 	bne	801658e0 <_RME_Svc_Handler+0x2148>
801656ec:	e5963014 	ldr	r3, [r6, #20]
801656f0:	e1570003 	cmp	r7, r3
801656f4:	2afffab7 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801656f8:	e596300c 	ldr	r3, [r6, #12]
801656fc:	e0837287 	add	r7, r3, r7, lsl #5
80165700:	e1a00007 	mov	r0, r7
80165704:	ebffebfd 	bl	80160700 <__RME_A7A_Read_Acquire>
80165708:	e7e72850 	ubfx	r2, r0, #16, #8
8016570c:	e3520002 	cmp	r2, #2
80165710:	0afffc55 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80165714:	e1a03c20 	lsr	r3, r0, #24
80165718:	e3530003 	cmp	r3, #3
8016571c:	1afffb3d 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_CPT);
80165720:	e5943008 	ldr	r3, [r4, #8]
80165724:	e3130004 	tst	r3, #4
80165728:	0afffac8 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CAP_CHECK(Cpt_New,RME_CPT_FLAG_PRC_CPT);
8016572c:	e5973008 	ldr	r3, [r7, #8]
80165730:	e3130080 	tst	r3, #128	@ 0x80
80165734:	0afffac5 	beq	80164250 <_RME_Svc_Handler+0xab8>
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
80165738:	e1d730b0 	ldrh	r3, [r7]
    return 0;
8016573c:	e3a01000 	mov	r1, #0
    if(*Ptr==Old)
80165740:	e5942014 	ldr	r2, [r4, #20]
    Cpt_New=RME_CAP_CONV_ROOT(Cpt_New,struct RME_Cap_Cpt*);
80165744:	e3530000 	cmp	r3, #0
80165748:	15977004 	ldrne	r7, [r7, #4]
        *Ptr=New;
8016574c:	e5847014 	str	r7, [r4, #20]
    Old=(rme_cnt_t)(*Ptr);
80165750:	e5973004 	ldr	r3, [r7, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80165754:	e2833001 	add	r3, r3, #1
80165758:	e5873004 	str	r3, [r7, #4]
    Old=(rme_cnt_t)(*Ptr);
8016575c:	e5923004 	ldr	r3, [r2, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80165760:	e2433001 	sub	r3, r3, #1
80165764:	e5823004 	str	r3, [r2, #4]
    return 0;
80165768:	eafff85e 	b	801638e8 <_RME_Svc_Handler+0x150>
            Retval=_RME_Prc_Del(Cpt,
8016576c:	e59d4034 	ldr	r4, [sp, #52]	@ 0x34
                                (rme_cid_t)Param[0]);                       /* rme_cid_t Cap_Prc */
80165770:	e59d7038 	ldr	r7, [sp, #56]	@ 0x38
80165774:	e596200c 	ldr	r2, [r6, #12]
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80165778:	e3140080 	tst	r4, #128	@ 0x80
8016577c:	e5963014 	ldr	r3, [r6, #20]
80165780:	1a000043 	bne	80165894 <_RME_Svc_Handler+0x20fc>
80165784:	e1540003 	cmp	r4, r3
80165788:	2afffa92 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
8016578c:	e0824284 	add	r4, r2, r4, lsl #5
80165790:	e1a00004 	mov	r0, r4
80165794:	ebffebd9 	bl	80160700 <__RME_A7A_Read_Acquire>
80165798:	e7e72850 	ubfx	r2, r0, #16, #8
8016579c:	e3520002 	cmp	r2, #2
801657a0:	0afffc31 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801657a4:	e1a03c20 	lsr	r3, r0, #24
801657a8:	e3530003 	cmp	r3, #3
801657ac:	1afffb19 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Cpt_Op,RME_CPT_FLAG_DEL);
801657b0:	e5943008 	ldr	r3, [r4, #8]
801657b4:	e3130002 	tst	r3, #2
801657b8:	0afffaa4 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CPT_GETSLOT(Cpt_Op,Cap_Prc,struct RME_Cap_Prc*,Prc_Del);
801657bc:	e5943014 	ldr	r3, [r4, #20]
801657c0:	e1570003 	cmp	r7, r3
801657c4:	2afffa83 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801657c8:	e594400c 	ldr	r4, [r4, #12]
801657cc:	e0846287 	add	r6, r4, r7, lsl #5
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
801657d0:	e1a00006 	mov	r0, r6
801657d4:	ebffebc9 	bl	80160700 <__RME_A7A_Read_Acquire>
801657d8:	e7e72850 	ubfx	r2, r0, #16, #8
801657dc:	e1a03000 	mov	r3, r0
801657e0:	e3520002 	cmp	r2, #2
801657e4:	1afffc20 	bne	8016486c <_RME_Svc_Handler+0x10d4>
801657e8:	e1a02c20 	lsr	r2, r0, #24
801657ec:	e3520005 	cmp	r2, #5
801657f0:	1afffb08 	bne	80164418 <_RME_Svc_Handler+0xc80>
801657f4:	e5962004 	ldr	r2, [r6, #4]
801657f8:	e3520000 	cmp	r2, #0
801657fc:	1a00004c 	bne	80165934 <_RME_Svc_Handler+0x219c>
80165800:	e6ff1070 	uxth	r1, r0
80165804:	e3510000 	cmp	r1, #0
80165808:	1a00004d 	bne	80165944 <_RME_Svc_Handler+0x21ac>
    if(*Ptr==Old)
8016580c:	e7942287 	ldr	r2, [r4, r7, lsl #5]
80165810:	e1500002 	cmp	r0, r2
80165814:	1afffc9c 	bne	80164a8c <_RME_Svc_Handler+0x12f4>
    Prc_Cpt=Prc_Del->Cpt;
80165818:	e5960014 	ldr	r0, [r6, #20]
    Prc_Pgt=Prc_Del->Pgt;
8016581c:	e5962018 	ldr	r2, [r6, #24]
        *Ptr=New;
80165820:	e7841287 	str	r1, [r4, r7, lsl #5]
    Old=(rme_cnt_t)(*Ptr);
80165824:	e5903004 	ldr	r3, [r0, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80165828:	e2433001 	sub	r3, r3, #1
8016582c:	e5803004 	str	r3, [r0, #4]
    Old=(rme_cnt_t)(*Ptr);
80165830:	e5923004 	ldr	r3, [r2, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80165834:	e2433001 	sub	r3, r3, #1
80165838:	e5823004 	str	r3, [r2, #4]
    return 0;
8016583c:	eafff829 	b	801638e8 <_RME_Svc_Handler+0x150>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
80165840:	e5962014 	ldr	r2, [r6, #20]
80165844:	e1a03424 	lsr	r3, r4, #8
80165848:	e1520424 	cmp	r2, r4, lsr #8
8016584c:	9afffa61 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80165850:	e596800c 	ldr	r8, [r6, #12]
80165854:	e0888283 	add	r8, r8, r3, lsl #5
80165858:	e1a00008 	mov	r0, r8
8016585c:	ebffeba7 	bl	80160700 <__RME_A7A_Read_Acquire>
80165860:	e7e73850 	ubfx	r3, r0, #16, #8
80165864:	e3530002 	cmp	r3, #2
80165868:	0afffbff 	beq	8016486c <_RME_Svc_Handler+0x10d4>
8016586c:	e1a02c20 	lsr	r2, r0, #24
80165870:	e3520003 	cmp	r2, #3
80165874:	1afffae7 	bne	80164418 <_RME_Svc_Handler+0xc80>
80165878:	e5982014 	ldr	r2, [r8, #20]
8016587c:	e204307f 	and	r3, r4, #127	@ 0x7f
80165880:	e1530002 	cmp	r3, r2
80165884:	2afffa53 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165888:	e598400c 	ldr	r4, [r8, #12]
8016588c:	e0844283 	add	r4, r4, r3, lsl #5
80165890:	eaffff8b 	b	801656c4 <_RME_Svc_Handler+0x1f2c>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
80165894:	e1530424 	cmp	r3, r4, lsr #8
80165898:	e1a06424 	lsr	r6, r4, #8
8016589c:	9afffa4d 	bls	801641d8 <_RME_Svc_Handler+0xa40>
801658a0:	e0826286 	add	r6, r2, r6, lsl #5
801658a4:	e1a00006 	mov	r0, r6
801658a8:	ebffeb94 	bl	80160700 <__RME_A7A_Read_Acquire>
801658ac:	e7e73850 	ubfx	r3, r0, #16, #8
801658b0:	e3530002 	cmp	r3, #2
801658b4:	0afffbec 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801658b8:	e1a02c20 	lsr	r2, r0, #24
801658bc:	e3520003 	cmp	r2, #3
801658c0:	1afffad4 	bne	80164418 <_RME_Svc_Handler+0xc80>
801658c4:	e5962014 	ldr	r2, [r6, #20]
801658c8:	e204307f 	and	r3, r4, #127	@ 0x7f
801658cc:	e1530002 	cmp	r3, r2
801658d0:	2afffa40 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801658d4:	e596400c 	ldr	r4, [r6, #12]
801658d8:	e0844283 	add	r4, r4, r3, lsl #5
801658dc:	eaffffab 	b	80165790 <_RME_Svc_Handler+0x1ff8>
    RME_CPT_GETCAP(Cpt,Cap_Cpt,RME_CAP_TYPE_CPT,
801658e0:	e5962014 	ldr	r2, [r6, #20]
801658e4:	e1a03427 	lsr	r3, r7, #8
801658e8:	e1520427 	cmp	r2, r7, lsr #8
801658ec:	9afffa39 	bls	801641d8 <_RME_Svc_Handler+0xa40>
801658f0:	e596600c 	ldr	r6, [r6, #12]
801658f4:	e0866283 	add	r6, r6, r3, lsl #5
801658f8:	e1a00006 	mov	r0, r6
801658fc:	ebffeb7f 	bl	80160700 <__RME_A7A_Read_Acquire>
80165900:	e7e72850 	ubfx	r2, r0, #16, #8
80165904:	e3520002 	cmp	r2, #2
80165908:	0afffbd7 	beq	8016486c <_RME_Svc_Handler+0x10d4>
8016590c:	e1a03c20 	lsr	r3, r0, #24
80165910:	e3530003 	cmp	r3, #3
80165914:	1afffabf 	bne	80164418 <_RME_Svc_Handler+0xc80>
80165918:	e5962014 	ldr	r2, [r6, #20]
8016591c:	e207307f 	and	r3, r7, #127	@ 0x7f
80165920:	e1530002 	cmp	r3, r2
80165924:	2afffa2b 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165928:	e596700c 	ldr	r7, [r6, #12]
8016592c:	e0877283 	add	r7, r7, r3, lsl #5
80165930:	eaffff72 	b	80165700 <_RME_Svc_Handler+0x1f68>
    RME_CAP_DEL_CHECK(Prc_Del,Type_Stat,RME_CAP_TYPE_PRC);
80165934:	e6ff2070 	uxth	r2, r0
80165938:	e3520000 	cmp	r2, #0
8016593c:	1afffd11 	bne	80164d88 <_RME_Svc_Handler+0x15f0>
80165940:	eafffd68 	b	80164ee8 <_RME_Svc_Handler+0x1750>
80165944:	e306308c 	movw	r3, #24716	@ 0x608c
80165948:	e3062098 	movw	r2, #24728	@ 0x6098
8016594c:	e3483016 	movt	r3, #32790	@ 0x8016
80165950:	e30600a4 	movw	r0, #24740	@ 0x60a4
80165954:	e3482016 	movt	r2, #32790	@ 0x8016
80165958:	e301130f 	movw	r1, #4879	@ 0x130f
8016595c:	e3480016 	movt	r0, #32790	@ 0x8016
80165960:	ebffef2c 	bl	80161618 <RME_Log>
80165964:	eafffffe 	b	80165964 <_RME_Svc_Handler+0x21cc>
                                (rme_cid_t)Param[0],                        /* rme_cid_t Cap_Prc */
80165968:	e59d4038 	ldr	r4, [sp, #56]	@ 0x38
                                (rme_cid_t)Param[1]);                       /* rme_cid_t Cap_Pgt */
8016596c:	e59d703c 	ldr	r7, [sp, #60]	@ 0x3c
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
80165970:	e3140080 	tst	r4, #128	@ 0x80
80165974:	1a000032 	bne	80165a44 <_RME_Svc_Handler+0x22ac>
80165978:	e5963014 	ldr	r3, [r6, #20]
8016597c:	e1540003 	cmp	r4, r3
80165980:	2afffa14 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165984:	e596300c 	ldr	r3, [r6, #12]
80165988:	e0834284 	add	r4, r3, r4, lsl #5
8016598c:	e1a00004 	mov	r0, r4
80165990:	ebffeb5a 	bl	80160700 <__RME_A7A_Read_Acquire>
80165994:	e7e72850 	ubfx	r2, r0, #16, #8
80165998:	e3520002 	cmp	r2, #2
8016599c:	0afffbb2 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801659a0:	e1a03c20 	lsr	r3, r0, #24
801659a4:	e3530005 	cmp	r3, #5
801659a8:	1afffa9a 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
801659ac:	e3170080 	tst	r7, #128	@ 0x80
801659b0:	1a00004b 	bne	80165ae4 <_RME_Svc_Handler+0x234c>
801659b4:	e5963014 	ldr	r3, [r6, #20]
801659b8:	e1570003 	cmp	r7, r3
801659bc:	2afffa05 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
801659c0:	e596300c 	ldr	r3, [r6, #12]
801659c4:	e0837287 	add	r7, r3, r7, lsl #5
801659c8:	e1a00007 	mov	r0, r7
801659cc:	ebffeb4b 	bl	80160700 <__RME_A7A_Read_Acquire>
801659d0:	e7e72850 	ubfx	r2, r0, #16, #8
801659d4:	e3520002 	cmp	r2, #2
801659d8:	0afffba3 	beq	8016486c <_RME_Svc_Handler+0x10d4>
801659dc:	e1a03c20 	lsr	r3, r0, #24
801659e0:	e3530004 	cmp	r3, #4
801659e4:	1afffa8b 	bne	80164418 <_RME_Svc_Handler+0xc80>
    RME_CAP_CHECK(Prc_Op,RME_PRC_FLAG_PGT);
801659e8:	e5943008 	ldr	r3, [r4, #8]
801659ec:	e3130008 	tst	r3, #8
801659f0:	0afffa16 	beq	80164250 <_RME_Svc_Handler+0xab8>
    RME_CAP_CHECK(Pgt_New,RME_PGT_FLAG_PRC_PGT);
801659f4:	e5973008 	ldr	r3, [r7, #8]
801659f8:	e3130080 	tst	r3, #128	@ 0x80
801659fc:	0afffa13 	beq	80164250 <_RME_Svc_Handler+0xab8>
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
80165a00:	e1d720b0 	ldrh	r2, [r7]
    Pgt_Old=Prc_Op->Pgt;
80165a04:	e5943018 	ldr	r3, [r4, #24]
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
80165a08:	e3520000 	cmp	r2, #0
    if(*Ptr==Old)
80165a0c:	e5942018 	ldr	r2, [r4, #24]
    Pgt_New=RME_CAP_CONV_ROOT(Pgt_New,struct RME_Cap_Pgt*);
80165a10:	15977004 	ldrne	r7, [r7, #4]
    if(*Ptr==Old)
80165a14:	e1530002 	cmp	r3, r2
        return RME_ERR_PTH_CONFLICT;
80165a18:	13e010c9 	mvnne	r1, #201	@ 0xc9
    if(*Ptr==Old)
80165a1c:	1afff7b1 	bne	801638e8 <_RME_Svc_Handler+0x150>
        *Ptr=New;
80165a20:	e5847018 	str	r7, [r4, #24]
    return 0;
80165a24:	e3a01000 	mov	r1, #0
    Old=(rme_cnt_t)(*Ptr);
80165a28:	e5972004 	ldr	r2, [r7, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80165a2c:	e2822001 	add	r2, r2, #1
80165a30:	e5872004 	str	r2, [r7, #4]
    Old=(rme_cnt_t)(*Ptr);
80165a34:	e5932004 	ldr	r2, [r3, #4]
    *Ptr=(rme_ptr_t)(Old+Addend);
80165a38:	e2422001 	sub	r2, r2, #1
80165a3c:	e5832004 	str	r2, [r3, #4]
    return 0;
80165a40:	eafff7a8 	b	801638e8 <_RME_Svc_Handler+0x150>
    RME_CPT_GETCAP(Cpt,Cap_Prc,RME_CAP_TYPE_PRC,
80165a44:	e5962014 	ldr	r2, [r6, #20]
80165a48:	e1a03424 	lsr	r3, r4, #8
80165a4c:	e1520424 	cmp	r2, r4, lsr #8
80165a50:	9afff9e0 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80165a54:	e596800c 	ldr	r8, [r6, #12]
80165a58:	e0888283 	add	r8, r8, r3, lsl #5
80165a5c:	e1a00008 	mov	r0, r8
80165a60:	ebffeb26 	bl	80160700 <__RME_A7A_Read_Acquire>
80165a64:	e7e73850 	ubfx	r3, r0, #16, #8
80165a68:	e3530002 	cmp	r3, #2
80165a6c:	0afffb7e 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80165a70:	e1a02c20 	lsr	r2, r0, #24
80165a74:	e3520003 	cmp	r2, #3
80165a78:	1afffa66 	bne	80164418 <_RME_Svc_Handler+0xc80>
80165a7c:	e5982014 	ldr	r2, [r8, #20]
80165a80:	e204307f 	and	r3, r4, #127	@ 0x7f
80165a84:	e1530002 	cmp	r3, r2
80165a88:	2afff9d2 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165a8c:	e598400c 	ldr	r4, [r8, #12]
80165a90:	e0844283 	add	r4, r4, r3, lsl #5
80165a94:	eaffffbc 	b	8016598c <_RME_Svc_Handler+0x21f4>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_CPT,
80165a98:	e1530428 	cmp	r3, r8, lsr #8
80165a9c:	e1a03428 	lsr	r3, r8, #8
80165aa0:	9afff9cc 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80165aa4:	e0844283 	add	r4, r4, r3, lsl #5
80165aa8:	e1a00004 	mov	r0, r4
80165aac:	ebffeb13 	bl	80160700 <__RME_A7A_Read_Acquire>
80165ab0:	e7e73850 	ubfx	r3, r0, #16, #8
80165ab4:	e3530002 	cmp	r3, #2
80165ab8:	0afffb6b 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80165abc:	e1a02c20 	lsr	r2, r0, #24
80165ac0:	e3520003 	cmp	r2, #3
80165ac4:	1afffa53 	bne	80164418 <_RME_Svc_Handler+0xc80>
80165ac8:	e5942014 	ldr	r2, [r4, #20]
80165acc:	e208307f 	and	r3, r8, #127	@ 0x7f
80165ad0:	e1530002 	cmp	r3, r2
80165ad4:	2afff9bf 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165ad8:	e594400c 	ldr	r4, [r4, #12]
80165adc:	e0844283 	add	r4, r4, r3, lsl #5
80165ae0:	eafffed6 	b	80165640 <_RME_Svc_Handler+0x1ea8>
    RME_CPT_GETCAP(Cpt,Cap_Pgt,RME_CAP_TYPE_PGT,
80165ae4:	e5962014 	ldr	r2, [r6, #20]
80165ae8:	e1a03427 	lsr	r3, r7, #8
80165aec:	e1520427 	cmp	r2, r7, lsr #8
80165af0:	9afff9b8 	bls	801641d8 <_RME_Svc_Handler+0xa40>
80165af4:	e596600c 	ldr	r6, [r6, #12]
80165af8:	e0866283 	add	r6, r6, r3, lsl #5
80165afc:	e1a00006 	mov	r0, r6
80165b00:	ebffeafe 	bl	80160700 <__RME_A7A_Read_Acquire>
80165b04:	e7e72850 	ubfx	r2, r0, #16, #8
80165b08:	e3520002 	cmp	r2, #2
80165b0c:	0afffb56 	beq	8016486c <_RME_Svc_Handler+0x10d4>
80165b10:	e1a03c20 	lsr	r3, r0, #24
80165b14:	e3530003 	cmp	r3, #3
80165b18:	1afffa3e 	bne	80164418 <_RME_Svc_Handler+0xc80>
80165b1c:	e5962014 	ldr	r2, [r6, #20]
80165b20:	e207307f 	and	r3, r7, #127	@ 0x7f
80165b24:	e1530002 	cmp	r3, r2
80165b28:	2afff9aa 	bcs	801641d8 <_RME_Svc_Handler+0xa40>
80165b2c:	e596700c 	ldr	r7, [r6, #12]
80165b30:	e0877283 	add	r7, r7, r3, lsl #5
80165b34:	eaffffa3 	b	801659c8 <_RME_Svc_Handler+0x2230>
        return RME_ERR_PGT_ADDR;
80165b38:	e3e01064 	mvn	r1, #100	@ 0x64
80165b3c:	eafff769 	b	801638e8 <_RME_Svc_Handler+0x150>

80165b40 <main>:
Output      : None.
Return      : int - This function never returns.
******************************************************************************/
int main(void)
{
	RME_DBG_I(10);
80165b40:	e3a0000a 	mov	r0, #10
{
80165b44:	e92d4010 	push	{r4, lr}
	RME_DBG_I(10);
80165b48:	ebffee58 	bl	801614b0 <RME_Int_Print>
	while(1);
80165b4c:	eafffffe 	b	80165b4c <main+0xc>

80165b50 <__RME_Putchar>:
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
rme_ptr_t __RME_Putchar(char Char)
{
    RME_A7A_PUTCHAR(Char);
80165b50:	e3a02a01 	mov	r2, #4096	@ 0x1000
80165b54:	e34e2000 	movt	r2, #57344	@ 0xe000
80165b58:	e592302c 	ldr	r3, [r2, #44]	@ 0x2c
80165b5c:	e3130008 	tst	r3, #8
80165b60:	0afffffc 	beq	80165b58 <__RME_Putchar+0x8>
80165b64:	e5820030 	str	r0, [r2, #48]	@ 0x30
    return 0;
}
80165b68:	e3a00000 	mov	r0, #0
80165b6c:	e12fff1e 	bx	lr

80165b70 <__RME_Lowlvl_Init>:
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
void __RME_Lowlvl_Init(void)
{
80165b70:	e92d4070 	push	{r4, r5, r6, lr}
    Temp=RME_A7A_GICD_IIDR;
80165b74:	e3a05a01 	mov	r5, #4096	@ 0x1000
80165b78:	e34f58f0 	movt	r5, #63728	@ 0xf8f0
    /* Initialize hardware */
    RME_A7A_LOW_LEVEL_INIT();

    /* Initialize our own CPU-local data structure */
    _RME_CPU_Local_Init(&RME_A7A_Local,0);
80165b7c:	e3070000 	movw	r0, #28672	@ 0x7000
80165b80:	e3480096 	movt	r0, #32918	@ 0x8096
80165b84:	e3a01000 	mov	r1, #0
80165b88:	ebfff62e 	bl	80163448 <_RME_CPU_Local_Init>
    Temp=RME_A7A_GICD_IIDR;
80165b8c:	e5954008 	ldr	r4, [r5, #8]
    RME_DBG_S("\r\nA7A-GIC: ProductID: ");
80165b90:	e30600c8 	movw	r0, #24776	@ 0x60c8
80165b94:	e3480016 	movt	r0, #32790	@ 0x8016
80165b98:	ebffee91 	bl	801615e4 <RME_Str_Print>
    RME_DBG_I(Temp>>24);
80165b9c:	e1a00c24 	lsr	r0, r4, #24
80165ba0:	ebffee42 	bl	801614b0 <RME_Int_Print>
    RME_DBG_S("\r\nA7A-GIC: Variant: ");
80165ba4:	e30600e0 	movw	r0, #24800	@ 0x60e0
80165ba8:	e3480016 	movt	r0, #32790	@ 0x8016
80165bac:	ebffee8c 	bl	801615e4 <RME_Str_Print>
    RME_DBG_I((Temp>>20)&0xF);
80165bb0:	e7e30a54 	ubfx	r0, r4, #20, #4
80165bb4:	ebffee3d 	bl	801614b0 <RME_Int_Print>
    RME_DBG_S("\r\nA7A-GIC: Revision: ");
80165bb8:	e30600f8 	movw	r0, #24824	@ 0x60f8
80165bbc:	e3480016 	movt	r0, #32790	@ 0x8016
80165bc0:	ebffee87 	bl	801615e4 <RME_Str_Print>
    RME_DBG_I((Temp>>12)&0xF);
80165bc4:	e7e30654 	ubfx	r0, r4, #12, #4
80165bc8:	ebffee38 	bl	801614b0 <RME_Int_Print>
    RME_DBG_S("\r\nA7A-GIC: Implementer: 0x");
80165bcc:	e3060110 	movw	r0, #24848	@ 0x6110
80165bd0:	e3480016 	movt	r0, #32790	@ 0x8016
80165bd4:	ebffee82 	bl	801615e4 <RME_Str_Print>
    RME_DBG_H(Temp&0xFFF);
80165bd8:	e7eb0054 	ubfx	r0, r4, #0, #12
80165bdc:	ebffee60 	bl	80161564 <RME_Hex_Print>
    Temp=RME_A7A_GICD_TYPER;
80165be0:	e5954004 	ldr	r4, [r5, #4]
    RME_DBG_S("\r\nA7A-GIC: SPI number: ");
80165be4:	e306012c 	movw	r0, #24876	@ 0x612c
80165be8:	e3480016 	movt	r0, #32790	@ 0x8016
    Lines=((Temp&0x1F)+1)*32;
80165bec:	e204501f 	and	r5, r4, #31
    RME_DBG_S("\r\nA7A-GIC: SPI number: ");
80165bf0:	ebffee7b 	bl	801615e4 <RME_Str_Print>
    RME_DBG_I(Temp>>16);
80165bf4:	e1a00824 	lsr	r0, r4, #16
80165bf8:	ebffee2c 	bl	801614b0 <RME_Int_Print>
    RME_DBG_S("\r\nA7A-GIC: Security extension: ");
80165bfc:	e3060144 	movw	r0, #24900	@ 0x6144
80165c00:	e3480016 	movt	r0, #32790	@ 0x8016
80165c04:	ebffee76 	bl	801615e4 <RME_Str_Print>
    RME_DBG_I((Temp>>10)&0x1);
80165c08:	e7e00554 	ubfx	r0, r4, #10, #1
80165c0c:	ebffee27 	bl	801614b0 <RME_Int_Print>
    RME_DBG_S("\r\nA7A-GIC: CPU number: ");
80165c10:	e3060164 	movw	r0, #24932	@ 0x6164
80165c14:	e3480016 	movt	r0, #32790	@ 0x8016
80165c18:	ebffee71 	bl	801615e4 <RME_Str_Print>
    RME_DBG_I(((Temp>>5)&0x7)+1);
80165c1c:	e7e202d4 	ubfx	r0, r4, #5, #3
    Lines=((Temp&0x1F)+1)*32;
80165c20:	e2854001 	add	r4, r5, #1
    RME_DBG_I(((Temp>>5)&0x7)+1);
80165c24:	e2800001 	add	r0, r0, #1
    Lines=((Temp&0x1F)+1)*32;
80165c28:	e1a04284 	lsl	r4, r4, #5
    RME_DBG_I(((Temp>>5)&0x7)+1);
80165c2c:	ebffee1f 	bl	801614b0 <RME_Int_Print>
    RME_DBG_S("\r\nA7A-GIC: Interrupt line number: ");
80165c30:	e306017c 	movw	r0, #24956	@ 0x617c
80165c34:	e3480016 	movt	r0, #32790	@ 0x8016
80165c38:	ebffee69 	bl	801615e4 <RME_Str_Print>
    RME_DBG_H(Lines);
80165c3c:	e1a00004 	mov	r0, r4
80165c40:	ebffee47 	bl	80161564 <RME_Hex_Print>
	for(Temp=0;Temp<Lines/32;Temp++)
80165c44:	e30014a1 	movw	r1, #1185	@ 0x4a1
    RME_DBG_H(Lines);
80165c48:	e3a03d4a 	mov	r3, #4736	@ 0x1280
80165c4c:	e3431e3c 	movt	r1, #15932	@ 0x3e3c
		RME_A7A_GICD_ICPENDR(Temp)=0xFFFFFFFFU;
80165c50:	e3e02000 	mvn	r2, #0
80165c54:	e0851001 	add	r1, r5, r1
		RME_A7A_GICD_IGROUPR(Temp)=0x00000000U;
80165c58:	e3a00000 	mov	r0, #0
    RME_DBG_H(Lines);
80165c5c:	e34f38f0 	movt	r3, #63728	@ 0xf8f0
80165c60:	e1a01101 	lsl	r1, r1, #2
		RME_A7A_GICD_ICPENDR(Temp)=0xFFFFFFFFU;
80165c64:	e5832000 	str	r2, [r3]
	for(Temp=0;Temp<Lines/32;Temp++)
80165c68:	e2833004 	add	r3, r3, #4
		RME_A7A_GICD_IGROUPR(Temp)=0x00000000U;
80165c6c:	e5030204 	str	r0, [r3, #-516]	@ 0xfffffdfc
		RME_A7A_GICD_ICENABLER(Temp)=0xFFFFFFFFU;
80165c70:	e5032104 	str	r2, [r3, #-260]	@ 0xfffffefc
	for(Temp=0;Temp<Lines/32;Temp++)
80165c74:	e1510003 	cmp	r1, r3
80165c78:	1afffff9 	bne	80165c64 <__RME_Lowlvl_Init+0xf4>
	for(Temp=0;Temp<Lines/4;Temp++)
80165c7c:	e3a02b05 	mov	r2, #5120	@ 0x1400
		RME_A7A_GICD_IPRIORITYR(Temp)=0xA0A0A0A0U;
80165c80:	e30a10a0 	movw	r1, #41120	@ 0xa0a0
80165c84:	e34a10a0 	movt	r1, #41120	@ 0xa0a0
	for(Temp=0;Temp<Lines/4;Temp++)
80165c88:	e1a03002 	mov	r3, r2
80165c8c:	e34f28f0 	movt	r2, #63728	@ 0xf8f0
80165c90:	e1a00124 	lsr	r0, r4, #2
80165c94:	e0842002 	add	r2, r4, r2
80165c98:	e34f38f0 	movt	r3, #63728	@ 0xf8f0
		RME_A7A_GICD_IPRIORITYR(Temp)=0xA0A0A0A0U;
80165c9c:	e4831004 	str	r1, [r3], #4
	for(Temp=0;Temp<Lines/4;Temp++)
80165ca0:	e1520003 	cmp	r2, r3
80165ca4:	1afffffc 	bne	80165c9c <__RME_Lowlvl_Init+0x12c>
	for(Temp=8;Temp<Lines/4;Temp++)
80165ca8:	e3500008 	cmp	r0, #8
80165cac:	0a000007 	beq	80165cd0 <__RME_Lowlvl_Init+0x160>
80165cb0:	e3013820 	movw	r3, #6176	@ 0x1820
		RME_A7A_GICD_ITARGETSR(Temp)=0x01010101U;
80165cb4:	e3001101 	movw	r1, #257	@ 0x101
	for(Temp=8;Temp<Lines/4;Temp++)
80165cb8:	e34f38f0 	movt	r3, #63728	@ 0xf8f0
80165cbc:	e2822b01 	add	r2, r2, #1024	@ 0x400
		RME_A7A_GICD_ITARGETSR(Temp)=0x01010101U;
80165cc0:	e3401101 	movt	r1, #257	@ 0x101
80165cc4:	e4831004 	str	r1, [r3], #4
	for(Temp=8;Temp<Lines/4;Temp++)
80165cc8:	e1520003 	cmp	r2, r3
80165ccc:	1afffffc 	bne	80165cc4 <__RME_Lowlvl_Init+0x154>
	for(Temp=0;Temp<Lines/16;Temp++)
80165cd0:	e3a02b07 	mov	r2, #7168	@ 0x1c00
80165cd4:	e3a03b07 	mov	r3, #7168	@ 0x1c00
80165cd8:	e1a04124 	lsr	r4, r4, #2
		RME_A7A_GICD_ICFGR(Temp)=0x55555555U;
80165cdc:	e3051555 	movw	r1, #21845	@ 0x5555
80165ce0:	e34f28f0 	movt	r2, #63728	@ 0xf8f0
80165ce4:	e0842002 	add	r2, r4, r2
	for(Temp=0;Temp<Lines/16;Temp++)
80165ce8:	e34f38f0 	movt	r3, #63728	@ 0xf8f0
		RME_A7A_GICD_ICFGR(Temp)=0x55555555U;
80165cec:	e3451555 	movt	r1, #21845	@ 0x5555
80165cf0:	e4831004 	str	r1, [r3], #4
	for(Temp=0;Temp<Lines/16;Temp++)
80165cf4:	e1520003 	cmp	r2, r3
80165cf8:	1afffffc 	bne	80165cf0 <__RME_Lowlvl_Init+0x180>
	RME_A7A_GICD_CTLR=RME_A7A_GICD_CTLR_GRP1EN|RME_A7A_GICD_CTLR_GRP0EN;
80165cfc:	e3a02a01 	mov	r2, #4096	@ 0x1000
	RME_A7A_GICC_BPR=RME_A7A_GIC_GROUPING;
80165d00:	e3a03000 	mov	r3, #0
80165d04:	e34f38f0 	movt	r3, #63728	@ 0xf8f0
	RME_A7A_GICD_CTLR=RME_A7A_GICD_CTLR_GRP1EN|RME_A7A_GICD_CTLR_GRP0EN;
80165d08:	e3a01003 	mov	r1, #3
80165d0c:	e34f28f0 	movt	r2, #63728	@ 0xf8f0
	RME_A7A_GICC_BPR=RME_A7A_GIC_GROUPING;
80165d10:	e3a00000 	mov	r0, #0
	RME_A7A_GICD_CTLR=RME_A7A_GICD_CTLR_GRP1EN|RME_A7A_GICD_CTLR_GRP0EN;
80165d14:	e5821000 	str	r1, [r2]
	RME_A7A_GICC_CTLR=RME_A7A_GICC_ENABLEGRP0;
80165d18:	e3a01001 	mov	r1, #1
	RME_A7A_GICC_BPR=RME_A7A_GIC_GROUPING;
80165d1c:	e5830104 	str	r0, [r3, #260]	@ 0x104
	RME_A7A_GICC_PMR=0xF0U;
80165d20:	e3a020f0 	mov	r2, #240	@ 0xf0
	RME_A7A_GICC_CTLR=RME_A7A_GICC_ENABLEGRP0;
80165d24:	e5831100 	str	r1, [r3, #256]	@ 0x100

    /* Initialize CPU-local interrupt resources */
	__RME_A7A_Int_Local_Init();

    /* Initialize the vector table */
    RME_DBG_S("\r\nA7A-Vector: 0x");
80165d28:	e30601a0 	movw	r0, #24992	@ 0x61a0
	RME_A7A_GICC_PMR=0xF0U;
80165d2c:	e5832104 	str	r2, [r3, #260]	@ 0x104
    RME_DBG_S("\r\nA7A-Vector: 0x");
80165d30:	e3480016 	movt	r0, #32790	@ 0x8016
80165d34:	ebffee2a 	bl	801615e4 <RME_Str_Print>
    RME_DBG_H((rme_ptr_t)&__RME_A7A_Vector_Table);
80165d38:	e3000000 	movw	r0, #0
80165d3c:	e3480016 	movt	r0, #32790	@ 0x8016
80165d40:	ebffee07 	bl	80161564 <RME_Hex_Print>
    __RME_A7A_VBAR_Set((rme_ptr_t)&__RME_A7A_Vector_Table);
80165d44:	e3000000 	movw	r0, #0
80165d48:	e3480016 	movt	r0, #32790	@ 0x8016
80165d4c:	ebffea33 	bl	80160620 <__RME_A7A_VBAR_Set>

    RME_DBG_S("\r\nA7A-Non-Secure: ");
80165d50:	e30601b4 	movw	r0, #25012	@ 0x61b4
80165d54:	e3480016 	movt	r0, #32790	@ 0x8016
80165d58:	ebffee21 	bl	801615e4 <RME_Str_Print>
    RME_DBG_H(__RME_A7A_SCR_Get());
80165d5c:	ebffe8ed 	bl	80160118 <__RME_A7A_SCR_Get>
}
80165d60:	e8bd4070 	pop	{r4, r5, r6, lr}
    RME_DBG_H(__RME_A7A_SCR_Get());
80165d64:	eaffedfe 	b	80161564 <RME_Hex_Print>

80165d68 <__RME_Pgt_Kom_Init>:
******************************************************************************/
rme_ptr_t __RME_Pgt_Kom_Init(void)
{

    return 0;
}
80165d68:	e3a00000 	mov	r0, #0
80165d6c:	e12fff1e 	bx	lr

80165d70 <__RME_Boot>:
    RME_A7A_PTWD_PTLR=RME_A7A_SYSTICK_VAL;
80165d70:	e3a03000 	mov	r3, #0
    RME_A7A_GICD_ISENABLER(0)|=1<<29;
80165d74:	e3a02a01 	mov	r2, #4096	@ 0x1000
    RME_A7A_PTWD_PTLR=RME_A7A_SYSTICK_VAL;
80165d78:	e34f38f0 	movt	r3, #63728	@ 0xf8f0
80165d7c:	e3081478 	movw	r1, #33912	@ 0x8478
    RME_A7A_GICD_ISENABLER(0)|=1<<29;
80165d80:	e34f28f0 	movt	r2, #63728	@ 0xf8f0
    RME_A7A_PTWD_PTISR=0;
80165d84:	e3a0c000 	mov	ip, #0
    RME_A7A_PTWD_PTLR=RME_A7A_SYSTICK_VAL;
80165d88:	e340103a 	movt	r1, #58	@ 0x3a
    RME_A7A_PTWD_PTCTLR=RME_A7A_PTWD_PTCTLR_PRESC(0)|
80165d8c:	e3a00007 	mov	r0, #7
Input       : None.
Output      : None.
Return      : rme_ptr_t - Always 0.
******************************************************************************/
void __RME_Boot(void)
{
80165d90:	e92d4010 	push	{r4, lr}
    RME_A7A_PTWD_PTLR=RME_A7A_SYSTICK_VAL;
80165d94:	e5831600 	str	r1, [r3, #1536]	@ 0x600
    RME_A7A_PTWD_PTISR=0;
80165d98:	e583c60c 	str	ip, [r3, #1548]	@ 0x60c
    RME_A7A_PTWD_PTCTLR=RME_A7A_PTWD_PTCTLR_PRESC(0)|
80165d9c:	e5830608 	str	r0, [r3, #1544]	@ 0x608
    RME_A7A_GICD_ISENABLER(0)|=1<<29;
80165da0:	e5923100 	ldr	r3, [r2, #256]	@ 0x100
80165da4:	e3833202 	orr	r3, r3, #536870912	@ 0x20000000
80165da8:	e5823100 	str	r3, [r2, #256]	@ 0x100
    /* Initialize timer */
	__RME_A7A_Timer_Init();
    __RME_Int_Enable();
80165dac:	ebffea5b 	bl	80160720 <__RME_Int_Enable>
	while(1);
80165db0:	eafffffe 	b	80165db0 <__RME_Boot+0x40>

80165db4 <__RME_Svc_Param_Get>:
              rme_ptr_t* Param - The parameters.
Return      : None.
******************************************************************************/
void __RME_Svc_Param_Get(struct RME_Reg_Struct* Reg,rme_ptr_t* Svc,rme_ptr_t* Capid,rme_ptr_t* Param)
{
    *Svc=(Reg->R0)>>16;
80165db4:	e1d0c0b6 	ldrh	ip, [r0, #6]
80165db8:	e581c000 	str	ip, [r1]
    *Capid=(Reg->R0)&0xFFFF;
80165dbc:	e1d010b4 	ldrh	r1, [r0, #4]
80165dc0:	e5821000 	str	r1, [r2]
    Param[0]=Reg->R1;
80165dc4:	e5902008 	ldr	r2, [r0, #8]
80165dc8:	e5832000 	str	r2, [r3]
    Param[1]=Reg->R2;
80165dcc:	e590200c 	ldr	r2, [r0, #12]
80165dd0:	e5832004 	str	r2, [r3, #4]
    Param[2]=Reg->R3;
80165dd4:	e5902010 	ldr	r2, [r0, #16]
80165dd8:	e5832008 	str	r2, [r3, #8]
}
80165ddc:	e12fff1e 	bx	lr

80165de0 <__RME_Svc_Retval_Set>:
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Svc_Retval_Set(struct RME_Reg_Struct* Reg,rme_ret_t Retval)
{
    Reg->R0=(rme_ptr_t)Retval;
80165de0:	e5801004 	str	r1, [r0, #4]
}
80165de4:	e12fff1e 	bx	lr

80165de8 <__RME_Thd_Reg_Init>:
Output      : struct RME_Reg_Struct* Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Init(rme_ptr_t Attr,rme_ptr_t Entry,rme_ptr_t Stack,rme_ptr_t Param,
                                       struct RME_Reg_Struct* Reg)
{
80165de8:	e59d0000 	ldr	r0, [sp]
    /* Set the entry and stack */
    Reg->PC=Entry;
80165dec:	e580103c 	str	r1, [r0, #60]	@ 0x3c
    Reg->SP=Stack;
80165df0:	e5802034 	str	r2, [r0, #52]	@ 0x34
    /* Set the parameter */
    Reg->R0=Param;
80165df4:	e5803004 	str	r3, [r0, #4]
}
80165df8:	e12fff1e 	bx	lr

80165dfc <__RME_Thd_Reg_Copy>:
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Copy(struct RME_Reg_Struct* Dst, struct RME_Reg_Struct* Src)
{
    /* Make sure that the ordering is the same so the compiler can optimize */
    Dst->CPSR=Src->CPSR;
80165dfc:	e5913000 	ldr	r3, [r1]
80165e00:	e5803000 	str	r3, [r0]
    Dst->R0=Src->R0;
80165e04:	e5913004 	ldr	r3, [r1, #4]
80165e08:	e5803004 	str	r3, [r0, #4]
    Dst->R1=Src->R1;
80165e0c:	e5913008 	ldr	r3, [r1, #8]
80165e10:	e5803008 	str	r3, [r0, #8]
    Dst->R2=Src->R2;
80165e14:	e591300c 	ldr	r3, [r1, #12]
80165e18:	e580300c 	str	r3, [r0, #12]
    Dst->R3=Src->R3;
80165e1c:	e5913010 	ldr	r3, [r1, #16]
80165e20:	e5803010 	str	r3, [r0, #16]
    Dst->R4=Src->R4;
80165e24:	e5913014 	ldr	r3, [r1, #20]
80165e28:	e5803014 	str	r3, [r0, #20]
    Dst->R5=Src->R5;
80165e2c:	e5913018 	ldr	r3, [r1, #24]
80165e30:	e5803018 	str	r3, [r0, #24]
    Dst->R6=Src->R6;
80165e34:	e591301c 	ldr	r3, [r1, #28]
80165e38:	e580301c 	str	r3, [r0, #28]
    Dst->R7=Src->R7;
80165e3c:	e5913020 	ldr	r3, [r1, #32]
80165e40:	e5803020 	str	r3, [r0, #32]
    Dst->R8=Src->R8;
80165e44:	e5913024 	ldr	r3, [r1, #36]	@ 0x24
80165e48:	e5803024 	str	r3, [r0, #36]	@ 0x24
    Dst->R9=Src->R9;
80165e4c:	e5913028 	ldr	r3, [r1, #40]	@ 0x28
80165e50:	e5803028 	str	r3, [r0, #40]	@ 0x28
    Dst->R10=Src->R10;
80165e54:	e591302c 	ldr	r3, [r1, #44]	@ 0x2c
80165e58:	e580302c 	str	r3, [r0, #44]	@ 0x2c
    Dst->R11=Src->R11;
80165e5c:	e5913030 	ldr	r3, [r1, #48]	@ 0x30
80165e60:	e5803030 	str	r3, [r0, #48]	@ 0x30
    Dst->SP=Src->SP;
80165e64:	e5913034 	ldr	r3, [r1, #52]	@ 0x34
80165e68:	e5803034 	str	r3, [r0, #52]	@ 0x34
    Dst->LR=Src->LR;
80165e6c:	e5913038 	ldr	r3, [r1, #56]	@ 0x38
80165e70:	e5803038 	str	r3, [r0, #56]	@ 0x38
    Dst->PC=Src->PC;
80165e74:	e591303c 	ldr	r3, [r1, #60]	@ 0x3c
80165e78:	e580303c 	str	r3, [r0, #60]	@ 0x3c
}
80165e7c:	e12fff1e 	bx	lr

80165e80 <__RME_Inv_Reg_Save>:
Output      : struct RME_Iret_Struct* Ret - The invocation return register context.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Save(struct RME_Iret_Struct* Ret, struct RME_Reg_Struct* Reg)
{
    Ret->PC=Reg->PC;
80165e80:	e591303c 	ldr	r3, [r1, #60]	@ 0x3c
80165e84:	e5803000 	str	r3, [r0]
    Ret->SP=Reg->SP;
80165e88:	e5913034 	ldr	r3, [r1, #52]	@ 0x34
80165e8c:	e5803004 	str	r3, [r0, #4]
}
80165e90:	e12fff1e 	bx	lr

80165e94 <__RME_Inv_Reg_Restore>:
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Restore(struct RME_Reg_Struct* Reg, struct RME_Iret_Struct* Ret)
{
    Reg->PC=Ret->PC;
80165e94:	e5913000 	ldr	r3, [r1]
80165e98:	e580303c 	str	r3, [r0, #60]	@ 0x3c
    Reg->SP=Ret->SP;
80165e9c:	e5913004 	ldr	r3, [r1, #4]
80165ea0:	e5803034 	str	r3, [r0, #52]	@ 0x34
}
80165ea4:	e12fff1e 	bx	lr

80165ea8 <__RME_Inv_Retval_Set>:
Return      : None.
******************************************************************************/
void __RME_Inv_Retval_Set(struct RME_Reg_Struct* Reg,
                          rme_ret_t Retval)
{
    Reg->R5=(rme_ptr_t)Retval;
80165ea8:	e5801018 	str	r1, [r0, #24]
}
80165eac:	e12fff1e 	bx	lr

80165eb0 <__RME_Kfn_Handler>:
                                           rme_ptr_t Param1,
                                           rme_ptr_t Param2)
{
	/* Currently no kernel function implemented */
    return 0;
}
80165eb0:	e3a00000 	mov	r0, #0
80165eb4:	e12fff1e 	bx	lr

80165eb8 <__RME_A7A_Undefined_Handler>:
Return      : None.
******************************************************************************/
void __RME_A7A_Undefined_Handler(struct RME_Reg_Struct* Reg)
{
	/* We don't handle undefined instructions now */
	while(1);
80165eb8:	eafffffe 	b	80165eb8 <__RME_A7A_Undefined_Handler>

80165ebc <__RME_A7A_Prefetch_Abort_Handler>:
Return      : None.
******************************************************************************/
void __RME_A7A_Prefetch_Abort_Handler(struct RME_Reg_Struct* Reg)
{
	/* We don't handle prefetch aborts now */
	while(1);
80165ebc:	eafffffe 	b	80165ebc <__RME_A7A_Prefetch_Abort_Handler>

80165ec0 <__RME_A7A_Data_Abort_Handler>:
Return      : None.
******************************************************************************/
void __RME_A7A_Data_Abort_Handler(struct RME_Reg_Struct* Reg)
{
	/* We don't handle data aborts now */
	while(1);
80165ec0:	eafffffe 	b	80165ec0 <__RME_A7A_Data_Abort_Handler>

80165ec4 <__RME_A7A_IRQ_Handler>:
Input       : struct RME_Reg_Struct* Reg - The register set when entering the handler.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_A7A_IRQ_Handler(struct RME_Reg_Struct* Reg)
{
80165ec4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
	rme_ptr_t Int_ID;
	rme_ptr_t CPUID;

	/* What interrupt is this? */
	Int_ID=RME_A7A_GICC_IAR;
80165ec8:	e3a05000 	mov	r5, #0
80165ecc:	e34f58f0 	movt	r5, #63728	@ 0xf8f0
{
80165ed0:	e1a06000 	mov	r6, r0
	CPUID=Int_ID>>10;
	Int_ID&=0x3FFU;
    RME_DBG_S("\r\nINT_ID is ");
80165ed4:	e30601c8 	movw	r0, #25032	@ 0x61c8
	Int_ID=RME_A7A_GICC_IAR;
80165ed8:	e595710c 	ldr	r7, [r5, #268]	@ 0x10c
    RME_DBG_S("\r\nINT_ID is ");
80165edc:	e3480016 	movt	r0, #32790	@ 0x8016
	Int_ID&=0x3FFU;
80165ee0:	e7e94057 	ubfx	r4, r7, #0, #10
    RME_DBG_S("\r\nINT_ID is ");
80165ee4:	ebffedbe 	bl	801615e4 <RME_Str_Print>
	RME_DBG_H(Int_ID);
80165ee8:	e1a00004 	mov	r0, r4
80165eec:	ebffed9c 	bl	80161564 <RME_Hex_Print>

#if(RME_A7A_GIC_TYPE==RME_A7A_GIC_V1)
	/* Is this a spurious interrupt? (Can't be 1022 because GICv1 don't have group1) */
	RME_ASSERT(Int_ID!=1022);
80165ef0:	e30033fe 	movw	r3, #1022	@ 0x3fe
80165ef4:	e1540003 	cmp	r4, r3
80165ef8:	0a000018 	beq	80165f60 <__RME_A7A_IRQ_Handler+0x9c>
80165efc:	e30083ff 	movw	r8, #1023	@ 0x3ff
	if(Int_ID==1023)
80165f00:	e1540008 	cmp	r4, r8
80165f04:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
		return;
	/* Only the booting processor will receive timer interrupts */
#if((RME_A7A_CPU_TYPE==RME_A7A_CPU_CORTEX_A5)|| \
	(RME_A7A_CPU_TYPE==RME_A7A_CPU_CORTEX_A9))
	/* Is is an timer interrupt? (we know that it is at 29) */
	if(Int_ID==29)
80165f08:	e354001d 	cmp	r4, #29
80165f0c:	0a000028 	beq	80165fb4 <__RME_A7A_IRQ_Handler+0xf0>
	CPUID=Int_ID>>10;
80165f10:	e1a03527 	lsr	r3, r7, #10

#else

#endif
	/* Is this a coprocessor timer interrupt? (We use interrupt number 0 for these) */
	if(Int_ID==0)
80165f14:	e3540000 	cmp	r4, #0
80165f18:	1a000003 	bne	80165f2c <__RME_A7A_IRQ_Handler+0x68>
	{
		/* This must have originated from interface 0 */
		RME_ASSERT(CPUID==0);
80165f1c:	e3530000 	cmp	r3, #0
80165f20:	1a000017 	bne	80165f84 <__RME_A7A_IRQ_Handler+0xc0>
		//_RME_Tick_SMP_Handler(Reg);
		/* EOI the interrupt */
		RME_A7A_GICC_EOIR=Int_ID;
80165f24:	e5853110 	str	r3, [r5, #272]	@ 0x110
		return;
80165f28:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	}

	/* Is this an other IPI? (All the rest of the SGIs are these) */
	if(Int_ID<16)
80165f2c:	e3170e3f 	tst	r7, #1008	@ 0x3f0
80165f30:	0a00001c 	beq	80165fa8 <__RME_A7A_IRQ_Handler+0xe4>
		RME_A7A_GICC_EOIR=(CPUID<<10U)|Int_ID;
		return;
	}

	/* Is this an casual interrupt? */
	RME_ASSERT(CPUID==0);
80165f34:	e3530000 	cmp	r3, #0
80165f38:	08bd81f0 	popeq	{r4, r5, r6, r7, r8, pc}
80165f3c:	e30631d8 	movw	r3, #25048	@ 0x61d8
80165f40:	e3062098 	movw	r2, #24728	@ 0x6098
80165f44:	e3483016 	movt	r3, #32790	@ 0x8016
80165f48:	e30601e4 	movw	r0, #25060	@ 0x61e4
80165f4c:	e3482016 	movt	r2, #32790	@ 0x8016
80165f50:	e3a01fb9 	mov	r1, #740	@ 0x2e4
80165f54:	e3480016 	movt	r0, #32790	@ 0x8016
80165f58:	ebffedae 	bl	80161618 <RME_Log>
80165f5c:	eafffffe 	b	80165f5c <__RME_A7A_IRQ_Handler+0x98>
	RME_ASSERT(Int_ID!=1022);
80165f60:	e30631d8 	movw	r3, #25048	@ 0x61d8
80165f64:	e3062098 	movw	r2, #24728	@ 0x6098
80165f68:	e3483016 	movt	r3, #32790	@ 0x8016
80165f6c:	e30601e4 	movw	r0, #25060	@ 0x61e4
80165f70:	e3482016 	movt	r2, #32790	@ 0x8016
80165f74:	e30012b6 	movw	r1, #694	@ 0x2b6
80165f78:	e3480016 	movt	r0, #32790	@ 0x8016
80165f7c:	ebffeda5 	bl	80161618 <RME_Log>
80165f80:	eafffffe 	b	80165f80 <__RME_A7A_IRQ_Handler+0xbc>
		RME_ASSERT(CPUID==0);
80165f84:	e30631d8 	movw	r3, #25048	@ 0x61d8
80165f88:	e3062098 	movw	r2, #24728	@ 0x6098
80165f8c:	e3483016 	movt	r3, #32790	@ 0x8016
80165f90:	e30601e4 	movw	r0, #25060	@ 0x61e4
80165f94:	e3482016 	movt	r2, #32790	@ 0x8016
80165f98:	e30012d3 	movw	r1, #723	@ 0x2d3
80165f9c:	e3480016 	movt	r0, #32790	@ 0x8016
80165fa0:	ebffed9c 	bl	80161618 <RME_Log>
80165fa4:	eafffffe 	b	80165fa4 <__RME_A7A_IRQ_Handler+0xe0>
		RME_A7A_GICC_EOIR=(CPUID<<10U)|Int_ID;
80165fa8:	e1844503 	orr	r4, r4, r3, lsl #10
80165fac:	e5854110 	str	r4, [r5, #272]	@ 0x110
		return;
80165fb0:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}
	    RME_A7A_PTWD_PTISR=0;
80165fb4:	e3a03000 	mov	r3, #0
	    _RME_Tim_Handler(Reg,1);
80165fb8:	e3a01001 	mov	r1, #1
	    RME_A7A_PTWD_PTISR=0;
80165fbc:	e585360c 	str	r3, [r5, #1548]	@ 0x60c
	    _RME_Tim_Handler(Reg,1);
80165fc0:	e1a00006 	mov	r0, r6
80165fc4:	ebfff02b 	bl	80162078 <_RME_Tim_Handler>
		RME_A7A_GICC_EOIR=Int_ID;
80165fc8:	e5854110 	str	r4, [r5, #272]	@ 0x110
		return;
80165fcc:	e8bd81f0 	pop	{r4, r5, r6, r7, r8, pc}

80165fd0 <__RME_Pgt_Set>:
Return      : None.
******************************************************************************/
void __RME_Pgt_Set(rme_ptr_t Pgt)
{

}
80165fd0:	e12fff1e 	bx	lr

80165fd4 <__RME_Pgt_Check>:
******************************************************************************/
rme_ptr_t __RME_Pgt_Check(rme_ptr_t Start_Addr, rme_ptr_t Is_Top,
                            rme_ptr_t Size_Order, rme_ptr_t Num_Order, rme_ptr_t Vaddr)
{
    /* Top-level - 1MB pages, 4096 entries, 16kB alignment */
    if(Is_Top!=0)
80165fd4:	e3510000 	cmp	r1, #0
80165fd8:	0a00000a 	beq	80166008 <__RME_Pgt_Check+0x34>
    {
        if(Size_Order!=RME_PGT_SIZE_1M)
            return RME_ERR_HAL_FAIL;
        if(Num_Order!=RME_PGT_NUM_4K)
80165fdc:	e3520014 	cmp	r2, #20
80165fe0:	0353000c 	cmpeq	r3, #12
80165fe4:	0a000001 	beq	80165ff0 <__RME_Pgt_Check+0x1c>
            return RME_ERR_HAL_FAIL;
80165fe8:	e3e00000 	mvn	r0, #0
        if((Vaddr&0x3FF)!=0)
            return RME_ERR_HAL_FAIL;
    }

    return 0;
}
80165fec:	e12fff1e 	bx	lr
        if((Vaddr&0x3FFF)!=0)
80165ff0:	e59d3000 	ldr	r3, [sp]
80165ff4:	e7ed0053 	ubfx	r0, r3, #0, #14
80165ff8:	e2500000 	subs	r0, r0, #0
80165ffc:	13a00001 	movne	r0, #1
80166000:	e2600000 	rsb	r0, r0, #0
80166004:	e12fff1e 	bx	lr
        if(Num_Order!=RME_PGT_NUM_1K)
80166008:	e3520010 	cmp	r2, #16
8016600c:	0353000a 	cmpeq	r3, #10
80166010:	1afffff4 	bne	80165fe8 <__RME_Pgt_Check+0x14>
        if((Vaddr&0x3FF)!=0)
80166014:	e59d3000 	ldr	r3, [sp]
80166018:	e7e90053 	ubfx	r0, r3, #0, #10
8016601c:	e2500000 	subs	r0, r0, #0
80166020:	13a00001 	movne	r0, #1
80166024:	e2600000 	rsb	r0, r0, #0
80166028:	e12fff1e 	bx	lr

8016602c <__RME_Pgt_Init>:

    RME_A7A_PGREG_POS(Ptr).Parent_Cnt=0;
    RME_A7A_PGREG_POS(Ptr).ASID_Child_Cnt=0;
    return 0;
#endif
}
8016602c:	e12fff1e 	bx	lr

80166030 <__RME_Pgt_Del_Check>:
80166030:	e3a00000 	mov	r0, #0
80166034:	e12fff1e 	bx	lr

80166038 <__RME_Pgt_Page_Map>:
    if(RME_COMP_SWAP(&(Table[Pos]),0,A7A_Flags)==0)
        return RME_ERR_HAL_FAIL;

    return 0;
    #endif
}
80166038:	e12fff1e 	bx	lr

8016603c <__RME_Pgt_Page_Unmap>:
    if(RME_COMP_SWAP(&(Table[Pos]),Temp,0)==0)
        return RME_ERR_HAL_FAIL;

    return 0;
    #endif
}
8016603c:	e12fff1e 	bx	lr

80166040 <__RME_Pgt_Pgdir_Map>:
    RME_FETCH_ADD((rme_ptr_t*)&(RME_A7A_PGREG_POS(Child_Table).Parent_Cnt),1);
    RME_FETCH_ADD((rme_ptr_t*)&(RME_A7A_PGREG_POS(Parent_Table).ASID_Child_Cnt),1);

    return 0;
    #endif
}
80166040:	e12fff1e 	bx	lr

80166044 <__RME_Pgt_Pgdir_Unmap>:
******************************************************************************/
rme_ret_t __RME_Pgt_Pgdir_Unmap(struct RME_Cap_Pgt* Pgt_Parent,rme_ptr_t Pos,
                                               struct RME_Cap_Pgt* Pgt_Child)
{
   return 0;
}
80166044:	e3a00000 	mov	r0, #0
80166048:	e12fff1e 	bx	lr

8016604c <__RME_Pgt_Lookup>:
            *Flags=RME_A7A_PGFLG_1M_NAT2RME(Temp);
    }

    return 0;
    #endif
}
8016604c:	e12fff1e 	bx	lr
