
RME:     file format elf64-x86-64


Disassembly of section .text:

ffffffff80100000 <__RME_X64_Mboot_Header>:
ffffffff80100000:	02 b0 ad 1b 00 00    	add    0x1bad(%rax),%dh
ffffffff80100006:	01 00                	add    %eax,(%rax)
ffffffff80100008:	fe 4f 51             	decb   0x51(%rdi)
ffffffff8010000b:	e4 00                	in     $0x0,%al
ffffffff8010000d:	00 10                	add    %dl,(%rax)
ffffffff8010000f:	00 00                	add    %al,(%rax)
ffffffff80100011:	00 10                	add    %dl,(%rax)
ffffffff80100013:	00 00                	add    %al,(%rax)
ffffffff80100015:	10 22                	adc    %ah,(%rdx)
ffffffff80100017:	00 88 cf 26 00 00    	add    %cl,0x26cf(%rax)
ffffffff8010001d:	80 10 00             	adcb   $0x0,(%rax)
ffffffff80100020:	90                   	nop
ffffffff80100021:	90                   	nop
ffffffff80100022:	90                   	nop
ffffffff80100023:	90                   	nop
ffffffff80100024:	90                   	nop
ffffffff80100025:	90                   	nop
ffffffff80100026:	90                   	nop
ffffffff80100027:	90                   	nop
ffffffff80100028:	90                   	nop
ffffffff80100029:	90                   	nop
ffffffff8010002a:	90                   	nop
ffffffff8010002b:	90                   	nop
ffffffff8010002c:	90                   	nop
ffffffff8010002d:	90                   	nop
ffffffff8010002e:	90                   	nop
ffffffff8010002f:	90                   	nop
ffffffff80100030:	90                   	nop
ffffffff80100031:	90                   	nop
ffffffff80100032:	90                   	nop
ffffffff80100033:	90                   	nop
ffffffff80100034:	90                   	nop
ffffffff80100035:	90                   	nop
ffffffff80100036:	90                   	nop
ffffffff80100037:	90                   	nop
ffffffff80100038:	90                   	nop
ffffffff80100039:	90                   	nop
ffffffff8010003a:	90                   	nop
ffffffff8010003b:	90                   	nop
ffffffff8010003c:	90                   	nop
ffffffff8010003d:	90                   	nop
ffffffff8010003e:	90                   	nop
ffffffff8010003f:	90                   	nop
ffffffff80100040:	90                   	nop
ffffffff80100041:	90                   	nop
ffffffff80100042:	90                   	nop
ffffffff80100043:	90                   	nop
ffffffff80100044:	90                   	nop
ffffffff80100045:	90                   	nop
ffffffff80100046:	90                   	nop
ffffffff80100047:	90                   	nop
ffffffff80100048:	90                   	nop
ffffffff80100049:	90                   	nop
ffffffff8010004a:	90                   	nop
ffffffff8010004b:	90                   	nop
ffffffff8010004c:	90                   	nop
ffffffff8010004d:	90                   	nop
ffffffff8010004e:	90                   	nop
ffffffff8010004f:	90                   	nop
ffffffff80100050:	90                   	nop
ffffffff80100051:	90                   	nop
ffffffff80100052:	90                   	nop
ffffffff80100053:	90                   	nop
ffffffff80100054:	90                   	nop
ffffffff80100055:	90                   	nop
ffffffff80100056:	90                   	nop
ffffffff80100057:	90                   	nop
ffffffff80100058:	90                   	nop
ffffffff80100059:	90                   	nop
ffffffff8010005a:	90                   	nop
ffffffff8010005b:	90                   	nop
ffffffff8010005c:	90                   	nop
ffffffff8010005d:	90                   	nop
ffffffff8010005e:	90                   	nop
ffffffff8010005f:	90                   	nop
ffffffff80100060:	90                   	nop
ffffffff80100061:	90                   	nop
ffffffff80100062:	90                   	nop
ffffffff80100063:	90                   	nop
ffffffff80100064:	90                   	nop
ffffffff80100065:	90                   	nop
ffffffff80100066:	90                   	nop
ffffffff80100067:	90                   	nop
ffffffff80100068:	90                   	nop
ffffffff80100069:	90                   	nop
ffffffff8010006a:	90                   	nop
ffffffff8010006b:	90                   	nop
ffffffff8010006c:	90                   	nop
ffffffff8010006d:	90                   	nop
ffffffff8010006e:	90                   	nop
ffffffff8010006f:	90                   	nop
ffffffff80100070:	90                   	nop
ffffffff80100071:	90                   	nop
ffffffff80100072:	90                   	nop
ffffffff80100073:	90                   	nop
ffffffff80100074:	90                   	nop
ffffffff80100075:	90                   	nop
ffffffff80100076:	90                   	nop
ffffffff80100077:	90                   	nop
ffffffff80100078:	90                   	nop
ffffffff80100079:	90                   	nop
ffffffff8010007a:	90                   	nop
ffffffff8010007b:	90                   	nop
ffffffff8010007c:	90                   	nop
ffffffff8010007d:	90                   	nop
ffffffff8010007e:	90                   	nop
ffffffff8010007f:	90                   	nop
ffffffff80100080:	90                   	nop
ffffffff80100081:	90                   	nop
ffffffff80100082:	90                   	nop
ffffffff80100083:	90                   	nop
ffffffff80100084:	90                   	nop
ffffffff80100085:	90                   	nop
ffffffff80100086:	90                   	nop
ffffffff80100087:	90                   	nop
ffffffff80100088:	90                   	nop
ffffffff80100089:	90                   	nop
ffffffff8010008a:	90                   	nop
ffffffff8010008b:	90                   	nop
ffffffff8010008c:	90                   	nop
ffffffff8010008d:	90                   	nop
ffffffff8010008e:	90                   	nop
ffffffff8010008f:	90                   	nop
ffffffff80100090:	90                   	nop
ffffffff80100091:	90                   	nop
ffffffff80100092:	90                   	nop
ffffffff80100093:	90                   	nop
ffffffff80100094:	90                   	nop
ffffffff80100095:	90                   	nop
ffffffff80100096:	90                   	nop
ffffffff80100097:	90                   	nop
ffffffff80100098:	90                   	nop
ffffffff80100099:	90                   	nop
ffffffff8010009a:	90                   	nop
ffffffff8010009b:	90                   	nop
ffffffff8010009c:	90                   	nop
ffffffff8010009d:	90                   	nop
ffffffff8010009e:	90                   	nop
ffffffff8010009f:	90                   	nop
ffffffff801000a0:	90                   	nop
ffffffff801000a1:	90                   	nop
ffffffff801000a2:	90                   	nop
ffffffff801000a3:	90                   	nop
ffffffff801000a4:	90                   	nop
ffffffff801000a5:	90                   	nop
ffffffff801000a6:	90                   	nop
ffffffff801000a7:	90                   	nop
ffffffff801000a8:	90                   	nop
ffffffff801000a9:	90                   	nop
ffffffff801000aa:	90                   	nop
ffffffff801000ab:	90                   	nop
ffffffff801000ac:	90                   	nop
ffffffff801000ad:	90                   	nop
ffffffff801000ae:	90                   	nop
ffffffff801000af:	90                   	nop
ffffffff801000b0:	90                   	nop
ffffffff801000b1:	90                   	nop
ffffffff801000b2:	90                   	nop
ffffffff801000b3:	90                   	nop
ffffffff801000b4:	90                   	nop
ffffffff801000b5:	90                   	nop
ffffffff801000b6:	90                   	nop
ffffffff801000b7:	90                   	nop
ffffffff801000b8:	90                   	nop
ffffffff801000b9:	90                   	nop
ffffffff801000ba:	90                   	nop
ffffffff801000bb:	90                   	nop
ffffffff801000bc:	90                   	nop
ffffffff801000bd:	90                   	nop
ffffffff801000be:	90                   	nop
ffffffff801000bf:	90                   	nop
ffffffff801000c0:	90                   	nop
ffffffff801000c1:	90                   	nop
ffffffff801000c2:	90                   	nop
ffffffff801000c3:	90                   	nop
ffffffff801000c4:	90                   	nop
ffffffff801000c5:	90                   	nop
ffffffff801000c6:	90                   	nop
ffffffff801000c7:	90                   	nop
ffffffff801000c8:	90                   	nop
ffffffff801000c9:	90                   	nop
ffffffff801000ca:	90                   	nop
ffffffff801000cb:	90                   	nop
ffffffff801000cc:	90                   	nop
ffffffff801000cd:	90                   	nop
ffffffff801000ce:	90                   	nop
ffffffff801000cf:	90                   	nop
ffffffff801000d0:	90                   	nop
ffffffff801000d1:	90                   	nop
ffffffff801000d2:	90                   	nop
ffffffff801000d3:	90                   	nop
ffffffff801000d4:	90                   	nop
ffffffff801000d5:	90                   	nop
ffffffff801000d6:	90                   	nop
ffffffff801000d7:	90                   	nop
ffffffff801000d8:	90                   	nop
ffffffff801000d9:	90                   	nop
ffffffff801000da:	90                   	nop
ffffffff801000db:	90                   	nop
ffffffff801000dc:	90                   	nop
ffffffff801000dd:	90                   	nop
ffffffff801000de:	90                   	nop
ffffffff801000df:	90                   	nop
ffffffff801000e0:	90                   	nop
ffffffff801000e1:	90                   	nop
ffffffff801000e2:	90                   	nop
ffffffff801000e3:	90                   	nop
ffffffff801000e4:	90                   	nop
ffffffff801000e5:	90                   	nop
ffffffff801000e6:	90                   	nop
ffffffff801000e7:	90                   	nop
ffffffff801000e8:	90                   	nop
ffffffff801000e9:	90                   	nop
ffffffff801000ea:	90                   	nop
ffffffff801000eb:	90                   	nop
ffffffff801000ec:	90                   	nop
ffffffff801000ed:	90                   	nop
ffffffff801000ee:	90                   	nop
ffffffff801000ef:	90                   	nop
ffffffff801000f0:	90                   	nop
ffffffff801000f1:	90                   	nop
ffffffff801000f2:	90                   	nop
ffffffff801000f3:	90                   	nop
ffffffff801000f4:	90                   	nop
ffffffff801000f5:	90                   	nop
ffffffff801000f6:	90                   	nop
ffffffff801000f7:	90                   	nop
ffffffff801000f8:	90                   	nop
ffffffff801000f9:	90                   	nop
ffffffff801000fa:	90                   	nop
ffffffff801000fb:	90                   	nop
ffffffff801000fc:	90                   	nop
ffffffff801000fd:	90                   	nop
ffffffff801000fe:	90                   	nop
ffffffff801000ff:	90                   	nop
ffffffff80100100:	90                   	nop
ffffffff80100101:	90                   	nop
ffffffff80100102:	90                   	nop
ffffffff80100103:	90                   	nop
ffffffff80100104:	90                   	nop
ffffffff80100105:	90                   	nop
ffffffff80100106:	90                   	nop
ffffffff80100107:	90                   	nop
ffffffff80100108:	90                   	nop
ffffffff80100109:	90                   	nop
ffffffff8010010a:	90                   	nop
ffffffff8010010b:	90                   	nop
ffffffff8010010c:	90                   	nop
ffffffff8010010d:	90                   	nop
ffffffff8010010e:	90                   	nop
ffffffff8010010f:	90                   	nop
ffffffff80100110:	90                   	nop
ffffffff80100111:	90                   	nop
ffffffff80100112:	90                   	nop
ffffffff80100113:	90                   	nop
ffffffff80100114:	90                   	nop
ffffffff80100115:	90                   	nop
ffffffff80100116:	90                   	nop
ffffffff80100117:	90                   	nop
ffffffff80100118:	90                   	nop
ffffffff80100119:	90                   	nop
ffffffff8010011a:	90                   	nop
ffffffff8010011b:	90                   	nop
ffffffff8010011c:	90                   	nop
ffffffff8010011d:	90                   	nop
ffffffff8010011e:	90                   	nop
ffffffff8010011f:	90                   	nop
ffffffff80100120:	90                   	nop
ffffffff80100121:	90                   	nop
ffffffff80100122:	90                   	nop
ffffffff80100123:	90                   	nop
ffffffff80100124:	90                   	nop
ffffffff80100125:	90                   	nop
ffffffff80100126:	90                   	nop
ffffffff80100127:	90                   	nop
ffffffff80100128:	90                   	nop
ffffffff80100129:	90                   	nop
ffffffff8010012a:	90                   	nop
ffffffff8010012b:	90                   	nop
ffffffff8010012c:	90                   	nop
ffffffff8010012d:	90                   	nop
ffffffff8010012e:	90                   	nop
ffffffff8010012f:	90                   	nop
ffffffff80100130:	90                   	nop
ffffffff80100131:	90                   	nop
ffffffff80100132:	90                   	nop
ffffffff80100133:	90                   	nop
ffffffff80100134:	90                   	nop
ffffffff80100135:	90                   	nop
ffffffff80100136:	90                   	nop
ffffffff80100137:	90                   	nop
ffffffff80100138:	90                   	nop
ffffffff80100139:	90                   	nop
ffffffff8010013a:	90                   	nop
ffffffff8010013b:	90                   	nop
ffffffff8010013c:	90                   	nop
ffffffff8010013d:	90                   	nop
ffffffff8010013e:	90                   	nop
ffffffff8010013f:	90                   	nop
ffffffff80100140:	90                   	nop
ffffffff80100141:	90                   	nop
ffffffff80100142:	90                   	nop
ffffffff80100143:	90                   	nop
ffffffff80100144:	90                   	nop
ffffffff80100145:	90                   	nop
ffffffff80100146:	90                   	nop
ffffffff80100147:	90                   	nop
ffffffff80100148:	90                   	nop
ffffffff80100149:	90                   	nop
ffffffff8010014a:	90                   	nop
ffffffff8010014b:	90                   	nop
ffffffff8010014c:	90                   	nop
ffffffff8010014d:	90                   	nop
ffffffff8010014e:	90                   	nop
ffffffff8010014f:	90                   	nop
ffffffff80100150:	90                   	nop
ffffffff80100151:	90                   	nop
ffffffff80100152:	90                   	nop
ffffffff80100153:	90                   	nop
ffffffff80100154:	90                   	nop
ffffffff80100155:	90                   	nop
ffffffff80100156:	90                   	nop
ffffffff80100157:	90                   	nop
ffffffff80100158:	90                   	nop
ffffffff80100159:	90                   	nop
ffffffff8010015a:	90                   	nop
ffffffff8010015b:	90                   	nop
ffffffff8010015c:	90                   	nop
ffffffff8010015d:	90                   	nop
ffffffff8010015e:	90                   	nop
ffffffff8010015f:	90                   	nop
ffffffff80100160:	90                   	nop
ffffffff80100161:	90                   	nop
ffffffff80100162:	90                   	nop
ffffffff80100163:	90                   	nop
ffffffff80100164:	90                   	nop
ffffffff80100165:	90                   	nop
ffffffff80100166:	90                   	nop
ffffffff80100167:	90                   	nop
ffffffff80100168:	90                   	nop
ffffffff80100169:	90                   	nop
ffffffff8010016a:	90                   	nop
ffffffff8010016b:	90                   	nop
ffffffff8010016c:	90                   	nop
ffffffff8010016d:	90                   	nop
ffffffff8010016e:	90                   	nop
ffffffff8010016f:	90                   	nop
ffffffff80100170:	90                   	nop
ffffffff80100171:	90                   	nop
ffffffff80100172:	90                   	nop
ffffffff80100173:	90                   	nop
ffffffff80100174:	90                   	nop
ffffffff80100175:	90                   	nop
ffffffff80100176:	90                   	nop
ffffffff80100177:	90                   	nop
ffffffff80100178:	90                   	nop
ffffffff80100179:	90                   	nop
ffffffff8010017a:	90                   	nop
ffffffff8010017b:	90                   	nop
ffffffff8010017c:	90                   	nop
ffffffff8010017d:	90                   	nop
ffffffff8010017e:	90                   	nop
ffffffff8010017f:	90                   	nop
ffffffff80100180:	90                   	nop
ffffffff80100181:	90                   	nop
ffffffff80100182:	90                   	nop
ffffffff80100183:	90                   	nop
ffffffff80100184:	90                   	nop
ffffffff80100185:	90                   	nop
ffffffff80100186:	90                   	nop
ffffffff80100187:	90                   	nop
ffffffff80100188:	90                   	nop
ffffffff80100189:	90                   	nop
ffffffff8010018a:	90                   	nop
ffffffff8010018b:	90                   	nop
ffffffff8010018c:	90                   	nop
ffffffff8010018d:	90                   	nop
ffffffff8010018e:	90                   	nop
ffffffff8010018f:	90                   	nop
ffffffff80100190:	90                   	nop
ffffffff80100191:	90                   	nop
ffffffff80100192:	90                   	nop
ffffffff80100193:	90                   	nop
ffffffff80100194:	90                   	nop
ffffffff80100195:	90                   	nop
ffffffff80100196:	90                   	nop
ffffffff80100197:	90                   	nop
ffffffff80100198:	90                   	nop
ffffffff80100199:	90                   	nop
ffffffff8010019a:	90                   	nop
ffffffff8010019b:	90                   	nop
ffffffff8010019c:	90                   	nop
ffffffff8010019d:	90                   	nop
ffffffff8010019e:	90                   	nop
ffffffff8010019f:	90                   	nop
ffffffff801001a0:	90                   	nop
ffffffff801001a1:	90                   	nop
ffffffff801001a2:	90                   	nop
ffffffff801001a3:	90                   	nop
ffffffff801001a4:	90                   	nop
ffffffff801001a5:	90                   	nop
ffffffff801001a6:	90                   	nop
ffffffff801001a7:	90                   	nop
ffffffff801001a8:	90                   	nop
ffffffff801001a9:	90                   	nop
ffffffff801001aa:	90                   	nop
ffffffff801001ab:	90                   	nop
ffffffff801001ac:	90                   	nop
ffffffff801001ad:	90                   	nop
ffffffff801001ae:	90                   	nop
ffffffff801001af:	90                   	nop
ffffffff801001b0:	90                   	nop
ffffffff801001b1:	90                   	nop
ffffffff801001b2:	90                   	nop
ffffffff801001b3:	90                   	nop
ffffffff801001b4:	90                   	nop
ffffffff801001b5:	90                   	nop
ffffffff801001b6:	90                   	nop
ffffffff801001b7:	90                   	nop
ffffffff801001b8:	90                   	nop
ffffffff801001b9:	90                   	nop
ffffffff801001ba:	90                   	nop
ffffffff801001bb:	90                   	nop
ffffffff801001bc:	90                   	nop
ffffffff801001bd:	90                   	nop
ffffffff801001be:	90                   	nop
ffffffff801001bf:	90                   	nop
ffffffff801001c0:	90                   	nop
ffffffff801001c1:	90                   	nop
ffffffff801001c2:	90                   	nop
ffffffff801001c3:	90                   	nop
ffffffff801001c4:	90                   	nop
ffffffff801001c5:	90                   	nop
ffffffff801001c6:	90                   	nop
ffffffff801001c7:	90                   	nop
ffffffff801001c8:	90                   	nop
ffffffff801001c9:	90                   	nop
ffffffff801001ca:	90                   	nop
ffffffff801001cb:	90                   	nop
ffffffff801001cc:	90                   	nop
ffffffff801001cd:	90                   	nop
ffffffff801001ce:	90                   	nop
ffffffff801001cf:	90                   	nop
ffffffff801001d0:	90                   	nop
ffffffff801001d1:	90                   	nop
ffffffff801001d2:	90                   	nop
ffffffff801001d3:	90                   	nop
ffffffff801001d4:	90                   	nop
ffffffff801001d5:	90                   	nop
ffffffff801001d6:	90                   	nop
ffffffff801001d7:	90                   	nop
ffffffff801001d8:	90                   	nop
ffffffff801001d9:	90                   	nop
ffffffff801001da:	90                   	nop
ffffffff801001db:	90                   	nop
ffffffff801001dc:	90                   	nop
ffffffff801001dd:	90                   	nop
ffffffff801001de:	90                   	nop
ffffffff801001df:	90                   	nop
ffffffff801001e0:	90                   	nop
ffffffff801001e1:	90                   	nop
ffffffff801001e2:	90                   	nop
ffffffff801001e3:	90                   	nop
ffffffff801001e4:	90                   	nop
ffffffff801001e5:	90                   	nop
ffffffff801001e6:	90                   	nop
ffffffff801001e7:	90                   	nop
ffffffff801001e8:	90                   	nop
ffffffff801001e9:	90                   	nop
ffffffff801001ea:	90                   	nop
ffffffff801001eb:	90                   	nop
ffffffff801001ec:	90                   	nop
ffffffff801001ed:	90                   	nop
ffffffff801001ee:	90                   	nop
ffffffff801001ef:	90                   	nop
ffffffff801001f0:	90                   	nop
ffffffff801001f1:	90                   	nop
ffffffff801001f2:	90                   	nop
ffffffff801001f3:	90                   	nop
ffffffff801001f4:	90                   	nop
ffffffff801001f5:	90                   	nop
ffffffff801001f6:	90                   	nop
ffffffff801001f7:	90                   	nop
ffffffff801001f8:	90                   	nop
ffffffff801001f9:	90                   	nop
ffffffff801001fa:	90                   	nop
ffffffff801001fb:	90                   	nop
ffffffff801001fc:	90                   	nop
ffffffff801001fd:	90                   	nop
ffffffff801001fe:	90                   	nop
ffffffff801001ff:	90                   	nop
ffffffff80100200:	90                   	nop
ffffffff80100201:	90                   	nop
ffffffff80100202:	90                   	nop
ffffffff80100203:	90                   	nop
ffffffff80100204:	90                   	nop
ffffffff80100205:	90                   	nop
ffffffff80100206:	90                   	nop
ffffffff80100207:	90                   	nop
ffffffff80100208:	90                   	nop
ffffffff80100209:	90                   	nop
ffffffff8010020a:	90                   	nop
ffffffff8010020b:	90                   	nop
ffffffff8010020c:	90                   	nop
ffffffff8010020d:	90                   	nop
ffffffff8010020e:	90                   	nop
ffffffff8010020f:	90                   	nop
ffffffff80100210:	90                   	nop
ffffffff80100211:	90                   	nop
ffffffff80100212:	90                   	nop
ffffffff80100213:	90                   	nop
ffffffff80100214:	90                   	nop
ffffffff80100215:	90                   	nop
ffffffff80100216:	90                   	nop
ffffffff80100217:	90                   	nop
ffffffff80100218:	90                   	nop
ffffffff80100219:	90                   	nop
ffffffff8010021a:	90                   	nop
ffffffff8010021b:	90                   	nop
ffffffff8010021c:	90                   	nop
ffffffff8010021d:	90                   	nop
ffffffff8010021e:	90                   	nop
ffffffff8010021f:	90                   	nop
ffffffff80100220:	90                   	nop
ffffffff80100221:	90                   	nop
ffffffff80100222:	90                   	nop
ffffffff80100223:	90                   	nop
ffffffff80100224:	90                   	nop
ffffffff80100225:	90                   	nop
ffffffff80100226:	90                   	nop
ffffffff80100227:	90                   	nop
ffffffff80100228:	90                   	nop
ffffffff80100229:	90                   	nop
ffffffff8010022a:	90                   	nop
ffffffff8010022b:	90                   	nop
ffffffff8010022c:	90                   	nop
ffffffff8010022d:	90                   	nop
ffffffff8010022e:	90                   	nop
ffffffff8010022f:	90                   	nop
ffffffff80100230:	90                   	nop
ffffffff80100231:	90                   	nop
ffffffff80100232:	90                   	nop
ffffffff80100233:	90                   	nop
ffffffff80100234:	90                   	nop
ffffffff80100235:	90                   	nop
ffffffff80100236:	90                   	nop
ffffffff80100237:	90                   	nop
ffffffff80100238:	90                   	nop
ffffffff80100239:	90                   	nop
ffffffff8010023a:	90                   	nop
ffffffff8010023b:	90                   	nop
ffffffff8010023c:	90                   	nop
ffffffff8010023d:	90                   	nop
ffffffff8010023e:	90                   	nop
ffffffff8010023f:	90                   	nop
ffffffff80100240:	90                   	nop
ffffffff80100241:	90                   	nop
ffffffff80100242:	90                   	nop
ffffffff80100243:	90                   	nop
ffffffff80100244:	90                   	nop
ffffffff80100245:	90                   	nop
ffffffff80100246:	90                   	nop
ffffffff80100247:	90                   	nop
ffffffff80100248:	90                   	nop
ffffffff80100249:	90                   	nop
ffffffff8010024a:	90                   	nop
ffffffff8010024b:	90                   	nop
ffffffff8010024c:	90                   	nop
ffffffff8010024d:	90                   	nop
ffffffff8010024e:	90                   	nop
ffffffff8010024f:	90                   	nop
ffffffff80100250:	90                   	nop
ffffffff80100251:	90                   	nop
ffffffff80100252:	90                   	nop
ffffffff80100253:	90                   	nop
ffffffff80100254:	90                   	nop
ffffffff80100255:	90                   	nop
ffffffff80100256:	90                   	nop
ffffffff80100257:	90                   	nop
ffffffff80100258:	90                   	nop
ffffffff80100259:	90                   	nop
ffffffff8010025a:	90                   	nop
ffffffff8010025b:	90                   	nop
ffffffff8010025c:	90                   	nop
ffffffff8010025d:	90                   	nop
ffffffff8010025e:	90                   	nop
ffffffff8010025f:	90                   	nop
ffffffff80100260:	90                   	nop
ffffffff80100261:	90                   	nop
ffffffff80100262:	90                   	nop
ffffffff80100263:	90                   	nop
ffffffff80100264:	90                   	nop
ffffffff80100265:	90                   	nop
ffffffff80100266:	90                   	nop
ffffffff80100267:	90                   	nop
ffffffff80100268:	90                   	nop
ffffffff80100269:	90                   	nop
ffffffff8010026a:	90                   	nop
ffffffff8010026b:	90                   	nop
ffffffff8010026c:	90                   	nop
ffffffff8010026d:	90                   	nop
ffffffff8010026e:	90                   	nop
ffffffff8010026f:	90                   	nop
ffffffff80100270:	90                   	nop
ffffffff80100271:	90                   	nop
ffffffff80100272:	90                   	nop
ffffffff80100273:	90                   	nop
ffffffff80100274:	90                   	nop
ffffffff80100275:	90                   	nop
ffffffff80100276:	90                   	nop
ffffffff80100277:	90                   	nop
ffffffff80100278:	90                   	nop
ffffffff80100279:	90                   	nop
ffffffff8010027a:	90                   	nop
ffffffff8010027b:	90                   	nop
ffffffff8010027c:	90                   	nop
ffffffff8010027d:	90                   	nop
ffffffff8010027e:	90                   	nop
ffffffff8010027f:	90                   	nop
ffffffff80100280:	90                   	nop
ffffffff80100281:	90                   	nop
ffffffff80100282:	90                   	nop
ffffffff80100283:	90                   	nop
ffffffff80100284:	90                   	nop
ffffffff80100285:	90                   	nop
ffffffff80100286:	90                   	nop
ffffffff80100287:	90                   	nop
ffffffff80100288:	90                   	nop
ffffffff80100289:	90                   	nop
ffffffff8010028a:	90                   	nop
ffffffff8010028b:	90                   	nop
ffffffff8010028c:	90                   	nop
ffffffff8010028d:	90                   	nop
ffffffff8010028e:	90                   	nop
ffffffff8010028f:	90                   	nop
ffffffff80100290:	90                   	nop
ffffffff80100291:	90                   	nop
ffffffff80100292:	90                   	nop
ffffffff80100293:	90                   	nop
ffffffff80100294:	90                   	nop
ffffffff80100295:	90                   	nop
ffffffff80100296:	90                   	nop
ffffffff80100297:	90                   	nop
ffffffff80100298:	90                   	nop
ffffffff80100299:	90                   	nop
ffffffff8010029a:	90                   	nop
ffffffff8010029b:	90                   	nop
ffffffff8010029c:	90                   	nop
ffffffff8010029d:	90                   	nop
ffffffff8010029e:	90                   	nop
ffffffff8010029f:	90                   	nop
ffffffff801002a0:	90                   	nop
ffffffff801002a1:	90                   	nop
ffffffff801002a2:	90                   	nop
ffffffff801002a3:	90                   	nop
ffffffff801002a4:	90                   	nop
ffffffff801002a5:	90                   	nop
ffffffff801002a6:	90                   	nop
ffffffff801002a7:	90                   	nop
ffffffff801002a8:	90                   	nop
ffffffff801002a9:	90                   	nop
ffffffff801002aa:	90                   	nop
ffffffff801002ab:	90                   	nop
ffffffff801002ac:	90                   	nop
ffffffff801002ad:	90                   	nop
ffffffff801002ae:	90                   	nop
ffffffff801002af:	90                   	nop
ffffffff801002b0:	90                   	nop
ffffffff801002b1:	90                   	nop
ffffffff801002b2:	90                   	nop
ffffffff801002b3:	90                   	nop
ffffffff801002b4:	90                   	nop
ffffffff801002b5:	90                   	nop
ffffffff801002b6:	90                   	nop
ffffffff801002b7:	90                   	nop
ffffffff801002b8:	90                   	nop
ffffffff801002b9:	90                   	nop
ffffffff801002ba:	90                   	nop
ffffffff801002bb:	90                   	nop
ffffffff801002bc:	90                   	nop
ffffffff801002bd:	90                   	nop
ffffffff801002be:	90                   	nop
ffffffff801002bf:	90                   	nop
ffffffff801002c0:	90                   	nop
ffffffff801002c1:	90                   	nop
ffffffff801002c2:	90                   	nop
ffffffff801002c3:	90                   	nop
ffffffff801002c4:	90                   	nop
ffffffff801002c5:	90                   	nop
ffffffff801002c6:	90                   	nop
ffffffff801002c7:	90                   	nop
ffffffff801002c8:	90                   	nop
ffffffff801002c9:	90                   	nop
ffffffff801002ca:	90                   	nop
ffffffff801002cb:	90                   	nop
ffffffff801002cc:	90                   	nop
ffffffff801002cd:	90                   	nop
ffffffff801002ce:	90                   	nop
ffffffff801002cf:	90                   	nop
ffffffff801002d0:	90                   	nop
ffffffff801002d1:	90                   	nop
ffffffff801002d2:	90                   	nop
ffffffff801002d3:	90                   	nop
ffffffff801002d4:	90                   	nop
ffffffff801002d5:	90                   	nop
ffffffff801002d6:	90                   	nop
ffffffff801002d7:	90                   	nop
ffffffff801002d8:	90                   	nop
ffffffff801002d9:	90                   	nop
ffffffff801002da:	90                   	nop
ffffffff801002db:	90                   	nop
ffffffff801002dc:	90                   	nop
ffffffff801002dd:	90                   	nop
ffffffff801002de:	90                   	nop
ffffffff801002df:	90                   	nop
ffffffff801002e0:	90                   	nop
ffffffff801002e1:	90                   	nop
ffffffff801002e2:	90                   	nop
ffffffff801002e3:	90                   	nop
ffffffff801002e4:	90                   	nop
ffffffff801002e5:	90                   	nop
ffffffff801002e6:	90                   	nop
ffffffff801002e7:	90                   	nop
ffffffff801002e8:	90                   	nop
ffffffff801002e9:	90                   	nop
ffffffff801002ea:	90                   	nop
ffffffff801002eb:	90                   	nop
ffffffff801002ec:	90                   	nop
ffffffff801002ed:	90                   	nop
ffffffff801002ee:	90                   	nop
ffffffff801002ef:	90                   	nop
ffffffff801002f0:	90                   	nop
ffffffff801002f1:	90                   	nop
ffffffff801002f2:	90                   	nop
ffffffff801002f3:	90                   	nop
ffffffff801002f4:	90                   	nop
ffffffff801002f5:	90                   	nop
ffffffff801002f6:	90                   	nop
ffffffff801002f7:	90                   	nop
ffffffff801002f8:	90                   	nop
ffffffff801002f9:	90                   	nop
ffffffff801002fa:	90                   	nop
ffffffff801002fb:	90                   	nop
ffffffff801002fc:	90                   	nop
ffffffff801002fd:	90                   	nop
ffffffff801002fe:	90                   	nop
ffffffff801002ff:	90                   	nop
ffffffff80100300:	90                   	nop
ffffffff80100301:	90                   	nop
ffffffff80100302:	90                   	nop
ffffffff80100303:	90                   	nop
ffffffff80100304:	90                   	nop
ffffffff80100305:	90                   	nop
ffffffff80100306:	90                   	nop
ffffffff80100307:	90                   	nop
ffffffff80100308:	90                   	nop
ffffffff80100309:	90                   	nop
ffffffff8010030a:	90                   	nop
ffffffff8010030b:	90                   	nop
ffffffff8010030c:	90                   	nop
ffffffff8010030d:	90                   	nop
ffffffff8010030e:	90                   	nop
ffffffff8010030f:	90                   	nop
ffffffff80100310:	90                   	nop
ffffffff80100311:	90                   	nop
ffffffff80100312:	90                   	nop
ffffffff80100313:	90                   	nop
ffffffff80100314:	90                   	nop
ffffffff80100315:	90                   	nop
ffffffff80100316:	90                   	nop
ffffffff80100317:	90                   	nop
ffffffff80100318:	90                   	nop
ffffffff80100319:	90                   	nop
ffffffff8010031a:	90                   	nop
ffffffff8010031b:	90                   	nop
ffffffff8010031c:	90                   	nop
ffffffff8010031d:	90                   	nop
ffffffff8010031e:	90                   	nop
ffffffff8010031f:	90                   	nop
ffffffff80100320:	90                   	nop
ffffffff80100321:	90                   	nop
ffffffff80100322:	90                   	nop
ffffffff80100323:	90                   	nop
ffffffff80100324:	90                   	nop
ffffffff80100325:	90                   	nop
ffffffff80100326:	90                   	nop
ffffffff80100327:	90                   	nop
ffffffff80100328:	90                   	nop
ffffffff80100329:	90                   	nop
ffffffff8010032a:	90                   	nop
ffffffff8010032b:	90                   	nop
ffffffff8010032c:	90                   	nop
ffffffff8010032d:	90                   	nop
ffffffff8010032e:	90                   	nop
ffffffff8010032f:	90                   	nop
ffffffff80100330:	90                   	nop
ffffffff80100331:	90                   	nop
ffffffff80100332:	90                   	nop
ffffffff80100333:	90                   	nop
ffffffff80100334:	90                   	nop
ffffffff80100335:	90                   	nop
ffffffff80100336:	90                   	nop
ffffffff80100337:	90                   	nop
ffffffff80100338:	90                   	nop
ffffffff80100339:	90                   	nop
ffffffff8010033a:	90                   	nop
ffffffff8010033b:	90                   	nop
ffffffff8010033c:	90                   	nop
ffffffff8010033d:	90                   	nop
ffffffff8010033e:	90                   	nop
ffffffff8010033f:	90                   	nop
ffffffff80100340:	90                   	nop
ffffffff80100341:	90                   	nop
ffffffff80100342:	90                   	nop
ffffffff80100343:	90                   	nop
ffffffff80100344:	90                   	nop
ffffffff80100345:	90                   	nop
ffffffff80100346:	90                   	nop
ffffffff80100347:	90                   	nop
ffffffff80100348:	90                   	nop
ffffffff80100349:	90                   	nop
ffffffff8010034a:	90                   	nop
ffffffff8010034b:	90                   	nop
ffffffff8010034c:	90                   	nop
ffffffff8010034d:	90                   	nop
ffffffff8010034e:	90                   	nop
ffffffff8010034f:	90                   	nop
ffffffff80100350:	90                   	nop
ffffffff80100351:	90                   	nop
ffffffff80100352:	90                   	nop
ffffffff80100353:	90                   	nop
ffffffff80100354:	90                   	nop
ffffffff80100355:	90                   	nop
ffffffff80100356:	90                   	nop
ffffffff80100357:	90                   	nop
ffffffff80100358:	90                   	nop
ffffffff80100359:	90                   	nop
ffffffff8010035a:	90                   	nop
ffffffff8010035b:	90                   	nop
ffffffff8010035c:	90                   	nop
ffffffff8010035d:	90                   	nop
ffffffff8010035e:	90                   	nop
ffffffff8010035f:	90                   	nop
ffffffff80100360:	90                   	nop
ffffffff80100361:	90                   	nop
ffffffff80100362:	90                   	nop
ffffffff80100363:	90                   	nop
ffffffff80100364:	90                   	nop
ffffffff80100365:	90                   	nop
ffffffff80100366:	90                   	nop
ffffffff80100367:	90                   	nop
ffffffff80100368:	90                   	nop
ffffffff80100369:	90                   	nop
ffffffff8010036a:	90                   	nop
ffffffff8010036b:	90                   	nop
ffffffff8010036c:	90                   	nop
ffffffff8010036d:	90                   	nop
ffffffff8010036e:	90                   	nop
ffffffff8010036f:	90                   	nop
ffffffff80100370:	90                   	nop
ffffffff80100371:	90                   	nop
ffffffff80100372:	90                   	nop
ffffffff80100373:	90                   	nop
ffffffff80100374:	90                   	nop
ffffffff80100375:	90                   	nop
ffffffff80100376:	90                   	nop
ffffffff80100377:	90                   	nop
ffffffff80100378:	90                   	nop
ffffffff80100379:	90                   	nop
ffffffff8010037a:	90                   	nop
ffffffff8010037b:	90                   	nop
ffffffff8010037c:	90                   	nop
ffffffff8010037d:	90                   	nop
ffffffff8010037e:	90                   	nop
ffffffff8010037f:	90                   	nop
ffffffff80100380:	90                   	nop
ffffffff80100381:	90                   	nop
ffffffff80100382:	90                   	nop
ffffffff80100383:	90                   	nop
ffffffff80100384:	90                   	nop
ffffffff80100385:	90                   	nop
ffffffff80100386:	90                   	nop
ffffffff80100387:	90                   	nop
ffffffff80100388:	90                   	nop
ffffffff80100389:	90                   	nop
ffffffff8010038a:	90                   	nop
ffffffff8010038b:	90                   	nop
ffffffff8010038c:	90                   	nop
ffffffff8010038d:	90                   	nop
ffffffff8010038e:	90                   	nop
ffffffff8010038f:	90                   	nop
ffffffff80100390:	90                   	nop
ffffffff80100391:	90                   	nop
ffffffff80100392:	90                   	nop
ffffffff80100393:	90                   	nop
ffffffff80100394:	90                   	nop
ffffffff80100395:	90                   	nop
ffffffff80100396:	90                   	nop
ffffffff80100397:	90                   	nop
ffffffff80100398:	90                   	nop
ffffffff80100399:	90                   	nop
ffffffff8010039a:	90                   	nop
ffffffff8010039b:	90                   	nop
ffffffff8010039c:	90                   	nop
ffffffff8010039d:	90                   	nop
ffffffff8010039e:	90                   	nop
ffffffff8010039f:	90                   	nop
ffffffff801003a0:	90                   	nop
ffffffff801003a1:	90                   	nop
ffffffff801003a2:	90                   	nop
ffffffff801003a3:	90                   	nop
ffffffff801003a4:	90                   	nop
ffffffff801003a5:	90                   	nop
ffffffff801003a6:	90                   	nop
ffffffff801003a7:	90                   	nop
ffffffff801003a8:	90                   	nop
ffffffff801003a9:	90                   	nop
ffffffff801003aa:	90                   	nop
ffffffff801003ab:	90                   	nop
ffffffff801003ac:	90                   	nop
ffffffff801003ad:	90                   	nop
ffffffff801003ae:	90                   	nop
ffffffff801003af:	90                   	nop
ffffffff801003b0:	90                   	nop
ffffffff801003b1:	90                   	nop
ffffffff801003b2:	90                   	nop
ffffffff801003b3:	90                   	nop
ffffffff801003b4:	90                   	nop
ffffffff801003b5:	90                   	nop
ffffffff801003b6:	90                   	nop
ffffffff801003b7:	90                   	nop
ffffffff801003b8:	90                   	nop
ffffffff801003b9:	90                   	nop
ffffffff801003ba:	90                   	nop
ffffffff801003bb:	90                   	nop
ffffffff801003bc:	90                   	nop
ffffffff801003bd:	90                   	nop
ffffffff801003be:	90                   	nop
ffffffff801003bf:	90                   	nop
ffffffff801003c0:	90                   	nop
ffffffff801003c1:	90                   	nop
ffffffff801003c2:	90                   	nop
ffffffff801003c3:	90                   	nop
ffffffff801003c4:	90                   	nop
ffffffff801003c5:	90                   	nop
ffffffff801003c6:	90                   	nop
ffffffff801003c7:	90                   	nop
ffffffff801003c8:	90                   	nop
ffffffff801003c9:	90                   	nop
ffffffff801003ca:	90                   	nop
ffffffff801003cb:	90                   	nop
ffffffff801003cc:	90                   	nop
ffffffff801003cd:	90                   	nop
ffffffff801003ce:	90                   	nop
ffffffff801003cf:	90                   	nop
ffffffff801003d0:	90                   	nop
ffffffff801003d1:	90                   	nop
ffffffff801003d2:	90                   	nop
ffffffff801003d3:	90                   	nop
ffffffff801003d4:	90                   	nop
ffffffff801003d5:	90                   	nop
ffffffff801003d6:	90                   	nop
ffffffff801003d7:	90                   	nop
ffffffff801003d8:	90                   	nop
ffffffff801003d9:	90                   	nop
ffffffff801003da:	90                   	nop
ffffffff801003db:	90                   	nop
ffffffff801003dc:	90                   	nop
ffffffff801003dd:	90                   	nop
ffffffff801003de:	90                   	nop
ffffffff801003df:	90                   	nop
ffffffff801003e0:	90                   	nop
ffffffff801003e1:	90                   	nop
ffffffff801003e2:	90                   	nop
ffffffff801003e3:	90                   	nop
ffffffff801003e4:	90                   	nop
ffffffff801003e5:	90                   	nop
ffffffff801003e6:	90                   	nop
ffffffff801003e7:	90                   	nop
ffffffff801003e8:	90                   	nop
ffffffff801003e9:	90                   	nop
ffffffff801003ea:	90                   	nop
ffffffff801003eb:	90                   	nop
ffffffff801003ec:	90                   	nop
ffffffff801003ed:	90                   	nop
ffffffff801003ee:	90                   	nop
ffffffff801003ef:	90                   	nop
ffffffff801003f0:	90                   	nop
ffffffff801003f1:	90                   	nop
ffffffff801003f2:	90                   	nop
ffffffff801003f3:	90                   	nop
ffffffff801003f4:	90                   	nop
ffffffff801003f5:	90                   	nop
ffffffff801003f6:	90                   	nop
ffffffff801003f7:	90                   	nop
ffffffff801003f8:	90                   	nop
ffffffff801003f9:	90                   	nop
ffffffff801003fa:	90                   	nop
ffffffff801003fb:	90                   	nop
ffffffff801003fc:	90                   	nop
ffffffff801003fd:	90                   	nop
ffffffff801003fe:	90                   	nop
ffffffff801003ff:	90                   	nop
ffffffff80100400:	90                   	nop
ffffffff80100401:	90                   	nop
ffffffff80100402:	90                   	nop
ffffffff80100403:	90                   	nop
ffffffff80100404:	90                   	nop
ffffffff80100405:	90                   	nop
ffffffff80100406:	90                   	nop
ffffffff80100407:	90                   	nop
ffffffff80100408:	90                   	nop
ffffffff80100409:	90                   	nop
ffffffff8010040a:	90                   	nop
ffffffff8010040b:	90                   	nop
ffffffff8010040c:	90                   	nop
ffffffff8010040d:	90                   	nop
ffffffff8010040e:	90                   	nop
ffffffff8010040f:	90                   	nop
ffffffff80100410:	90                   	nop
ffffffff80100411:	90                   	nop
ffffffff80100412:	90                   	nop
ffffffff80100413:	90                   	nop
ffffffff80100414:	90                   	nop
ffffffff80100415:	90                   	nop
ffffffff80100416:	90                   	nop
ffffffff80100417:	90                   	nop
ffffffff80100418:	90                   	nop
ffffffff80100419:	90                   	nop
ffffffff8010041a:	90                   	nop
ffffffff8010041b:	90                   	nop
ffffffff8010041c:	90                   	nop
ffffffff8010041d:	90                   	nop
ffffffff8010041e:	90                   	nop
ffffffff8010041f:	90                   	nop
ffffffff80100420:	90                   	nop
ffffffff80100421:	90                   	nop
ffffffff80100422:	90                   	nop
ffffffff80100423:	90                   	nop
ffffffff80100424:	90                   	nop
ffffffff80100425:	90                   	nop
ffffffff80100426:	90                   	nop
ffffffff80100427:	90                   	nop
ffffffff80100428:	90                   	nop
ffffffff80100429:	90                   	nop
ffffffff8010042a:	90                   	nop
ffffffff8010042b:	90                   	nop
ffffffff8010042c:	90                   	nop
ffffffff8010042d:	90                   	nop
ffffffff8010042e:	90                   	nop
ffffffff8010042f:	90                   	nop
ffffffff80100430:	90                   	nop
ffffffff80100431:	90                   	nop
ffffffff80100432:	90                   	nop
ffffffff80100433:	90                   	nop
ffffffff80100434:	90                   	nop
ffffffff80100435:	90                   	nop
ffffffff80100436:	90                   	nop
ffffffff80100437:	90                   	nop
ffffffff80100438:	90                   	nop
ffffffff80100439:	90                   	nop
ffffffff8010043a:	90                   	nop
ffffffff8010043b:	90                   	nop
ffffffff8010043c:	90                   	nop
ffffffff8010043d:	90                   	nop
ffffffff8010043e:	90                   	nop
ffffffff8010043f:	90                   	nop
ffffffff80100440:	90                   	nop
ffffffff80100441:	90                   	nop
ffffffff80100442:	90                   	nop
ffffffff80100443:	90                   	nop
ffffffff80100444:	90                   	nop
ffffffff80100445:	90                   	nop
ffffffff80100446:	90                   	nop
ffffffff80100447:	90                   	nop
ffffffff80100448:	90                   	nop
ffffffff80100449:	90                   	nop
ffffffff8010044a:	90                   	nop
ffffffff8010044b:	90                   	nop
ffffffff8010044c:	90                   	nop
ffffffff8010044d:	90                   	nop
ffffffff8010044e:	90                   	nop
ffffffff8010044f:	90                   	nop
ffffffff80100450:	90                   	nop
ffffffff80100451:	90                   	nop
ffffffff80100452:	90                   	nop
ffffffff80100453:	90                   	nop
ffffffff80100454:	90                   	nop
ffffffff80100455:	90                   	nop
ffffffff80100456:	90                   	nop
ffffffff80100457:	90                   	nop
ffffffff80100458:	90                   	nop
ffffffff80100459:	90                   	nop
ffffffff8010045a:	90                   	nop
ffffffff8010045b:	90                   	nop
ffffffff8010045c:	90                   	nop
ffffffff8010045d:	90                   	nop
ffffffff8010045e:	90                   	nop
ffffffff8010045f:	90                   	nop
ffffffff80100460:	90                   	nop
ffffffff80100461:	90                   	nop
ffffffff80100462:	90                   	nop
ffffffff80100463:	90                   	nop
ffffffff80100464:	90                   	nop
ffffffff80100465:	90                   	nop
ffffffff80100466:	90                   	nop
ffffffff80100467:	90                   	nop
ffffffff80100468:	90                   	nop
ffffffff80100469:	90                   	nop
ffffffff8010046a:	90                   	nop
ffffffff8010046b:	90                   	nop
ffffffff8010046c:	90                   	nop
ffffffff8010046d:	90                   	nop
ffffffff8010046e:	90                   	nop
ffffffff8010046f:	90                   	nop
ffffffff80100470:	90                   	nop
ffffffff80100471:	90                   	nop
ffffffff80100472:	90                   	nop
ffffffff80100473:	90                   	nop
ffffffff80100474:	90                   	nop
ffffffff80100475:	90                   	nop
ffffffff80100476:	90                   	nop
ffffffff80100477:	90                   	nop
ffffffff80100478:	90                   	nop
ffffffff80100479:	90                   	nop
ffffffff8010047a:	90                   	nop
ffffffff8010047b:	90                   	nop
ffffffff8010047c:	90                   	nop
ffffffff8010047d:	90                   	nop
ffffffff8010047e:	90                   	nop
ffffffff8010047f:	90                   	nop
ffffffff80100480:	90                   	nop
ffffffff80100481:	90                   	nop
ffffffff80100482:	90                   	nop
ffffffff80100483:	90                   	nop
ffffffff80100484:	90                   	nop
ffffffff80100485:	90                   	nop
ffffffff80100486:	90                   	nop
ffffffff80100487:	90                   	nop
ffffffff80100488:	90                   	nop
ffffffff80100489:	90                   	nop
ffffffff8010048a:	90                   	nop
ffffffff8010048b:	90                   	nop
ffffffff8010048c:	90                   	nop
ffffffff8010048d:	90                   	nop
ffffffff8010048e:	90                   	nop
ffffffff8010048f:	90                   	nop
ffffffff80100490:	90                   	nop
ffffffff80100491:	90                   	nop
ffffffff80100492:	90                   	nop
ffffffff80100493:	90                   	nop
ffffffff80100494:	90                   	nop
ffffffff80100495:	90                   	nop
ffffffff80100496:	90                   	nop
ffffffff80100497:	90                   	nop
ffffffff80100498:	90                   	nop
ffffffff80100499:	90                   	nop
ffffffff8010049a:	90                   	nop
ffffffff8010049b:	90                   	nop
ffffffff8010049c:	90                   	nop
ffffffff8010049d:	90                   	nop
ffffffff8010049e:	90                   	nop
ffffffff8010049f:	90                   	nop
ffffffff801004a0:	90                   	nop
ffffffff801004a1:	90                   	nop
ffffffff801004a2:	90                   	nop
ffffffff801004a3:	90                   	nop
ffffffff801004a4:	90                   	nop
ffffffff801004a5:	90                   	nop
ffffffff801004a6:	90                   	nop
ffffffff801004a7:	90                   	nop
ffffffff801004a8:	90                   	nop
ffffffff801004a9:	90                   	nop
ffffffff801004aa:	90                   	nop
ffffffff801004ab:	90                   	nop
ffffffff801004ac:	90                   	nop
ffffffff801004ad:	90                   	nop
ffffffff801004ae:	90                   	nop
ffffffff801004af:	90                   	nop
ffffffff801004b0:	90                   	nop
ffffffff801004b1:	90                   	nop
ffffffff801004b2:	90                   	nop
ffffffff801004b3:	90                   	nop
ffffffff801004b4:	90                   	nop
ffffffff801004b5:	90                   	nop
ffffffff801004b6:	90                   	nop
ffffffff801004b7:	90                   	nop
ffffffff801004b8:	90                   	nop
ffffffff801004b9:	90                   	nop
ffffffff801004ba:	90                   	nop
ffffffff801004bb:	90                   	nop
ffffffff801004bc:	90                   	nop
ffffffff801004bd:	90                   	nop
ffffffff801004be:	90                   	nop
ffffffff801004bf:	90                   	nop
ffffffff801004c0:	90                   	nop
ffffffff801004c1:	90                   	nop
ffffffff801004c2:	90                   	nop
ffffffff801004c3:	90                   	nop
ffffffff801004c4:	90                   	nop
ffffffff801004c5:	90                   	nop
ffffffff801004c6:	90                   	nop
ffffffff801004c7:	90                   	nop
ffffffff801004c8:	90                   	nop
ffffffff801004c9:	90                   	nop
ffffffff801004ca:	90                   	nop
ffffffff801004cb:	90                   	nop
ffffffff801004cc:	90                   	nop
ffffffff801004cd:	90                   	nop
ffffffff801004ce:	90                   	nop
ffffffff801004cf:	90                   	nop
ffffffff801004d0:	90                   	nop
ffffffff801004d1:	90                   	nop
ffffffff801004d2:	90                   	nop
ffffffff801004d3:	90                   	nop
ffffffff801004d4:	90                   	nop
ffffffff801004d5:	90                   	nop
ffffffff801004d6:	90                   	nop
ffffffff801004d7:	90                   	nop
ffffffff801004d8:	90                   	nop
ffffffff801004d9:	90                   	nop
ffffffff801004da:	90                   	nop
ffffffff801004db:	90                   	nop
ffffffff801004dc:	90                   	nop
ffffffff801004dd:	90                   	nop
ffffffff801004de:	90                   	nop
ffffffff801004df:	90                   	nop
ffffffff801004e0:	90                   	nop
ffffffff801004e1:	90                   	nop
ffffffff801004e2:	90                   	nop
ffffffff801004e3:	90                   	nop
ffffffff801004e4:	90                   	nop
ffffffff801004e5:	90                   	nop
ffffffff801004e6:	90                   	nop
ffffffff801004e7:	90                   	nop
ffffffff801004e8:	90                   	nop
ffffffff801004e9:	90                   	nop
ffffffff801004ea:	90                   	nop
ffffffff801004eb:	90                   	nop
ffffffff801004ec:	90                   	nop
ffffffff801004ed:	90                   	nop
ffffffff801004ee:	90                   	nop
ffffffff801004ef:	90                   	nop
ffffffff801004f0:	90                   	nop
ffffffff801004f1:	90                   	nop
ffffffff801004f2:	90                   	nop
ffffffff801004f3:	90                   	nop
ffffffff801004f4:	90                   	nop
ffffffff801004f5:	90                   	nop
ffffffff801004f6:	90                   	nop
ffffffff801004f7:	90                   	nop
ffffffff801004f8:	90                   	nop
ffffffff801004f9:	90                   	nop
ffffffff801004fa:	90                   	nop
ffffffff801004fb:	90                   	nop
ffffffff801004fc:	90                   	nop
ffffffff801004fd:	90                   	nop
ffffffff801004fe:	90                   	nop
ffffffff801004ff:	90                   	nop
ffffffff80100500:	90                   	nop
ffffffff80100501:	90                   	nop
ffffffff80100502:	90                   	nop
ffffffff80100503:	90                   	nop
ffffffff80100504:	90                   	nop
ffffffff80100505:	90                   	nop
ffffffff80100506:	90                   	nop
ffffffff80100507:	90                   	nop
ffffffff80100508:	90                   	nop
ffffffff80100509:	90                   	nop
ffffffff8010050a:	90                   	nop
ffffffff8010050b:	90                   	nop
ffffffff8010050c:	90                   	nop
ffffffff8010050d:	90                   	nop
ffffffff8010050e:	90                   	nop
ffffffff8010050f:	90                   	nop
ffffffff80100510:	90                   	nop
ffffffff80100511:	90                   	nop
ffffffff80100512:	90                   	nop
ffffffff80100513:	90                   	nop
ffffffff80100514:	90                   	nop
ffffffff80100515:	90                   	nop
ffffffff80100516:	90                   	nop
ffffffff80100517:	90                   	nop
ffffffff80100518:	90                   	nop
ffffffff80100519:	90                   	nop
ffffffff8010051a:	90                   	nop
ffffffff8010051b:	90                   	nop
ffffffff8010051c:	90                   	nop
ffffffff8010051d:	90                   	nop
ffffffff8010051e:	90                   	nop
ffffffff8010051f:	90                   	nop
ffffffff80100520:	90                   	nop
ffffffff80100521:	90                   	nop
ffffffff80100522:	90                   	nop
ffffffff80100523:	90                   	nop
ffffffff80100524:	90                   	nop
ffffffff80100525:	90                   	nop
ffffffff80100526:	90                   	nop
ffffffff80100527:	90                   	nop
ffffffff80100528:	90                   	nop
ffffffff80100529:	90                   	nop
ffffffff8010052a:	90                   	nop
ffffffff8010052b:	90                   	nop
ffffffff8010052c:	90                   	nop
ffffffff8010052d:	90                   	nop
ffffffff8010052e:	90                   	nop
ffffffff8010052f:	90                   	nop
ffffffff80100530:	90                   	nop
ffffffff80100531:	90                   	nop
ffffffff80100532:	90                   	nop
ffffffff80100533:	90                   	nop
ffffffff80100534:	90                   	nop
ffffffff80100535:	90                   	nop
ffffffff80100536:	90                   	nop
ffffffff80100537:	90                   	nop
ffffffff80100538:	90                   	nop
ffffffff80100539:	90                   	nop
ffffffff8010053a:	90                   	nop
ffffffff8010053b:	90                   	nop
ffffffff8010053c:	90                   	nop
ffffffff8010053d:	90                   	nop
ffffffff8010053e:	90                   	nop
ffffffff8010053f:	90                   	nop
ffffffff80100540:	90                   	nop
ffffffff80100541:	90                   	nop
ffffffff80100542:	90                   	nop
ffffffff80100543:	90                   	nop
ffffffff80100544:	90                   	nop
ffffffff80100545:	90                   	nop
ffffffff80100546:	90                   	nop
ffffffff80100547:	90                   	nop
ffffffff80100548:	90                   	nop
ffffffff80100549:	90                   	nop
ffffffff8010054a:	90                   	nop
ffffffff8010054b:	90                   	nop
ffffffff8010054c:	90                   	nop
ffffffff8010054d:	90                   	nop
ffffffff8010054e:	90                   	nop
ffffffff8010054f:	90                   	nop
ffffffff80100550:	90                   	nop
ffffffff80100551:	90                   	nop
ffffffff80100552:	90                   	nop
ffffffff80100553:	90                   	nop
ffffffff80100554:	90                   	nop
ffffffff80100555:	90                   	nop
ffffffff80100556:	90                   	nop
ffffffff80100557:	90                   	nop
ffffffff80100558:	90                   	nop
ffffffff80100559:	90                   	nop
ffffffff8010055a:	90                   	nop
ffffffff8010055b:	90                   	nop
ffffffff8010055c:	90                   	nop
ffffffff8010055d:	90                   	nop
ffffffff8010055e:	90                   	nop
ffffffff8010055f:	90                   	nop
ffffffff80100560:	90                   	nop
ffffffff80100561:	90                   	nop
ffffffff80100562:	90                   	nop
ffffffff80100563:	90                   	nop
ffffffff80100564:	90                   	nop
ffffffff80100565:	90                   	nop
ffffffff80100566:	90                   	nop
ffffffff80100567:	90                   	nop
ffffffff80100568:	90                   	nop
ffffffff80100569:	90                   	nop
ffffffff8010056a:	90                   	nop
ffffffff8010056b:	90                   	nop
ffffffff8010056c:	90                   	nop
ffffffff8010056d:	90                   	nop
ffffffff8010056e:	90                   	nop
ffffffff8010056f:	90                   	nop
ffffffff80100570:	90                   	nop
ffffffff80100571:	90                   	nop
ffffffff80100572:	90                   	nop
ffffffff80100573:	90                   	nop
ffffffff80100574:	90                   	nop
ffffffff80100575:	90                   	nop
ffffffff80100576:	90                   	nop
ffffffff80100577:	90                   	nop
ffffffff80100578:	90                   	nop
ffffffff80100579:	90                   	nop
ffffffff8010057a:	90                   	nop
ffffffff8010057b:	90                   	nop
ffffffff8010057c:	90                   	nop
ffffffff8010057d:	90                   	nop
ffffffff8010057e:	90                   	nop
ffffffff8010057f:	90                   	nop
ffffffff80100580:	90                   	nop
ffffffff80100581:	90                   	nop
ffffffff80100582:	90                   	nop
ffffffff80100583:	90                   	nop
ffffffff80100584:	90                   	nop
ffffffff80100585:	90                   	nop
ffffffff80100586:	90                   	nop
ffffffff80100587:	90                   	nop
ffffffff80100588:	90                   	nop
ffffffff80100589:	90                   	nop
ffffffff8010058a:	90                   	nop
ffffffff8010058b:	90                   	nop
ffffffff8010058c:	90                   	nop
ffffffff8010058d:	90                   	nop
ffffffff8010058e:	90                   	nop
ffffffff8010058f:	90                   	nop
ffffffff80100590:	90                   	nop
ffffffff80100591:	90                   	nop
ffffffff80100592:	90                   	nop
ffffffff80100593:	90                   	nop
ffffffff80100594:	90                   	nop
ffffffff80100595:	90                   	nop
ffffffff80100596:	90                   	nop
ffffffff80100597:	90                   	nop
ffffffff80100598:	90                   	nop
ffffffff80100599:	90                   	nop
ffffffff8010059a:	90                   	nop
ffffffff8010059b:	90                   	nop
ffffffff8010059c:	90                   	nop
ffffffff8010059d:	90                   	nop
ffffffff8010059e:	90                   	nop
ffffffff8010059f:	90                   	nop
ffffffff801005a0:	90                   	nop
ffffffff801005a1:	90                   	nop
ffffffff801005a2:	90                   	nop
ffffffff801005a3:	90                   	nop
ffffffff801005a4:	90                   	nop
ffffffff801005a5:	90                   	nop
ffffffff801005a6:	90                   	nop
ffffffff801005a7:	90                   	nop
ffffffff801005a8:	90                   	nop
ffffffff801005a9:	90                   	nop
ffffffff801005aa:	90                   	nop
ffffffff801005ab:	90                   	nop
ffffffff801005ac:	90                   	nop
ffffffff801005ad:	90                   	nop
ffffffff801005ae:	90                   	nop
ffffffff801005af:	90                   	nop
ffffffff801005b0:	90                   	nop
ffffffff801005b1:	90                   	nop
ffffffff801005b2:	90                   	nop
ffffffff801005b3:	90                   	nop
ffffffff801005b4:	90                   	nop
ffffffff801005b5:	90                   	nop
ffffffff801005b6:	90                   	nop
ffffffff801005b7:	90                   	nop
ffffffff801005b8:	90                   	nop
ffffffff801005b9:	90                   	nop
ffffffff801005ba:	90                   	nop
ffffffff801005bb:	90                   	nop
ffffffff801005bc:	90                   	nop
ffffffff801005bd:	90                   	nop
ffffffff801005be:	90                   	nop
ffffffff801005bf:	90                   	nop
ffffffff801005c0:	90                   	nop
ffffffff801005c1:	90                   	nop
ffffffff801005c2:	90                   	nop
ffffffff801005c3:	90                   	nop
ffffffff801005c4:	90                   	nop
ffffffff801005c5:	90                   	nop
ffffffff801005c6:	90                   	nop
ffffffff801005c7:	90                   	nop
ffffffff801005c8:	90                   	nop
ffffffff801005c9:	90                   	nop
ffffffff801005ca:	90                   	nop
ffffffff801005cb:	90                   	nop
ffffffff801005cc:	90                   	nop
ffffffff801005cd:	90                   	nop
ffffffff801005ce:	90                   	nop
ffffffff801005cf:	90                   	nop
ffffffff801005d0:	90                   	nop
ffffffff801005d1:	90                   	nop
ffffffff801005d2:	90                   	nop
ffffffff801005d3:	90                   	nop
ffffffff801005d4:	90                   	nop
ffffffff801005d5:	90                   	nop
ffffffff801005d6:	90                   	nop
ffffffff801005d7:	90                   	nop
ffffffff801005d8:	90                   	nop
ffffffff801005d9:	90                   	nop
ffffffff801005da:	90                   	nop
ffffffff801005db:	90                   	nop
ffffffff801005dc:	90                   	nop
ffffffff801005dd:	90                   	nop
ffffffff801005de:	90                   	nop
ffffffff801005df:	90                   	nop
ffffffff801005e0:	90                   	nop
ffffffff801005e1:	90                   	nop
ffffffff801005e2:	90                   	nop
ffffffff801005e3:	90                   	nop
ffffffff801005e4:	90                   	nop
ffffffff801005e5:	90                   	nop
ffffffff801005e6:	90                   	nop
ffffffff801005e7:	90                   	nop
ffffffff801005e8:	90                   	nop
ffffffff801005e9:	90                   	nop
ffffffff801005ea:	90                   	nop
ffffffff801005eb:	90                   	nop
ffffffff801005ec:	90                   	nop
ffffffff801005ed:	90                   	nop
ffffffff801005ee:	90                   	nop
ffffffff801005ef:	90                   	nop
ffffffff801005f0:	90                   	nop
ffffffff801005f1:	90                   	nop
ffffffff801005f2:	90                   	nop
ffffffff801005f3:	90                   	nop
ffffffff801005f4:	90                   	nop
ffffffff801005f5:	90                   	nop
ffffffff801005f6:	90                   	nop
ffffffff801005f7:	90                   	nop
ffffffff801005f8:	90                   	nop
ffffffff801005f9:	90                   	nop
ffffffff801005fa:	90                   	nop
ffffffff801005fb:	90                   	nop
ffffffff801005fc:	90                   	nop
ffffffff801005fd:	90                   	nop
ffffffff801005fe:	90                   	nop
ffffffff801005ff:	90                   	nop
ffffffff80100600:	90                   	nop
ffffffff80100601:	90                   	nop
ffffffff80100602:	90                   	nop
ffffffff80100603:	90                   	nop
ffffffff80100604:	90                   	nop
ffffffff80100605:	90                   	nop
ffffffff80100606:	90                   	nop
ffffffff80100607:	90                   	nop
ffffffff80100608:	90                   	nop
ffffffff80100609:	90                   	nop
ffffffff8010060a:	90                   	nop
ffffffff8010060b:	90                   	nop
ffffffff8010060c:	90                   	nop
ffffffff8010060d:	90                   	nop
ffffffff8010060e:	90                   	nop
ffffffff8010060f:	90                   	nop
ffffffff80100610:	90                   	nop
ffffffff80100611:	90                   	nop
ffffffff80100612:	90                   	nop
ffffffff80100613:	90                   	nop
ffffffff80100614:	90                   	nop
ffffffff80100615:	90                   	nop
ffffffff80100616:	90                   	nop
ffffffff80100617:	90                   	nop
ffffffff80100618:	90                   	nop
ffffffff80100619:	90                   	nop
ffffffff8010061a:	90                   	nop
ffffffff8010061b:	90                   	nop
ffffffff8010061c:	90                   	nop
ffffffff8010061d:	90                   	nop
ffffffff8010061e:	90                   	nop
ffffffff8010061f:	90                   	nop
ffffffff80100620:	90                   	nop
ffffffff80100621:	90                   	nop
ffffffff80100622:	90                   	nop
ffffffff80100623:	90                   	nop
ffffffff80100624:	90                   	nop
ffffffff80100625:	90                   	nop
ffffffff80100626:	90                   	nop
ffffffff80100627:	90                   	nop
ffffffff80100628:	90                   	nop
ffffffff80100629:	90                   	nop
ffffffff8010062a:	90                   	nop
ffffffff8010062b:	90                   	nop
ffffffff8010062c:	90                   	nop
ffffffff8010062d:	90                   	nop
ffffffff8010062e:	90                   	nop
ffffffff8010062f:	90                   	nop
ffffffff80100630:	90                   	nop
ffffffff80100631:	90                   	nop
ffffffff80100632:	90                   	nop
ffffffff80100633:	90                   	nop
ffffffff80100634:	90                   	nop
ffffffff80100635:	90                   	nop
ffffffff80100636:	90                   	nop
ffffffff80100637:	90                   	nop
ffffffff80100638:	90                   	nop
ffffffff80100639:	90                   	nop
ffffffff8010063a:	90                   	nop
ffffffff8010063b:	90                   	nop
ffffffff8010063c:	90                   	nop
ffffffff8010063d:	90                   	nop
ffffffff8010063e:	90                   	nop
ffffffff8010063f:	90                   	nop
ffffffff80100640:	90                   	nop
ffffffff80100641:	90                   	nop
ffffffff80100642:	90                   	nop
ffffffff80100643:	90                   	nop
ffffffff80100644:	90                   	nop
ffffffff80100645:	90                   	nop
ffffffff80100646:	90                   	nop
ffffffff80100647:	90                   	nop
ffffffff80100648:	90                   	nop
ffffffff80100649:	90                   	nop
ffffffff8010064a:	90                   	nop
ffffffff8010064b:	90                   	nop
ffffffff8010064c:	90                   	nop
ffffffff8010064d:	90                   	nop
ffffffff8010064e:	90                   	nop
ffffffff8010064f:	90                   	nop
ffffffff80100650:	90                   	nop
ffffffff80100651:	90                   	nop
ffffffff80100652:	90                   	nop
ffffffff80100653:	90                   	nop
ffffffff80100654:	90                   	nop
ffffffff80100655:	90                   	nop
ffffffff80100656:	90                   	nop
ffffffff80100657:	90                   	nop
ffffffff80100658:	90                   	nop
ffffffff80100659:	90                   	nop
ffffffff8010065a:	90                   	nop
ffffffff8010065b:	90                   	nop
ffffffff8010065c:	90                   	nop
ffffffff8010065d:	90                   	nop
ffffffff8010065e:	90                   	nop
ffffffff8010065f:	90                   	nop
ffffffff80100660:	90                   	nop
ffffffff80100661:	90                   	nop
ffffffff80100662:	90                   	nop
ffffffff80100663:	90                   	nop
ffffffff80100664:	90                   	nop
ffffffff80100665:	90                   	nop
ffffffff80100666:	90                   	nop
ffffffff80100667:	90                   	nop
ffffffff80100668:	90                   	nop
ffffffff80100669:	90                   	nop
ffffffff8010066a:	90                   	nop
ffffffff8010066b:	90                   	nop
ffffffff8010066c:	90                   	nop
ffffffff8010066d:	90                   	nop
ffffffff8010066e:	90                   	nop
ffffffff8010066f:	90                   	nop
ffffffff80100670:	90                   	nop
ffffffff80100671:	90                   	nop
ffffffff80100672:	90                   	nop
ffffffff80100673:	90                   	nop
ffffffff80100674:	90                   	nop
ffffffff80100675:	90                   	nop
ffffffff80100676:	90                   	nop
ffffffff80100677:	90                   	nop
ffffffff80100678:	90                   	nop
ffffffff80100679:	90                   	nop
ffffffff8010067a:	90                   	nop
ffffffff8010067b:	90                   	nop
ffffffff8010067c:	90                   	nop
ffffffff8010067d:	90                   	nop
ffffffff8010067e:	90                   	nop
ffffffff8010067f:	90                   	nop
ffffffff80100680:	90                   	nop
ffffffff80100681:	90                   	nop
ffffffff80100682:	90                   	nop
ffffffff80100683:	90                   	nop
ffffffff80100684:	90                   	nop
ffffffff80100685:	90                   	nop
ffffffff80100686:	90                   	nop
ffffffff80100687:	90                   	nop
ffffffff80100688:	90                   	nop
ffffffff80100689:	90                   	nop
ffffffff8010068a:	90                   	nop
ffffffff8010068b:	90                   	nop
ffffffff8010068c:	90                   	nop
ffffffff8010068d:	90                   	nop
ffffffff8010068e:	90                   	nop
ffffffff8010068f:	90                   	nop
ffffffff80100690:	90                   	nop
ffffffff80100691:	90                   	nop
ffffffff80100692:	90                   	nop
ffffffff80100693:	90                   	nop
ffffffff80100694:	90                   	nop
ffffffff80100695:	90                   	nop
ffffffff80100696:	90                   	nop
ffffffff80100697:	90                   	nop
ffffffff80100698:	90                   	nop
ffffffff80100699:	90                   	nop
ffffffff8010069a:	90                   	nop
ffffffff8010069b:	90                   	nop
ffffffff8010069c:	90                   	nop
ffffffff8010069d:	90                   	nop
ffffffff8010069e:	90                   	nop
ffffffff8010069f:	90                   	nop
ffffffff801006a0:	90                   	nop
ffffffff801006a1:	90                   	nop
ffffffff801006a2:	90                   	nop
ffffffff801006a3:	90                   	nop
ffffffff801006a4:	90                   	nop
ffffffff801006a5:	90                   	nop
ffffffff801006a6:	90                   	nop
ffffffff801006a7:	90                   	nop
ffffffff801006a8:	90                   	nop
ffffffff801006a9:	90                   	nop
ffffffff801006aa:	90                   	nop
ffffffff801006ab:	90                   	nop
ffffffff801006ac:	90                   	nop
ffffffff801006ad:	90                   	nop
ffffffff801006ae:	90                   	nop
ffffffff801006af:	90                   	nop
ffffffff801006b0:	90                   	nop
ffffffff801006b1:	90                   	nop
ffffffff801006b2:	90                   	nop
ffffffff801006b3:	90                   	nop
ffffffff801006b4:	90                   	nop
ffffffff801006b5:	90                   	nop
ffffffff801006b6:	90                   	nop
ffffffff801006b7:	90                   	nop
ffffffff801006b8:	90                   	nop
ffffffff801006b9:	90                   	nop
ffffffff801006ba:	90                   	nop
ffffffff801006bb:	90                   	nop
ffffffff801006bc:	90                   	nop
ffffffff801006bd:	90                   	nop
ffffffff801006be:	90                   	nop
ffffffff801006bf:	90                   	nop
ffffffff801006c0:	90                   	nop
ffffffff801006c1:	90                   	nop
ffffffff801006c2:	90                   	nop
ffffffff801006c3:	90                   	nop
ffffffff801006c4:	90                   	nop
ffffffff801006c5:	90                   	nop
ffffffff801006c6:	90                   	nop
ffffffff801006c7:	90                   	nop
ffffffff801006c8:	90                   	nop
ffffffff801006c9:	90                   	nop
ffffffff801006ca:	90                   	nop
ffffffff801006cb:	90                   	nop
ffffffff801006cc:	90                   	nop
ffffffff801006cd:	90                   	nop
ffffffff801006ce:	90                   	nop
ffffffff801006cf:	90                   	nop
ffffffff801006d0:	90                   	nop
ffffffff801006d1:	90                   	nop
ffffffff801006d2:	90                   	nop
ffffffff801006d3:	90                   	nop
ffffffff801006d4:	90                   	nop
ffffffff801006d5:	90                   	nop
ffffffff801006d6:	90                   	nop
ffffffff801006d7:	90                   	nop
ffffffff801006d8:	90                   	nop
ffffffff801006d9:	90                   	nop
ffffffff801006da:	90                   	nop
ffffffff801006db:	90                   	nop
ffffffff801006dc:	90                   	nop
ffffffff801006dd:	90                   	nop
ffffffff801006de:	90                   	nop
ffffffff801006df:	90                   	nop
ffffffff801006e0:	90                   	nop
ffffffff801006e1:	90                   	nop
ffffffff801006e2:	90                   	nop
ffffffff801006e3:	90                   	nop
ffffffff801006e4:	90                   	nop
ffffffff801006e5:	90                   	nop
ffffffff801006e6:	90                   	nop
ffffffff801006e7:	90                   	nop
ffffffff801006e8:	90                   	nop
ffffffff801006e9:	90                   	nop
ffffffff801006ea:	90                   	nop
ffffffff801006eb:	90                   	nop
ffffffff801006ec:	90                   	nop
ffffffff801006ed:	90                   	nop
ffffffff801006ee:	90                   	nop
ffffffff801006ef:	90                   	nop
ffffffff801006f0:	90                   	nop
ffffffff801006f1:	90                   	nop
ffffffff801006f2:	90                   	nop
ffffffff801006f3:	90                   	nop
ffffffff801006f4:	90                   	nop
ffffffff801006f5:	90                   	nop
ffffffff801006f6:	90                   	nop
ffffffff801006f7:	90                   	nop
ffffffff801006f8:	90                   	nop
ffffffff801006f9:	90                   	nop
ffffffff801006fa:	90                   	nop
ffffffff801006fb:	90                   	nop
ffffffff801006fc:	90                   	nop
ffffffff801006fd:	90                   	nop
ffffffff801006fe:	90                   	nop
ffffffff801006ff:	90                   	nop
ffffffff80100700:	90                   	nop
ffffffff80100701:	90                   	nop
ffffffff80100702:	90                   	nop
ffffffff80100703:	90                   	nop
ffffffff80100704:	90                   	nop
ffffffff80100705:	90                   	nop
ffffffff80100706:	90                   	nop
ffffffff80100707:	90                   	nop
ffffffff80100708:	90                   	nop
ffffffff80100709:	90                   	nop
ffffffff8010070a:	90                   	nop
ffffffff8010070b:	90                   	nop
ffffffff8010070c:	90                   	nop
ffffffff8010070d:	90                   	nop
ffffffff8010070e:	90                   	nop
ffffffff8010070f:	90                   	nop
ffffffff80100710:	90                   	nop
ffffffff80100711:	90                   	nop
ffffffff80100712:	90                   	nop
ffffffff80100713:	90                   	nop
ffffffff80100714:	90                   	nop
ffffffff80100715:	90                   	nop
ffffffff80100716:	90                   	nop
ffffffff80100717:	90                   	nop
ffffffff80100718:	90                   	nop
ffffffff80100719:	90                   	nop
ffffffff8010071a:	90                   	nop
ffffffff8010071b:	90                   	nop
ffffffff8010071c:	90                   	nop
ffffffff8010071d:	90                   	nop
ffffffff8010071e:	90                   	nop
ffffffff8010071f:	90                   	nop
ffffffff80100720:	90                   	nop
ffffffff80100721:	90                   	nop
ffffffff80100722:	90                   	nop
ffffffff80100723:	90                   	nop
ffffffff80100724:	90                   	nop
ffffffff80100725:	90                   	nop
ffffffff80100726:	90                   	nop
ffffffff80100727:	90                   	nop
ffffffff80100728:	90                   	nop
ffffffff80100729:	90                   	nop
ffffffff8010072a:	90                   	nop
ffffffff8010072b:	90                   	nop
ffffffff8010072c:	90                   	nop
ffffffff8010072d:	90                   	nop
ffffffff8010072e:	90                   	nop
ffffffff8010072f:	90                   	nop
ffffffff80100730:	90                   	nop
ffffffff80100731:	90                   	nop
ffffffff80100732:	90                   	nop
ffffffff80100733:	90                   	nop
ffffffff80100734:	90                   	nop
ffffffff80100735:	90                   	nop
ffffffff80100736:	90                   	nop
ffffffff80100737:	90                   	nop
ffffffff80100738:	90                   	nop
ffffffff80100739:	90                   	nop
ffffffff8010073a:	90                   	nop
ffffffff8010073b:	90                   	nop
ffffffff8010073c:	90                   	nop
ffffffff8010073d:	90                   	nop
ffffffff8010073e:	90                   	nop
ffffffff8010073f:	90                   	nop
ffffffff80100740:	90                   	nop
ffffffff80100741:	90                   	nop
ffffffff80100742:	90                   	nop
ffffffff80100743:	90                   	nop
ffffffff80100744:	90                   	nop
ffffffff80100745:	90                   	nop
ffffffff80100746:	90                   	nop
ffffffff80100747:	90                   	nop
ffffffff80100748:	90                   	nop
ffffffff80100749:	90                   	nop
ffffffff8010074a:	90                   	nop
ffffffff8010074b:	90                   	nop
ffffffff8010074c:	90                   	nop
ffffffff8010074d:	90                   	nop
ffffffff8010074e:	90                   	nop
ffffffff8010074f:	90                   	nop
ffffffff80100750:	90                   	nop
ffffffff80100751:	90                   	nop
ffffffff80100752:	90                   	nop
ffffffff80100753:	90                   	nop
ffffffff80100754:	90                   	nop
ffffffff80100755:	90                   	nop
ffffffff80100756:	90                   	nop
ffffffff80100757:	90                   	nop
ffffffff80100758:	90                   	nop
ffffffff80100759:	90                   	nop
ffffffff8010075a:	90                   	nop
ffffffff8010075b:	90                   	nop
ffffffff8010075c:	90                   	nop
ffffffff8010075d:	90                   	nop
ffffffff8010075e:	90                   	nop
ffffffff8010075f:	90                   	nop
ffffffff80100760:	90                   	nop
ffffffff80100761:	90                   	nop
ffffffff80100762:	90                   	nop
ffffffff80100763:	90                   	nop
ffffffff80100764:	90                   	nop
ffffffff80100765:	90                   	nop
ffffffff80100766:	90                   	nop
ffffffff80100767:	90                   	nop
ffffffff80100768:	90                   	nop
ffffffff80100769:	90                   	nop
ffffffff8010076a:	90                   	nop
ffffffff8010076b:	90                   	nop
ffffffff8010076c:	90                   	nop
ffffffff8010076d:	90                   	nop
ffffffff8010076e:	90                   	nop
ffffffff8010076f:	90                   	nop
ffffffff80100770:	90                   	nop
ffffffff80100771:	90                   	nop
ffffffff80100772:	90                   	nop
ffffffff80100773:	90                   	nop
ffffffff80100774:	90                   	nop
ffffffff80100775:	90                   	nop
ffffffff80100776:	90                   	nop
ffffffff80100777:	90                   	nop
ffffffff80100778:	90                   	nop
ffffffff80100779:	90                   	nop
ffffffff8010077a:	90                   	nop
ffffffff8010077b:	90                   	nop
ffffffff8010077c:	90                   	nop
ffffffff8010077d:	90                   	nop
ffffffff8010077e:	90                   	nop
ffffffff8010077f:	90                   	nop
ffffffff80100780:	90                   	nop
ffffffff80100781:	90                   	nop
ffffffff80100782:	90                   	nop
ffffffff80100783:	90                   	nop
ffffffff80100784:	90                   	nop
ffffffff80100785:	90                   	nop
ffffffff80100786:	90                   	nop
ffffffff80100787:	90                   	nop
ffffffff80100788:	90                   	nop
ffffffff80100789:	90                   	nop
ffffffff8010078a:	90                   	nop
ffffffff8010078b:	90                   	nop
ffffffff8010078c:	90                   	nop
ffffffff8010078d:	90                   	nop
ffffffff8010078e:	90                   	nop
ffffffff8010078f:	90                   	nop
ffffffff80100790:	90                   	nop
ffffffff80100791:	90                   	nop
ffffffff80100792:	90                   	nop
ffffffff80100793:	90                   	nop
ffffffff80100794:	90                   	nop
ffffffff80100795:	90                   	nop
ffffffff80100796:	90                   	nop
ffffffff80100797:	90                   	nop
ffffffff80100798:	90                   	nop
ffffffff80100799:	90                   	nop
ffffffff8010079a:	90                   	nop
ffffffff8010079b:	90                   	nop
ffffffff8010079c:	90                   	nop
ffffffff8010079d:	90                   	nop
ffffffff8010079e:	90                   	nop
ffffffff8010079f:	90                   	nop
ffffffff801007a0:	90                   	nop
ffffffff801007a1:	90                   	nop
ffffffff801007a2:	90                   	nop
ffffffff801007a3:	90                   	nop
ffffffff801007a4:	90                   	nop
ffffffff801007a5:	90                   	nop
ffffffff801007a6:	90                   	nop
ffffffff801007a7:	90                   	nop
ffffffff801007a8:	90                   	nop
ffffffff801007a9:	90                   	nop
ffffffff801007aa:	90                   	nop
ffffffff801007ab:	90                   	nop
ffffffff801007ac:	90                   	nop
ffffffff801007ad:	90                   	nop
ffffffff801007ae:	90                   	nop
ffffffff801007af:	90                   	nop
ffffffff801007b0:	90                   	nop
ffffffff801007b1:	90                   	nop
ffffffff801007b2:	90                   	nop
ffffffff801007b3:	90                   	nop
ffffffff801007b4:	90                   	nop
ffffffff801007b5:	90                   	nop
ffffffff801007b6:	90                   	nop
ffffffff801007b7:	90                   	nop
ffffffff801007b8:	90                   	nop
ffffffff801007b9:	90                   	nop
ffffffff801007ba:	90                   	nop
ffffffff801007bb:	90                   	nop
ffffffff801007bc:	90                   	nop
ffffffff801007bd:	90                   	nop
ffffffff801007be:	90                   	nop
ffffffff801007bf:	90                   	nop
ffffffff801007c0:	90                   	nop
ffffffff801007c1:	90                   	nop
ffffffff801007c2:	90                   	nop
ffffffff801007c3:	90                   	nop
ffffffff801007c4:	90                   	nop
ffffffff801007c5:	90                   	nop
ffffffff801007c6:	90                   	nop
ffffffff801007c7:	90                   	nop
ffffffff801007c8:	90                   	nop
ffffffff801007c9:	90                   	nop
ffffffff801007ca:	90                   	nop
ffffffff801007cb:	90                   	nop
ffffffff801007cc:	90                   	nop
ffffffff801007cd:	90                   	nop
ffffffff801007ce:	90                   	nop
ffffffff801007cf:	90                   	nop
ffffffff801007d0:	90                   	nop
ffffffff801007d1:	90                   	nop
ffffffff801007d2:	90                   	nop
ffffffff801007d3:	90                   	nop
ffffffff801007d4:	90                   	nop
ffffffff801007d5:	90                   	nop
ffffffff801007d6:	90                   	nop
ffffffff801007d7:	90                   	nop
ffffffff801007d8:	90                   	nop
ffffffff801007d9:	90                   	nop
ffffffff801007da:	90                   	nop
ffffffff801007db:	90                   	nop
ffffffff801007dc:	90                   	nop
ffffffff801007dd:	90                   	nop
ffffffff801007de:	90                   	nop
ffffffff801007df:	90                   	nop
ffffffff801007e0:	90                   	nop
ffffffff801007e1:	90                   	nop
ffffffff801007e2:	90                   	nop
ffffffff801007e3:	90                   	nop
ffffffff801007e4:	90                   	nop
ffffffff801007e5:	90                   	nop
ffffffff801007e6:	90                   	nop
ffffffff801007e7:	90                   	nop
ffffffff801007e8:	90                   	nop
ffffffff801007e9:	90                   	nop
ffffffff801007ea:	90                   	nop
ffffffff801007eb:	90                   	nop
ffffffff801007ec:	90                   	nop
ffffffff801007ed:	90                   	nop
ffffffff801007ee:	90                   	nop
ffffffff801007ef:	90                   	nop
ffffffff801007f0:	90                   	nop
ffffffff801007f1:	90                   	nop
ffffffff801007f2:	90                   	nop
ffffffff801007f3:	90                   	nop
ffffffff801007f4:	90                   	nop
ffffffff801007f5:	90                   	nop
ffffffff801007f6:	90                   	nop
ffffffff801007f7:	90                   	nop
ffffffff801007f8:	90                   	nop
ffffffff801007f9:	90                   	nop
ffffffff801007fa:	90                   	nop
ffffffff801007fb:	90                   	nop
ffffffff801007fc:	90                   	nop
ffffffff801007fd:	90                   	nop
ffffffff801007fe:	90                   	nop
ffffffff801007ff:	90                   	nop
ffffffff80100800:	90                   	nop
ffffffff80100801:	90                   	nop
ffffffff80100802:	90                   	nop
ffffffff80100803:	90                   	nop
ffffffff80100804:	90                   	nop
ffffffff80100805:	90                   	nop
ffffffff80100806:	90                   	nop
ffffffff80100807:	90                   	nop
ffffffff80100808:	90                   	nop
ffffffff80100809:	90                   	nop
ffffffff8010080a:	90                   	nop
ffffffff8010080b:	90                   	nop
ffffffff8010080c:	90                   	nop
ffffffff8010080d:	90                   	nop
ffffffff8010080e:	90                   	nop
ffffffff8010080f:	90                   	nop
ffffffff80100810:	90                   	nop
ffffffff80100811:	90                   	nop
ffffffff80100812:	90                   	nop
ffffffff80100813:	90                   	nop
ffffffff80100814:	90                   	nop
ffffffff80100815:	90                   	nop
ffffffff80100816:	90                   	nop
ffffffff80100817:	90                   	nop
ffffffff80100818:	90                   	nop
ffffffff80100819:	90                   	nop
ffffffff8010081a:	90                   	nop
ffffffff8010081b:	90                   	nop
ffffffff8010081c:	90                   	nop
ffffffff8010081d:	90                   	nop
ffffffff8010081e:	90                   	nop
ffffffff8010081f:	90                   	nop
ffffffff80100820:	90                   	nop
ffffffff80100821:	90                   	nop
ffffffff80100822:	90                   	nop
ffffffff80100823:	90                   	nop
ffffffff80100824:	90                   	nop
ffffffff80100825:	90                   	nop
ffffffff80100826:	90                   	nop
ffffffff80100827:	90                   	nop
ffffffff80100828:	90                   	nop
ffffffff80100829:	90                   	nop
ffffffff8010082a:	90                   	nop
ffffffff8010082b:	90                   	nop
ffffffff8010082c:	90                   	nop
ffffffff8010082d:	90                   	nop
ffffffff8010082e:	90                   	nop
ffffffff8010082f:	90                   	nop
ffffffff80100830:	90                   	nop
ffffffff80100831:	90                   	nop
ffffffff80100832:	90                   	nop
ffffffff80100833:	90                   	nop
ffffffff80100834:	90                   	nop
ffffffff80100835:	90                   	nop
ffffffff80100836:	90                   	nop
ffffffff80100837:	90                   	nop
ffffffff80100838:	90                   	nop
ffffffff80100839:	90                   	nop
ffffffff8010083a:	90                   	nop
ffffffff8010083b:	90                   	nop
ffffffff8010083c:	90                   	nop
ffffffff8010083d:	90                   	nop
ffffffff8010083e:	90                   	nop
ffffffff8010083f:	90                   	nop
ffffffff80100840:	90                   	nop
ffffffff80100841:	90                   	nop
ffffffff80100842:	90                   	nop
ffffffff80100843:	90                   	nop
ffffffff80100844:	90                   	nop
ffffffff80100845:	90                   	nop
ffffffff80100846:	90                   	nop
ffffffff80100847:	90                   	nop
ffffffff80100848:	90                   	nop
ffffffff80100849:	90                   	nop
ffffffff8010084a:	90                   	nop
ffffffff8010084b:	90                   	nop
ffffffff8010084c:	90                   	nop
ffffffff8010084d:	90                   	nop
ffffffff8010084e:	90                   	nop
ffffffff8010084f:	90                   	nop
ffffffff80100850:	90                   	nop
ffffffff80100851:	90                   	nop
ffffffff80100852:	90                   	nop
ffffffff80100853:	90                   	nop
ffffffff80100854:	90                   	nop
ffffffff80100855:	90                   	nop
ffffffff80100856:	90                   	nop
ffffffff80100857:	90                   	nop
ffffffff80100858:	90                   	nop
ffffffff80100859:	90                   	nop
ffffffff8010085a:	90                   	nop
ffffffff8010085b:	90                   	nop
ffffffff8010085c:	90                   	nop
ffffffff8010085d:	90                   	nop
ffffffff8010085e:	90                   	nop
ffffffff8010085f:	90                   	nop
ffffffff80100860:	90                   	nop
ffffffff80100861:	90                   	nop
ffffffff80100862:	90                   	nop
ffffffff80100863:	90                   	nop
ffffffff80100864:	90                   	nop
ffffffff80100865:	90                   	nop
ffffffff80100866:	90                   	nop
ffffffff80100867:	90                   	nop
ffffffff80100868:	90                   	nop
ffffffff80100869:	90                   	nop
ffffffff8010086a:	90                   	nop
ffffffff8010086b:	90                   	nop
ffffffff8010086c:	90                   	nop
ffffffff8010086d:	90                   	nop
ffffffff8010086e:	90                   	nop
ffffffff8010086f:	90                   	nop
ffffffff80100870:	90                   	nop
ffffffff80100871:	90                   	nop
ffffffff80100872:	90                   	nop
ffffffff80100873:	90                   	nop
ffffffff80100874:	90                   	nop
ffffffff80100875:	90                   	nop
ffffffff80100876:	90                   	nop
ffffffff80100877:	90                   	nop
ffffffff80100878:	90                   	nop
ffffffff80100879:	90                   	nop
ffffffff8010087a:	90                   	nop
ffffffff8010087b:	90                   	nop
ffffffff8010087c:	90                   	nop
ffffffff8010087d:	90                   	nop
ffffffff8010087e:	90                   	nop
ffffffff8010087f:	90                   	nop
ffffffff80100880:	90                   	nop
ffffffff80100881:	90                   	nop
ffffffff80100882:	90                   	nop
ffffffff80100883:	90                   	nop
ffffffff80100884:	90                   	nop
ffffffff80100885:	90                   	nop
ffffffff80100886:	90                   	nop
ffffffff80100887:	90                   	nop
ffffffff80100888:	90                   	nop
ffffffff80100889:	90                   	nop
ffffffff8010088a:	90                   	nop
ffffffff8010088b:	90                   	nop
ffffffff8010088c:	90                   	nop
ffffffff8010088d:	90                   	nop
ffffffff8010088e:	90                   	nop
ffffffff8010088f:	90                   	nop
ffffffff80100890:	90                   	nop
ffffffff80100891:	90                   	nop
ffffffff80100892:	90                   	nop
ffffffff80100893:	90                   	nop
ffffffff80100894:	90                   	nop
ffffffff80100895:	90                   	nop
ffffffff80100896:	90                   	nop
ffffffff80100897:	90                   	nop
ffffffff80100898:	90                   	nop
ffffffff80100899:	90                   	nop
ffffffff8010089a:	90                   	nop
ffffffff8010089b:	90                   	nop
ffffffff8010089c:	90                   	nop
ffffffff8010089d:	90                   	nop
ffffffff8010089e:	90                   	nop
ffffffff8010089f:	90                   	nop
ffffffff801008a0:	90                   	nop
ffffffff801008a1:	90                   	nop
ffffffff801008a2:	90                   	nop
ffffffff801008a3:	90                   	nop
ffffffff801008a4:	90                   	nop
ffffffff801008a5:	90                   	nop
ffffffff801008a6:	90                   	nop
ffffffff801008a7:	90                   	nop
ffffffff801008a8:	90                   	nop
ffffffff801008a9:	90                   	nop
ffffffff801008aa:	90                   	nop
ffffffff801008ab:	90                   	nop
ffffffff801008ac:	90                   	nop
ffffffff801008ad:	90                   	nop
ffffffff801008ae:	90                   	nop
ffffffff801008af:	90                   	nop
ffffffff801008b0:	90                   	nop
ffffffff801008b1:	90                   	nop
ffffffff801008b2:	90                   	nop
ffffffff801008b3:	90                   	nop
ffffffff801008b4:	90                   	nop
ffffffff801008b5:	90                   	nop
ffffffff801008b6:	90                   	nop
ffffffff801008b7:	90                   	nop
ffffffff801008b8:	90                   	nop
ffffffff801008b9:	90                   	nop
ffffffff801008ba:	90                   	nop
ffffffff801008bb:	90                   	nop
ffffffff801008bc:	90                   	nop
ffffffff801008bd:	90                   	nop
ffffffff801008be:	90                   	nop
ffffffff801008bf:	90                   	nop
ffffffff801008c0:	90                   	nop
ffffffff801008c1:	90                   	nop
ffffffff801008c2:	90                   	nop
ffffffff801008c3:	90                   	nop
ffffffff801008c4:	90                   	nop
ffffffff801008c5:	90                   	nop
ffffffff801008c6:	90                   	nop
ffffffff801008c7:	90                   	nop
ffffffff801008c8:	90                   	nop
ffffffff801008c9:	90                   	nop
ffffffff801008ca:	90                   	nop
ffffffff801008cb:	90                   	nop
ffffffff801008cc:	90                   	nop
ffffffff801008cd:	90                   	nop
ffffffff801008ce:	90                   	nop
ffffffff801008cf:	90                   	nop
ffffffff801008d0:	90                   	nop
ffffffff801008d1:	90                   	nop
ffffffff801008d2:	90                   	nop
ffffffff801008d3:	90                   	nop
ffffffff801008d4:	90                   	nop
ffffffff801008d5:	90                   	nop
ffffffff801008d6:	90                   	nop
ffffffff801008d7:	90                   	nop
ffffffff801008d8:	90                   	nop
ffffffff801008d9:	90                   	nop
ffffffff801008da:	90                   	nop
ffffffff801008db:	90                   	nop
ffffffff801008dc:	90                   	nop
ffffffff801008dd:	90                   	nop
ffffffff801008de:	90                   	nop
ffffffff801008df:	90                   	nop
ffffffff801008e0:	90                   	nop
ffffffff801008e1:	90                   	nop
ffffffff801008e2:	90                   	nop
ffffffff801008e3:	90                   	nop
ffffffff801008e4:	90                   	nop
ffffffff801008e5:	90                   	nop
ffffffff801008e6:	90                   	nop
ffffffff801008e7:	90                   	nop
ffffffff801008e8:	90                   	nop
ffffffff801008e9:	90                   	nop
ffffffff801008ea:	90                   	nop
ffffffff801008eb:	90                   	nop
ffffffff801008ec:	90                   	nop
ffffffff801008ed:	90                   	nop
ffffffff801008ee:	90                   	nop
ffffffff801008ef:	90                   	nop
ffffffff801008f0:	90                   	nop
ffffffff801008f1:	90                   	nop
ffffffff801008f2:	90                   	nop
ffffffff801008f3:	90                   	nop
ffffffff801008f4:	90                   	nop
ffffffff801008f5:	90                   	nop
ffffffff801008f6:	90                   	nop
ffffffff801008f7:	90                   	nop
ffffffff801008f8:	90                   	nop
ffffffff801008f9:	90                   	nop
ffffffff801008fa:	90                   	nop
ffffffff801008fb:	90                   	nop
ffffffff801008fc:	90                   	nop
ffffffff801008fd:	90                   	nop
ffffffff801008fe:	90                   	nop
ffffffff801008ff:	90                   	nop
ffffffff80100900:	90                   	nop
ffffffff80100901:	90                   	nop
ffffffff80100902:	90                   	nop
ffffffff80100903:	90                   	nop
ffffffff80100904:	90                   	nop
ffffffff80100905:	90                   	nop
ffffffff80100906:	90                   	nop
ffffffff80100907:	90                   	nop
ffffffff80100908:	90                   	nop
ffffffff80100909:	90                   	nop
ffffffff8010090a:	90                   	nop
ffffffff8010090b:	90                   	nop
ffffffff8010090c:	90                   	nop
ffffffff8010090d:	90                   	nop
ffffffff8010090e:	90                   	nop
ffffffff8010090f:	90                   	nop
ffffffff80100910:	90                   	nop
ffffffff80100911:	90                   	nop
ffffffff80100912:	90                   	nop
ffffffff80100913:	90                   	nop
ffffffff80100914:	90                   	nop
ffffffff80100915:	90                   	nop
ffffffff80100916:	90                   	nop
ffffffff80100917:	90                   	nop
ffffffff80100918:	90                   	nop
ffffffff80100919:	90                   	nop
ffffffff8010091a:	90                   	nop
ffffffff8010091b:	90                   	nop
ffffffff8010091c:	90                   	nop
ffffffff8010091d:	90                   	nop
ffffffff8010091e:	90                   	nop
ffffffff8010091f:	90                   	nop
ffffffff80100920:	90                   	nop
ffffffff80100921:	90                   	nop
ffffffff80100922:	90                   	nop
ffffffff80100923:	90                   	nop
ffffffff80100924:	90                   	nop
ffffffff80100925:	90                   	nop
ffffffff80100926:	90                   	nop
ffffffff80100927:	90                   	nop
ffffffff80100928:	90                   	nop
ffffffff80100929:	90                   	nop
ffffffff8010092a:	90                   	nop
ffffffff8010092b:	90                   	nop
ffffffff8010092c:	90                   	nop
ffffffff8010092d:	90                   	nop
ffffffff8010092e:	90                   	nop
ffffffff8010092f:	90                   	nop
ffffffff80100930:	90                   	nop
ffffffff80100931:	90                   	nop
ffffffff80100932:	90                   	nop
ffffffff80100933:	90                   	nop
ffffffff80100934:	90                   	nop
ffffffff80100935:	90                   	nop
ffffffff80100936:	90                   	nop
ffffffff80100937:	90                   	nop
ffffffff80100938:	90                   	nop
ffffffff80100939:	90                   	nop
ffffffff8010093a:	90                   	nop
ffffffff8010093b:	90                   	nop
ffffffff8010093c:	90                   	nop
ffffffff8010093d:	90                   	nop
ffffffff8010093e:	90                   	nop
ffffffff8010093f:	90                   	nop
ffffffff80100940:	90                   	nop
ffffffff80100941:	90                   	nop
ffffffff80100942:	90                   	nop
ffffffff80100943:	90                   	nop
ffffffff80100944:	90                   	nop
ffffffff80100945:	90                   	nop
ffffffff80100946:	90                   	nop
ffffffff80100947:	90                   	nop
ffffffff80100948:	90                   	nop
ffffffff80100949:	90                   	nop
ffffffff8010094a:	90                   	nop
ffffffff8010094b:	90                   	nop
ffffffff8010094c:	90                   	nop
ffffffff8010094d:	90                   	nop
ffffffff8010094e:	90                   	nop
ffffffff8010094f:	90                   	nop
ffffffff80100950:	90                   	nop
ffffffff80100951:	90                   	nop
ffffffff80100952:	90                   	nop
ffffffff80100953:	90                   	nop
ffffffff80100954:	90                   	nop
ffffffff80100955:	90                   	nop
ffffffff80100956:	90                   	nop
ffffffff80100957:	90                   	nop
ffffffff80100958:	90                   	nop
ffffffff80100959:	90                   	nop
ffffffff8010095a:	90                   	nop
ffffffff8010095b:	90                   	nop
ffffffff8010095c:	90                   	nop
ffffffff8010095d:	90                   	nop
ffffffff8010095e:	90                   	nop
ffffffff8010095f:	90                   	nop
ffffffff80100960:	90                   	nop
ffffffff80100961:	90                   	nop
ffffffff80100962:	90                   	nop
ffffffff80100963:	90                   	nop
ffffffff80100964:	90                   	nop
ffffffff80100965:	90                   	nop
ffffffff80100966:	90                   	nop
ffffffff80100967:	90                   	nop
ffffffff80100968:	90                   	nop
ffffffff80100969:	90                   	nop
ffffffff8010096a:	90                   	nop
ffffffff8010096b:	90                   	nop
ffffffff8010096c:	90                   	nop
ffffffff8010096d:	90                   	nop
ffffffff8010096e:	90                   	nop
ffffffff8010096f:	90                   	nop
ffffffff80100970:	90                   	nop
ffffffff80100971:	90                   	nop
ffffffff80100972:	90                   	nop
ffffffff80100973:	90                   	nop
ffffffff80100974:	90                   	nop
ffffffff80100975:	90                   	nop
ffffffff80100976:	90                   	nop
ffffffff80100977:	90                   	nop
ffffffff80100978:	90                   	nop
ffffffff80100979:	90                   	nop
ffffffff8010097a:	90                   	nop
ffffffff8010097b:	90                   	nop
ffffffff8010097c:	90                   	nop
ffffffff8010097d:	90                   	nop
ffffffff8010097e:	90                   	nop
ffffffff8010097f:	90                   	nop
ffffffff80100980:	90                   	nop
ffffffff80100981:	90                   	nop
ffffffff80100982:	90                   	nop
ffffffff80100983:	90                   	nop
ffffffff80100984:	90                   	nop
ffffffff80100985:	90                   	nop
ffffffff80100986:	90                   	nop
ffffffff80100987:	90                   	nop
ffffffff80100988:	90                   	nop
ffffffff80100989:	90                   	nop
ffffffff8010098a:	90                   	nop
ffffffff8010098b:	90                   	nop
ffffffff8010098c:	90                   	nop
ffffffff8010098d:	90                   	nop
ffffffff8010098e:	90                   	nop
ffffffff8010098f:	90                   	nop
ffffffff80100990:	90                   	nop
ffffffff80100991:	90                   	nop
ffffffff80100992:	90                   	nop
ffffffff80100993:	90                   	nop
ffffffff80100994:	90                   	nop
ffffffff80100995:	90                   	nop
ffffffff80100996:	90                   	nop
ffffffff80100997:	90                   	nop
ffffffff80100998:	90                   	nop
ffffffff80100999:	90                   	nop
ffffffff8010099a:	90                   	nop
ffffffff8010099b:	90                   	nop
ffffffff8010099c:	90                   	nop
ffffffff8010099d:	90                   	nop
ffffffff8010099e:	90                   	nop
ffffffff8010099f:	90                   	nop
ffffffff801009a0:	90                   	nop
ffffffff801009a1:	90                   	nop
ffffffff801009a2:	90                   	nop
ffffffff801009a3:	90                   	nop
ffffffff801009a4:	90                   	nop
ffffffff801009a5:	90                   	nop
ffffffff801009a6:	90                   	nop
ffffffff801009a7:	90                   	nop
ffffffff801009a8:	90                   	nop
ffffffff801009a9:	90                   	nop
ffffffff801009aa:	90                   	nop
ffffffff801009ab:	90                   	nop
ffffffff801009ac:	90                   	nop
ffffffff801009ad:	90                   	nop
ffffffff801009ae:	90                   	nop
ffffffff801009af:	90                   	nop
ffffffff801009b0:	90                   	nop
ffffffff801009b1:	90                   	nop
ffffffff801009b2:	90                   	nop
ffffffff801009b3:	90                   	nop
ffffffff801009b4:	90                   	nop
ffffffff801009b5:	90                   	nop
ffffffff801009b6:	90                   	nop
ffffffff801009b7:	90                   	nop
ffffffff801009b8:	90                   	nop
ffffffff801009b9:	90                   	nop
ffffffff801009ba:	90                   	nop
ffffffff801009bb:	90                   	nop
ffffffff801009bc:	90                   	nop
ffffffff801009bd:	90                   	nop
ffffffff801009be:	90                   	nop
ffffffff801009bf:	90                   	nop
ffffffff801009c0:	90                   	nop
ffffffff801009c1:	90                   	nop
ffffffff801009c2:	90                   	nop
ffffffff801009c3:	90                   	nop
ffffffff801009c4:	90                   	nop
ffffffff801009c5:	90                   	nop
ffffffff801009c6:	90                   	nop
ffffffff801009c7:	90                   	nop
ffffffff801009c8:	90                   	nop
ffffffff801009c9:	90                   	nop
ffffffff801009ca:	90                   	nop
ffffffff801009cb:	90                   	nop
ffffffff801009cc:	90                   	nop
ffffffff801009cd:	90                   	nop
ffffffff801009ce:	90                   	nop
ffffffff801009cf:	90                   	nop
ffffffff801009d0:	90                   	nop
ffffffff801009d1:	90                   	nop
ffffffff801009d2:	90                   	nop
ffffffff801009d3:	90                   	nop
ffffffff801009d4:	90                   	nop
ffffffff801009d5:	90                   	nop
ffffffff801009d6:	90                   	nop
ffffffff801009d7:	90                   	nop
ffffffff801009d8:	90                   	nop
ffffffff801009d9:	90                   	nop
ffffffff801009da:	90                   	nop
ffffffff801009db:	90                   	nop
ffffffff801009dc:	90                   	nop
ffffffff801009dd:	90                   	nop
ffffffff801009de:	90                   	nop
ffffffff801009df:	90                   	nop
ffffffff801009e0:	90                   	nop
ffffffff801009e1:	90                   	nop
ffffffff801009e2:	90                   	nop
ffffffff801009e3:	90                   	nop
ffffffff801009e4:	90                   	nop
ffffffff801009e5:	90                   	nop
ffffffff801009e6:	90                   	nop
ffffffff801009e7:	90                   	nop
ffffffff801009e8:	90                   	nop
ffffffff801009e9:	90                   	nop
ffffffff801009ea:	90                   	nop
ffffffff801009eb:	90                   	nop
ffffffff801009ec:	90                   	nop
ffffffff801009ed:	90                   	nop
ffffffff801009ee:	90                   	nop
ffffffff801009ef:	90                   	nop
ffffffff801009f0:	90                   	nop
ffffffff801009f1:	90                   	nop
ffffffff801009f2:	90                   	nop
ffffffff801009f3:	90                   	nop
ffffffff801009f4:	90                   	nop
ffffffff801009f5:	90                   	nop
ffffffff801009f6:	90                   	nop
ffffffff801009f7:	90                   	nop
ffffffff801009f8:	90                   	nop
ffffffff801009f9:	90                   	nop
ffffffff801009fa:	90                   	nop
ffffffff801009fb:	90                   	nop
ffffffff801009fc:	90                   	nop
ffffffff801009fd:	90                   	nop
ffffffff801009fe:	90                   	nop
ffffffff801009ff:	90                   	nop
ffffffff80100a00:	90                   	nop
ffffffff80100a01:	90                   	nop
ffffffff80100a02:	90                   	nop
ffffffff80100a03:	90                   	nop
ffffffff80100a04:	90                   	nop
ffffffff80100a05:	90                   	nop
ffffffff80100a06:	90                   	nop
ffffffff80100a07:	90                   	nop
ffffffff80100a08:	90                   	nop
ffffffff80100a09:	90                   	nop
ffffffff80100a0a:	90                   	nop
ffffffff80100a0b:	90                   	nop
ffffffff80100a0c:	90                   	nop
ffffffff80100a0d:	90                   	nop
ffffffff80100a0e:	90                   	nop
ffffffff80100a0f:	90                   	nop
ffffffff80100a10:	90                   	nop
ffffffff80100a11:	90                   	nop
ffffffff80100a12:	90                   	nop
ffffffff80100a13:	90                   	nop
ffffffff80100a14:	90                   	nop
ffffffff80100a15:	90                   	nop
ffffffff80100a16:	90                   	nop
ffffffff80100a17:	90                   	nop
ffffffff80100a18:	90                   	nop
ffffffff80100a19:	90                   	nop
ffffffff80100a1a:	90                   	nop
ffffffff80100a1b:	90                   	nop
ffffffff80100a1c:	90                   	nop
ffffffff80100a1d:	90                   	nop
ffffffff80100a1e:	90                   	nop
ffffffff80100a1f:	90                   	nop
ffffffff80100a20:	90                   	nop
ffffffff80100a21:	90                   	nop
ffffffff80100a22:	90                   	nop
ffffffff80100a23:	90                   	nop
ffffffff80100a24:	90                   	nop
ffffffff80100a25:	90                   	nop
ffffffff80100a26:	90                   	nop
ffffffff80100a27:	90                   	nop
ffffffff80100a28:	90                   	nop
ffffffff80100a29:	90                   	nop
ffffffff80100a2a:	90                   	nop
ffffffff80100a2b:	90                   	nop
ffffffff80100a2c:	90                   	nop
ffffffff80100a2d:	90                   	nop
ffffffff80100a2e:	90                   	nop
ffffffff80100a2f:	90                   	nop
ffffffff80100a30:	90                   	nop
ffffffff80100a31:	90                   	nop
ffffffff80100a32:	90                   	nop
ffffffff80100a33:	90                   	nop
ffffffff80100a34:	90                   	nop
ffffffff80100a35:	90                   	nop
ffffffff80100a36:	90                   	nop
ffffffff80100a37:	90                   	nop
ffffffff80100a38:	90                   	nop
ffffffff80100a39:	90                   	nop
ffffffff80100a3a:	90                   	nop
ffffffff80100a3b:	90                   	nop
ffffffff80100a3c:	90                   	nop
ffffffff80100a3d:	90                   	nop
ffffffff80100a3e:	90                   	nop
ffffffff80100a3f:	90                   	nop
ffffffff80100a40:	90                   	nop
ffffffff80100a41:	90                   	nop
ffffffff80100a42:	90                   	nop
ffffffff80100a43:	90                   	nop
ffffffff80100a44:	90                   	nop
ffffffff80100a45:	90                   	nop
ffffffff80100a46:	90                   	nop
ffffffff80100a47:	90                   	nop
ffffffff80100a48:	90                   	nop
ffffffff80100a49:	90                   	nop
ffffffff80100a4a:	90                   	nop
ffffffff80100a4b:	90                   	nop
ffffffff80100a4c:	90                   	nop
ffffffff80100a4d:	90                   	nop
ffffffff80100a4e:	90                   	nop
ffffffff80100a4f:	90                   	nop
ffffffff80100a50:	90                   	nop
ffffffff80100a51:	90                   	nop
ffffffff80100a52:	90                   	nop
ffffffff80100a53:	90                   	nop
ffffffff80100a54:	90                   	nop
ffffffff80100a55:	90                   	nop
ffffffff80100a56:	90                   	nop
ffffffff80100a57:	90                   	nop
ffffffff80100a58:	90                   	nop
ffffffff80100a59:	90                   	nop
ffffffff80100a5a:	90                   	nop
ffffffff80100a5b:	90                   	nop
ffffffff80100a5c:	90                   	nop
ffffffff80100a5d:	90                   	nop
ffffffff80100a5e:	90                   	nop
ffffffff80100a5f:	90                   	nop
ffffffff80100a60:	90                   	nop
ffffffff80100a61:	90                   	nop
ffffffff80100a62:	90                   	nop
ffffffff80100a63:	90                   	nop
ffffffff80100a64:	90                   	nop
ffffffff80100a65:	90                   	nop
ffffffff80100a66:	90                   	nop
ffffffff80100a67:	90                   	nop
ffffffff80100a68:	90                   	nop
ffffffff80100a69:	90                   	nop
ffffffff80100a6a:	90                   	nop
ffffffff80100a6b:	90                   	nop
ffffffff80100a6c:	90                   	nop
ffffffff80100a6d:	90                   	nop
ffffffff80100a6e:	90                   	nop
ffffffff80100a6f:	90                   	nop
ffffffff80100a70:	90                   	nop
ffffffff80100a71:	90                   	nop
ffffffff80100a72:	90                   	nop
ffffffff80100a73:	90                   	nop
ffffffff80100a74:	90                   	nop
ffffffff80100a75:	90                   	nop
ffffffff80100a76:	90                   	nop
ffffffff80100a77:	90                   	nop
ffffffff80100a78:	90                   	nop
ffffffff80100a79:	90                   	nop
ffffffff80100a7a:	90                   	nop
ffffffff80100a7b:	90                   	nop
ffffffff80100a7c:	90                   	nop
ffffffff80100a7d:	90                   	nop
ffffffff80100a7e:	90                   	nop
ffffffff80100a7f:	90                   	nop
ffffffff80100a80:	90                   	nop
ffffffff80100a81:	90                   	nop
ffffffff80100a82:	90                   	nop
ffffffff80100a83:	90                   	nop
ffffffff80100a84:	90                   	nop
ffffffff80100a85:	90                   	nop
ffffffff80100a86:	90                   	nop
ffffffff80100a87:	90                   	nop
ffffffff80100a88:	90                   	nop
ffffffff80100a89:	90                   	nop
ffffffff80100a8a:	90                   	nop
ffffffff80100a8b:	90                   	nop
ffffffff80100a8c:	90                   	nop
ffffffff80100a8d:	90                   	nop
ffffffff80100a8e:	90                   	nop
ffffffff80100a8f:	90                   	nop
ffffffff80100a90:	90                   	nop
ffffffff80100a91:	90                   	nop
ffffffff80100a92:	90                   	nop
ffffffff80100a93:	90                   	nop
ffffffff80100a94:	90                   	nop
ffffffff80100a95:	90                   	nop
ffffffff80100a96:	90                   	nop
ffffffff80100a97:	90                   	nop
ffffffff80100a98:	90                   	nop
ffffffff80100a99:	90                   	nop
ffffffff80100a9a:	90                   	nop
ffffffff80100a9b:	90                   	nop
ffffffff80100a9c:	90                   	nop
ffffffff80100a9d:	90                   	nop
ffffffff80100a9e:	90                   	nop
ffffffff80100a9f:	90                   	nop
ffffffff80100aa0:	90                   	nop
ffffffff80100aa1:	90                   	nop
ffffffff80100aa2:	90                   	nop
ffffffff80100aa3:	90                   	nop
ffffffff80100aa4:	90                   	nop
ffffffff80100aa5:	90                   	nop
ffffffff80100aa6:	90                   	nop
ffffffff80100aa7:	90                   	nop
ffffffff80100aa8:	90                   	nop
ffffffff80100aa9:	90                   	nop
ffffffff80100aaa:	90                   	nop
ffffffff80100aab:	90                   	nop
ffffffff80100aac:	90                   	nop
ffffffff80100aad:	90                   	nop
ffffffff80100aae:	90                   	nop
ffffffff80100aaf:	90                   	nop
ffffffff80100ab0:	90                   	nop
ffffffff80100ab1:	90                   	nop
ffffffff80100ab2:	90                   	nop
ffffffff80100ab3:	90                   	nop
ffffffff80100ab4:	90                   	nop
ffffffff80100ab5:	90                   	nop
ffffffff80100ab6:	90                   	nop
ffffffff80100ab7:	90                   	nop
ffffffff80100ab8:	90                   	nop
ffffffff80100ab9:	90                   	nop
ffffffff80100aba:	90                   	nop
ffffffff80100abb:	90                   	nop
ffffffff80100abc:	90                   	nop
ffffffff80100abd:	90                   	nop
ffffffff80100abe:	90                   	nop
ffffffff80100abf:	90                   	nop
ffffffff80100ac0:	90                   	nop
ffffffff80100ac1:	90                   	nop
ffffffff80100ac2:	90                   	nop
ffffffff80100ac3:	90                   	nop
ffffffff80100ac4:	90                   	nop
ffffffff80100ac5:	90                   	nop
ffffffff80100ac6:	90                   	nop
ffffffff80100ac7:	90                   	nop
ffffffff80100ac8:	90                   	nop
ffffffff80100ac9:	90                   	nop
ffffffff80100aca:	90                   	nop
ffffffff80100acb:	90                   	nop
ffffffff80100acc:	90                   	nop
ffffffff80100acd:	90                   	nop
ffffffff80100ace:	90                   	nop
ffffffff80100acf:	90                   	nop
ffffffff80100ad0:	90                   	nop
ffffffff80100ad1:	90                   	nop
ffffffff80100ad2:	90                   	nop
ffffffff80100ad3:	90                   	nop
ffffffff80100ad4:	90                   	nop
ffffffff80100ad5:	90                   	nop
ffffffff80100ad6:	90                   	nop
ffffffff80100ad7:	90                   	nop
ffffffff80100ad8:	90                   	nop
ffffffff80100ad9:	90                   	nop
ffffffff80100ada:	90                   	nop
ffffffff80100adb:	90                   	nop
ffffffff80100adc:	90                   	nop
ffffffff80100add:	90                   	nop
ffffffff80100ade:	90                   	nop
ffffffff80100adf:	90                   	nop
ffffffff80100ae0:	90                   	nop
ffffffff80100ae1:	90                   	nop
ffffffff80100ae2:	90                   	nop
ffffffff80100ae3:	90                   	nop
ffffffff80100ae4:	90                   	nop
ffffffff80100ae5:	90                   	nop
ffffffff80100ae6:	90                   	nop
ffffffff80100ae7:	90                   	nop
ffffffff80100ae8:	90                   	nop
ffffffff80100ae9:	90                   	nop
ffffffff80100aea:	90                   	nop
ffffffff80100aeb:	90                   	nop
ffffffff80100aec:	90                   	nop
ffffffff80100aed:	90                   	nop
ffffffff80100aee:	90                   	nop
ffffffff80100aef:	90                   	nop
ffffffff80100af0:	90                   	nop
ffffffff80100af1:	90                   	nop
ffffffff80100af2:	90                   	nop
ffffffff80100af3:	90                   	nop
ffffffff80100af4:	90                   	nop
ffffffff80100af5:	90                   	nop
ffffffff80100af6:	90                   	nop
ffffffff80100af7:	90                   	nop
ffffffff80100af8:	90                   	nop
ffffffff80100af9:	90                   	nop
ffffffff80100afa:	90                   	nop
ffffffff80100afb:	90                   	nop
ffffffff80100afc:	90                   	nop
ffffffff80100afd:	90                   	nop
ffffffff80100afe:	90                   	nop
ffffffff80100aff:	90                   	nop
ffffffff80100b00:	90                   	nop
ffffffff80100b01:	90                   	nop
ffffffff80100b02:	90                   	nop
ffffffff80100b03:	90                   	nop
ffffffff80100b04:	90                   	nop
ffffffff80100b05:	90                   	nop
ffffffff80100b06:	90                   	nop
ffffffff80100b07:	90                   	nop
ffffffff80100b08:	90                   	nop
ffffffff80100b09:	90                   	nop
ffffffff80100b0a:	90                   	nop
ffffffff80100b0b:	90                   	nop
ffffffff80100b0c:	90                   	nop
ffffffff80100b0d:	90                   	nop
ffffffff80100b0e:	90                   	nop
ffffffff80100b0f:	90                   	nop
ffffffff80100b10:	90                   	nop
ffffffff80100b11:	90                   	nop
ffffffff80100b12:	90                   	nop
ffffffff80100b13:	90                   	nop
ffffffff80100b14:	90                   	nop
ffffffff80100b15:	90                   	nop
ffffffff80100b16:	90                   	nop
ffffffff80100b17:	90                   	nop
ffffffff80100b18:	90                   	nop
ffffffff80100b19:	90                   	nop
ffffffff80100b1a:	90                   	nop
ffffffff80100b1b:	90                   	nop
ffffffff80100b1c:	90                   	nop
ffffffff80100b1d:	90                   	nop
ffffffff80100b1e:	90                   	nop
ffffffff80100b1f:	90                   	nop
ffffffff80100b20:	90                   	nop
ffffffff80100b21:	90                   	nop
ffffffff80100b22:	90                   	nop
ffffffff80100b23:	90                   	nop
ffffffff80100b24:	90                   	nop
ffffffff80100b25:	90                   	nop
ffffffff80100b26:	90                   	nop
ffffffff80100b27:	90                   	nop
ffffffff80100b28:	90                   	nop
ffffffff80100b29:	90                   	nop
ffffffff80100b2a:	90                   	nop
ffffffff80100b2b:	90                   	nop
ffffffff80100b2c:	90                   	nop
ffffffff80100b2d:	90                   	nop
ffffffff80100b2e:	90                   	nop
ffffffff80100b2f:	90                   	nop
ffffffff80100b30:	90                   	nop
ffffffff80100b31:	90                   	nop
ffffffff80100b32:	90                   	nop
ffffffff80100b33:	90                   	nop
ffffffff80100b34:	90                   	nop
ffffffff80100b35:	90                   	nop
ffffffff80100b36:	90                   	nop
ffffffff80100b37:	90                   	nop
ffffffff80100b38:	90                   	nop
ffffffff80100b39:	90                   	nop
ffffffff80100b3a:	90                   	nop
ffffffff80100b3b:	90                   	nop
ffffffff80100b3c:	90                   	nop
ffffffff80100b3d:	90                   	nop
ffffffff80100b3e:	90                   	nop
ffffffff80100b3f:	90                   	nop
ffffffff80100b40:	90                   	nop
ffffffff80100b41:	90                   	nop
ffffffff80100b42:	90                   	nop
ffffffff80100b43:	90                   	nop
ffffffff80100b44:	90                   	nop
ffffffff80100b45:	90                   	nop
ffffffff80100b46:	90                   	nop
ffffffff80100b47:	90                   	nop
ffffffff80100b48:	90                   	nop
ffffffff80100b49:	90                   	nop
ffffffff80100b4a:	90                   	nop
ffffffff80100b4b:	90                   	nop
ffffffff80100b4c:	90                   	nop
ffffffff80100b4d:	90                   	nop
ffffffff80100b4e:	90                   	nop
ffffffff80100b4f:	90                   	nop
ffffffff80100b50:	90                   	nop
ffffffff80100b51:	90                   	nop
ffffffff80100b52:	90                   	nop
ffffffff80100b53:	90                   	nop
ffffffff80100b54:	90                   	nop
ffffffff80100b55:	90                   	nop
ffffffff80100b56:	90                   	nop
ffffffff80100b57:	90                   	nop
ffffffff80100b58:	90                   	nop
ffffffff80100b59:	90                   	nop
ffffffff80100b5a:	90                   	nop
ffffffff80100b5b:	90                   	nop
ffffffff80100b5c:	90                   	nop
ffffffff80100b5d:	90                   	nop
ffffffff80100b5e:	90                   	nop
ffffffff80100b5f:	90                   	nop
ffffffff80100b60:	90                   	nop
ffffffff80100b61:	90                   	nop
ffffffff80100b62:	90                   	nop
ffffffff80100b63:	90                   	nop
ffffffff80100b64:	90                   	nop
ffffffff80100b65:	90                   	nop
ffffffff80100b66:	90                   	nop
ffffffff80100b67:	90                   	nop
ffffffff80100b68:	90                   	nop
ffffffff80100b69:	90                   	nop
ffffffff80100b6a:	90                   	nop
ffffffff80100b6b:	90                   	nop
ffffffff80100b6c:	90                   	nop
ffffffff80100b6d:	90                   	nop
ffffffff80100b6e:	90                   	nop
ffffffff80100b6f:	90                   	nop
ffffffff80100b70:	90                   	nop
ffffffff80100b71:	90                   	nop
ffffffff80100b72:	90                   	nop
ffffffff80100b73:	90                   	nop
ffffffff80100b74:	90                   	nop
ffffffff80100b75:	90                   	nop
ffffffff80100b76:	90                   	nop
ffffffff80100b77:	90                   	nop
ffffffff80100b78:	90                   	nop
ffffffff80100b79:	90                   	nop
ffffffff80100b7a:	90                   	nop
ffffffff80100b7b:	90                   	nop
ffffffff80100b7c:	90                   	nop
ffffffff80100b7d:	90                   	nop
ffffffff80100b7e:	90                   	nop
ffffffff80100b7f:	90                   	nop
ffffffff80100b80:	90                   	nop
ffffffff80100b81:	90                   	nop
ffffffff80100b82:	90                   	nop
ffffffff80100b83:	90                   	nop
ffffffff80100b84:	90                   	nop
ffffffff80100b85:	90                   	nop
ffffffff80100b86:	90                   	nop
ffffffff80100b87:	90                   	nop
ffffffff80100b88:	90                   	nop
ffffffff80100b89:	90                   	nop
ffffffff80100b8a:	90                   	nop
ffffffff80100b8b:	90                   	nop
ffffffff80100b8c:	90                   	nop
ffffffff80100b8d:	90                   	nop
ffffffff80100b8e:	90                   	nop
ffffffff80100b8f:	90                   	nop
ffffffff80100b90:	90                   	nop
ffffffff80100b91:	90                   	nop
ffffffff80100b92:	90                   	nop
ffffffff80100b93:	90                   	nop
ffffffff80100b94:	90                   	nop
ffffffff80100b95:	90                   	nop
ffffffff80100b96:	90                   	nop
ffffffff80100b97:	90                   	nop
ffffffff80100b98:	90                   	nop
ffffffff80100b99:	90                   	nop
ffffffff80100b9a:	90                   	nop
ffffffff80100b9b:	90                   	nop
ffffffff80100b9c:	90                   	nop
ffffffff80100b9d:	90                   	nop
ffffffff80100b9e:	90                   	nop
ffffffff80100b9f:	90                   	nop
ffffffff80100ba0:	90                   	nop
ffffffff80100ba1:	90                   	nop
ffffffff80100ba2:	90                   	nop
ffffffff80100ba3:	90                   	nop
ffffffff80100ba4:	90                   	nop
ffffffff80100ba5:	90                   	nop
ffffffff80100ba6:	90                   	nop
ffffffff80100ba7:	90                   	nop
ffffffff80100ba8:	90                   	nop
ffffffff80100ba9:	90                   	nop
ffffffff80100baa:	90                   	nop
ffffffff80100bab:	90                   	nop
ffffffff80100bac:	90                   	nop
ffffffff80100bad:	90                   	nop
ffffffff80100bae:	90                   	nop
ffffffff80100baf:	90                   	nop
ffffffff80100bb0:	90                   	nop
ffffffff80100bb1:	90                   	nop
ffffffff80100bb2:	90                   	nop
ffffffff80100bb3:	90                   	nop
ffffffff80100bb4:	90                   	nop
ffffffff80100bb5:	90                   	nop
ffffffff80100bb6:	90                   	nop
ffffffff80100bb7:	90                   	nop
ffffffff80100bb8:	90                   	nop
ffffffff80100bb9:	90                   	nop
ffffffff80100bba:	90                   	nop
ffffffff80100bbb:	90                   	nop
ffffffff80100bbc:	90                   	nop
ffffffff80100bbd:	90                   	nop
ffffffff80100bbe:	90                   	nop
ffffffff80100bbf:	90                   	nop
ffffffff80100bc0:	90                   	nop
ffffffff80100bc1:	90                   	nop
ffffffff80100bc2:	90                   	nop
ffffffff80100bc3:	90                   	nop
ffffffff80100bc4:	90                   	nop
ffffffff80100bc5:	90                   	nop
ffffffff80100bc6:	90                   	nop
ffffffff80100bc7:	90                   	nop
ffffffff80100bc8:	90                   	nop
ffffffff80100bc9:	90                   	nop
ffffffff80100bca:	90                   	nop
ffffffff80100bcb:	90                   	nop
ffffffff80100bcc:	90                   	nop
ffffffff80100bcd:	90                   	nop
ffffffff80100bce:	90                   	nop
ffffffff80100bcf:	90                   	nop
ffffffff80100bd0:	90                   	nop
ffffffff80100bd1:	90                   	nop
ffffffff80100bd2:	90                   	nop
ffffffff80100bd3:	90                   	nop
ffffffff80100bd4:	90                   	nop
ffffffff80100bd5:	90                   	nop
ffffffff80100bd6:	90                   	nop
ffffffff80100bd7:	90                   	nop
ffffffff80100bd8:	90                   	nop
ffffffff80100bd9:	90                   	nop
ffffffff80100bda:	90                   	nop
ffffffff80100bdb:	90                   	nop
ffffffff80100bdc:	90                   	nop
ffffffff80100bdd:	90                   	nop
ffffffff80100bde:	90                   	nop
ffffffff80100bdf:	90                   	nop
ffffffff80100be0:	90                   	nop
ffffffff80100be1:	90                   	nop
ffffffff80100be2:	90                   	nop
ffffffff80100be3:	90                   	nop
ffffffff80100be4:	90                   	nop
ffffffff80100be5:	90                   	nop
ffffffff80100be6:	90                   	nop
ffffffff80100be7:	90                   	nop
ffffffff80100be8:	90                   	nop
ffffffff80100be9:	90                   	nop
ffffffff80100bea:	90                   	nop
ffffffff80100beb:	90                   	nop
ffffffff80100bec:	90                   	nop
ffffffff80100bed:	90                   	nop
ffffffff80100bee:	90                   	nop
ffffffff80100bef:	90                   	nop
ffffffff80100bf0:	90                   	nop
ffffffff80100bf1:	90                   	nop
ffffffff80100bf2:	90                   	nop
ffffffff80100bf3:	90                   	nop
ffffffff80100bf4:	90                   	nop
ffffffff80100bf5:	90                   	nop
ffffffff80100bf6:	90                   	nop
ffffffff80100bf7:	90                   	nop
ffffffff80100bf8:	90                   	nop
ffffffff80100bf9:	90                   	nop
ffffffff80100bfa:	90                   	nop
ffffffff80100bfb:	90                   	nop
ffffffff80100bfc:	90                   	nop
ffffffff80100bfd:	90                   	nop
ffffffff80100bfe:	90                   	nop
ffffffff80100bff:	90                   	nop
ffffffff80100c00:	90                   	nop
ffffffff80100c01:	90                   	nop
ffffffff80100c02:	90                   	nop
ffffffff80100c03:	90                   	nop
ffffffff80100c04:	90                   	nop
ffffffff80100c05:	90                   	nop
ffffffff80100c06:	90                   	nop
ffffffff80100c07:	90                   	nop
ffffffff80100c08:	90                   	nop
ffffffff80100c09:	90                   	nop
ffffffff80100c0a:	90                   	nop
ffffffff80100c0b:	90                   	nop
ffffffff80100c0c:	90                   	nop
ffffffff80100c0d:	90                   	nop
ffffffff80100c0e:	90                   	nop
ffffffff80100c0f:	90                   	nop
ffffffff80100c10:	90                   	nop
ffffffff80100c11:	90                   	nop
ffffffff80100c12:	90                   	nop
ffffffff80100c13:	90                   	nop
ffffffff80100c14:	90                   	nop
ffffffff80100c15:	90                   	nop
ffffffff80100c16:	90                   	nop
ffffffff80100c17:	90                   	nop
ffffffff80100c18:	90                   	nop
ffffffff80100c19:	90                   	nop
ffffffff80100c1a:	90                   	nop
ffffffff80100c1b:	90                   	nop
ffffffff80100c1c:	90                   	nop
ffffffff80100c1d:	90                   	nop
ffffffff80100c1e:	90                   	nop
ffffffff80100c1f:	90                   	nop
ffffffff80100c20:	90                   	nop
ffffffff80100c21:	90                   	nop
ffffffff80100c22:	90                   	nop
ffffffff80100c23:	90                   	nop
ffffffff80100c24:	90                   	nop
ffffffff80100c25:	90                   	nop
ffffffff80100c26:	90                   	nop
ffffffff80100c27:	90                   	nop
ffffffff80100c28:	90                   	nop
ffffffff80100c29:	90                   	nop
ffffffff80100c2a:	90                   	nop
ffffffff80100c2b:	90                   	nop
ffffffff80100c2c:	90                   	nop
ffffffff80100c2d:	90                   	nop
ffffffff80100c2e:	90                   	nop
ffffffff80100c2f:	90                   	nop
ffffffff80100c30:	90                   	nop
ffffffff80100c31:	90                   	nop
ffffffff80100c32:	90                   	nop
ffffffff80100c33:	90                   	nop
ffffffff80100c34:	90                   	nop
ffffffff80100c35:	90                   	nop
ffffffff80100c36:	90                   	nop
ffffffff80100c37:	90                   	nop
ffffffff80100c38:	90                   	nop
ffffffff80100c39:	90                   	nop
ffffffff80100c3a:	90                   	nop
ffffffff80100c3b:	90                   	nop
ffffffff80100c3c:	90                   	nop
ffffffff80100c3d:	90                   	nop
ffffffff80100c3e:	90                   	nop
ffffffff80100c3f:	90                   	nop
ffffffff80100c40:	90                   	nop
ffffffff80100c41:	90                   	nop
ffffffff80100c42:	90                   	nop
ffffffff80100c43:	90                   	nop
ffffffff80100c44:	90                   	nop
ffffffff80100c45:	90                   	nop
ffffffff80100c46:	90                   	nop
ffffffff80100c47:	90                   	nop
ffffffff80100c48:	90                   	nop
ffffffff80100c49:	90                   	nop
ffffffff80100c4a:	90                   	nop
ffffffff80100c4b:	90                   	nop
ffffffff80100c4c:	90                   	nop
ffffffff80100c4d:	90                   	nop
ffffffff80100c4e:	90                   	nop
ffffffff80100c4f:	90                   	nop
ffffffff80100c50:	90                   	nop
ffffffff80100c51:	90                   	nop
ffffffff80100c52:	90                   	nop
ffffffff80100c53:	90                   	nop
ffffffff80100c54:	90                   	nop
ffffffff80100c55:	90                   	nop
ffffffff80100c56:	90                   	nop
ffffffff80100c57:	90                   	nop
ffffffff80100c58:	90                   	nop
ffffffff80100c59:	90                   	nop
ffffffff80100c5a:	90                   	nop
ffffffff80100c5b:	90                   	nop
ffffffff80100c5c:	90                   	nop
ffffffff80100c5d:	90                   	nop
ffffffff80100c5e:	90                   	nop
ffffffff80100c5f:	90                   	nop
ffffffff80100c60:	90                   	nop
ffffffff80100c61:	90                   	nop
ffffffff80100c62:	90                   	nop
ffffffff80100c63:	90                   	nop
ffffffff80100c64:	90                   	nop
ffffffff80100c65:	90                   	nop
ffffffff80100c66:	90                   	nop
ffffffff80100c67:	90                   	nop
ffffffff80100c68:	90                   	nop
ffffffff80100c69:	90                   	nop
ffffffff80100c6a:	90                   	nop
ffffffff80100c6b:	90                   	nop
ffffffff80100c6c:	90                   	nop
ffffffff80100c6d:	90                   	nop
ffffffff80100c6e:	90                   	nop
ffffffff80100c6f:	90                   	nop
ffffffff80100c70:	90                   	nop
ffffffff80100c71:	90                   	nop
ffffffff80100c72:	90                   	nop
ffffffff80100c73:	90                   	nop
ffffffff80100c74:	90                   	nop
ffffffff80100c75:	90                   	nop
ffffffff80100c76:	90                   	nop
ffffffff80100c77:	90                   	nop
ffffffff80100c78:	90                   	nop
ffffffff80100c79:	90                   	nop
ffffffff80100c7a:	90                   	nop
ffffffff80100c7b:	90                   	nop
ffffffff80100c7c:	90                   	nop
ffffffff80100c7d:	90                   	nop
ffffffff80100c7e:	90                   	nop
ffffffff80100c7f:	90                   	nop
ffffffff80100c80:	90                   	nop
ffffffff80100c81:	90                   	nop
ffffffff80100c82:	90                   	nop
ffffffff80100c83:	90                   	nop
ffffffff80100c84:	90                   	nop
ffffffff80100c85:	90                   	nop
ffffffff80100c86:	90                   	nop
ffffffff80100c87:	90                   	nop
ffffffff80100c88:	90                   	nop
ffffffff80100c89:	90                   	nop
ffffffff80100c8a:	90                   	nop
ffffffff80100c8b:	90                   	nop
ffffffff80100c8c:	90                   	nop
ffffffff80100c8d:	90                   	nop
ffffffff80100c8e:	90                   	nop
ffffffff80100c8f:	90                   	nop
ffffffff80100c90:	90                   	nop
ffffffff80100c91:	90                   	nop
ffffffff80100c92:	90                   	nop
ffffffff80100c93:	90                   	nop
ffffffff80100c94:	90                   	nop
ffffffff80100c95:	90                   	nop
ffffffff80100c96:	90                   	nop
ffffffff80100c97:	90                   	nop
ffffffff80100c98:	90                   	nop
ffffffff80100c99:	90                   	nop
ffffffff80100c9a:	90                   	nop
ffffffff80100c9b:	90                   	nop
ffffffff80100c9c:	90                   	nop
ffffffff80100c9d:	90                   	nop
ffffffff80100c9e:	90                   	nop
ffffffff80100c9f:	90                   	nop
ffffffff80100ca0:	90                   	nop
ffffffff80100ca1:	90                   	nop
ffffffff80100ca2:	90                   	nop
ffffffff80100ca3:	90                   	nop
ffffffff80100ca4:	90                   	nop
ffffffff80100ca5:	90                   	nop
ffffffff80100ca6:	90                   	nop
ffffffff80100ca7:	90                   	nop
ffffffff80100ca8:	90                   	nop
ffffffff80100ca9:	90                   	nop
ffffffff80100caa:	90                   	nop
ffffffff80100cab:	90                   	nop
ffffffff80100cac:	90                   	nop
ffffffff80100cad:	90                   	nop
ffffffff80100cae:	90                   	nop
ffffffff80100caf:	90                   	nop
ffffffff80100cb0:	90                   	nop
ffffffff80100cb1:	90                   	nop
ffffffff80100cb2:	90                   	nop
ffffffff80100cb3:	90                   	nop
ffffffff80100cb4:	90                   	nop
ffffffff80100cb5:	90                   	nop
ffffffff80100cb6:	90                   	nop
ffffffff80100cb7:	90                   	nop
ffffffff80100cb8:	90                   	nop
ffffffff80100cb9:	90                   	nop
ffffffff80100cba:	90                   	nop
ffffffff80100cbb:	90                   	nop
ffffffff80100cbc:	90                   	nop
ffffffff80100cbd:	90                   	nop
ffffffff80100cbe:	90                   	nop
ffffffff80100cbf:	90                   	nop
ffffffff80100cc0:	90                   	nop
ffffffff80100cc1:	90                   	nop
ffffffff80100cc2:	90                   	nop
ffffffff80100cc3:	90                   	nop
ffffffff80100cc4:	90                   	nop
ffffffff80100cc5:	90                   	nop
ffffffff80100cc6:	90                   	nop
ffffffff80100cc7:	90                   	nop
ffffffff80100cc8:	90                   	nop
ffffffff80100cc9:	90                   	nop
ffffffff80100cca:	90                   	nop
ffffffff80100ccb:	90                   	nop
ffffffff80100ccc:	90                   	nop
ffffffff80100ccd:	90                   	nop
ffffffff80100cce:	90                   	nop
ffffffff80100ccf:	90                   	nop
ffffffff80100cd0:	90                   	nop
ffffffff80100cd1:	90                   	nop
ffffffff80100cd2:	90                   	nop
ffffffff80100cd3:	90                   	nop
ffffffff80100cd4:	90                   	nop
ffffffff80100cd5:	90                   	nop
ffffffff80100cd6:	90                   	nop
ffffffff80100cd7:	90                   	nop
ffffffff80100cd8:	90                   	nop
ffffffff80100cd9:	90                   	nop
ffffffff80100cda:	90                   	nop
ffffffff80100cdb:	90                   	nop
ffffffff80100cdc:	90                   	nop
ffffffff80100cdd:	90                   	nop
ffffffff80100cde:	90                   	nop
ffffffff80100cdf:	90                   	nop
ffffffff80100ce0:	90                   	nop
ffffffff80100ce1:	90                   	nop
ffffffff80100ce2:	90                   	nop
ffffffff80100ce3:	90                   	nop
ffffffff80100ce4:	90                   	nop
ffffffff80100ce5:	90                   	nop
ffffffff80100ce6:	90                   	nop
ffffffff80100ce7:	90                   	nop
ffffffff80100ce8:	90                   	nop
ffffffff80100ce9:	90                   	nop
ffffffff80100cea:	90                   	nop
ffffffff80100ceb:	90                   	nop
ffffffff80100cec:	90                   	nop
ffffffff80100ced:	90                   	nop
ffffffff80100cee:	90                   	nop
ffffffff80100cef:	90                   	nop
ffffffff80100cf0:	90                   	nop
ffffffff80100cf1:	90                   	nop
ffffffff80100cf2:	90                   	nop
ffffffff80100cf3:	90                   	nop
ffffffff80100cf4:	90                   	nop
ffffffff80100cf5:	90                   	nop
ffffffff80100cf6:	90                   	nop
ffffffff80100cf7:	90                   	nop
ffffffff80100cf8:	90                   	nop
ffffffff80100cf9:	90                   	nop
ffffffff80100cfa:	90                   	nop
ffffffff80100cfb:	90                   	nop
ffffffff80100cfc:	90                   	nop
ffffffff80100cfd:	90                   	nop
ffffffff80100cfe:	90                   	nop
ffffffff80100cff:	90                   	nop
ffffffff80100d00:	90                   	nop
ffffffff80100d01:	90                   	nop
ffffffff80100d02:	90                   	nop
ffffffff80100d03:	90                   	nop
ffffffff80100d04:	90                   	nop
ffffffff80100d05:	90                   	nop
ffffffff80100d06:	90                   	nop
ffffffff80100d07:	90                   	nop
ffffffff80100d08:	90                   	nop
ffffffff80100d09:	90                   	nop
ffffffff80100d0a:	90                   	nop
ffffffff80100d0b:	90                   	nop
ffffffff80100d0c:	90                   	nop
ffffffff80100d0d:	90                   	nop
ffffffff80100d0e:	90                   	nop
ffffffff80100d0f:	90                   	nop
ffffffff80100d10:	90                   	nop
ffffffff80100d11:	90                   	nop
ffffffff80100d12:	90                   	nop
ffffffff80100d13:	90                   	nop
ffffffff80100d14:	90                   	nop
ffffffff80100d15:	90                   	nop
ffffffff80100d16:	90                   	nop
ffffffff80100d17:	90                   	nop
ffffffff80100d18:	90                   	nop
ffffffff80100d19:	90                   	nop
ffffffff80100d1a:	90                   	nop
ffffffff80100d1b:	90                   	nop
ffffffff80100d1c:	90                   	nop
ffffffff80100d1d:	90                   	nop
ffffffff80100d1e:	90                   	nop
ffffffff80100d1f:	90                   	nop
ffffffff80100d20:	90                   	nop
ffffffff80100d21:	90                   	nop
ffffffff80100d22:	90                   	nop
ffffffff80100d23:	90                   	nop
ffffffff80100d24:	90                   	nop
ffffffff80100d25:	90                   	nop
ffffffff80100d26:	90                   	nop
ffffffff80100d27:	90                   	nop
ffffffff80100d28:	90                   	nop
ffffffff80100d29:	90                   	nop
ffffffff80100d2a:	90                   	nop
ffffffff80100d2b:	90                   	nop
ffffffff80100d2c:	90                   	nop
ffffffff80100d2d:	90                   	nop
ffffffff80100d2e:	90                   	nop
ffffffff80100d2f:	90                   	nop
ffffffff80100d30:	90                   	nop
ffffffff80100d31:	90                   	nop
ffffffff80100d32:	90                   	nop
ffffffff80100d33:	90                   	nop
ffffffff80100d34:	90                   	nop
ffffffff80100d35:	90                   	nop
ffffffff80100d36:	90                   	nop
ffffffff80100d37:	90                   	nop
ffffffff80100d38:	90                   	nop
ffffffff80100d39:	90                   	nop
ffffffff80100d3a:	90                   	nop
ffffffff80100d3b:	90                   	nop
ffffffff80100d3c:	90                   	nop
ffffffff80100d3d:	90                   	nop
ffffffff80100d3e:	90                   	nop
ffffffff80100d3f:	90                   	nop
ffffffff80100d40:	90                   	nop
ffffffff80100d41:	90                   	nop
ffffffff80100d42:	90                   	nop
ffffffff80100d43:	90                   	nop
ffffffff80100d44:	90                   	nop
ffffffff80100d45:	90                   	nop
ffffffff80100d46:	90                   	nop
ffffffff80100d47:	90                   	nop
ffffffff80100d48:	90                   	nop
ffffffff80100d49:	90                   	nop
ffffffff80100d4a:	90                   	nop
ffffffff80100d4b:	90                   	nop
ffffffff80100d4c:	90                   	nop
ffffffff80100d4d:	90                   	nop
ffffffff80100d4e:	90                   	nop
ffffffff80100d4f:	90                   	nop
ffffffff80100d50:	90                   	nop
ffffffff80100d51:	90                   	nop
ffffffff80100d52:	90                   	nop
ffffffff80100d53:	90                   	nop
ffffffff80100d54:	90                   	nop
ffffffff80100d55:	90                   	nop
ffffffff80100d56:	90                   	nop
ffffffff80100d57:	90                   	nop
ffffffff80100d58:	90                   	nop
ffffffff80100d59:	90                   	nop
ffffffff80100d5a:	90                   	nop
ffffffff80100d5b:	90                   	nop
ffffffff80100d5c:	90                   	nop
ffffffff80100d5d:	90                   	nop
ffffffff80100d5e:	90                   	nop
ffffffff80100d5f:	90                   	nop
ffffffff80100d60:	90                   	nop
ffffffff80100d61:	90                   	nop
ffffffff80100d62:	90                   	nop
ffffffff80100d63:	90                   	nop
ffffffff80100d64:	90                   	nop
ffffffff80100d65:	90                   	nop
ffffffff80100d66:	90                   	nop
ffffffff80100d67:	90                   	nop
ffffffff80100d68:	90                   	nop
ffffffff80100d69:	90                   	nop
ffffffff80100d6a:	90                   	nop
ffffffff80100d6b:	90                   	nop
ffffffff80100d6c:	90                   	nop
ffffffff80100d6d:	90                   	nop
ffffffff80100d6e:	90                   	nop
ffffffff80100d6f:	90                   	nop
ffffffff80100d70:	90                   	nop
ffffffff80100d71:	90                   	nop
ffffffff80100d72:	90                   	nop
ffffffff80100d73:	90                   	nop
ffffffff80100d74:	90                   	nop
ffffffff80100d75:	90                   	nop
ffffffff80100d76:	90                   	nop
ffffffff80100d77:	90                   	nop
ffffffff80100d78:	90                   	nop
ffffffff80100d79:	90                   	nop
ffffffff80100d7a:	90                   	nop
ffffffff80100d7b:	90                   	nop
ffffffff80100d7c:	90                   	nop
ffffffff80100d7d:	90                   	nop
ffffffff80100d7e:	90                   	nop
ffffffff80100d7f:	90                   	nop
ffffffff80100d80:	90                   	nop
ffffffff80100d81:	90                   	nop
ffffffff80100d82:	90                   	nop
ffffffff80100d83:	90                   	nop
ffffffff80100d84:	90                   	nop
ffffffff80100d85:	90                   	nop
ffffffff80100d86:	90                   	nop
ffffffff80100d87:	90                   	nop
ffffffff80100d88:	90                   	nop
ffffffff80100d89:	90                   	nop
ffffffff80100d8a:	90                   	nop
ffffffff80100d8b:	90                   	nop
ffffffff80100d8c:	90                   	nop
ffffffff80100d8d:	90                   	nop
ffffffff80100d8e:	90                   	nop
ffffffff80100d8f:	90                   	nop
ffffffff80100d90:	90                   	nop
ffffffff80100d91:	90                   	nop
ffffffff80100d92:	90                   	nop
ffffffff80100d93:	90                   	nop
ffffffff80100d94:	90                   	nop
ffffffff80100d95:	90                   	nop
ffffffff80100d96:	90                   	nop
ffffffff80100d97:	90                   	nop
ffffffff80100d98:	90                   	nop
ffffffff80100d99:	90                   	nop
ffffffff80100d9a:	90                   	nop
ffffffff80100d9b:	90                   	nop
ffffffff80100d9c:	90                   	nop
ffffffff80100d9d:	90                   	nop
ffffffff80100d9e:	90                   	nop
ffffffff80100d9f:	90                   	nop
ffffffff80100da0:	90                   	nop
ffffffff80100da1:	90                   	nop
ffffffff80100da2:	90                   	nop
ffffffff80100da3:	90                   	nop
ffffffff80100da4:	90                   	nop
ffffffff80100da5:	90                   	nop
ffffffff80100da6:	90                   	nop
ffffffff80100da7:	90                   	nop
ffffffff80100da8:	90                   	nop
ffffffff80100da9:	90                   	nop
ffffffff80100daa:	90                   	nop
ffffffff80100dab:	90                   	nop
ffffffff80100dac:	90                   	nop
ffffffff80100dad:	90                   	nop
ffffffff80100dae:	90                   	nop
ffffffff80100daf:	90                   	nop
ffffffff80100db0:	90                   	nop
ffffffff80100db1:	90                   	nop
ffffffff80100db2:	90                   	nop
ffffffff80100db3:	90                   	nop
ffffffff80100db4:	90                   	nop
ffffffff80100db5:	90                   	nop
ffffffff80100db6:	90                   	nop
ffffffff80100db7:	90                   	nop
ffffffff80100db8:	90                   	nop
ffffffff80100db9:	90                   	nop
ffffffff80100dba:	90                   	nop
ffffffff80100dbb:	90                   	nop
ffffffff80100dbc:	90                   	nop
ffffffff80100dbd:	90                   	nop
ffffffff80100dbe:	90                   	nop
ffffffff80100dbf:	90                   	nop
ffffffff80100dc0:	90                   	nop
ffffffff80100dc1:	90                   	nop
ffffffff80100dc2:	90                   	nop
ffffffff80100dc3:	90                   	nop
ffffffff80100dc4:	90                   	nop
ffffffff80100dc5:	90                   	nop
ffffffff80100dc6:	90                   	nop
ffffffff80100dc7:	90                   	nop
ffffffff80100dc8:	90                   	nop
ffffffff80100dc9:	90                   	nop
ffffffff80100dca:	90                   	nop
ffffffff80100dcb:	90                   	nop
ffffffff80100dcc:	90                   	nop
ffffffff80100dcd:	90                   	nop
ffffffff80100dce:	90                   	nop
ffffffff80100dcf:	90                   	nop
ffffffff80100dd0:	90                   	nop
ffffffff80100dd1:	90                   	nop
ffffffff80100dd2:	90                   	nop
ffffffff80100dd3:	90                   	nop
ffffffff80100dd4:	90                   	nop
ffffffff80100dd5:	90                   	nop
ffffffff80100dd6:	90                   	nop
ffffffff80100dd7:	90                   	nop
ffffffff80100dd8:	90                   	nop
ffffffff80100dd9:	90                   	nop
ffffffff80100dda:	90                   	nop
ffffffff80100ddb:	90                   	nop
ffffffff80100ddc:	90                   	nop
ffffffff80100ddd:	90                   	nop
ffffffff80100dde:	90                   	nop
ffffffff80100ddf:	90                   	nop
ffffffff80100de0:	90                   	nop
ffffffff80100de1:	90                   	nop
ffffffff80100de2:	90                   	nop
ffffffff80100de3:	90                   	nop
ffffffff80100de4:	90                   	nop
ffffffff80100de5:	90                   	nop
ffffffff80100de6:	90                   	nop
ffffffff80100de7:	90                   	nop
ffffffff80100de8:	90                   	nop
ffffffff80100de9:	90                   	nop
ffffffff80100dea:	90                   	nop
ffffffff80100deb:	90                   	nop
ffffffff80100dec:	90                   	nop
ffffffff80100ded:	90                   	nop
ffffffff80100dee:	90                   	nop
ffffffff80100def:	90                   	nop
ffffffff80100df0:	90                   	nop
ffffffff80100df1:	90                   	nop
ffffffff80100df2:	90                   	nop
ffffffff80100df3:	90                   	nop
ffffffff80100df4:	90                   	nop
ffffffff80100df5:	90                   	nop
ffffffff80100df6:	90                   	nop
ffffffff80100df7:	90                   	nop
ffffffff80100df8:	90                   	nop
ffffffff80100df9:	90                   	nop
ffffffff80100dfa:	90                   	nop
ffffffff80100dfb:	90                   	nop
ffffffff80100dfc:	90                   	nop
ffffffff80100dfd:	90                   	nop
ffffffff80100dfe:	90                   	nop
ffffffff80100dff:	90                   	nop
ffffffff80100e00:	90                   	nop
ffffffff80100e01:	90                   	nop
ffffffff80100e02:	90                   	nop
ffffffff80100e03:	90                   	nop
ffffffff80100e04:	90                   	nop
ffffffff80100e05:	90                   	nop
ffffffff80100e06:	90                   	nop
ffffffff80100e07:	90                   	nop
ffffffff80100e08:	90                   	nop
ffffffff80100e09:	90                   	nop
ffffffff80100e0a:	90                   	nop
ffffffff80100e0b:	90                   	nop
ffffffff80100e0c:	90                   	nop
ffffffff80100e0d:	90                   	nop
ffffffff80100e0e:	90                   	nop
ffffffff80100e0f:	90                   	nop
ffffffff80100e10:	90                   	nop
ffffffff80100e11:	90                   	nop
ffffffff80100e12:	90                   	nop
ffffffff80100e13:	90                   	nop
ffffffff80100e14:	90                   	nop
ffffffff80100e15:	90                   	nop
ffffffff80100e16:	90                   	nop
ffffffff80100e17:	90                   	nop
ffffffff80100e18:	90                   	nop
ffffffff80100e19:	90                   	nop
ffffffff80100e1a:	90                   	nop
ffffffff80100e1b:	90                   	nop
ffffffff80100e1c:	90                   	nop
ffffffff80100e1d:	90                   	nop
ffffffff80100e1e:	90                   	nop
ffffffff80100e1f:	90                   	nop
ffffffff80100e20:	90                   	nop
ffffffff80100e21:	90                   	nop
ffffffff80100e22:	90                   	nop
ffffffff80100e23:	90                   	nop
ffffffff80100e24:	90                   	nop
ffffffff80100e25:	90                   	nop
ffffffff80100e26:	90                   	nop
ffffffff80100e27:	90                   	nop
ffffffff80100e28:	90                   	nop
ffffffff80100e29:	90                   	nop
ffffffff80100e2a:	90                   	nop
ffffffff80100e2b:	90                   	nop
ffffffff80100e2c:	90                   	nop
ffffffff80100e2d:	90                   	nop
ffffffff80100e2e:	90                   	nop
ffffffff80100e2f:	90                   	nop
ffffffff80100e30:	90                   	nop
ffffffff80100e31:	90                   	nop
ffffffff80100e32:	90                   	nop
ffffffff80100e33:	90                   	nop
ffffffff80100e34:	90                   	nop
ffffffff80100e35:	90                   	nop
ffffffff80100e36:	90                   	nop
ffffffff80100e37:	90                   	nop
ffffffff80100e38:	90                   	nop
ffffffff80100e39:	90                   	nop
ffffffff80100e3a:	90                   	nop
ffffffff80100e3b:	90                   	nop
ffffffff80100e3c:	90                   	nop
ffffffff80100e3d:	90                   	nop
ffffffff80100e3e:	90                   	nop
ffffffff80100e3f:	90                   	nop
ffffffff80100e40:	90                   	nop
ffffffff80100e41:	90                   	nop
ffffffff80100e42:	90                   	nop
ffffffff80100e43:	90                   	nop
ffffffff80100e44:	90                   	nop
ffffffff80100e45:	90                   	nop
ffffffff80100e46:	90                   	nop
ffffffff80100e47:	90                   	nop
ffffffff80100e48:	90                   	nop
ffffffff80100e49:	90                   	nop
ffffffff80100e4a:	90                   	nop
ffffffff80100e4b:	90                   	nop
ffffffff80100e4c:	90                   	nop
ffffffff80100e4d:	90                   	nop
ffffffff80100e4e:	90                   	nop
ffffffff80100e4f:	90                   	nop
ffffffff80100e50:	90                   	nop
ffffffff80100e51:	90                   	nop
ffffffff80100e52:	90                   	nop
ffffffff80100e53:	90                   	nop
ffffffff80100e54:	90                   	nop
ffffffff80100e55:	90                   	nop
ffffffff80100e56:	90                   	nop
ffffffff80100e57:	90                   	nop
ffffffff80100e58:	90                   	nop
ffffffff80100e59:	90                   	nop
ffffffff80100e5a:	90                   	nop
ffffffff80100e5b:	90                   	nop
ffffffff80100e5c:	90                   	nop
ffffffff80100e5d:	90                   	nop
ffffffff80100e5e:	90                   	nop
ffffffff80100e5f:	90                   	nop
ffffffff80100e60:	90                   	nop
ffffffff80100e61:	90                   	nop
ffffffff80100e62:	90                   	nop
ffffffff80100e63:	90                   	nop
ffffffff80100e64:	90                   	nop
ffffffff80100e65:	90                   	nop
ffffffff80100e66:	90                   	nop
ffffffff80100e67:	90                   	nop
ffffffff80100e68:	90                   	nop
ffffffff80100e69:	90                   	nop
ffffffff80100e6a:	90                   	nop
ffffffff80100e6b:	90                   	nop
ffffffff80100e6c:	90                   	nop
ffffffff80100e6d:	90                   	nop
ffffffff80100e6e:	90                   	nop
ffffffff80100e6f:	90                   	nop
ffffffff80100e70:	90                   	nop
ffffffff80100e71:	90                   	nop
ffffffff80100e72:	90                   	nop
ffffffff80100e73:	90                   	nop
ffffffff80100e74:	90                   	nop
ffffffff80100e75:	90                   	nop
ffffffff80100e76:	90                   	nop
ffffffff80100e77:	90                   	nop
ffffffff80100e78:	90                   	nop
ffffffff80100e79:	90                   	nop
ffffffff80100e7a:	90                   	nop
ffffffff80100e7b:	90                   	nop
ffffffff80100e7c:	90                   	nop
ffffffff80100e7d:	90                   	nop
ffffffff80100e7e:	90                   	nop
ffffffff80100e7f:	90                   	nop
ffffffff80100e80:	90                   	nop
ffffffff80100e81:	90                   	nop
ffffffff80100e82:	90                   	nop
ffffffff80100e83:	90                   	nop
ffffffff80100e84:	90                   	nop
ffffffff80100e85:	90                   	nop
ffffffff80100e86:	90                   	nop
ffffffff80100e87:	90                   	nop
ffffffff80100e88:	90                   	nop
ffffffff80100e89:	90                   	nop
ffffffff80100e8a:	90                   	nop
ffffffff80100e8b:	90                   	nop
ffffffff80100e8c:	90                   	nop
ffffffff80100e8d:	90                   	nop
ffffffff80100e8e:	90                   	nop
ffffffff80100e8f:	90                   	nop
ffffffff80100e90:	90                   	nop
ffffffff80100e91:	90                   	nop
ffffffff80100e92:	90                   	nop
ffffffff80100e93:	90                   	nop
ffffffff80100e94:	90                   	nop
ffffffff80100e95:	90                   	nop
ffffffff80100e96:	90                   	nop
ffffffff80100e97:	90                   	nop
ffffffff80100e98:	90                   	nop
ffffffff80100e99:	90                   	nop
ffffffff80100e9a:	90                   	nop
ffffffff80100e9b:	90                   	nop
ffffffff80100e9c:	90                   	nop
ffffffff80100e9d:	90                   	nop
ffffffff80100e9e:	90                   	nop
ffffffff80100e9f:	90                   	nop
ffffffff80100ea0:	90                   	nop
ffffffff80100ea1:	90                   	nop
ffffffff80100ea2:	90                   	nop
ffffffff80100ea3:	90                   	nop
ffffffff80100ea4:	90                   	nop
ffffffff80100ea5:	90                   	nop
ffffffff80100ea6:	90                   	nop
ffffffff80100ea7:	90                   	nop
ffffffff80100ea8:	90                   	nop
ffffffff80100ea9:	90                   	nop
ffffffff80100eaa:	90                   	nop
ffffffff80100eab:	90                   	nop
ffffffff80100eac:	90                   	nop
ffffffff80100ead:	90                   	nop
ffffffff80100eae:	90                   	nop
ffffffff80100eaf:	90                   	nop
ffffffff80100eb0:	90                   	nop
ffffffff80100eb1:	90                   	nop
ffffffff80100eb2:	90                   	nop
ffffffff80100eb3:	90                   	nop
ffffffff80100eb4:	90                   	nop
ffffffff80100eb5:	90                   	nop
ffffffff80100eb6:	90                   	nop
ffffffff80100eb7:	90                   	nop
ffffffff80100eb8:	90                   	nop
ffffffff80100eb9:	90                   	nop
ffffffff80100eba:	90                   	nop
ffffffff80100ebb:	90                   	nop
ffffffff80100ebc:	90                   	nop
ffffffff80100ebd:	90                   	nop
ffffffff80100ebe:	90                   	nop
ffffffff80100ebf:	90                   	nop
ffffffff80100ec0:	90                   	nop
ffffffff80100ec1:	90                   	nop
ffffffff80100ec2:	90                   	nop
ffffffff80100ec3:	90                   	nop
ffffffff80100ec4:	90                   	nop
ffffffff80100ec5:	90                   	nop
ffffffff80100ec6:	90                   	nop
ffffffff80100ec7:	90                   	nop
ffffffff80100ec8:	90                   	nop
ffffffff80100ec9:	90                   	nop
ffffffff80100eca:	90                   	nop
ffffffff80100ecb:	90                   	nop
ffffffff80100ecc:	90                   	nop
ffffffff80100ecd:	90                   	nop
ffffffff80100ece:	90                   	nop
ffffffff80100ecf:	90                   	nop
ffffffff80100ed0:	90                   	nop
ffffffff80100ed1:	90                   	nop
ffffffff80100ed2:	90                   	nop
ffffffff80100ed3:	90                   	nop
ffffffff80100ed4:	90                   	nop
ffffffff80100ed5:	90                   	nop
ffffffff80100ed6:	90                   	nop
ffffffff80100ed7:	90                   	nop
ffffffff80100ed8:	90                   	nop
ffffffff80100ed9:	90                   	nop
ffffffff80100eda:	90                   	nop
ffffffff80100edb:	90                   	nop
ffffffff80100edc:	90                   	nop
ffffffff80100edd:	90                   	nop
ffffffff80100ede:	90                   	nop
ffffffff80100edf:	90                   	nop
ffffffff80100ee0:	90                   	nop
ffffffff80100ee1:	90                   	nop
ffffffff80100ee2:	90                   	nop
ffffffff80100ee3:	90                   	nop
ffffffff80100ee4:	90                   	nop
ffffffff80100ee5:	90                   	nop
ffffffff80100ee6:	90                   	nop
ffffffff80100ee7:	90                   	nop
ffffffff80100ee8:	90                   	nop
ffffffff80100ee9:	90                   	nop
ffffffff80100eea:	90                   	nop
ffffffff80100eeb:	90                   	nop
ffffffff80100eec:	90                   	nop
ffffffff80100eed:	90                   	nop
ffffffff80100eee:	90                   	nop
ffffffff80100eef:	90                   	nop
ffffffff80100ef0:	90                   	nop
ffffffff80100ef1:	90                   	nop
ffffffff80100ef2:	90                   	nop
ffffffff80100ef3:	90                   	nop
ffffffff80100ef4:	90                   	nop
ffffffff80100ef5:	90                   	nop
ffffffff80100ef6:	90                   	nop
ffffffff80100ef7:	90                   	nop
ffffffff80100ef8:	90                   	nop
ffffffff80100ef9:	90                   	nop
ffffffff80100efa:	90                   	nop
ffffffff80100efb:	90                   	nop
ffffffff80100efc:	90                   	nop
ffffffff80100efd:	90                   	nop
ffffffff80100efe:	90                   	nop
ffffffff80100eff:	90                   	nop
ffffffff80100f00:	90                   	nop
ffffffff80100f01:	90                   	nop
ffffffff80100f02:	90                   	nop
ffffffff80100f03:	90                   	nop
ffffffff80100f04:	90                   	nop
ffffffff80100f05:	90                   	nop
ffffffff80100f06:	90                   	nop
ffffffff80100f07:	90                   	nop
ffffffff80100f08:	90                   	nop
ffffffff80100f09:	90                   	nop
ffffffff80100f0a:	90                   	nop
ffffffff80100f0b:	90                   	nop
ffffffff80100f0c:	90                   	nop
ffffffff80100f0d:	90                   	nop
ffffffff80100f0e:	90                   	nop
ffffffff80100f0f:	90                   	nop
ffffffff80100f10:	90                   	nop
ffffffff80100f11:	90                   	nop
ffffffff80100f12:	90                   	nop
ffffffff80100f13:	90                   	nop
ffffffff80100f14:	90                   	nop
ffffffff80100f15:	90                   	nop
ffffffff80100f16:	90                   	nop
ffffffff80100f17:	90                   	nop
ffffffff80100f18:	90                   	nop
ffffffff80100f19:	90                   	nop
ffffffff80100f1a:	90                   	nop
ffffffff80100f1b:	90                   	nop
ffffffff80100f1c:	90                   	nop
ffffffff80100f1d:	90                   	nop
ffffffff80100f1e:	90                   	nop
ffffffff80100f1f:	90                   	nop
ffffffff80100f20:	90                   	nop
ffffffff80100f21:	90                   	nop
ffffffff80100f22:	90                   	nop
ffffffff80100f23:	90                   	nop
ffffffff80100f24:	90                   	nop
ffffffff80100f25:	90                   	nop
ffffffff80100f26:	90                   	nop
ffffffff80100f27:	90                   	nop
ffffffff80100f28:	90                   	nop
ffffffff80100f29:	90                   	nop
ffffffff80100f2a:	90                   	nop
ffffffff80100f2b:	90                   	nop
ffffffff80100f2c:	90                   	nop
ffffffff80100f2d:	90                   	nop
ffffffff80100f2e:	90                   	nop
ffffffff80100f2f:	90                   	nop
ffffffff80100f30:	90                   	nop
ffffffff80100f31:	90                   	nop
ffffffff80100f32:	90                   	nop
ffffffff80100f33:	90                   	nop
ffffffff80100f34:	90                   	nop
ffffffff80100f35:	90                   	nop
ffffffff80100f36:	90                   	nop
ffffffff80100f37:	90                   	nop
ffffffff80100f38:	90                   	nop
ffffffff80100f39:	90                   	nop
ffffffff80100f3a:	90                   	nop
ffffffff80100f3b:	90                   	nop
ffffffff80100f3c:	90                   	nop
ffffffff80100f3d:	90                   	nop
ffffffff80100f3e:	90                   	nop
ffffffff80100f3f:	90                   	nop
ffffffff80100f40:	90                   	nop
ffffffff80100f41:	90                   	nop
ffffffff80100f42:	90                   	nop
ffffffff80100f43:	90                   	nop
ffffffff80100f44:	90                   	nop
ffffffff80100f45:	90                   	nop
ffffffff80100f46:	90                   	nop
ffffffff80100f47:	90                   	nop
ffffffff80100f48:	90                   	nop
ffffffff80100f49:	90                   	nop
ffffffff80100f4a:	90                   	nop
ffffffff80100f4b:	90                   	nop
ffffffff80100f4c:	90                   	nop
ffffffff80100f4d:	90                   	nop
ffffffff80100f4e:	90                   	nop
ffffffff80100f4f:	90                   	nop
ffffffff80100f50:	90                   	nop
ffffffff80100f51:	90                   	nop
ffffffff80100f52:	90                   	nop
ffffffff80100f53:	90                   	nop
ffffffff80100f54:	90                   	nop
ffffffff80100f55:	90                   	nop
ffffffff80100f56:	90                   	nop
ffffffff80100f57:	90                   	nop
ffffffff80100f58:	90                   	nop
ffffffff80100f59:	90                   	nop
ffffffff80100f5a:	90                   	nop
ffffffff80100f5b:	90                   	nop
ffffffff80100f5c:	90                   	nop
ffffffff80100f5d:	90                   	nop
ffffffff80100f5e:	90                   	nop
ffffffff80100f5f:	90                   	nop
ffffffff80100f60:	90                   	nop
ffffffff80100f61:	90                   	nop
ffffffff80100f62:	90                   	nop
ffffffff80100f63:	90                   	nop
ffffffff80100f64:	90                   	nop
ffffffff80100f65:	90                   	nop
ffffffff80100f66:	90                   	nop
ffffffff80100f67:	90                   	nop
ffffffff80100f68:	90                   	nop
ffffffff80100f69:	90                   	nop
ffffffff80100f6a:	90                   	nop
ffffffff80100f6b:	90                   	nop
ffffffff80100f6c:	90                   	nop
ffffffff80100f6d:	90                   	nop
ffffffff80100f6e:	90                   	nop
ffffffff80100f6f:	90                   	nop
ffffffff80100f70:	90                   	nop
ffffffff80100f71:	90                   	nop
ffffffff80100f72:	90                   	nop
ffffffff80100f73:	90                   	nop
ffffffff80100f74:	90                   	nop
ffffffff80100f75:	90                   	nop
ffffffff80100f76:	90                   	nop
ffffffff80100f77:	90                   	nop
ffffffff80100f78:	90                   	nop
ffffffff80100f79:	90                   	nop
ffffffff80100f7a:	90                   	nop
ffffffff80100f7b:	90                   	nop
ffffffff80100f7c:	90                   	nop
ffffffff80100f7d:	90                   	nop
ffffffff80100f7e:	90                   	nop
ffffffff80100f7f:	90                   	nop
ffffffff80100f80:	90                   	nop
ffffffff80100f81:	90                   	nop
ffffffff80100f82:	90                   	nop
ffffffff80100f83:	90                   	nop
ffffffff80100f84:	90                   	nop
ffffffff80100f85:	90                   	nop
ffffffff80100f86:	90                   	nop
ffffffff80100f87:	90                   	nop
ffffffff80100f88:	90                   	nop
ffffffff80100f89:	90                   	nop
ffffffff80100f8a:	90                   	nop
ffffffff80100f8b:	90                   	nop
ffffffff80100f8c:	90                   	nop
ffffffff80100f8d:	90                   	nop
ffffffff80100f8e:	90                   	nop
ffffffff80100f8f:	90                   	nop
ffffffff80100f90:	90                   	nop
ffffffff80100f91:	90                   	nop
ffffffff80100f92:	90                   	nop
ffffffff80100f93:	90                   	nop
ffffffff80100f94:	90                   	nop
ffffffff80100f95:	90                   	nop
ffffffff80100f96:	90                   	nop
ffffffff80100f97:	90                   	nop
ffffffff80100f98:	90                   	nop
ffffffff80100f99:	90                   	nop
ffffffff80100f9a:	90                   	nop
ffffffff80100f9b:	90                   	nop
ffffffff80100f9c:	90                   	nop
ffffffff80100f9d:	90                   	nop
ffffffff80100f9e:	90                   	nop
ffffffff80100f9f:	90                   	nop
ffffffff80100fa0:	90                   	nop
ffffffff80100fa1:	90                   	nop
ffffffff80100fa2:	90                   	nop
ffffffff80100fa3:	90                   	nop
ffffffff80100fa4:	90                   	nop
ffffffff80100fa5:	90                   	nop
ffffffff80100fa6:	90                   	nop
ffffffff80100fa7:	90                   	nop
ffffffff80100fa8:	90                   	nop
ffffffff80100fa9:	90                   	nop
ffffffff80100faa:	90                   	nop
ffffffff80100fab:	90                   	nop
ffffffff80100fac:	90                   	nop
ffffffff80100fad:	90                   	nop
ffffffff80100fae:	90                   	nop
ffffffff80100faf:	90                   	nop
ffffffff80100fb0:	90                   	nop
ffffffff80100fb1:	90                   	nop
ffffffff80100fb2:	90                   	nop
ffffffff80100fb3:	90                   	nop
ffffffff80100fb4:	90                   	nop
ffffffff80100fb5:	90                   	nop
ffffffff80100fb6:	90                   	nop
ffffffff80100fb7:	90                   	nop
ffffffff80100fb8:	90                   	nop
ffffffff80100fb9:	90                   	nop
ffffffff80100fba:	90                   	nop
ffffffff80100fbb:	90                   	nop
ffffffff80100fbc:	90                   	nop
ffffffff80100fbd:	90                   	nop
ffffffff80100fbe:	90                   	nop
ffffffff80100fbf:	90                   	nop
ffffffff80100fc0:	90                   	nop
ffffffff80100fc1:	90                   	nop
ffffffff80100fc2:	90                   	nop
ffffffff80100fc3:	90                   	nop
ffffffff80100fc4:	90                   	nop
ffffffff80100fc5:	90                   	nop
ffffffff80100fc6:	90                   	nop
ffffffff80100fc7:	90                   	nop
ffffffff80100fc8:	90                   	nop
ffffffff80100fc9:	90                   	nop
ffffffff80100fca:	90                   	nop
ffffffff80100fcb:	90                   	nop
ffffffff80100fcc:	90                   	nop
ffffffff80100fcd:	90                   	nop
ffffffff80100fce:	90                   	nop
ffffffff80100fcf:	90                   	nop
ffffffff80100fd0:	90                   	nop
ffffffff80100fd1:	90                   	nop
ffffffff80100fd2:	90                   	nop
ffffffff80100fd3:	90                   	nop
ffffffff80100fd4:	90                   	nop
ffffffff80100fd5:	90                   	nop
ffffffff80100fd6:	90                   	nop
ffffffff80100fd7:	90                   	nop
ffffffff80100fd8:	90                   	nop
ffffffff80100fd9:	90                   	nop
ffffffff80100fda:	90                   	nop
ffffffff80100fdb:	90                   	nop
ffffffff80100fdc:	90                   	nop
ffffffff80100fdd:	90                   	nop
ffffffff80100fde:	90                   	nop
ffffffff80100fdf:	90                   	nop
ffffffff80100fe0:	90                   	nop
ffffffff80100fe1:	90                   	nop
ffffffff80100fe2:	90                   	nop
ffffffff80100fe3:	90                   	nop
ffffffff80100fe4:	90                   	nop
ffffffff80100fe5:	90                   	nop
ffffffff80100fe6:	90                   	nop
ffffffff80100fe7:	90                   	nop
ffffffff80100fe8:	90                   	nop
ffffffff80100fe9:	90                   	nop
ffffffff80100fea:	90                   	nop
ffffffff80100feb:	90                   	nop
ffffffff80100fec:	90                   	nop
ffffffff80100fed:	90                   	nop
ffffffff80100fee:	90                   	nop
ffffffff80100fef:	90                   	nop
ffffffff80100ff0:	90                   	nop
ffffffff80100ff1:	90                   	nop
ffffffff80100ff2:	90                   	nop
ffffffff80100ff3:	90                   	nop
ffffffff80100ff4:	90                   	nop
ffffffff80100ff5:	90                   	nop
ffffffff80100ff6:	90                   	nop
ffffffff80100ff7:	90                   	nop
ffffffff80100ff8:	90                   	nop
ffffffff80100ff9:	90                   	nop
ffffffff80100ffa:	90                   	nop
ffffffff80100ffb:	90                   	nop
ffffffff80100ffc:	90                   	nop
ffffffff80100ffd:	90                   	nop
ffffffff80100ffe:	90                   	nop
ffffffff80100fff:	90                   	nop
	...

ffffffff80108000 <__RME_X64_Mboot_Entry>:
ffffffff80108000:	89 de                	mov    %ebx,%esi
ffffffff80108002:	fc                   	cld    
ffffffff80108003:	31 c0                	xor    %eax,%eax
ffffffff80108005:	bf 00 10 10 00       	mov    $0x101000,%edi
ffffffff8010800a:	b9 00 70 00 00       	mov    $0x7000,%ecx
ffffffff8010800f:	f3 aa                	rep stos %al,%es:(%rdi)
ffffffff80108011:	b8 03 20 10 00       	mov    $0x102003,%eax
ffffffff80108016:	a3 00 10 10 00 b8 03 	movabs %eax,0x102003b800101000
ffffffff8010801d:	20 10 
ffffffff8010801f:	00 a3 00 18 10 00    	add    %ah,0x101800(%rbx)
ffffffff80108025:	b8 03 30 10 00       	mov    $0x103003,%eax
ffffffff8010802a:	a3 f8 1f 10 00 b8 03 	movabs %eax,0x104003b800101ff8
ffffffff80108031:	40 10 
ffffffff80108033:	00 a3 00 20 10 00    	add    %ah,0x102000(%rbx)
ffffffff80108039:	b8 03 50 10 00       	mov    $0x105003,%eax
ffffffff8010803e:	a3 08 20 10 00 b8 03 	movabs %eax,0x106003b800102008
ffffffff80108045:	60 10 
ffffffff80108047:	00 a3 10 20 10 00    	add    %ah,0x102010(%rbx)
ffffffff8010804d:	b8 1b 70 10 00       	mov    $0x10701b,%eax
ffffffff80108052:	a3 18 20 10 00 b8 03 	movabs %eax,0x104003b800102018
ffffffff80108059:	40 10 
ffffffff8010805b:	00 a3 f0 3f 10 00    	add    %ah,0x103ff0(%rbx)
ffffffff80108061:	b8 03 50 10 00       	mov    $0x105003,%eax
ffffffff80108066:	a3 f8 3f 10 00 b8 83 	movabs %eax,0x83b800103ff8
ffffffff8010806d:	00 00 
ffffffff8010806f:	00 bb 00 40 10 00    	add    %bh,0x104000(%rbx)
ffffffff80108075:	b9 00 08 00 00       	mov    $0x800,%ecx

ffffffff8010807a <PDE_Loop>:
ffffffff8010807a:	89 03                	mov    %eax,(%rbx)
ffffffff8010807c:	05 00 00 20 00       	add    $0x200000,%eax
ffffffff80108081:	83 c3 08             	add    $0x8,%ebx
ffffffff80108084:	49 75 f3             	rex.WB jne ffffffff8010807a <PDE_Loop>
ffffffff80108087:	31 db                	xor    %ebx,%ebx

ffffffff80108089 <__RME_X64_SMP_Boot_32>:
ffffffff80108089:	b8 00 10 10 00       	mov    $0x101000,%eax
ffffffff8010808e:	0f 22 d8             	mov    %rax,%cr3
ffffffff80108091:	0f 01 15 28 81 10 00 	lgdt   0x108128(%rip)        # ffffffff802101c0 <__RME_X64_CPU_Local_Init+0x3860>
ffffffff80108098:	0f 20 e0             	mov    %cr4,%rax
ffffffff8010809b:	0f ba e8 05          	bts    $0x5,%eax
ffffffff8010809f:	0f 22 e0             	mov    %rax,%cr4
ffffffff801080a2:	b9 80 00 00 c0       	mov    $0xc0000080,%ecx
ffffffff801080a7:	0f 32                	rdmsr  
ffffffff801080a9:	0f ba e8 08          	bts    $0x8,%eax
ffffffff801080ad:	0f ba e8 0b          	bts    $0xb,%eax
ffffffff801080b1:	0f 30                	wrmsr  
ffffffff801080b3:	0f 20 c0             	mov    %cr0,%rax
ffffffff801080b6:	0f ba e8 1f          	bts    $0x1f,%eax
ffffffff801080ba:	0f 22 c0             	mov    %rax,%cr0
ffffffff801080bd:	ea                   	(bad)  
ffffffff801080be:	d0 80 10 00 08 00    	rolb   0x80010(%rax)
ffffffff801080c4:	66 90                	xchg   %ax,%ax
ffffffff801080c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff801080cd:	00 00 00 

ffffffff801080d0 <Boot_Low_64>:
ffffffff801080d0:	48 c7 c0 d9 80 10 80 	mov    $0xffffffff801080d9,%rax
ffffffff801080d7:	ff e0                	jmpq   *%rax

ffffffff801080d9 <_start>:
ffffffff801080d9:	48 31 c0             	xor    %rax,%rax
ffffffff801080dc:	8e d0                	mov    %eax,%ss
ffffffff801080de:	8e d8                	mov    %eax,%ds
ffffffff801080e0:	8e c0                	mov    %eax,%es
ffffffff801080e2:	8e e0                	mov    %eax,%fs
ffffffff801080e4:	8e e8                	mov    %eax,%gs
ffffffff801080e6:	85 db                	test   %ebx,%ebx
ffffffff801080e8:	75 14                	jne    ffffffff801080fe <Boot_SMP_64>
ffffffff801080ea:	48 c7 c0 00 b8 20 80 	mov    $0xffffffff8020b800,%rax
ffffffff801080f1:	48 89 c4             	mov    %rax,%rsp
ffffffff801080f4:	48 89 f7             	mov    %rsi,%rdi
ffffffff801080f7:	e9 94 c7 10 00       	jmpq   ffffffff80214890 <main>
ffffffff801080fc:	eb fe                	jmp    ffffffff801080fc <_start+0x23>

ffffffff801080fe <Boot_SMP_64>:
ffffffff801080fe:	48 c7 c0 00 70 00 00 	mov    $0x7000,%rax
ffffffff80108105:	48 8b 60 f0          	mov    -0x10(%rax),%rsp
ffffffff80108109:	e9 22 a7 10 00       	jmpq   ffffffff80212830 <__RME_SMP_Low_Level_Init>
ffffffff8010810e:	eb fe                	jmp    ffffffff8010810e <Boot_SMP_64+0x10>

ffffffff80108110 <Boot_GDT>:
	...
ffffffff8010811c:	00 98 20 00 00 00    	add    %bl,0x20(%rax)
ffffffff80108122:	00 00                	add    %al,(%rax)
ffffffff80108124:	00                   	.byte 0x0
ffffffff80108125:	90                   	nop
	...

ffffffff80108128 <Boot_GDT_Desc>:
ffffffff80108128:	17                   	(bad)  
ffffffff80108129:	00 10                	add    %dl,(%rax)
ffffffff8010812b:	81 10 00 00 00 00    	adcl   $0x0,(%rax)
ffffffff80108131:	00 0f                	add    %cl,(%rdi)
ffffffff80108133:	1f                   	(bad)  
ffffffff80108134:	40 00 66 2e          	add    %spl,0x2e(%rsi)
ffffffff80108138:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8010813f:	00 
ffffffff80108140:	90                   	nop
ffffffff80108141:	90                   	nop
ffffffff80108142:	90                   	nop
ffffffff80108143:	90                   	nop
ffffffff80108144:	90                   	nop
ffffffff80108145:	90                   	nop
ffffffff80108146:	90                   	nop
ffffffff80108147:	90                   	nop
ffffffff80108148:	90                   	nop
ffffffff80108149:	90                   	nop
ffffffff8010814a:	90                   	nop
ffffffff8010814b:	90                   	nop
ffffffff8010814c:	90                   	nop
ffffffff8010814d:	90                   	nop
ffffffff8010814e:	90                   	nop
ffffffff8010814f:	90                   	nop
ffffffff80108150:	90                   	nop
ffffffff80108151:	90                   	nop
ffffffff80108152:	90                   	nop
ffffffff80108153:	90                   	nop
ffffffff80108154:	90                   	nop
ffffffff80108155:	90                   	nop
ffffffff80108156:	90                   	nop
ffffffff80108157:	90                   	nop
ffffffff80108158:	90                   	nop
ffffffff80108159:	90                   	nop
ffffffff8010815a:	90                   	nop
ffffffff8010815b:	90                   	nop
ffffffff8010815c:	90                   	nop
ffffffff8010815d:	90                   	nop
ffffffff8010815e:	90                   	nop
ffffffff8010815f:	90                   	nop
ffffffff80108160:	90                   	nop
ffffffff80108161:	90                   	nop
ffffffff80108162:	90                   	nop
ffffffff80108163:	90                   	nop
ffffffff80108164:	90                   	nop
ffffffff80108165:	90                   	nop
ffffffff80108166:	90                   	nop
ffffffff80108167:	90                   	nop
ffffffff80108168:	90                   	nop
ffffffff80108169:	90                   	nop
ffffffff8010816a:	90                   	nop
ffffffff8010816b:	90                   	nop
ffffffff8010816c:	90                   	nop
ffffffff8010816d:	90                   	nop
ffffffff8010816e:	90                   	nop
ffffffff8010816f:	90                   	nop
ffffffff80108170:	90                   	nop
ffffffff80108171:	90                   	nop
ffffffff80108172:	90                   	nop
ffffffff80108173:	90                   	nop
ffffffff80108174:	90                   	nop
ffffffff80108175:	90                   	nop
ffffffff80108176:	90                   	nop
ffffffff80108177:	90                   	nop
ffffffff80108178:	90                   	nop
ffffffff80108179:	90                   	nop
ffffffff8010817a:	90                   	nop
ffffffff8010817b:	90                   	nop
ffffffff8010817c:	90                   	nop
ffffffff8010817d:	90                   	nop
ffffffff8010817e:	90                   	nop
ffffffff8010817f:	90                   	nop
ffffffff80108180:	90                   	nop
ffffffff80108181:	90                   	nop
ffffffff80108182:	90                   	nop
ffffffff80108183:	90                   	nop
ffffffff80108184:	90                   	nop
ffffffff80108185:	90                   	nop
ffffffff80108186:	90                   	nop
ffffffff80108187:	90                   	nop
ffffffff80108188:	90                   	nop
ffffffff80108189:	90                   	nop
ffffffff8010818a:	90                   	nop
ffffffff8010818b:	90                   	nop
ffffffff8010818c:	90                   	nop
ffffffff8010818d:	90                   	nop
ffffffff8010818e:	90                   	nop
ffffffff8010818f:	90                   	nop
ffffffff80108190:	90                   	nop
ffffffff80108191:	90                   	nop
ffffffff80108192:	90                   	nop
ffffffff80108193:	90                   	nop
ffffffff80108194:	90                   	nop
ffffffff80108195:	90                   	nop
ffffffff80108196:	90                   	nop
ffffffff80108197:	90                   	nop
ffffffff80108198:	90                   	nop
ffffffff80108199:	90                   	nop
ffffffff8010819a:	90                   	nop
ffffffff8010819b:	90                   	nop
ffffffff8010819c:	90                   	nop
ffffffff8010819d:	90                   	nop
ffffffff8010819e:	90                   	nop
ffffffff8010819f:	90                   	nop
ffffffff801081a0:	90                   	nop
ffffffff801081a1:	90                   	nop
ffffffff801081a2:	90                   	nop
ffffffff801081a3:	90                   	nop
ffffffff801081a4:	90                   	nop
ffffffff801081a5:	90                   	nop
ffffffff801081a6:	90                   	nop
ffffffff801081a7:	90                   	nop
ffffffff801081a8:	90                   	nop
ffffffff801081a9:	90                   	nop
ffffffff801081aa:	90                   	nop
ffffffff801081ab:	90                   	nop
ffffffff801081ac:	90                   	nop
ffffffff801081ad:	90                   	nop
ffffffff801081ae:	90                   	nop
ffffffff801081af:	90                   	nop
ffffffff801081b0:	90                   	nop
ffffffff801081b1:	90                   	nop
ffffffff801081b2:	90                   	nop
ffffffff801081b3:	90                   	nop
ffffffff801081b4:	90                   	nop
ffffffff801081b5:	90                   	nop
ffffffff801081b6:	90                   	nop
ffffffff801081b7:	90                   	nop
ffffffff801081b8:	90                   	nop
ffffffff801081b9:	90                   	nop
ffffffff801081ba:	90                   	nop
ffffffff801081bb:	90                   	nop
ffffffff801081bc:	90                   	nop
ffffffff801081bd:	90                   	nop
ffffffff801081be:	90                   	nop
ffffffff801081bf:	90                   	nop
ffffffff801081c0:	90                   	nop
ffffffff801081c1:	90                   	nop
ffffffff801081c2:	90                   	nop
ffffffff801081c3:	90                   	nop
ffffffff801081c4:	90                   	nop
ffffffff801081c5:	90                   	nop
ffffffff801081c6:	90                   	nop
ffffffff801081c7:	90                   	nop
ffffffff801081c8:	90                   	nop
ffffffff801081c9:	90                   	nop
ffffffff801081ca:	90                   	nop
ffffffff801081cb:	90                   	nop
ffffffff801081cc:	90                   	nop
ffffffff801081cd:	90                   	nop
ffffffff801081ce:	90                   	nop
ffffffff801081cf:	90                   	nop
ffffffff801081d0:	90                   	nop
ffffffff801081d1:	90                   	nop
ffffffff801081d2:	90                   	nop
ffffffff801081d3:	90                   	nop
ffffffff801081d4:	90                   	nop
ffffffff801081d5:	90                   	nop
ffffffff801081d6:	90                   	nop
ffffffff801081d7:	90                   	nop
ffffffff801081d8:	90                   	nop
ffffffff801081d9:	90                   	nop
ffffffff801081da:	90                   	nop
ffffffff801081db:	90                   	nop
ffffffff801081dc:	90                   	nop
ffffffff801081dd:	90                   	nop
ffffffff801081de:	90                   	nop
ffffffff801081df:	90                   	nop
ffffffff801081e0:	90                   	nop
ffffffff801081e1:	90                   	nop
ffffffff801081e2:	90                   	nop
ffffffff801081e3:	90                   	nop
ffffffff801081e4:	90                   	nop
ffffffff801081e5:	90                   	nop
ffffffff801081e6:	90                   	nop
ffffffff801081e7:	90                   	nop
ffffffff801081e8:	90                   	nop
ffffffff801081e9:	90                   	nop
ffffffff801081ea:	90                   	nop
ffffffff801081eb:	90                   	nop
ffffffff801081ec:	90                   	nop
ffffffff801081ed:	90                   	nop
ffffffff801081ee:	90                   	nop
ffffffff801081ef:	90                   	nop
ffffffff801081f0:	90                   	nop
ffffffff801081f1:	90                   	nop
ffffffff801081f2:	90                   	nop
ffffffff801081f3:	90                   	nop
ffffffff801081f4:	90                   	nop
ffffffff801081f5:	90                   	nop
ffffffff801081f6:	90                   	nop
ffffffff801081f7:	90                   	nop
ffffffff801081f8:	90                   	nop
ffffffff801081f9:	90                   	nop
ffffffff801081fa:	90                   	nop
ffffffff801081fb:	90                   	nop
ffffffff801081fc:	90                   	nop
ffffffff801081fd:	90                   	nop
ffffffff801081fe:	90                   	nop
ffffffff801081ff:	90                   	nop
ffffffff80108200:	90                   	nop
ffffffff80108201:	90                   	nop
ffffffff80108202:	90                   	nop
ffffffff80108203:	90                   	nop
ffffffff80108204:	90                   	nop
ffffffff80108205:	90                   	nop
ffffffff80108206:	90                   	nop
ffffffff80108207:	90                   	nop
ffffffff80108208:	90                   	nop
ffffffff80108209:	90                   	nop
ffffffff8010820a:	90                   	nop
ffffffff8010820b:	90                   	nop
ffffffff8010820c:	90                   	nop
ffffffff8010820d:	90                   	nop
ffffffff8010820e:	90                   	nop
ffffffff8010820f:	90                   	nop
ffffffff80108210:	90                   	nop
ffffffff80108211:	90                   	nop
ffffffff80108212:	90                   	nop
ffffffff80108213:	90                   	nop
ffffffff80108214:	90                   	nop
ffffffff80108215:	90                   	nop
ffffffff80108216:	90                   	nop
ffffffff80108217:	90                   	nop
ffffffff80108218:	90                   	nop
ffffffff80108219:	90                   	nop
ffffffff8010821a:	90                   	nop
ffffffff8010821b:	90                   	nop
ffffffff8010821c:	90                   	nop
ffffffff8010821d:	90                   	nop
ffffffff8010821e:	90                   	nop
ffffffff8010821f:	90                   	nop
ffffffff80108220:	90                   	nop
ffffffff80108221:	90                   	nop
ffffffff80108222:	90                   	nop
ffffffff80108223:	90                   	nop
ffffffff80108224:	90                   	nop
ffffffff80108225:	90                   	nop
ffffffff80108226:	90                   	nop
ffffffff80108227:	90                   	nop
ffffffff80108228:	90                   	nop
ffffffff80108229:	90                   	nop
ffffffff8010822a:	90                   	nop
ffffffff8010822b:	90                   	nop
ffffffff8010822c:	90                   	nop
ffffffff8010822d:	90                   	nop
ffffffff8010822e:	90                   	nop
ffffffff8010822f:	90                   	nop
ffffffff80108230:	90                   	nop
ffffffff80108231:	90                   	nop
ffffffff80108232:	90                   	nop
ffffffff80108233:	90                   	nop
ffffffff80108234:	90                   	nop
ffffffff80108235:	90                   	nop
ffffffff80108236:	90                   	nop
ffffffff80108237:	90                   	nop
ffffffff80108238:	90                   	nop
ffffffff80108239:	90                   	nop
ffffffff8010823a:	90                   	nop
ffffffff8010823b:	90                   	nop
ffffffff8010823c:	90                   	nop
ffffffff8010823d:	90                   	nop
ffffffff8010823e:	90                   	nop
ffffffff8010823f:	90                   	nop
ffffffff80108240:	90                   	nop
ffffffff80108241:	90                   	nop
ffffffff80108242:	90                   	nop
ffffffff80108243:	90                   	nop
ffffffff80108244:	90                   	nop
ffffffff80108245:	90                   	nop
ffffffff80108246:	90                   	nop
ffffffff80108247:	90                   	nop
ffffffff80108248:	90                   	nop
ffffffff80108249:	90                   	nop
ffffffff8010824a:	90                   	nop
ffffffff8010824b:	90                   	nop
ffffffff8010824c:	90                   	nop
ffffffff8010824d:	90                   	nop
ffffffff8010824e:	90                   	nop
ffffffff8010824f:	90                   	nop
ffffffff80108250:	90                   	nop
ffffffff80108251:	90                   	nop
ffffffff80108252:	90                   	nop
ffffffff80108253:	90                   	nop
ffffffff80108254:	90                   	nop
ffffffff80108255:	90                   	nop
ffffffff80108256:	90                   	nop
ffffffff80108257:	90                   	nop
ffffffff80108258:	90                   	nop
ffffffff80108259:	90                   	nop
ffffffff8010825a:	90                   	nop
ffffffff8010825b:	90                   	nop
ffffffff8010825c:	90                   	nop
ffffffff8010825d:	90                   	nop
ffffffff8010825e:	90                   	nop
ffffffff8010825f:	90                   	nop
ffffffff80108260:	90                   	nop
ffffffff80108261:	90                   	nop
ffffffff80108262:	90                   	nop
ffffffff80108263:	90                   	nop
ffffffff80108264:	90                   	nop
ffffffff80108265:	90                   	nop
ffffffff80108266:	90                   	nop
ffffffff80108267:	90                   	nop
ffffffff80108268:	90                   	nop
ffffffff80108269:	90                   	nop
ffffffff8010826a:	90                   	nop
ffffffff8010826b:	90                   	nop
ffffffff8010826c:	90                   	nop
ffffffff8010826d:	90                   	nop
ffffffff8010826e:	90                   	nop
ffffffff8010826f:	90                   	nop
ffffffff80108270:	90                   	nop
ffffffff80108271:	90                   	nop
ffffffff80108272:	90                   	nop
ffffffff80108273:	90                   	nop
ffffffff80108274:	90                   	nop
ffffffff80108275:	90                   	nop
ffffffff80108276:	90                   	nop
ffffffff80108277:	90                   	nop
ffffffff80108278:	90                   	nop
ffffffff80108279:	90                   	nop
ffffffff8010827a:	90                   	nop
ffffffff8010827b:	90                   	nop
ffffffff8010827c:	90                   	nop
ffffffff8010827d:	90                   	nop
ffffffff8010827e:	90                   	nop
ffffffff8010827f:	90                   	nop
ffffffff80108280:	90                   	nop
ffffffff80108281:	90                   	nop
ffffffff80108282:	90                   	nop
ffffffff80108283:	90                   	nop
ffffffff80108284:	90                   	nop
ffffffff80108285:	90                   	nop
ffffffff80108286:	90                   	nop
ffffffff80108287:	90                   	nop
ffffffff80108288:	90                   	nop
ffffffff80108289:	90                   	nop
ffffffff8010828a:	90                   	nop
ffffffff8010828b:	90                   	nop
ffffffff8010828c:	90                   	nop
ffffffff8010828d:	90                   	nop
ffffffff8010828e:	90                   	nop
ffffffff8010828f:	90                   	nop
ffffffff80108290:	90                   	nop
ffffffff80108291:	90                   	nop
ffffffff80108292:	90                   	nop
ffffffff80108293:	90                   	nop
ffffffff80108294:	90                   	nop
ffffffff80108295:	90                   	nop
ffffffff80108296:	90                   	nop
ffffffff80108297:	90                   	nop
ffffffff80108298:	90                   	nop
ffffffff80108299:	90                   	nop
ffffffff8010829a:	90                   	nop
ffffffff8010829b:	90                   	nop
ffffffff8010829c:	90                   	nop
ffffffff8010829d:	90                   	nop
ffffffff8010829e:	90                   	nop
ffffffff8010829f:	90                   	nop
ffffffff801082a0:	90                   	nop
ffffffff801082a1:	90                   	nop
ffffffff801082a2:	90                   	nop
ffffffff801082a3:	90                   	nop
ffffffff801082a4:	90                   	nop
ffffffff801082a5:	90                   	nop
ffffffff801082a6:	90                   	nop
ffffffff801082a7:	90                   	nop
ffffffff801082a8:	90                   	nop
ffffffff801082a9:	90                   	nop
ffffffff801082aa:	90                   	nop
ffffffff801082ab:	90                   	nop
ffffffff801082ac:	90                   	nop
ffffffff801082ad:	90                   	nop
ffffffff801082ae:	90                   	nop
ffffffff801082af:	90                   	nop
ffffffff801082b0:	90                   	nop
ffffffff801082b1:	90                   	nop
ffffffff801082b2:	90                   	nop
ffffffff801082b3:	90                   	nop
ffffffff801082b4:	90                   	nop
ffffffff801082b5:	90                   	nop
ffffffff801082b6:	90                   	nop
ffffffff801082b7:	90                   	nop
ffffffff801082b8:	90                   	nop
ffffffff801082b9:	90                   	nop
ffffffff801082ba:	90                   	nop
ffffffff801082bb:	90                   	nop
ffffffff801082bc:	90                   	nop
ffffffff801082bd:	90                   	nop
ffffffff801082be:	90                   	nop
ffffffff801082bf:	90                   	nop
ffffffff801082c0:	90                   	nop
ffffffff801082c1:	90                   	nop
ffffffff801082c2:	90                   	nop
ffffffff801082c3:	90                   	nop
ffffffff801082c4:	90                   	nop
ffffffff801082c5:	90                   	nop
ffffffff801082c6:	90                   	nop
ffffffff801082c7:	90                   	nop
ffffffff801082c8:	90                   	nop
ffffffff801082c9:	90                   	nop
ffffffff801082ca:	90                   	nop
ffffffff801082cb:	90                   	nop
ffffffff801082cc:	90                   	nop
ffffffff801082cd:	90                   	nop
ffffffff801082ce:	90                   	nop
ffffffff801082cf:	90                   	nop
ffffffff801082d0:	90                   	nop
ffffffff801082d1:	90                   	nop
ffffffff801082d2:	90                   	nop
ffffffff801082d3:	90                   	nop
ffffffff801082d4:	90                   	nop
ffffffff801082d5:	90                   	nop
ffffffff801082d6:	90                   	nop
ffffffff801082d7:	90                   	nop
ffffffff801082d8:	90                   	nop
ffffffff801082d9:	90                   	nop
ffffffff801082da:	90                   	nop
ffffffff801082db:	90                   	nop
ffffffff801082dc:	90                   	nop
ffffffff801082dd:	90                   	nop
ffffffff801082de:	90                   	nop
ffffffff801082df:	90                   	nop
ffffffff801082e0:	90                   	nop
ffffffff801082e1:	90                   	nop
ffffffff801082e2:	90                   	nop
ffffffff801082e3:	90                   	nop
ffffffff801082e4:	90                   	nop
ffffffff801082e5:	90                   	nop
ffffffff801082e6:	90                   	nop
ffffffff801082e7:	90                   	nop
ffffffff801082e8:	90                   	nop
ffffffff801082e9:	90                   	nop
ffffffff801082ea:	90                   	nop
ffffffff801082eb:	90                   	nop
ffffffff801082ec:	90                   	nop
ffffffff801082ed:	90                   	nop
ffffffff801082ee:	90                   	nop
ffffffff801082ef:	90                   	nop
ffffffff801082f0:	90                   	nop
ffffffff801082f1:	90                   	nop
ffffffff801082f2:	90                   	nop
ffffffff801082f3:	90                   	nop
ffffffff801082f4:	90                   	nop
ffffffff801082f5:	90                   	nop
ffffffff801082f6:	90                   	nop
ffffffff801082f7:	90                   	nop
ffffffff801082f8:	90                   	nop
ffffffff801082f9:	90                   	nop
ffffffff801082fa:	90                   	nop
ffffffff801082fb:	90                   	nop
ffffffff801082fc:	90                   	nop
ffffffff801082fd:	90                   	nop
ffffffff801082fe:	90                   	nop
ffffffff801082ff:	90                   	nop
ffffffff80108300:	90                   	nop
ffffffff80108301:	90                   	nop
ffffffff80108302:	90                   	nop
ffffffff80108303:	90                   	nop
ffffffff80108304:	90                   	nop
ffffffff80108305:	90                   	nop
ffffffff80108306:	90                   	nop
ffffffff80108307:	90                   	nop
ffffffff80108308:	90                   	nop
ffffffff80108309:	90                   	nop
ffffffff8010830a:	90                   	nop
ffffffff8010830b:	90                   	nop
ffffffff8010830c:	90                   	nop
ffffffff8010830d:	90                   	nop
ffffffff8010830e:	90                   	nop
ffffffff8010830f:	90                   	nop
ffffffff80108310:	90                   	nop
ffffffff80108311:	90                   	nop
ffffffff80108312:	90                   	nop
ffffffff80108313:	90                   	nop
ffffffff80108314:	90                   	nop
ffffffff80108315:	90                   	nop
ffffffff80108316:	90                   	nop
ffffffff80108317:	90                   	nop
ffffffff80108318:	90                   	nop
ffffffff80108319:	90                   	nop
ffffffff8010831a:	90                   	nop
ffffffff8010831b:	90                   	nop
ffffffff8010831c:	90                   	nop
ffffffff8010831d:	90                   	nop
ffffffff8010831e:	90                   	nop
ffffffff8010831f:	90                   	nop
ffffffff80108320:	90                   	nop
ffffffff80108321:	90                   	nop
ffffffff80108322:	90                   	nop
ffffffff80108323:	90                   	nop
ffffffff80108324:	90                   	nop
ffffffff80108325:	90                   	nop
ffffffff80108326:	90                   	nop
ffffffff80108327:	90                   	nop
ffffffff80108328:	90                   	nop
ffffffff80108329:	90                   	nop
ffffffff8010832a:	90                   	nop
ffffffff8010832b:	90                   	nop
ffffffff8010832c:	90                   	nop
ffffffff8010832d:	90                   	nop
ffffffff8010832e:	90                   	nop
ffffffff8010832f:	90                   	nop
ffffffff80108330:	90                   	nop
ffffffff80108331:	90                   	nop
ffffffff80108332:	90                   	nop
ffffffff80108333:	90                   	nop
ffffffff80108334:	90                   	nop
ffffffff80108335:	90                   	nop
ffffffff80108336:	90                   	nop
ffffffff80108337:	90                   	nop
ffffffff80108338:	90                   	nop
ffffffff80108339:	90                   	nop
ffffffff8010833a:	90                   	nop
ffffffff8010833b:	90                   	nop
ffffffff8010833c:	90                   	nop
ffffffff8010833d:	90                   	nop
ffffffff8010833e:	90                   	nop
ffffffff8010833f:	90                   	nop
ffffffff80108340:	90                   	nop
ffffffff80108341:	90                   	nop
ffffffff80108342:	90                   	nop
ffffffff80108343:	90                   	nop
ffffffff80108344:	90                   	nop
ffffffff80108345:	90                   	nop
ffffffff80108346:	90                   	nop
ffffffff80108347:	90                   	nop
ffffffff80108348:	90                   	nop
ffffffff80108349:	90                   	nop
ffffffff8010834a:	90                   	nop
ffffffff8010834b:	90                   	nop
ffffffff8010834c:	90                   	nop
ffffffff8010834d:	90                   	nop
ffffffff8010834e:	90                   	nop
ffffffff8010834f:	90                   	nop
ffffffff80108350:	90                   	nop
ffffffff80108351:	90                   	nop
ffffffff80108352:	90                   	nop
ffffffff80108353:	90                   	nop
ffffffff80108354:	90                   	nop
ffffffff80108355:	90                   	nop
ffffffff80108356:	90                   	nop
ffffffff80108357:	90                   	nop
ffffffff80108358:	90                   	nop
ffffffff80108359:	90                   	nop
ffffffff8010835a:	90                   	nop
ffffffff8010835b:	90                   	nop
ffffffff8010835c:	90                   	nop
ffffffff8010835d:	90                   	nop
ffffffff8010835e:	90                   	nop
ffffffff8010835f:	90                   	nop
ffffffff80108360:	90                   	nop
ffffffff80108361:	90                   	nop
ffffffff80108362:	90                   	nop
ffffffff80108363:	90                   	nop
ffffffff80108364:	90                   	nop
ffffffff80108365:	90                   	nop
ffffffff80108366:	90                   	nop
ffffffff80108367:	90                   	nop
ffffffff80108368:	90                   	nop
ffffffff80108369:	90                   	nop
ffffffff8010836a:	90                   	nop
ffffffff8010836b:	90                   	nop
ffffffff8010836c:	90                   	nop
ffffffff8010836d:	90                   	nop
ffffffff8010836e:	90                   	nop
ffffffff8010836f:	90                   	nop
ffffffff80108370:	90                   	nop
ffffffff80108371:	90                   	nop
ffffffff80108372:	90                   	nop
ffffffff80108373:	90                   	nop
ffffffff80108374:	90                   	nop
ffffffff80108375:	90                   	nop
ffffffff80108376:	90                   	nop
ffffffff80108377:	90                   	nop
ffffffff80108378:	90                   	nop
ffffffff80108379:	90                   	nop
ffffffff8010837a:	90                   	nop
ffffffff8010837b:	90                   	nop
ffffffff8010837c:	90                   	nop
ffffffff8010837d:	90                   	nop
ffffffff8010837e:	90                   	nop
ffffffff8010837f:	90                   	nop
ffffffff80108380:	90                   	nop
ffffffff80108381:	90                   	nop
ffffffff80108382:	90                   	nop
ffffffff80108383:	90                   	nop
ffffffff80108384:	90                   	nop
ffffffff80108385:	90                   	nop
ffffffff80108386:	90                   	nop
ffffffff80108387:	90                   	nop
ffffffff80108388:	90                   	nop
ffffffff80108389:	90                   	nop
ffffffff8010838a:	90                   	nop
ffffffff8010838b:	90                   	nop
ffffffff8010838c:	90                   	nop
ffffffff8010838d:	90                   	nop
ffffffff8010838e:	90                   	nop
ffffffff8010838f:	90                   	nop
ffffffff80108390:	90                   	nop
ffffffff80108391:	90                   	nop
ffffffff80108392:	90                   	nop
ffffffff80108393:	90                   	nop
ffffffff80108394:	90                   	nop
ffffffff80108395:	90                   	nop
ffffffff80108396:	90                   	nop
ffffffff80108397:	90                   	nop
ffffffff80108398:	90                   	nop
ffffffff80108399:	90                   	nop
ffffffff8010839a:	90                   	nop
ffffffff8010839b:	90                   	nop
ffffffff8010839c:	90                   	nop
ffffffff8010839d:	90                   	nop
ffffffff8010839e:	90                   	nop
ffffffff8010839f:	90                   	nop
ffffffff801083a0:	90                   	nop
ffffffff801083a1:	90                   	nop
ffffffff801083a2:	90                   	nop
ffffffff801083a3:	90                   	nop
ffffffff801083a4:	90                   	nop
ffffffff801083a5:	90                   	nop
ffffffff801083a6:	90                   	nop
ffffffff801083a7:	90                   	nop
ffffffff801083a8:	90                   	nop
ffffffff801083a9:	90                   	nop
ffffffff801083aa:	90                   	nop
ffffffff801083ab:	90                   	nop
ffffffff801083ac:	90                   	nop
ffffffff801083ad:	90                   	nop
ffffffff801083ae:	90                   	nop
ffffffff801083af:	90                   	nop
ffffffff801083b0:	90                   	nop
ffffffff801083b1:	90                   	nop
ffffffff801083b2:	90                   	nop
ffffffff801083b3:	90                   	nop
ffffffff801083b4:	90                   	nop
ffffffff801083b5:	90                   	nop
ffffffff801083b6:	90                   	nop
ffffffff801083b7:	90                   	nop
ffffffff801083b8:	90                   	nop
ffffffff801083b9:	90                   	nop
ffffffff801083ba:	90                   	nop
ffffffff801083bb:	90                   	nop
ffffffff801083bc:	90                   	nop
ffffffff801083bd:	90                   	nop
ffffffff801083be:	90                   	nop
ffffffff801083bf:	90                   	nop
ffffffff801083c0:	90                   	nop
ffffffff801083c1:	90                   	nop
ffffffff801083c2:	90                   	nop
ffffffff801083c3:	90                   	nop
ffffffff801083c4:	90                   	nop
ffffffff801083c5:	90                   	nop
ffffffff801083c6:	90                   	nop
ffffffff801083c7:	90                   	nop
ffffffff801083c8:	90                   	nop
ffffffff801083c9:	90                   	nop
ffffffff801083ca:	90                   	nop
ffffffff801083cb:	90                   	nop
ffffffff801083cc:	90                   	nop
ffffffff801083cd:	90                   	nop
ffffffff801083ce:	90                   	nop
ffffffff801083cf:	90                   	nop
ffffffff801083d0:	90                   	nop
ffffffff801083d1:	90                   	nop
ffffffff801083d2:	90                   	nop
ffffffff801083d3:	90                   	nop
ffffffff801083d4:	90                   	nop
ffffffff801083d5:	90                   	nop
ffffffff801083d6:	90                   	nop
ffffffff801083d7:	90                   	nop
ffffffff801083d8:	90                   	nop
ffffffff801083d9:	90                   	nop
ffffffff801083da:	90                   	nop
ffffffff801083db:	90                   	nop
ffffffff801083dc:	90                   	nop
ffffffff801083dd:	90                   	nop
ffffffff801083de:	90                   	nop
ffffffff801083df:	90                   	nop
ffffffff801083e0:	90                   	nop
ffffffff801083e1:	90                   	nop
ffffffff801083e2:	90                   	nop
ffffffff801083e3:	90                   	nop
ffffffff801083e4:	90                   	nop
ffffffff801083e5:	90                   	nop
ffffffff801083e6:	90                   	nop
ffffffff801083e7:	90                   	nop
ffffffff801083e8:	90                   	nop
ffffffff801083e9:	90                   	nop
ffffffff801083ea:	90                   	nop
ffffffff801083eb:	90                   	nop
ffffffff801083ec:	90                   	nop
ffffffff801083ed:	90                   	nop
ffffffff801083ee:	90                   	nop
ffffffff801083ef:	90                   	nop
ffffffff801083f0:	90                   	nop
ffffffff801083f1:	90                   	nop
ffffffff801083f2:	90                   	nop
ffffffff801083f3:	90                   	nop
ffffffff801083f4:	90                   	nop
ffffffff801083f5:	90                   	nop
ffffffff801083f6:	90                   	nop
ffffffff801083f7:	90                   	nop
ffffffff801083f8:	90                   	nop
ffffffff801083f9:	90                   	nop
ffffffff801083fa:	90                   	nop
ffffffff801083fb:	90                   	nop
ffffffff801083fc:	90                   	nop
ffffffff801083fd:	90                   	nop
ffffffff801083fe:	90                   	nop
ffffffff801083ff:	90                   	nop
ffffffff80108400:	90                   	nop
ffffffff80108401:	90                   	nop
ffffffff80108402:	90                   	nop
ffffffff80108403:	90                   	nop
ffffffff80108404:	90                   	nop
ffffffff80108405:	90                   	nop
ffffffff80108406:	90                   	nop
ffffffff80108407:	90                   	nop
ffffffff80108408:	90                   	nop
ffffffff80108409:	90                   	nop
ffffffff8010840a:	90                   	nop
ffffffff8010840b:	90                   	nop
ffffffff8010840c:	90                   	nop
ffffffff8010840d:	90                   	nop
ffffffff8010840e:	90                   	nop
ffffffff8010840f:	90                   	nop
ffffffff80108410:	90                   	nop
ffffffff80108411:	90                   	nop
ffffffff80108412:	90                   	nop
ffffffff80108413:	90                   	nop
ffffffff80108414:	90                   	nop
ffffffff80108415:	90                   	nop
ffffffff80108416:	90                   	nop
ffffffff80108417:	90                   	nop
ffffffff80108418:	90                   	nop
ffffffff80108419:	90                   	nop
ffffffff8010841a:	90                   	nop
ffffffff8010841b:	90                   	nop
ffffffff8010841c:	90                   	nop
ffffffff8010841d:	90                   	nop
ffffffff8010841e:	90                   	nop
ffffffff8010841f:	90                   	nop
ffffffff80108420:	90                   	nop
ffffffff80108421:	90                   	nop
ffffffff80108422:	90                   	nop
ffffffff80108423:	90                   	nop
ffffffff80108424:	90                   	nop
ffffffff80108425:	90                   	nop
ffffffff80108426:	90                   	nop
ffffffff80108427:	90                   	nop
ffffffff80108428:	90                   	nop
ffffffff80108429:	90                   	nop
ffffffff8010842a:	90                   	nop
ffffffff8010842b:	90                   	nop
ffffffff8010842c:	90                   	nop
ffffffff8010842d:	90                   	nop
ffffffff8010842e:	90                   	nop
ffffffff8010842f:	90                   	nop
ffffffff80108430:	90                   	nop
ffffffff80108431:	90                   	nop
ffffffff80108432:	90                   	nop
ffffffff80108433:	90                   	nop
ffffffff80108434:	90                   	nop
ffffffff80108435:	90                   	nop
ffffffff80108436:	90                   	nop
ffffffff80108437:	90                   	nop
ffffffff80108438:	90                   	nop
ffffffff80108439:	90                   	nop
ffffffff8010843a:	90                   	nop
ffffffff8010843b:	90                   	nop
ffffffff8010843c:	90                   	nop
ffffffff8010843d:	90                   	nop
ffffffff8010843e:	90                   	nop
ffffffff8010843f:	90                   	nop
ffffffff80108440:	90                   	nop
ffffffff80108441:	90                   	nop
ffffffff80108442:	90                   	nop
ffffffff80108443:	90                   	nop
ffffffff80108444:	90                   	nop
ffffffff80108445:	90                   	nop
ffffffff80108446:	90                   	nop
ffffffff80108447:	90                   	nop
ffffffff80108448:	90                   	nop
ffffffff80108449:	90                   	nop
ffffffff8010844a:	90                   	nop
ffffffff8010844b:	90                   	nop
ffffffff8010844c:	90                   	nop
ffffffff8010844d:	90                   	nop
ffffffff8010844e:	90                   	nop
ffffffff8010844f:	90                   	nop
ffffffff80108450:	90                   	nop
ffffffff80108451:	90                   	nop
ffffffff80108452:	90                   	nop
ffffffff80108453:	90                   	nop
ffffffff80108454:	90                   	nop
ffffffff80108455:	90                   	nop
ffffffff80108456:	90                   	nop
ffffffff80108457:	90                   	nop
ffffffff80108458:	90                   	nop
ffffffff80108459:	90                   	nop
ffffffff8010845a:	90                   	nop
ffffffff8010845b:	90                   	nop
ffffffff8010845c:	90                   	nop
ffffffff8010845d:	90                   	nop
ffffffff8010845e:	90                   	nop
ffffffff8010845f:	90                   	nop
ffffffff80108460:	90                   	nop
ffffffff80108461:	90                   	nop
ffffffff80108462:	90                   	nop
ffffffff80108463:	90                   	nop
ffffffff80108464:	90                   	nop
ffffffff80108465:	90                   	nop
ffffffff80108466:	90                   	nop
ffffffff80108467:	90                   	nop
ffffffff80108468:	90                   	nop
ffffffff80108469:	90                   	nop
ffffffff8010846a:	90                   	nop
ffffffff8010846b:	90                   	nop
ffffffff8010846c:	90                   	nop
ffffffff8010846d:	90                   	nop
ffffffff8010846e:	90                   	nop
ffffffff8010846f:	90                   	nop
ffffffff80108470:	90                   	nop
ffffffff80108471:	90                   	nop
ffffffff80108472:	90                   	nop
ffffffff80108473:	90                   	nop
ffffffff80108474:	90                   	nop
ffffffff80108475:	90                   	nop
ffffffff80108476:	90                   	nop
ffffffff80108477:	90                   	nop
ffffffff80108478:	90                   	nop
ffffffff80108479:	90                   	nop
ffffffff8010847a:	90                   	nop
ffffffff8010847b:	90                   	nop
ffffffff8010847c:	90                   	nop
ffffffff8010847d:	90                   	nop
ffffffff8010847e:	90                   	nop
ffffffff8010847f:	90                   	nop
ffffffff80108480:	90                   	nop
ffffffff80108481:	90                   	nop
ffffffff80108482:	90                   	nop
ffffffff80108483:	90                   	nop
ffffffff80108484:	90                   	nop
ffffffff80108485:	90                   	nop
ffffffff80108486:	90                   	nop
ffffffff80108487:	90                   	nop
ffffffff80108488:	90                   	nop
ffffffff80108489:	90                   	nop
ffffffff8010848a:	90                   	nop
ffffffff8010848b:	90                   	nop
ffffffff8010848c:	90                   	nop
ffffffff8010848d:	90                   	nop
ffffffff8010848e:	90                   	nop
ffffffff8010848f:	90                   	nop
ffffffff80108490:	90                   	nop
ffffffff80108491:	90                   	nop
ffffffff80108492:	90                   	nop
ffffffff80108493:	90                   	nop
ffffffff80108494:	90                   	nop
ffffffff80108495:	90                   	nop
ffffffff80108496:	90                   	nop
ffffffff80108497:	90                   	nop
ffffffff80108498:	90                   	nop
ffffffff80108499:	90                   	nop
ffffffff8010849a:	90                   	nop
ffffffff8010849b:	90                   	nop
ffffffff8010849c:	90                   	nop
ffffffff8010849d:	90                   	nop
ffffffff8010849e:	90                   	nop
ffffffff8010849f:	90                   	nop
ffffffff801084a0:	90                   	nop
ffffffff801084a1:	90                   	nop
ffffffff801084a2:	90                   	nop
ffffffff801084a3:	90                   	nop
ffffffff801084a4:	90                   	nop
ffffffff801084a5:	90                   	nop
ffffffff801084a6:	90                   	nop
ffffffff801084a7:	90                   	nop
ffffffff801084a8:	90                   	nop
ffffffff801084a9:	90                   	nop
ffffffff801084aa:	90                   	nop
ffffffff801084ab:	90                   	nop
ffffffff801084ac:	90                   	nop
ffffffff801084ad:	90                   	nop
ffffffff801084ae:	90                   	nop
ffffffff801084af:	90                   	nop
ffffffff801084b0:	90                   	nop
ffffffff801084b1:	90                   	nop
ffffffff801084b2:	90                   	nop
ffffffff801084b3:	90                   	nop
ffffffff801084b4:	90                   	nop
ffffffff801084b5:	90                   	nop
ffffffff801084b6:	90                   	nop
ffffffff801084b7:	90                   	nop
ffffffff801084b8:	90                   	nop
ffffffff801084b9:	90                   	nop
ffffffff801084ba:	90                   	nop
ffffffff801084bb:	90                   	nop
ffffffff801084bc:	90                   	nop
ffffffff801084bd:	90                   	nop
ffffffff801084be:	90                   	nop
ffffffff801084bf:	90                   	nop
ffffffff801084c0:	90                   	nop
ffffffff801084c1:	90                   	nop
ffffffff801084c2:	90                   	nop
ffffffff801084c3:	90                   	nop
ffffffff801084c4:	90                   	nop
ffffffff801084c5:	90                   	nop
ffffffff801084c6:	90                   	nop
ffffffff801084c7:	90                   	nop
ffffffff801084c8:	90                   	nop
ffffffff801084c9:	90                   	nop
ffffffff801084ca:	90                   	nop
ffffffff801084cb:	90                   	nop
ffffffff801084cc:	90                   	nop
ffffffff801084cd:	90                   	nop
ffffffff801084ce:	90                   	nop
ffffffff801084cf:	90                   	nop
ffffffff801084d0:	90                   	nop
ffffffff801084d1:	90                   	nop
ffffffff801084d2:	90                   	nop
ffffffff801084d3:	90                   	nop
ffffffff801084d4:	90                   	nop
ffffffff801084d5:	90                   	nop
ffffffff801084d6:	90                   	nop
ffffffff801084d7:	90                   	nop
ffffffff801084d8:	90                   	nop
ffffffff801084d9:	90                   	nop
ffffffff801084da:	90                   	nop
ffffffff801084db:	90                   	nop
ffffffff801084dc:	90                   	nop
ffffffff801084dd:	90                   	nop
ffffffff801084de:	90                   	nop
ffffffff801084df:	90                   	nop
ffffffff801084e0:	90                   	nop
ffffffff801084e1:	90                   	nop
ffffffff801084e2:	90                   	nop
ffffffff801084e3:	90                   	nop
ffffffff801084e4:	90                   	nop
ffffffff801084e5:	90                   	nop
ffffffff801084e6:	90                   	nop
ffffffff801084e7:	90                   	nop
ffffffff801084e8:	90                   	nop
ffffffff801084e9:	90                   	nop
ffffffff801084ea:	90                   	nop
ffffffff801084eb:	90                   	nop
ffffffff801084ec:	90                   	nop
ffffffff801084ed:	90                   	nop
ffffffff801084ee:	90                   	nop
ffffffff801084ef:	90                   	nop
ffffffff801084f0:	90                   	nop
ffffffff801084f1:	90                   	nop
ffffffff801084f2:	90                   	nop
ffffffff801084f3:	90                   	nop
ffffffff801084f4:	90                   	nop
ffffffff801084f5:	90                   	nop
ffffffff801084f6:	90                   	nop
ffffffff801084f7:	90                   	nop
ffffffff801084f8:	90                   	nop
ffffffff801084f9:	90                   	nop
ffffffff801084fa:	90                   	nop
ffffffff801084fb:	90                   	nop
ffffffff801084fc:	90                   	nop
ffffffff801084fd:	90                   	nop
ffffffff801084fe:	90                   	nop
ffffffff801084ff:	90                   	nop
ffffffff80108500:	90                   	nop
ffffffff80108501:	90                   	nop
ffffffff80108502:	90                   	nop
ffffffff80108503:	90                   	nop
ffffffff80108504:	90                   	nop
ffffffff80108505:	90                   	nop
ffffffff80108506:	90                   	nop
ffffffff80108507:	90                   	nop
ffffffff80108508:	90                   	nop
ffffffff80108509:	90                   	nop
ffffffff8010850a:	90                   	nop
ffffffff8010850b:	90                   	nop
ffffffff8010850c:	90                   	nop
ffffffff8010850d:	90                   	nop
ffffffff8010850e:	90                   	nop
ffffffff8010850f:	90                   	nop
ffffffff80108510:	90                   	nop
ffffffff80108511:	90                   	nop
ffffffff80108512:	90                   	nop
ffffffff80108513:	90                   	nop
ffffffff80108514:	90                   	nop
ffffffff80108515:	90                   	nop
ffffffff80108516:	90                   	nop
ffffffff80108517:	90                   	nop
ffffffff80108518:	90                   	nop
ffffffff80108519:	90                   	nop
ffffffff8010851a:	90                   	nop
ffffffff8010851b:	90                   	nop
ffffffff8010851c:	90                   	nop
ffffffff8010851d:	90                   	nop
ffffffff8010851e:	90                   	nop
ffffffff8010851f:	90                   	nop
ffffffff80108520:	90                   	nop
ffffffff80108521:	90                   	nop
ffffffff80108522:	90                   	nop
ffffffff80108523:	90                   	nop
ffffffff80108524:	90                   	nop
ffffffff80108525:	90                   	nop
ffffffff80108526:	90                   	nop
ffffffff80108527:	90                   	nop
ffffffff80108528:	90                   	nop
ffffffff80108529:	90                   	nop
ffffffff8010852a:	90                   	nop
ffffffff8010852b:	90                   	nop
ffffffff8010852c:	90                   	nop
ffffffff8010852d:	90                   	nop
ffffffff8010852e:	90                   	nop
ffffffff8010852f:	90                   	nop
ffffffff80108530:	90                   	nop
ffffffff80108531:	90                   	nop
ffffffff80108532:	90                   	nop
ffffffff80108533:	90                   	nop
ffffffff80108534:	90                   	nop
ffffffff80108535:	90                   	nop
ffffffff80108536:	90                   	nop
ffffffff80108537:	90                   	nop
ffffffff80108538:	90                   	nop
ffffffff80108539:	90                   	nop
ffffffff8010853a:	90                   	nop
ffffffff8010853b:	90                   	nop
ffffffff8010853c:	90                   	nop
ffffffff8010853d:	90                   	nop
ffffffff8010853e:	90                   	nop
ffffffff8010853f:	90                   	nop
ffffffff80108540:	90                   	nop
ffffffff80108541:	90                   	nop
ffffffff80108542:	90                   	nop
ffffffff80108543:	90                   	nop
ffffffff80108544:	90                   	nop
ffffffff80108545:	90                   	nop
ffffffff80108546:	90                   	nop
ffffffff80108547:	90                   	nop
ffffffff80108548:	90                   	nop
ffffffff80108549:	90                   	nop
ffffffff8010854a:	90                   	nop
ffffffff8010854b:	90                   	nop
ffffffff8010854c:	90                   	nop
ffffffff8010854d:	90                   	nop
ffffffff8010854e:	90                   	nop
ffffffff8010854f:	90                   	nop
ffffffff80108550:	90                   	nop
ffffffff80108551:	90                   	nop
ffffffff80108552:	90                   	nop
ffffffff80108553:	90                   	nop
ffffffff80108554:	90                   	nop
ffffffff80108555:	90                   	nop
ffffffff80108556:	90                   	nop
ffffffff80108557:	90                   	nop
ffffffff80108558:	90                   	nop
ffffffff80108559:	90                   	nop
ffffffff8010855a:	90                   	nop
ffffffff8010855b:	90                   	nop
ffffffff8010855c:	90                   	nop
ffffffff8010855d:	90                   	nop
ffffffff8010855e:	90                   	nop
ffffffff8010855f:	90                   	nop
ffffffff80108560:	90                   	nop
ffffffff80108561:	90                   	nop
ffffffff80108562:	90                   	nop
ffffffff80108563:	90                   	nop
ffffffff80108564:	90                   	nop
ffffffff80108565:	90                   	nop
ffffffff80108566:	90                   	nop
ffffffff80108567:	90                   	nop
ffffffff80108568:	90                   	nop
ffffffff80108569:	90                   	nop
ffffffff8010856a:	90                   	nop
ffffffff8010856b:	90                   	nop
ffffffff8010856c:	90                   	nop
ffffffff8010856d:	90                   	nop
ffffffff8010856e:	90                   	nop
ffffffff8010856f:	90                   	nop
ffffffff80108570:	90                   	nop
ffffffff80108571:	90                   	nop
ffffffff80108572:	90                   	nop
ffffffff80108573:	90                   	nop
ffffffff80108574:	90                   	nop
ffffffff80108575:	90                   	nop
ffffffff80108576:	90                   	nop
ffffffff80108577:	90                   	nop
ffffffff80108578:	90                   	nop
ffffffff80108579:	90                   	nop
ffffffff8010857a:	90                   	nop
ffffffff8010857b:	90                   	nop
ffffffff8010857c:	90                   	nop
ffffffff8010857d:	90                   	nop
ffffffff8010857e:	90                   	nop
ffffffff8010857f:	90                   	nop
ffffffff80108580:	90                   	nop
ffffffff80108581:	90                   	nop
ffffffff80108582:	90                   	nop
ffffffff80108583:	90                   	nop
ffffffff80108584:	90                   	nop
ffffffff80108585:	90                   	nop
ffffffff80108586:	90                   	nop
ffffffff80108587:	90                   	nop
ffffffff80108588:	90                   	nop
ffffffff80108589:	90                   	nop
ffffffff8010858a:	90                   	nop
ffffffff8010858b:	90                   	nop
ffffffff8010858c:	90                   	nop
ffffffff8010858d:	90                   	nop
ffffffff8010858e:	90                   	nop
ffffffff8010858f:	90                   	nop
ffffffff80108590:	90                   	nop
ffffffff80108591:	90                   	nop
ffffffff80108592:	90                   	nop
ffffffff80108593:	90                   	nop
ffffffff80108594:	90                   	nop
ffffffff80108595:	90                   	nop
ffffffff80108596:	90                   	nop
ffffffff80108597:	90                   	nop
ffffffff80108598:	90                   	nop
ffffffff80108599:	90                   	nop
ffffffff8010859a:	90                   	nop
ffffffff8010859b:	90                   	nop
ffffffff8010859c:	90                   	nop
ffffffff8010859d:	90                   	nop
ffffffff8010859e:	90                   	nop
ffffffff8010859f:	90                   	nop
ffffffff801085a0:	90                   	nop
ffffffff801085a1:	90                   	nop
ffffffff801085a2:	90                   	nop
ffffffff801085a3:	90                   	nop
ffffffff801085a4:	90                   	nop
ffffffff801085a5:	90                   	nop
ffffffff801085a6:	90                   	nop
ffffffff801085a7:	90                   	nop
ffffffff801085a8:	90                   	nop
ffffffff801085a9:	90                   	nop
ffffffff801085aa:	90                   	nop
ffffffff801085ab:	90                   	nop
ffffffff801085ac:	90                   	nop
ffffffff801085ad:	90                   	nop
ffffffff801085ae:	90                   	nop
ffffffff801085af:	90                   	nop
ffffffff801085b0:	90                   	nop
ffffffff801085b1:	90                   	nop
ffffffff801085b2:	90                   	nop
ffffffff801085b3:	90                   	nop
ffffffff801085b4:	90                   	nop
ffffffff801085b5:	90                   	nop
ffffffff801085b6:	90                   	nop
ffffffff801085b7:	90                   	nop
ffffffff801085b8:	90                   	nop
ffffffff801085b9:	90                   	nop
ffffffff801085ba:	90                   	nop
ffffffff801085bb:	90                   	nop
ffffffff801085bc:	90                   	nop
ffffffff801085bd:	90                   	nop
ffffffff801085be:	90                   	nop
ffffffff801085bf:	90                   	nop
ffffffff801085c0:	90                   	nop
ffffffff801085c1:	90                   	nop
ffffffff801085c2:	90                   	nop
ffffffff801085c3:	90                   	nop
ffffffff801085c4:	90                   	nop
ffffffff801085c5:	90                   	nop
ffffffff801085c6:	90                   	nop
ffffffff801085c7:	90                   	nop
ffffffff801085c8:	90                   	nop
ffffffff801085c9:	90                   	nop
ffffffff801085ca:	90                   	nop
ffffffff801085cb:	90                   	nop
ffffffff801085cc:	90                   	nop
ffffffff801085cd:	90                   	nop
ffffffff801085ce:	90                   	nop
ffffffff801085cf:	90                   	nop
ffffffff801085d0:	90                   	nop
ffffffff801085d1:	90                   	nop
ffffffff801085d2:	90                   	nop
ffffffff801085d3:	90                   	nop
ffffffff801085d4:	90                   	nop
ffffffff801085d5:	90                   	nop
ffffffff801085d6:	90                   	nop
ffffffff801085d7:	90                   	nop
ffffffff801085d8:	90                   	nop
ffffffff801085d9:	90                   	nop
ffffffff801085da:	90                   	nop
ffffffff801085db:	90                   	nop
ffffffff801085dc:	90                   	nop
ffffffff801085dd:	90                   	nop
ffffffff801085de:	90                   	nop
ffffffff801085df:	90                   	nop
ffffffff801085e0:	90                   	nop
ffffffff801085e1:	90                   	nop
ffffffff801085e2:	90                   	nop
ffffffff801085e3:	90                   	nop
ffffffff801085e4:	90                   	nop
ffffffff801085e5:	90                   	nop
ffffffff801085e6:	90                   	nop
ffffffff801085e7:	90                   	nop
ffffffff801085e8:	90                   	nop
ffffffff801085e9:	90                   	nop
ffffffff801085ea:	90                   	nop
ffffffff801085eb:	90                   	nop
ffffffff801085ec:	90                   	nop
ffffffff801085ed:	90                   	nop
ffffffff801085ee:	90                   	nop
ffffffff801085ef:	90                   	nop
ffffffff801085f0:	90                   	nop
ffffffff801085f1:	90                   	nop
ffffffff801085f2:	90                   	nop
ffffffff801085f3:	90                   	nop
ffffffff801085f4:	90                   	nop
ffffffff801085f5:	90                   	nop
ffffffff801085f6:	90                   	nop
ffffffff801085f7:	90                   	nop
ffffffff801085f8:	90                   	nop
ffffffff801085f9:	90                   	nop
ffffffff801085fa:	90                   	nop
ffffffff801085fb:	90                   	nop
ffffffff801085fc:	90                   	nop
ffffffff801085fd:	90                   	nop
ffffffff801085fe:	90                   	nop
ffffffff801085ff:	90                   	nop
ffffffff80108600:	90                   	nop
ffffffff80108601:	90                   	nop
ffffffff80108602:	90                   	nop
ffffffff80108603:	90                   	nop
ffffffff80108604:	90                   	nop
ffffffff80108605:	90                   	nop
ffffffff80108606:	90                   	nop
ffffffff80108607:	90                   	nop
ffffffff80108608:	90                   	nop
ffffffff80108609:	90                   	nop
ffffffff8010860a:	90                   	nop
ffffffff8010860b:	90                   	nop
ffffffff8010860c:	90                   	nop
ffffffff8010860d:	90                   	nop
ffffffff8010860e:	90                   	nop
ffffffff8010860f:	90                   	nop
ffffffff80108610:	90                   	nop
ffffffff80108611:	90                   	nop
ffffffff80108612:	90                   	nop
ffffffff80108613:	90                   	nop
ffffffff80108614:	90                   	nop
ffffffff80108615:	90                   	nop
ffffffff80108616:	90                   	nop
ffffffff80108617:	90                   	nop
ffffffff80108618:	90                   	nop
ffffffff80108619:	90                   	nop
ffffffff8010861a:	90                   	nop
ffffffff8010861b:	90                   	nop
ffffffff8010861c:	90                   	nop
ffffffff8010861d:	90                   	nop
ffffffff8010861e:	90                   	nop
ffffffff8010861f:	90                   	nop
ffffffff80108620:	90                   	nop
ffffffff80108621:	90                   	nop
ffffffff80108622:	90                   	nop
ffffffff80108623:	90                   	nop
ffffffff80108624:	90                   	nop
ffffffff80108625:	90                   	nop
ffffffff80108626:	90                   	nop
ffffffff80108627:	90                   	nop
ffffffff80108628:	90                   	nop
ffffffff80108629:	90                   	nop
ffffffff8010862a:	90                   	nop
ffffffff8010862b:	90                   	nop
ffffffff8010862c:	90                   	nop
ffffffff8010862d:	90                   	nop
ffffffff8010862e:	90                   	nop
ffffffff8010862f:	90                   	nop
ffffffff80108630:	90                   	nop
ffffffff80108631:	90                   	nop
ffffffff80108632:	90                   	nop
ffffffff80108633:	90                   	nop
ffffffff80108634:	90                   	nop
ffffffff80108635:	90                   	nop
ffffffff80108636:	90                   	nop
ffffffff80108637:	90                   	nop
ffffffff80108638:	90                   	nop
ffffffff80108639:	90                   	nop
ffffffff8010863a:	90                   	nop
ffffffff8010863b:	90                   	nop
ffffffff8010863c:	90                   	nop
ffffffff8010863d:	90                   	nop
ffffffff8010863e:	90                   	nop
ffffffff8010863f:	90                   	nop
ffffffff80108640:	90                   	nop
ffffffff80108641:	90                   	nop
ffffffff80108642:	90                   	nop
ffffffff80108643:	90                   	nop
ffffffff80108644:	90                   	nop
ffffffff80108645:	90                   	nop
ffffffff80108646:	90                   	nop
ffffffff80108647:	90                   	nop
ffffffff80108648:	90                   	nop
ffffffff80108649:	90                   	nop
ffffffff8010864a:	90                   	nop
ffffffff8010864b:	90                   	nop
ffffffff8010864c:	90                   	nop
ffffffff8010864d:	90                   	nop
ffffffff8010864e:	90                   	nop
ffffffff8010864f:	90                   	nop
ffffffff80108650:	90                   	nop
ffffffff80108651:	90                   	nop
ffffffff80108652:	90                   	nop
ffffffff80108653:	90                   	nop
ffffffff80108654:	90                   	nop
ffffffff80108655:	90                   	nop
ffffffff80108656:	90                   	nop
ffffffff80108657:	90                   	nop
ffffffff80108658:	90                   	nop
ffffffff80108659:	90                   	nop
ffffffff8010865a:	90                   	nop
ffffffff8010865b:	90                   	nop
ffffffff8010865c:	90                   	nop
ffffffff8010865d:	90                   	nop
ffffffff8010865e:	90                   	nop
ffffffff8010865f:	90                   	nop
ffffffff80108660:	90                   	nop
ffffffff80108661:	90                   	nop
ffffffff80108662:	90                   	nop
ffffffff80108663:	90                   	nop
ffffffff80108664:	90                   	nop
ffffffff80108665:	90                   	nop
ffffffff80108666:	90                   	nop
ffffffff80108667:	90                   	nop
ffffffff80108668:	90                   	nop
ffffffff80108669:	90                   	nop
ffffffff8010866a:	90                   	nop
ffffffff8010866b:	90                   	nop
ffffffff8010866c:	90                   	nop
ffffffff8010866d:	90                   	nop
ffffffff8010866e:	90                   	nop
ffffffff8010866f:	90                   	nop
ffffffff80108670:	90                   	nop
ffffffff80108671:	90                   	nop
ffffffff80108672:	90                   	nop
ffffffff80108673:	90                   	nop
ffffffff80108674:	90                   	nop
ffffffff80108675:	90                   	nop
ffffffff80108676:	90                   	nop
ffffffff80108677:	90                   	nop
ffffffff80108678:	90                   	nop
ffffffff80108679:	90                   	nop
ffffffff8010867a:	90                   	nop
ffffffff8010867b:	90                   	nop
ffffffff8010867c:	90                   	nop
ffffffff8010867d:	90                   	nop
ffffffff8010867e:	90                   	nop
ffffffff8010867f:	90                   	nop
ffffffff80108680:	90                   	nop
ffffffff80108681:	90                   	nop
ffffffff80108682:	90                   	nop
ffffffff80108683:	90                   	nop
ffffffff80108684:	90                   	nop
ffffffff80108685:	90                   	nop
ffffffff80108686:	90                   	nop
ffffffff80108687:	90                   	nop
ffffffff80108688:	90                   	nop
ffffffff80108689:	90                   	nop
ffffffff8010868a:	90                   	nop
ffffffff8010868b:	90                   	nop
ffffffff8010868c:	90                   	nop
ffffffff8010868d:	90                   	nop
ffffffff8010868e:	90                   	nop
ffffffff8010868f:	90                   	nop
ffffffff80108690:	90                   	nop
ffffffff80108691:	90                   	nop
ffffffff80108692:	90                   	nop
ffffffff80108693:	90                   	nop
ffffffff80108694:	90                   	nop
ffffffff80108695:	90                   	nop
ffffffff80108696:	90                   	nop
ffffffff80108697:	90                   	nop
ffffffff80108698:	90                   	nop
ffffffff80108699:	90                   	nop
ffffffff8010869a:	90                   	nop
ffffffff8010869b:	90                   	nop
ffffffff8010869c:	90                   	nop
ffffffff8010869d:	90                   	nop
ffffffff8010869e:	90                   	nop
ffffffff8010869f:	90                   	nop
ffffffff801086a0:	90                   	nop
ffffffff801086a1:	90                   	nop
ffffffff801086a2:	90                   	nop
ffffffff801086a3:	90                   	nop
ffffffff801086a4:	90                   	nop
ffffffff801086a5:	90                   	nop
ffffffff801086a6:	90                   	nop
ffffffff801086a7:	90                   	nop
ffffffff801086a8:	90                   	nop
ffffffff801086a9:	90                   	nop
ffffffff801086aa:	90                   	nop
ffffffff801086ab:	90                   	nop
ffffffff801086ac:	90                   	nop
ffffffff801086ad:	90                   	nop
ffffffff801086ae:	90                   	nop
ffffffff801086af:	90                   	nop
ffffffff801086b0:	90                   	nop
ffffffff801086b1:	90                   	nop
ffffffff801086b2:	90                   	nop
ffffffff801086b3:	90                   	nop
ffffffff801086b4:	90                   	nop
ffffffff801086b5:	90                   	nop
ffffffff801086b6:	90                   	nop
ffffffff801086b7:	90                   	nop
ffffffff801086b8:	90                   	nop
ffffffff801086b9:	90                   	nop
ffffffff801086ba:	90                   	nop
ffffffff801086bb:	90                   	nop
ffffffff801086bc:	90                   	nop
ffffffff801086bd:	90                   	nop
ffffffff801086be:	90                   	nop
ffffffff801086bf:	90                   	nop
ffffffff801086c0:	90                   	nop
ffffffff801086c1:	90                   	nop
ffffffff801086c2:	90                   	nop
ffffffff801086c3:	90                   	nop
ffffffff801086c4:	90                   	nop
ffffffff801086c5:	90                   	nop
ffffffff801086c6:	90                   	nop
ffffffff801086c7:	90                   	nop
ffffffff801086c8:	90                   	nop
ffffffff801086c9:	90                   	nop
ffffffff801086ca:	90                   	nop
ffffffff801086cb:	90                   	nop
ffffffff801086cc:	90                   	nop
ffffffff801086cd:	90                   	nop
ffffffff801086ce:	90                   	nop
ffffffff801086cf:	90                   	nop
ffffffff801086d0:	90                   	nop
ffffffff801086d1:	90                   	nop
ffffffff801086d2:	90                   	nop
ffffffff801086d3:	90                   	nop
ffffffff801086d4:	90                   	nop
ffffffff801086d5:	90                   	nop
ffffffff801086d6:	90                   	nop
ffffffff801086d7:	90                   	nop
ffffffff801086d8:	90                   	nop
ffffffff801086d9:	90                   	nop
ffffffff801086da:	90                   	nop
ffffffff801086db:	90                   	nop
ffffffff801086dc:	90                   	nop
ffffffff801086dd:	90                   	nop
ffffffff801086de:	90                   	nop
ffffffff801086df:	90                   	nop
ffffffff801086e0:	90                   	nop
ffffffff801086e1:	90                   	nop
ffffffff801086e2:	90                   	nop
ffffffff801086e3:	90                   	nop
ffffffff801086e4:	90                   	nop
ffffffff801086e5:	90                   	nop
ffffffff801086e6:	90                   	nop
ffffffff801086e7:	90                   	nop
ffffffff801086e8:	90                   	nop
ffffffff801086e9:	90                   	nop
ffffffff801086ea:	90                   	nop
ffffffff801086eb:	90                   	nop
ffffffff801086ec:	90                   	nop
ffffffff801086ed:	90                   	nop
ffffffff801086ee:	90                   	nop
ffffffff801086ef:	90                   	nop
ffffffff801086f0:	90                   	nop
ffffffff801086f1:	90                   	nop
ffffffff801086f2:	90                   	nop
ffffffff801086f3:	90                   	nop
ffffffff801086f4:	90                   	nop
ffffffff801086f5:	90                   	nop
ffffffff801086f6:	90                   	nop
ffffffff801086f7:	90                   	nop
ffffffff801086f8:	90                   	nop
ffffffff801086f9:	90                   	nop
ffffffff801086fa:	90                   	nop
ffffffff801086fb:	90                   	nop
ffffffff801086fc:	90                   	nop
ffffffff801086fd:	90                   	nop
ffffffff801086fe:	90                   	nop
ffffffff801086ff:	90                   	nop
ffffffff80108700:	90                   	nop
ffffffff80108701:	90                   	nop
ffffffff80108702:	90                   	nop
ffffffff80108703:	90                   	nop
ffffffff80108704:	90                   	nop
ffffffff80108705:	90                   	nop
ffffffff80108706:	90                   	nop
ffffffff80108707:	90                   	nop
ffffffff80108708:	90                   	nop
ffffffff80108709:	90                   	nop
ffffffff8010870a:	90                   	nop
ffffffff8010870b:	90                   	nop
ffffffff8010870c:	90                   	nop
ffffffff8010870d:	90                   	nop
ffffffff8010870e:	90                   	nop
ffffffff8010870f:	90                   	nop
ffffffff80108710:	90                   	nop
ffffffff80108711:	90                   	nop
ffffffff80108712:	90                   	nop
ffffffff80108713:	90                   	nop
ffffffff80108714:	90                   	nop
ffffffff80108715:	90                   	nop
ffffffff80108716:	90                   	nop
ffffffff80108717:	90                   	nop
ffffffff80108718:	90                   	nop
ffffffff80108719:	90                   	nop
ffffffff8010871a:	90                   	nop
ffffffff8010871b:	90                   	nop
ffffffff8010871c:	90                   	nop
ffffffff8010871d:	90                   	nop
ffffffff8010871e:	90                   	nop
ffffffff8010871f:	90                   	nop
ffffffff80108720:	90                   	nop
ffffffff80108721:	90                   	nop
ffffffff80108722:	90                   	nop
ffffffff80108723:	90                   	nop
ffffffff80108724:	90                   	nop
ffffffff80108725:	90                   	nop
ffffffff80108726:	90                   	nop
ffffffff80108727:	90                   	nop
ffffffff80108728:	90                   	nop
ffffffff80108729:	90                   	nop
ffffffff8010872a:	90                   	nop
ffffffff8010872b:	90                   	nop
ffffffff8010872c:	90                   	nop
ffffffff8010872d:	90                   	nop
ffffffff8010872e:	90                   	nop
ffffffff8010872f:	90                   	nop
ffffffff80108730:	90                   	nop
ffffffff80108731:	90                   	nop
ffffffff80108732:	90                   	nop
ffffffff80108733:	90                   	nop
ffffffff80108734:	90                   	nop
ffffffff80108735:	90                   	nop
ffffffff80108736:	90                   	nop
ffffffff80108737:	90                   	nop
ffffffff80108738:	90                   	nop
ffffffff80108739:	90                   	nop
ffffffff8010873a:	90                   	nop
ffffffff8010873b:	90                   	nop
ffffffff8010873c:	90                   	nop
ffffffff8010873d:	90                   	nop
ffffffff8010873e:	90                   	nop
ffffffff8010873f:	90                   	nop
ffffffff80108740:	90                   	nop
ffffffff80108741:	90                   	nop
ffffffff80108742:	90                   	nop
ffffffff80108743:	90                   	nop
ffffffff80108744:	90                   	nop
ffffffff80108745:	90                   	nop
ffffffff80108746:	90                   	nop
ffffffff80108747:	90                   	nop
ffffffff80108748:	90                   	nop
ffffffff80108749:	90                   	nop
ffffffff8010874a:	90                   	nop
ffffffff8010874b:	90                   	nop
ffffffff8010874c:	90                   	nop
ffffffff8010874d:	90                   	nop
ffffffff8010874e:	90                   	nop
ffffffff8010874f:	90                   	nop
ffffffff80108750:	90                   	nop
ffffffff80108751:	90                   	nop
ffffffff80108752:	90                   	nop
ffffffff80108753:	90                   	nop
ffffffff80108754:	90                   	nop
ffffffff80108755:	90                   	nop
ffffffff80108756:	90                   	nop
ffffffff80108757:	90                   	nop
ffffffff80108758:	90                   	nop
ffffffff80108759:	90                   	nop
ffffffff8010875a:	90                   	nop
ffffffff8010875b:	90                   	nop
ffffffff8010875c:	90                   	nop
ffffffff8010875d:	90                   	nop
ffffffff8010875e:	90                   	nop
ffffffff8010875f:	90                   	nop
ffffffff80108760:	90                   	nop
ffffffff80108761:	90                   	nop
ffffffff80108762:	90                   	nop
ffffffff80108763:	90                   	nop
ffffffff80108764:	90                   	nop
ffffffff80108765:	90                   	nop
ffffffff80108766:	90                   	nop
ffffffff80108767:	90                   	nop
ffffffff80108768:	90                   	nop
ffffffff80108769:	90                   	nop
ffffffff8010876a:	90                   	nop
ffffffff8010876b:	90                   	nop
ffffffff8010876c:	90                   	nop
ffffffff8010876d:	90                   	nop
ffffffff8010876e:	90                   	nop
ffffffff8010876f:	90                   	nop
ffffffff80108770:	90                   	nop
ffffffff80108771:	90                   	nop
ffffffff80108772:	90                   	nop
ffffffff80108773:	90                   	nop
ffffffff80108774:	90                   	nop
ffffffff80108775:	90                   	nop
ffffffff80108776:	90                   	nop
ffffffff80108777:	90                   	nop
ffffffff80108778:	90                   	nop
ffffffff80108779:	90                   	nop
ffffffff8010877a:	90                   	nop
ffffffff8010877b:	90                   	nop
ffffffff8010877c:	90                   	nop
ffffffff8010877d:	90                   	nop
ffffffff8010877e:	90                   	nop
ffffffff8010877f:	90                   	nop
ffffffff80108780:	90                   	nop
ffffffff80108781:	90                   	nop
ffffffff80108782:	90                   	nop
ffffffff80108783:	90                   	nop
ffffffff80108784:	90                   	nop
ffffffff80108785:	90                   	nop
ffffffff80108786:	90                   	nop
ffffffff80108787:	90                   	nop
ffffffff80108788:	90                   	nop
ffffffff80108789:	90                   	nop
ffffffff8010878a:	90                   	nop
ffffffff8010878b:	90                   	nop
ffffffff8010878c:	90                   	nop
ffffffff8010878d:	90                   	nop
ffffffff8010878e:	90                   	nop
ffffffff8010878f:	90                   	nop
ffffffff80108790:	90                   	nop
ffffffff80108791:	90                   	nop
ffffffff80108792:	90                   	nop
ffffffff80108793:	90                   	nop
ffffffff80108794:	90                   	nop
ffffffff80108795:	90                   	nop
ffffffff80108796:	90                   	nop
ffffffff80108797:	90                   	nop
ffffffff80108798:	90                   	nop
ffffffff80108799:	90                   	nop
ffffffff8010879a:	90                   	nop
ffffffff8010879b:	90                   	nop
ffffffff8010879c:	90                   	nop
ffffffff8010879d:	90                   	nop
ffffffff8010879e:	90                   	nop
ffffffff8010879f:	90                   	nop
ffffffff801087a0:	90                   	nop
ffffffff801087a1:	90                   	nop
ffffffff801087a2:	90                   	nop
ffffffff801087a3:	90                   	nop
ffffffff801087a4:	90                   	nop
ffffffff801087a5:	90                   	nop
ffffffff801087a6:	90                   	nop
ffffffff801087a7:	90                   	nop
ffffffff801087a8:	90                   	nop
ffffffff801087a9:	90                   	nop
ffffffff801087aa:	90                   	nop
ffffffff801087ab:	90                   	nop
ffffffff801087ac:	90                   	nop
ffffffff801087ad:	90                   	nop
ffffffff801087ae:	90                   	nop
ffffffff801087af:	90                   	nop
ffffffff801087b0:	90                   	nop
ffffffff801087b1:	90                   	nop
ffffffff801087b2:	90                   	nop
ffffffff801087b3:	90                   	nop
ffffffff801087b4:	90                   	nop
ffffffff801087b5:	90                   	nop
ffffffff801087b6:	90                   	nop
ffffffff801087b7:	90                   	nop
ffffffff801087b8:	90                   	nop
ffffffff801087b9:	90                   	nop
ffffffff801087ba:	90                   	nop
ffffffff801087bb:	90                   	nop
ffffffff801087bc:	90                   	nop
ffffffff801087bd:	90                   	nop
ffffffff801087be:	90                   	nop
ffffffff801087bf:	90                   	nop
ffffffff801087c0:	90                   	nop
ffffffff801087c1:	90                   	nop
ffffffff801087c2:	90                   	nop
ffffffff801087c3:	90                   	nop
ffffffff801087c4:	90                   	nop
ffffffff801087c5:	90                   	nop
ffffffff801087c6:	90                   	nop
ffffffff801087c7:	90                   	nop
ffffffff801087c8:	90                   	nop
ffffffff801087c9:	90                   	nop
ffffffff801087ca:	90                   	nop
ffffffff801087cb:	90                   	nop
ffffffff801087cc:	90                   	nop
ffffffff801087cd:	90                   	nop
ffffffff801087ce:	90                   	nop
ffffffff801087cf:	90                   	nop
ffffffff801087d0:	90                   	nop
ffffffff801087d1:	90                   	nop
ffffffff801087d2:	90                   	nop
ffffffff801087d3:	90                   	nop
ffffffff801087d4:	90                   	nop
ffffffff801087d5:	90                   	nop
ffffffff801087d6:	90                   	nop
ffffffff801087d7:	90                   	nop
ffffffff801087d8:	90                   	nop
ffffffff801087d9:	90                   	nop
ffffffff801087da:	90                   	nop
ffffffff801087db:	90                   	nop
ffffffff801087dc:	90                   	nop
ffffffff801087dd:	90                   	nop
ffffffff801087de:	90                   	nop
ffffffff801087df:	90                   	nop
ffffffff801087e0:	90                   	nop
ffffffff801087e1:	90                   	nop
ffffffff801087e2:	90                   	nop
ffffffff801087e3:	90                   	nop
ffffffff801087e4:	90                   	nop
ffffffff801087e5:	90                   	nop
ffffffff801087e6:	90                   	nop
ffffffff801087e7:	90                   	nop
ffffffff801087e8:	90                   	nop
ffffffff801087e9:	90                   	nop
ffffffff801087ea:	90                   	nop
ffffffff801087eb:	90                   	nop
ffffffff801087ec:	90                   	nop
ffffffff801087ed:	90                   	nop
ffffffff801087ee:	90                   	nop
ffffffff801087ef:	90                   	nop
ffffffff801087f0:	90                   	nop
ffffffff801087f1:	90                   	nop
ffffffff801087f2:	90                   	nop
ffffffff801087f3:	90                   	nop
ffffffff801087f4:	90                   	nop
ffffffff801087f5:	90                   	nop
ffffffff801087f6:	90                   	nop
ffffffff801087f7:	90                   	nop
ffffffff801087f8:	90                   	nop
ffffffff801087f9:	90                   	nop
ffffffff801087fa:	90                   	nop
ffffffff801087fb:	90                   	nop
ffffffff801087fc:	90                   	nop
ffffffff801087fd:	90                   	nop
ffffffff801087fe:	90                   	nop
ffffffff801087ff:	90                   	nop
ffffffff80108800:	90                   	nop
ffffffff80108801:	90                   	nop
ffffffff80108802:	90                   	nop
ffffffff80108803:	90                   	nop
ffffffff80108804:	90                   	nop
ffffffff80108805:	90                   	nop
ffffffff80108806:	90                   	nop
ffffffff80108807:	90                   	nop
ffffffff80108808:	90                   	nop
ffffffff80108809:	90                   	nop
ffffffff8010880a:	90                   	nop
ffffffff8010880b:	90                   	nop
ffffffff8010880c:	90                   	nop
ffffffff8010880d:	90                   	nop
ffffffff8010880e:	90                   	nop
ffffffff8010880f:	90                   	nop
ffffffff80108810:	90                   	nop
ffffffff80108811:	90                   	nop
ffffffff80108812:	90                   	nop
ffffffff80108813:	90                   	nop
ffffffff80108814:	90                   	nop
ffffffff80108815:	90                   	nop
ffffffff80108816:	90                   	nop
ffffffff80108817:	90                   	nop
ffffffff80108818:	90                   	nop
ffffffff80108819:	90                   	nop
ffffffff8010881a:	90                   	nop
ffffffff8010881b:	90                   	nop
ffffffff8010881c:	90                   	nop
ffffffff8010881d:	90                   	nop
ffffffff8010881e:	90                   	nop
ffffffff8010881f:	90                   	nop
ffffffff80108820:	90                   	nop
ffffffff80108821:	90                   	nop
ffffffff80108822:	90                   	nop
ffffffff80108823:	90                   	nop
ffffffff80108824:	90                   	nop
ffffffff80108825:	90                   	nop
ffffffff80108826:	90                   	nop
ffffffff80108827:	90                   	nop
ffffffff80108828:	90                   	nop
ffffffff80108829:	90                   	nop
ffffffff8010882a:	90                   	nop
ffffffff8010882b:	90                   	nop
ffffffff8010882c:	90                   	nop
ffffffff8010882d:	90                   	nop
ffffffff8010882e:	90                   	nop
ffffffff8010882f:	90                   	nop
ffffffff80108830:	90                   	nop
ffffffff80108831:	90                   	nop
ffffffff80108832:	90                   	nop
ffffffff80108833:	90                   	nop
ffffffff80108834:	90                   	nop
ffffffff80108835:	90                   	nop
ffffffff80108836:	90                   	nop
ffffffff80108837:	90                   	nop
ffffffff80108838:	90                   	nop
ffffffff80108839:	90                   	nop
ffffffff8010883a:	90                   	nop
ffffffff8010883b:	90                   	nop
ffffffff8010883c:	90                   	nop
ffffffff8010883d:	90                   	nop
ffffffff8010883e:	90                   	nop
ffffffff8010883f:	90                   	nop
ffffffff80108840:	90                   	nop
ffffffff80108841:	90                   	nop
ffffffff80108842:	90                   	nop
ffffffff80108843:	90                   	nop
ffffffff80108844:	90                   	nop
ffffffff80108845:	90                   	nop
ffffffff80108846:	90                   	nop
ffffffff80108847:	90                   	nop
ffffffff80108848:	90                   	nop
ffffffff80108849:	90                   	nop
ffffffff8010884a:	90                   	nop
ffffffff8010884b:	90                   	nop
ffffffff8010884c:	90                   	nop
ffffffff8010884d:	90                   	nop
ffffffff8010884e:	90                   	nop
ffffffff8010884f:	90                   	nop
ffffffff80108850:	90                   	nop
ffffffff80108851:	90                   	nop
ffffffff80108852:	90                   	nop
ffffffff80108853:	90                   	nop
ffffffff80108854:	90                   	nop
ffffffff80108855:	90                   	nop
ffffffff80108856:	90                   	nop
ffffffff80108857:	90                   	nop
ffffffff80108858:	90                   	nop
ffffffff80108859:	90                   	nop
ffffffff8010885a:	90                   	nop
ffffffff8010885b:	90                   	nop
ffffffff8010885c:	90                   	nop
ffffffff8010885d:	90                   	nop
ffffffff8010885e:	90                   	nop
ffffffff8010885f:	90                   	nop
ffffffff80108860:	90                   	nop
ffffffff80108861:	90                   	nop
ffffffff80108862:	90                   	nop
ffffffff80108863:	90                   	nop
ffffffff80108864:	90                   	nop
ffffffff80108865:	90                   	nop
ffffffff80108866:	90                   	nop
ffffffff80108867:	90                   	nop
ffffffff80108868:	90                   	nop
ffffffff80108869:	90                   	nop
ffffffff8010886a:	90                   	nop
ffffffff8010886b:	90                   	nop
ffffffff8010886c:	90                   	nop
ffffffff8010886d:	90                   	nop
ffffffff8010886e:	90                   	nop
ffffffff8010886f:	90                   	nop
ffffffff80108870:	90                   	nop
ffffffff80108871:	90                   	nop
ffffffff80108872:	90                   	nop
ffffffff80108873:	90                   	nop
ffffffff80108874:	90                   	nop
ffffffff80108875:	90                   	nop
ffffffff80108876:	90                   	nop
ffffffff80108877:	90                   	nop
ffffffff80108878:	90                   	nop
ffffffff80108879:	90                   	nop
ffffffff8010887a:	90                   	nop
ffffffff8010887b:	90                   	nop
ffffffff8010887c:	90                   	nop
ffffffff8010887d:	90                   	nop
ffffffff8010887e:	90                   	nop
ffffffff8010887f:	90                   	nop
ffffffff80108880:	90                   	nop
ffffffff80108881:	90                   	nop
ffffffff80108882:	90                   	nop
ffffffff80108883:	90                   	nop
ffffffff80108884:	90                   	nop
ffffffff80108885:	90                   	nop
ffffffff80108886:	90                   	nop
ffffffff80108887:	90                   	nop
ffffffff80108888:	90                   	nop
ffffffff80108889:	90                   	nop
ffffffff8010888a:	90                   	nop
ffffffff8010888b:	90                   	nop
ffffffff8010888c:	90                   	nop
ffffffff8010888d:	90                   	nop
ffffffff8010888e:	90                   	nop
ffffffff8010888f:	90                   	nop
ffffffff80108890:	90                   	nop
ffffffff80108891:	90                   	nop
ffffffff80108892:	90                   	nop
ffffffff80108893:	90                   	nop
ffffffff80108894:	90                   	nop
ffffffff80108895:	90                   	nop
ffffffff80108896:	90                   	nop
ffffffff80108897:	90                   	nop
ffffffff80108898:	90                   	nop
ffffffff80108899:	90                   	nop
ffffffff8010889a:	90                   	nop
ffffffff8010889b:	90                   	nop
ffffffff8010889c:	90                   	nop
ffffffff8010889d:	90                   	nop
ffffffff8010889e:	90                   	nop
ffffffff8010889f:	90                   	nop
ffffffff801088a0:	90                   	nop
ffffffff801088a1:	90                   	nop
ffffffff801088a2:	90                   	nop
ffffffff801088a3:	90                   	nop
ffffffff801088a4:	90                   	nop
ffffffff801088a5:	90                   	nop
ffffffff801088a6:	90                   	nop
ffffffff801088a7:	90                   	nop
ffffffff801088a8:	90                   	nop
ffffffff801088a9:	90                   	nop
ffffffff801088aa:	90                   	nop
ffffffff801088ab:	90                   	nop
ffffffff801088ac:	90                   	nop
ffffffff801088ad:	90                   	nop
ffffffff801088ae:	90                   	nop
ffffffff801088af:	90                   	nop
ffffffff801088b0:	90                   	nop
ffffffff801088b1:	90                   	nop
ffffffff801088b2:	90                   	nop
ffffffff801088b3:	90                   	nop
ffffffff801088b4:	90                   	nop
ffffffff801088b5:	90                   	nop
ffffffff801088b6:	90                   	nop
ffffffff801088b7:	90                   	nop
ffffffff801088b8:	90                   	nop
ffffffff801088b9:	90                   	nop
ffffffff801088ba:	90                   	nop
ffffffff801088bb:	90                   	nop
ffffffff801088bc:	90                   	nop
ffffffff801088bd:	90                   	nop
ffffffff801088be:	90                   	nop
ffffffff801088bf:	90                   	nop
ffffffff801088c0:	90                   	nop
ffffffff801088c1:	90                   	nop
ffffffff801088c2:	90                   	nop
ffffffff801088c3:	90                   	nop
ffffffff801088c4:	90                   	nop
ffffffff801088c5:	90                   	nop
ffffffff801088c6:	90                   	nop
ffffffff801088c7:	90                   	nop
ffffffff801088c8:	90                   	nop
ffffffff801088c9:	90                   	nop
ffffffff801088ca:	90                   	nop
ffffffff801088cb:	90                   	nop
ffffffff801088cc:	90                   	nop
ffffffff801088cd:	90                   	nop
ffffffff801088ce:	90                   	nop
ffffffff801088cf:	90                   	nop
ffffffff801088d0:	90                   	nop
ffffffff801088d1:	90                   	nop
ffffffff801088d2:	90                   	nop
ffffffff801088d3:	90                   	nop
ffffffff801088d4:	90                   	nop
ffffffff801088d5:	90                   	nop
ffffffff801088d6:	90                   	nop
ffffffff801088d7:	90                   	nop
ffffffff801088d8:	90                   	nop
ffffffff801088d9:	90                   	nop
ffffffff801088da:	90                   	nop
ffffffff801088db:	90                   	nop
ffffffff801088dc:	90                   	nop
ffffffff801088dd:	90                   	nop
ffffffff801088de:	90                   	nop
ffffffff801088df:	90                   	nop
ffffffff801088e0:	90                   	nop
ffffffff801088e1:	90                   	nop
ffffffff801088e2:	90                   	nop
ffffffff801088e3:	90                   	nop
ffffffff801088e4:	90                   	nop
ffffffff801088e5:	90                   	nop
ffffffff801088e6:	90                   	nop
ffffffff801088e7:	90                   	nop
ffffffff801088e8:	90                   	nop
ffffffff801088e9:	90                   	nop
ffffffff801088ea:	90                   	nop
ffffffff801088eb:	90                   	nop
ffffffff801088ec:	90                   	nop
ffffffff801088ed:	90                   	nop
ffffffff801088ee:	90                   	nop
ffffffff801088ef:	90                   	nop
ffffffff801088f0:	90                   	nop
ffffffff801088f1:	90                   	nop
ffffffff801088f2:	90                   	nop
ffffffff801088f3:	90                   	nop
ffffffff801088f4:	90                   	nop
ffffffff801088f5:	90                   	nop
ffffffff801088f6:	90                   	nop
ffffffff801088f7:	90                   	nop
ffffffff801088f8:	90                   	nop
ffffffff801088f9:	90                   	nop
ffffffff801088fa:	90                   	nop
ffffffff801088fb:	90                   	nop
ffffffff801088fc:	90                   	nop
ffffffff801088fd:	90                   	nop
ffffffff801088fe:	90                   	nop
ffffffff801088ff:	90                   	nop
ffffffff80108900:	90                   	nop
ffffffff80108901:	90                   	nop
ffffffff80108902:	90                   	nop
ffffffff80108903:	90                   	nop
ffffffff80108904:	90                   	nop
ffffffff80108905:	90                   	nop
ffffffff80108906:	90                   	nop
ffffffff80108907:	90                   	nop
ffffffff80108908:	90                   	nop
ffffffff80108909:	90                   	nop
ffffffff8010890a:	90                   	nop
ffffffff8010890b:	90                   	nop
ffffffff8010890c:	90                   	nop
ffffffff8010890d:	90                   	nop
ffffffff8010890e:	90                   	nop
ffffffff8010890f:	90                   	nop
ffffffff80108910:	90                   	nop
ffffffff80108911:	90                   	nop
ffffffff80108912:	90                   	nop
ffffffff80108913:	90                   	nop
ffffffff80108914:	90                   	nop
ffffffff80108915:	90                   	nop
ffffffff80108916:	90                   	nop
ffffffff80108917:	90                   	nop
ffffffff80108918:	90                   	nop
ffffffff80108919:	90                   	nop
ffffffff8010891a:	90                   	nop
ffffffff8010891b:	90                   	nop
ffffffff8010891c:	90                   	nop
ffffffff8010891d:	90                   	nop
ffffffff8010891e:	90                   	nop
ffffffff8010891f:	90                   	nop
ffffffff80108920:	90                   	nop
ffffffff80108921:	90                   	nop
ffffffff80108922:	90                   	nop
ffffffff80108923:	90                   	nop
ffffffff80108924:	90                   	nop
ffffffff80108925:	90                   	nop
ffffffff80108926:	90                   	nop
ffffffff80108927:	90                   	nop
ffffffff80108928:	90                   	nop
ffffffff80108929:	90                   	nop
ffffffff8010892a:	90                   	nop
ffffffff8010892b:	90                   	nop
ffffffff8010892c:	90                   	nop
ffffffff8010892d:	90                   	nop
ffffffff8010892e:	90                   	nop
ffffffff8010892f:	90                   	nop
ffffffff80108930:	90                   	nop
ffffffff80108931:	90                   	nop
ffffffff80108932:	90                   	nop
ffffffff80108933:	90                   	nop
ffffffff80108934:	90                   	nop
ffffffff80108935:	90                   	nop
ffffffff80108936:	90                   	nop
ffffffff80108937:	90                   	nop
ffffffff80108938:	90                   	nop
ffffffff80108939:	90                   	nop
ffffffff8010893a:	90                   	nop
ffffffff8010893b:	90                   	nop
ffffffff8010893c:	90                   	nop
ffffffff8010893d:	90                   	nop
ffffffff8010893e:	90                   	nop
ffffffff8010893f:	90                   	nop
ffffffff80108940:	90                   	nop
ffffffff80108941:	90                   	nop
ffffffff80108942:	90                   	nop
ffffffff80108943:	90                   	nop
ffffffff80108944:	90                   	nop
ffffffff80108945:	90                   	nop
ffffffff80108946:	90                   	nop
ffffffff80108947:	90                   	nop
ffffffff80108948:	90                   	nop
ffffffff80108949:	90                   	nop
ffffffff8010894a:	90                   	nop
ffffffff8010894b:	90                   	nop
ffffffff8010894c:	90                   	nop
ffffffff8010894d:	90                   	nop
ffffffff8010894e:	90                   	nop
ffffffff8010894f:	90                   	nop
ffffffff80108950:	90                   	nop
ffffffff80108951:	90                   	nop
ffffffff80108952:	90                   	nop
ffffffff80108953:	90                   	nop
ffffffff80108954:	90                   	nop
ffffffff80108955:	90                   	nop
ffffffff80108956:	90                   	nop
ffffffff80108957:	90                   	nop
ffffffff80108958:	90                   	nop
ffffffff80108959:	90                   	nop
ffffffff8010895a:	90                   	nop
ffffffff8010895b:	90                   	nop
ffffffff8010895c:	90                   	nop
ffffffff8010895d:	90                   	nop
ffffffff8010895e:	90                   	nop
ffffffff8010895f:	90                   	nop
ffffffff80108960:	90                   	nop
ffffffff80108961:	90                   	nop
ffffffff80108962:	90                   	nop
ffffffff80108963:	90                   	nop
ffffffff80108964:	90                   	nop
ffffffff80108965:	90                   	nop
ffffffff80108966:	90                   	nop
ffffffff80108967:	90                   	nop
ffffffff80108968:	90                   	nop
ffffffff80108969:	90                   	nop
ffffffff8010896a:	90                   	nop
ffffffff8010896b:	90                   	nop
ffffffff8010896c:	90                   	nop
ffffffff8010896d:	90                   	nop
ffffffff8010896e:	90                   	nop
ffffffff8010896f:	90                   	nop
ffffffff80108970:	90                   	nop
ffffffff80108971:	90                   	nop
ffffffff80108972:	90                   	nop
ffffffff80108973:	90                   	nop
ffffffff80108974:	90                   	nop
ffffffff80108975:	90                   	nop
ffffffff80108976:	90                   	nop
ffffffff80108977:	90                   	nop
ffffffff80108978:	90                   	nop
ffffffff80108979:	90                   	nop
ffffffff8010897a:	90                   	nop
ffffffff8010897b:	90                   	nop
ffffffff8010897c:	90                   	nop
ffffffff8010897d:	90                   	nop
ffffffff8010897e:	90                   	nop
ffffffff8010897f:	90                   	nop
ffffffff80108980:	90                   	nop
ffffffff80108981:	90                   	nop
ffffffff80108982:	90                   	nop
ffffffff80108983:	90                   	nop
ffffffff80108984:	90                   	nop
ffffffff80108985:	90                   	nop
ffffffff80108986:	90                   	nop
ffffffff80108987:	90                   	nop
ffffffff80108988:	90                   	nop
ffffffff80108989:	90                   	nop
ffffffff8010898a:	90                   	nop
ffffffff8010898b:	90                   	nop
ffffffff8010898c:	90                   	nop
ffffffff8010898d:	90                   	nop
ffffffff8010898e:	90                   	nop
ffffffff8010898f:	90                   	nop
ffffffff80108990:	90                   	nop
ffffffff80108991:	90                   	nop
ffffffff80108992:	90                   	nop
ffffffff80108993:	90                   	nop
ffffffff80108994:	90                   	nop
ffffffff80108995:	90                   	nop
ffffffff80108996:	90                   	nop
ffffffff80108997:	90                   	nop
ffffffff80108998:	90                   	nop
ffffffff80108999:	90                   	nop
ffffffff8010899a:	90                   	nop
ffffffff8010899b:	90                   	nop
ffffffff8010899c:	90                   	nop
ffffffff8010899d:	90                   	nop
ffffffff8010899e:	90                   	nop
ffffffff8010899f:	90                   	nop
ffffffff801089a0:	90                   	nop
ffffffff801089a1:	90                   	nop
ffffffff801089a2:	90                   	nop
ffffffff801089a3:	90                   	nop
ffffffff801089a4:	90                   	nop
ffffffff801089a5:	90                   	nop
ffffffff801089a6:	90                   	nop
ffffffff801089a7:	90                   	nop
ffffffff801089a8:	90                   	nop
ffffffff801089a9:	90                   	nop
ffffffff801089aa:	90                   	nop
ffffffff801089ab:	90                   	nop
ffffffff801089ac:	90                   	nop
ffffffff801089ad:	90                   	nop
ffffffff801089ae:	90                   	nop
ffffffff801089af:	90                   	nop
ffffffff801089b0:	90                   	nop
ffffffff801089b1:	90                   	nop
ffffffff801089b2:	90                   	nop
ffffffff801089b3:	90                   	nop
ffffffff801089b4:	90                   	nop
ffffffff801089b5:	90                   	nop
ffffffff801089b6:	90                   	nop
ffffffff801089b7:	90                   	nop
ffffffff801089b8:	90                   	nop
ffffffff801089b9:	90                   	nop
ffffffff801089ba:	90                   	nop
ffffffff801089bb:	90                   	nop
ffffffff801089bc:	90                   	nop
ffffffff801089bd:	90                   	nop
ffffffff801089be:	90                   	nop
ffffffff801089bf:	90                   	nop
ffffffff801089c0:	90                   	nop
ffffffff801089c1:	90                   	nop
ffffffff801089c2:	90                   	nop
ffffffff801089c3:	90                   	nop
ffffffff801089c4:	90                   	nop
ffffffff801089c5:	90                   	nop
ffffffff801089c6:	90                   	nop
ffffffff801089c7:	90                   	nop
ffffffff801089c8:	90                   	nop
ffffffff801089c9:	90                   	nop
ffffffff801089ca:	90                   	nop
ffffffff801089cb:	90                   	nop
ffffffff801089cc:	90                   	nop
ffffffff801089cd:	90                   	nop
ffffffff801089ce:	90                   	nop
ffffffff801089cf:	90                   	nop
ffffffff801089d0:	90                   	nop
ffffffff801089d1:	90                   	nop
ffffffff801089d2:	90                   	nop
ffffffff801089d3:	90                   	nop
ffffffff801089d4:	90                   	nop
ffffffff801089d5:	90                   	nop
ffffffff801089d6:	90                   	nop
ffffffff801089d7:	90                   	nop
ffffffff801089d8:	90                   	nop
ffffffff801089d9:	90                   	nop
ffffffff801089da:	90                   	nop
ffffffff801089db:	90                   	nop
ffffffff801089dc:	90                   	nop
ffffffff801089dd:	90                   	nop
ffffffff801089de:	90                   	nop
ffffffff801089df:	90                   	nop
ffffffff801089e0:	90                   	nop
ffffffff801089e1:	90                   	nop
ffffffff801089e2:	90                   	nop
ffffffff801089e3:	90                   	nop
ffffffff801089e4:	90                   	nop
ffffffff801089e5:	90                   	nop
ffffffff801089e6:	90                   	nop
ffffffff801089e7:	90                   	nop
ffffffff801089e8:	90                   	nop
ffffffff801089e9:	90                   	nop
ffffffff801089ea:	90                   	nop
ffffffff801089eb:	90                   	nop
ffffffff801089ec:	90                   	nop
ffffffff801089ed:	90                   	nop
ffffffff801089ee:	90                   	nop
ffffffff801089ef:	90                   	nop
ffffffff801089f0:	90                   	nop
ffffffff801089f1:	90                   	nop
ffffffff801089f2:	90                   	nop
ffffffff801089f3:	90                   	nop
ffffffff801089f4:	90                   	nop
ffffffff801089f5:	90                   	nop
ffffffff801089f6:	90                   	nop
ffffffff801089f7:	90                   	nop
ffffffff801089f8:	90                   	nop
ffffffff801089f9:	90                   	nop
ffffffff801089fa:	90                   	nop
ffffffff801089fb:	90                   	nop
ffffffff801089fc:	90                   	nop
ffffffff801089fd:	90                   	nop
ffffffff801089fe:	90                   	nop
ffffffff801089ff:	90                   	nop
ffffffff80108a00:	90                   	nop
ffffffff80108a01:	90                   	nop
ffffffff80108a02:	90                   	nop
ffffffff80108a03:	90                   	nop
ffffffff80108a04:	90                   	nop
ffffffff80108a05:	90                   	nop
ffffffff80108a06:	90                   	nop
ffffffff80108a07:	90                   	nop
ffffffff80108a08:	90                   	nop
ffffffff80108a09:	90                   	nop
ffffffff80108a0a:	90                   	nop
ffffffff80108a0b:	90                   	nop
ffffffff80108a0c:	90                   	nop
ffffffff80108a0d:	90                   	nop
ffffffff80108a0e:	90                   	nop
ffffffff80108a0f:	90                   	nop
ffffffff80108a10:	90                   	nop
ffffffff80108a11:	90                   	nop
ffffffff80108a12:	90                   	nop
ffffffff80108a13:	90                   	nop
ffffffff80108a14:	90                   	nop
ffffffff80108a15:	90                   	nop
ffffffff80108a16:	90                   	nop
ffffffff80108a17:	90                   	nop
ffffffff80108a18:	90                   	nop
ffffffff80108a19:	90                   	nop
ffffffff80108a1a:	90                   	nop
ffffffff80108a1b:	90                   	nop
ffffffff80108a1c:	90                   	nop
ffffffff80108a1d:	90                   	nop
ffffffff80108a1e:	90                   	nop
ffffffff80108a1f:	90                   	nop
ffffffff80108a20:	90                   	nop
ffffffff80108a21:	90                   	nop
ffffffff80108a22:	90                   	nop
ffffffff80108a23:	90                   	nop
ffffffff80108a24:	90                   	nop
ffffffff80108a25:	90                   	nop
ffffffff80108a26:	90                   	nop
ffffffff80108a27:	90                   	nop
ffffffff80108a28:	90                   	nop
ffffffff80108a29:	90                   	nop
ffffffff80108a2a:	90                   	nop
ffffffff80108a2b:	90                   	nop
ffffffff80108a2c:	90                   	nop
ffffffff80108a2d:	90                   	nop
ffffffff80108a2e:	90                   	nop
ffffffff80108a2f:	90                   	nop
ffffffff80108a30:	90                   	nop
ffffffff80108a31:	90                   	nop
ffffffff80108a32:	90                   	nop
ffffffff80108a33:	90                   	nop
ffffffff80108a34:	90                   	nop
ffffffff80108a35:	90                   	nop
ffffffff80108a36:	90                   	nop
ffffffff80108a37:	90                   	nop
ffffffff80108a38:	90                   	nop
ffffffff80108a39:	90                   	nop
ffffffff80108a3a:	90                   	nop
ffffffff80108a3b:	90                   	nop
ffffffff80108a3c:	90                   	nop
ffffffff80108a3d:	90                   	nop
ffffffff80108a3e:	90                   	nop
ffffffff80108a3f:	90                   	nop
ffffffff80108a40:	90                   	nop
ffffffff80108a41:	90                   	nop
ffffffff80108a42:	90                   	nop
ffffffff80108a43:	90                   	nop
ffffffff80108a44:	90                   	nop
ffffffff80108a45:	90                   	nop
ffffffff80108a46:	90                   	nop
ffffffff80108a47:	90                   	nop
ffffffff80108a48:	90                   	nop
ffffffff80108a49:	90                   	nop
ffffffff80108a4a:	90                   	nop
ffffffff80108a4b:	90                   	nop
ffffffff80108a4c:	90                   	nop
ffffffff80108a4d:	90                   	nop
ffffffff80108a4e:	90                   	nop
ffffffff80108a4f:	90                   	nop
ffffffff80108a50:	90                   	nop
ffffffff80108a51:	90                   	nop
ffffffff80108a52:	90                   	nop
ffffffff80108a53:	90                   	nop
ffffffff80108a54:	90                   	nop
ffffffff80108a55:	90                   	nop
ffffffff80108a56:	90                   	nop
ffffffff80108a57:	90                   	nop
ffffffff80108a58:	90                   	nop
ffffffff80108a59:	90                   	nop
ffffffff80108a5a:	90                   	nop
ffffffff80108a5b:	90                   	nop
ffffffff80108a5c:	90                   	nop
ffffffff80108a5d:	90                   	nop
ffffffff80108a5e:	90                   	nop
ffffffff80108a5f:	90                   	nop
ffffffff80108a60:	90                   	nop
ffffffff80108a61:	90                   	nop
ffffffff80108a62:	90                   	nop
ffffffff80108a63:	90                   	nop
ffffffff80108a64:	90                   	nop
ffffffff80108a65:	90                   	nop
ffffffff80108a66:	90                   	nop
ffffffff80108a67:	90                   	nop
ffffffff80108a68:	90                   	nop
ffffffff80108a69:	90                   	nop
ffffffff80108a6a:	90                   	nop
ffffffff80108a6b:	90                   	nop
ffffffff80108a6c:	90                   	nop
ffffffff80108a6d:	90                   	nop
ffffffff80108a6e:	90                   	nop
ffffffff80108a6f:	90                   	nop
ffffffff80108a70:	90                   	nop
ffffffff80108a71:	90                   	nop
ffffffff80108a72:	90                   	nop
ffffffff80108a73:	90                   	nop
ffffffff80108a74:	90                   	nop
ffffffff80108a75:	90                   	nop
ffffffff80108a76:	90                   	nop
ffffffff80108a77:	90                   	nop
ffffffff80108a78:	90                   	nop
ffffffff80108a79:	90                   	nop
ffffffff80108a7a:	90                   	nop
ffffffff80108a7b:	90                   	nop
ffffffff80108a7c:	90                   	nop
ffffffff80108a7d:	90                   	nop
ffffffff80108a7e:	90                   	nop
ffffffff80108a7f:	90                   	nop
ffffffff80108a80:	90                   	nop
ffffffff80108a81:	90                   	nop
ffffffff80108a82:	90                   	nop
ffffffff80108a83:	90                   	nop
ffffffff80108a84:	90                   	nop
ffffffff80108a85:	90                   	nop
ffffffff80108a86:	90                   	nop
ffffffff80108a87:	90                   	nop
ffffffff80108a88:	90                   	nop
ffffffff80108a89:	90                   	nop
ffffffff80108a8a:	90                   	nop
ffffffff80108a8b:	90                   	nop
ffffffff80108a8c:	90                   	nop
ffffffff80108a8d:	90                   	nop
ffffffff80108a8e:	90                   	nop
ffffffff80108a8f:	90                   	nop
ffffffff80108a90:	90                   	nop
ffffffff80108a91:	90                   	nop
ffffffff80108a92:	90                   	nop
ffffffff80108a93:	90                   	nop
ffffffff80108a94:	90                   	nop
ffffffff80108a95:	90                   	nop
ffffffff80108a96:	90                   	nop
ffffffff80108a97:	90                   	nop
ffffffff80108a98:	90                   	nop
ffffffff80108a99:	90                   	nop
ffffffff80108a9a:	90                   	nop
ffffffff80108a9b:	90                   	nop
ffffffff80108a9c:	90                   	nop
ffffffff80108a9d:	90                   	nop
ffffffff80108a9e:	90                   	nop
ffffffff80108a9f:	90                   	nop
ffffffff80108aa0:	90                   	nop
ffffffff80108aa1:	90                   	nop
ffffffff80108aa2:	90                   	nop
ffffffff80108aa3:	90                   	nop
ffffffff80108aa4:	90                   	nop
ffffffff80108aa5:	90                   	nop
ffffffff80108aa6:	90                   	nop
ffffffff80108aa7:	90                   	nop
ffffffff80108aa8:	90                   	nop
ffffffff80108aa9:	90                   	nop
ffffffff80108aaa:	90                   	nop
ffffffff80108aab:	90                   	nop
ffffffff80108aac:	90                   	nop
ffffffff80108aad:	90                   	nop
ffffffff80108aae:	90                   	nop
ffffffff80108aaf:	90                   	nop
ffffffff80108ab0:	90                   	nop
ffffffff80108ab1:	90                   	nop
ffffffff80108ab2:	90                   	nop
ffffffff80108ab3:	90                   	nop
ffffffff80108ab4:	90                   	nop
ffffffff80108ab5:	90                   	nop
ffffffff80108ab6:	90                   	nop
ffffffff80108ab7:	90                   	nop
ffffffff80108ab8:	90                   	nop
ffffffff80108ab9:	90                   	nop
ffffffff80108aba:	90                   	nop
ffffffff80108abb:	90                   	nop
ffffffff80108abc:	90                   	nop
ffffffff80108abd:	90                   	nop
ffffffff80108abe:	90                   	nop
ffffffff80108abf:	90                   	nop
ffffffff80108ac0:	90                   	nop
ffffffff80108ac1:	90                   	nop
ffffffff80108ac2:	90                   	nop
ffffffff80108ac3:	90                   	nop
ffffffff80108ac4:	90                   	nop
ffffffff80108ac5:	90                   	nop
ffffffff80108ac6:	90                   	nop
ffffffff80108ac7:	90                   	nop
ffffffff80108ac8:	90                   	nop
ffffffff80108ac9:	90                   	nop
ffffffff80108aca:	90                   	nop
ffffffff80108acb:	90                   	nop
ffffffff80108acc:	90                   	nop
ffffffff80108acd:	90                   	nop
ffffffff80108ace:	90                   	nop
ffffffff80108acf:	90                   	nop
ffffffff80108ad0:	90                   	nop
ffffffff80108ad1:	90                   	nop
ffffffff80108ad2:	90                   	nop
ffffffff80108ad3:	90                   	nop
ffffffff80108ad4:	90                   	nop
ffffffff80108ad5:	90                   	nop
ffffffff80108ad6:	90                   	nop
ffffffff80108ad7:	90                   	nop
ffffffff80108ad8:	90                   	nop
ffffffff80108ad9:	90                   	nop
ffffffff80108ada:	90                   	nop
ffffffff80108adb:	90                   	nop
ffffffff80108adc:	90                   	nop
ffffffff80108add:	90                   	nop
ffffffff80108ade:	90                   	nop
ffffffff80108adf:	90                   	nop
ffffffff80108ae0:	90                   	nop
ffffffff80108ae1:	90                   	nop
ffffffff80108ae2:	90                   	nop
ffffffff80108ae3:	90                   	nop
ffffffff80108ae4:	90                   	nop
ffffffff80108ae5:	90                   	nop
ffffffff80108ae6:	90                   	nop
ffffffff80108ae7:	90                   	nop
ffffffff80108ae8:	90                   	nop
ffffffff80108ae9:	90                   	nop
ffffffff80108aea:	90                   	nop
ffffffff80108aeb:	90                   	nop
ffffffff80108aec:	90                   	nop
ffffffff80108aed:	90                   	nop
ffffffff80108aee:	90                   	nop
ffffffff80108aef:	90                   	nop
ffffffff80108af0:	90                   	nop
ffffffff80108af1:	90                   	nop
ffffffff80108af2:	90                   	nop
ffffffff80108af3:	90                   	nop
ffffffff80108af4:	90                   	nop
ffffffff80108af5:	90                   	nop
ffffffff80108af6:	90                   	nop
ffffffff80108af7:	90                   	nop
ffffffff80108af8:	90                   	nop
ffffffff80108af9:	90                   	nop
ffffffff80108afa:	90                   	nop
ffffffff80108afb:	90                   	nop
ffffffff80108afc:	90                   	nop
ffffffff80108afd:	90                   	nop
ffffffff80108afe:	90                   	nop
ffffffff80108aff:	90                   	nop
ffffffff80108b00:	90                   	nop
ffffffff80108b01:	90                   	nop
ffffffff80108b02:	90                   	nop
ffffffff80108b03:	90                   	nop
ffffffff80108b04:	90                   	nop
ffffffff80108b05:	90                   	nop
ffffffff80108b06:	90                   	nop
ffffffff80108b07:	90                   	nop
ffffffff80108b08:	90                   	nop
ffffffff80108b09:	90                   	nop
ffffffff80108b0a:	90                   	nop
ffffffff80108b0b:	90                   	nop
ffffffff80108b0c:	90                   	nop
ffffffff80108b0d:	90                   	nop
ffffffff80108b0e:	90                   	nop
ffffffff80108b0f:	90                   	nop
ffffffff80108b10:	90                   	nop
ffffffff80108b11:	90                   	nop
ffffffff80108b12:	90                   	nop
ffffffff80108b13:	90                   	nop
ffffffff80108b14:	90                   	nop
ffffffff80108b15:	90                   	nop
ffffffff80108b16:	90                   	nop
ffffffff80108b17:	90                   	nop
ffffffff80108b18:	90                   	nop
ffffffff80108b19:	90                   	nop
ffffffff80108b1a:	90                   	nop
ffffffff80108b1b:	90                   	nop
ffffffff80108b1c:	90                   	nop
ffffffff80108b1d:	90                   	nop
ffffffff80108b1e:	90                   	nop
ffffffff80108b1f:	90                   	nop
ffffffff80108b20:	90                   	nop
ffffffff80108b21:	90                   	nop
ffffffff80108b22:	90                   	nop
ffffffff80108b23:	90                   	nop
ffffffff80108b24:	90                   	nop
ffffffff80108b25:	90                   	nop
ffffffff80108b26:	90                   	nop
ffffffff80108b27:	90                   	nop
ffffffff80108b28:	90                   	nop
ffffffff80108b29:	90                   	nop
ffffffff80108b2a:	90                   	nop
ffffffff80108b2b:	90                   	nop
ffffffff80108b2c:	90                   	nop
ffffffff80108b2d:	90                   	nop
ffffffff80108b2e:	90                   	nop
ffffffff80108b2f:	90                   	nop
ffffffff80108b30:	90                   	nop
ffffffff80108b31:	90                   	nop
ffffffff80108b32:	90                   	nop
ffffffff80108b33:	90                   	nop
ffffffff80108b34:	90                   	nop
ffffffff80108b35:	90                   	nop
ffffffff80108b36:	90                   	nop
ffffffff80108b37:	90                   	nop
ffffffff80108b38:	90                   	nop
ffffffff80108b39:	90                   	nop
ffffffff80108b3a:	90                   	nop
ffffffff80108b3b:	90                   	nop
ffffffff80108b3c:	90                   	nop
ffffffff80108b3d:	90                   	nop
ffffffff80108b3e:	90                   	nop
ffffffff80108b3f:	90                   	nop
ffffffff80108b40:	90                   	nop
ffffffff80108b41:	90                   	nop
ffffffff80108b42:	90                   	nop
ffffffff80108b43:	90                   	nop
ffffffff80108b44:	90                   	nop
ffffffff80108b45:	90                   	nop
ffffffff80108b46:	90                   	nop
ffffffff80108b47:	90                   	nop
ffffffff80108b48:	90                   	nop
ffffffff80108b49:	90                   	nop
ffffffff80108b4a:	90                   	nop
ffffffff80108b4b:	90                   	nop
ffffffff80108b4c:	90                   	nop
ffffffff80108b4d:	90                   	nop
ffffffff80108b4e:	90                   	nop
ffffffff80108b4f:	90                   	nop
ffffffff80108b50:	90                   	nop
ffffffff80108b51:	90                   	nop
ffffffff80108b52:	90                   	nop
ffffffff80108b53:	90                   	nop
ffffffff80108b54:	90                   	nop
ffffffff80108b55:	90                   	nop
ffffffff80108b56:	90                   	nop
ffffffff80108b57:	90                   	nop
ffffffff80108b58:	90                   	nop
ffffffff80108b59:	90                   	nop
ffffffff80108b5a:	90                   	nop
ffffffff80108b5b:	90                   	nop
ffffffff80108b5c:	90                   	nop
ffffffff80108b5d:	90                   	nop
ffffffff80108b5e:	90                   	nop
ffffffff80108b5f:	90                   	nop
ffffffff80108b60:	90                   	nop
ffffffff80108b61:	90                   	nop
ffffffff80108b62:	90                   	nop
ffffffff80108b63:	90                   	nop
ffffffff80108b64:	90                   	nop
ffffffff80108b65:	90                   	nop
ffffffff80108b66:	90                   	nop
ffffffff80108b67:	90                   	nop
ffffffff80108b68:	90                   	nop
ffffffff80108b69:	90                   	nop
ffffffff80108b6a:	90                   	nop
ffffffff80108b6b:	90                   	nop
ffffffff80108b6c:	90                   	nop
ffffffff80108b6d:	90                   	nop
ffffffff80108b6e:	90                   	nop
ffffffff80108b6f:	90                   	nop
ffffffff80108b70:	90                   	nop
ffffffff80108b71:	90                   	nop
ffffffff80108b72:	90                   	nop
ffffffff80108b73:	90                   	nop
ffffffff80108b74:	90                   	nop
ffffffff80108b75:	90                   	nop
ffffffff80108b76:	90                   	nop
ffffffff80108b77:	90                   	nop
ffffffff80108b78:	90                   	nop
ffffffff80108b79:	90                   	nop
ffffffff80108b7a:	90                   	nop
ffffffff80108b7b:	90                   	nop
ffffffff80108b7c:	90                   	nop
ffffffff80108b7d:	90                   	nop
ffffffff80108b7e:	90                   	nop
ffffffff80108b7f:	90                   	nop
ffffffff80108b80:	90                   	nop
ffffffff80108b81:	90                   	nop
ffffffff80108b82:	90                   	nop
ffffffff80108b83:	90                   	nop
ffffffff80108b84:	90                   	nop
ffffffff80108b85:	90                   	nop
ffffffff80108b86:	90                   	nop
ffffffff80108b87:	90                   	nop
ffffffff80108b88:	90                   	nop
ffffffff80108b89:	90                   	nop
ffffffff80108b8a:	90                   	nop
ffffffff80108b8b:	90                   	nop
ffffffff80108b8c:	90                   	nop
ffffffff80108b8d:	90                   	nop
ffffffff80108b8e:	90                   	nop
ffffffff80108b8f:	90                   	nop
ffffffff80108b90:	90                   	nop
ffffffff80108b91:	90                   	nop
ffffffff80108b92:	90                   	nop
ffffffff80108b93:	90                   	nop
ffffffff80108b94:	90                   	nop
ffffffff80108b95:	90                   	nop
ffffffff80108b96:	90                   	nop
ffffffff80108b97:	90                   	nop
ffffffff80108b98:	90                   	nop
ffffffff80108b99:	90                   	nop
ffffffff80108b9a:	90                   	nop
ffffffff80108b9b:	90                   	nop
ffffffff80108b9c:	90                   	nop
ffffffff80108b9d:	90                   	nop
ffffffff80108b9e:	90                   	nop
ffffffff80108b9f:	90                   	nop
ffffffff80108ba0:	90                   	nop
ffffffff80108ba1:	90                   	nop
ffffffff80108ba2:	90                   	nop
ffffffff80108ba3:	90                   	nop
ffffffff80108ba4:	90                   	nop
ffffffff80108ba5:	90                   	nop
ffffffff80108ba6:	90                   	nop
ffffffff80108ba7:	90                   	nop
ffffffff80108ba8:	90                   	nop
ffffffff80108ba9:	90                   	nop
ffffffff80108baa:	90                   	nop
ffffffff80108bab:	90                   	nop
ffffffff80108bac:	90                   	nop
ffffffff80108bad:	90                   	nop
ffffffff80108bae:	90                   	nop
ffffffff80108baf:	90                   	nop
ffffffff80108bb0:	90                   	nop
ffffffff80108bb1:	90                   	nop
ffffffff80108bb2:	90                   	nop
ffffffff80108bb3:	90                   	nop
ffffffff80108bb4:	90                   	nop
ffffffff80108bb5:	90                   	nop
ffffffff80108bb6:	90                   	nop
ffffffff80108bb7:	90                   	nop
ffffffff80108bb8:	90                   	nop
ffffffff80108bb9:	90                   	nop
ffffffff80108bba:	90                   	nop
ffffffff80108bbb:	90                   	nop
ffffffff80108bbc:	90                   	nop
ffffffff80108bbd:	90                   	nop
ffffffff80108bbe:	90                   	nop
ffffffff80108bbf:	90                   	nop
ffffffff80108bc0:	90                   	nop
ffffffff80108bc1:	90                   	nop
ffffffff80108bc2:	90                   	nop
ffffffff80108bc3:	90                   	nop
ffffffff80108bc4:	90                   	nop
ffffffff80108bc5:	90                   	nop
ffffffff80108bc6:	90                   	nop
ffffffff80108bc7:	90                   	nop
ffffffff80108bc8:	90                   	nop
ffffffff80108bc9:	90                   	nop
ffffffff80108bca:	90                   	nop
ffffffff80108bcb:	90                   	nop
ffffffff80108bcc:	90                   	nop
ffffffff80108bcd:	90                   	nop
ffffffff80108bce:	90                   	nop
ffffffff80108bcf:	90                   	nop
ffffffff80108bd0:	90                   	nop
ffffffff80108bd1:	90                   	nop
ffffffff80108bd2:	90                   	nop
ffffffff80108bd3:	90                   	nop
ffffffff80108bd4:	90                   	nop
ffffffff80108bd5:	90                   	nop
ffffffff80108bd6:	90                   	nop
ffffffff80108bd7:	90                   	nop
ffffffff80108bd8:	90                   	nop
ffffffff80108bd9:	90                   	nop
ffffffff80108bda:	90                   	nop
ffffffff80108bdb:	90                   	nop
ffffffff80108bdc:	90                   	nop
ffffffff80108bdd:	90                   	nop
ffffffff80108bde:	90                   	nop
ffffffff80108bdf:	90                   	nop
ffffffff80108be0:	90                   	nop
ffffffff80108be1:	90                   	nop
ffffffff80108be2:	90                   	nop
ffffffff80108be3:	90                   	nop
ffffffff80108be4:	90                   	nop
ffffffff80108be5:	90                   	nop
ffffffff80108be6:	90                   	nop
ffffffff80108be7:	90                   	nop
ffffffff80108be8:	90                   	nop
ffffffff80108be9:	90                   	nop
ffffffff80108bea:	90                   	nop
ffffffff80108beb:	90                   	nop
ffffffff80108bec:	90                   	nop
ffffffff80108bed:	90                   	nop
ffffffff80108bee:	90                   	nop
ffffffff80108bef:	90                   	nop
ffffffff80108bf0:	90                   	nop
ffffffff80108bf1:	90                   	nop
ffffffff80108bf2:	90                   	nop
ffffffff80108bf3:	90                   	nop
ffffffff80108bf4:	90                   	nop
ffffffff80108bf5:	90                   	nop
ffffffff80108bf6:	90                   	nop
ffffffff80108bf7:	90                   	nop
ffffffff80108bf8:	90                   	nop
ffffffff80108bf9:	90                   	nop
ffffffff80108bfa:	90                   	nop
ffffffff80108bfb:	90                   	nop
ffffffff80108bfc:	90                   	nop
ffffffff80108bfd:	90                   	nop
ffffffff80108bfe:	90                   	nop
ffffffff80108bff:	90                   	nop
ffffffff80108c00:	90                   	nop
ffffffff80108c01:	90                   	nop
ffffffff80108c02:	90                   	nop
ffffffff80108c03:	90                   	nop
ffffffff80108c04:	90                   	nop
ffffffff80108c05:	90                   	nop
ffffffff80108c06:	90                   	nop
ffffffff80108c07:	90                   	nop
ffffffff80108c08:	90                   	nop
ffffffff80108c09:	90                   	nop
ffffffff80108c0a:	90                   	nop
ffffffff80108c0b:	90                   	nop
ffffffff80108c0c:	90                   	nop
ffffffff80108c0d:	90                   	nop
ffffffff80108c0e:	90                   	nop
ffffffff80108c0f:	90                   	nop
ffffffff80108c10:	90                   	nop
ffffffff80108c11:	90                   	nop
ffffffff80108c12:	90                   	nop
ffffffff80108c13:	90                   	nop
ffffffff80108c14:	90                   	nop
ffffffff80108c15:	90                   	nop
ffffffff80108c16:	90                   	nop
ffffffff80108c17:	90                   	nop
ffffffff80108c18:	90                   	nop
ffffffff80108c19:	90                   	nop
ffffffff80108c1a:	90                   	nop
ffffffff80108c1b:	90                   	nop
ffffffff80108c1c:	90                   	nop
ffffffff80108c1d:	90                   	nop
ffffffff80108c1e:	90                   	nop
ffffffff80108c1f:	90                   	nop
ffffffff80108c20:	90                   	nop
ffffffff80108c21:	90                   	nop
ffffffff80108c22:	90                   	nop
ffffffff80108c23:	90                   	nop
ffffffff80108c24:	90                   	nop
ffffffff80108c25:	90                   	nop
ffffffff80108c26:	90                   	nop
ffffffff80108c27:	90                   	nop
ffffffff80108c28:	90                   	nop
ffffffff80108c29:	90                   	nop
ffffffff80108c2a:	90                   	nop
ffffffff80108c2b:	90                   	nop
ffffffff80108c2c:	90                   	nop
ffffffff80108c2d:	90                   	nop
ffffffff80108c2e:	90                   	nop
ffffffff80108c2f:	90                   	nop
ffffffff80108c30:	90                   	nop
ffffffff80108c31:	90                   	nop
ffffffff80108c32:	90                   	nop
ffffffff80108c33:	90                   	nop
ffffffff80108c34:	90                   	nop
ffffffff80108c35:	90                   	nop
ffffffff80108c36:	90                   	nop
ffffffff80108c37:	90                   	nop
ffffffff80108c38:	90                   	nop
ffffffff80108c39:	90                   	nop
ffffffff80108c3a:	90                   	nop
ffffffff80108c3b:	90                   	nop
ffffffff80108c3c:	90                   	nop
ffffffff80108c3d:	90                   	nop
ffffffff80108c3e:	90                   	nop
ffffffff80108c3f:	90                   	nop
ffffffff80108c40:	90                   	nop
ffffffff80108c41:	90                   	nop
ffffffff80108c42:	90                   	nop
ffffffff80108c43:	90                   	nop
ffffffff80108c44:	90                   	nop
ffffffff80108c45:	90                   	nop
ffffffff80108c46:	90                   	nop
ffffffff80108c47:	90                   	nop
ffffffff80108c48:	90                   	nop
ffffffff80108c49:	90                   	nop
ffffffff80108c4a:	90                   	nop
ffffffff80108c4b:	90                   	nop
ffffffff80108c4c:	90                   	nop
ffffffff80108c4d:	90                   	nop
ffffffff80108c4e:	90                   	nop
ffffffff80108c4f:	90                   	nop
ffffffff80108c50:	90                   	nop
ffffffff80108c51:	90                   	nop
ffffffff80108c52:	90                   	nop
ffffffff80108c53:	90                   	nop
ffffffff80108c54:	90                   	nop
ffffffff80108c55:	90                   	nop
ffffffff80108c56:	90                   	nop
ffffffff80108c57:	90                   	nop
ffffffff80108c58:	90                   	nop
ffffffff80108c59:	90                   	nop
ffffffff80108c5a:	90                   	nop
ffffffff80108c5b:	90                   	nop
ffffffff80108c5c:	90                   	nop
ffffffff80108c5d:	90                   	nop
ffffffff80108c5e:	90                   	nop
ffffffff80108c5f:	90                   	nop
ffffffff80108c60:	90                   	nop
ffffffff80108c61:	90                   	nop
ffffffff80108c62:	90                   	nop
ffffffff80108c63:	90                   	nop
ffffffff80108c64:	90                   	nop
ffffffff80108c65:	90                   	nop
ffffffff80108c66:	90                   	nop
ffffffff80108c67:	90                   	nop
ffffffff80108c68:	90                   	nop
ffffffff80108c69:	90                   	nop
ffffffff80108c6a:	90                   	nop
ffffffff80108c6b:	90                   	nop
ffffffff80108c6c:	90                   	nop
ffffffff80108c6d:	90                   	nop
ffffffff80108c6e:	90                   	nop
ffffffff80108c6f:	90                   	nop
ffffffff80108c70:	90                   	nop
ffffffff80108c71:	90                   	nop
ffffffff80108c72:	90                   	nop
ffffffff80108c73:	90                   	nop
ffffffff80108c74:	90                   	nop
ffffffff80108c75:	90                   	nop
ffffffff80108c76:	90                   	nop
ffffffff80108c77:	90                   	nop
ffffffff80108c78:	90                   	nop
ffffffff80108c79:	90                   	nop
ffffffff80108c7a:	90                   	nop
ffffffff80108c7b:	90                   	nop
ffffffff80108c7c:	90                   	nop
ffffffff80108c7d:	90                   	nop
ffffffff80108c7e:	90                   	nop
ffffffff80108c7f:	90                   	nop
ffffffff80108c80:	90                   	nop
ffffffff80108c81:	90                   	nop
ffffffff80108c82:	90                   	nop
ffffffff80108c83:	90                   	nop
ffffffff80108c84:	90                   	nop
ffffffff80108c85:	90                   	nop
ffffffff80108c86:	90                   	nop
ffffffff80108c87:	90                   	nop
ffffffff80108c88:	90                   	nop
ffffffff80108c89:	90                   	nop
ffffffff80108c8a:	90                   	nop
ffffffff80108c8b:	90                   	nop
ffffffff80108c8c:	90                   	nop
ffffffff80108c8d:	90                   	nop
ffffffff80108c8e:	90                   	nop
ffffffff80108c8f:	90                   	nop
ffffffff80108c90:	90                   	nop
ffffffff80108c91:	90                   	nop
ffffffff80108c92:	90                   	nop
ffffffff80108c93:	90                   	nop
ffffffff80108c94:	90                   	nop
ffffffff80108c95:	90                   	nop
ffffffff80108c96:	90                   	nop
ffffffff80108c97:	90                   	nop
ffffffff80108c98:	90                   	nop
ffffffff80108c99:	90                   	nop
ffffffff80108c9a:	90                   	nop
ffffffff80108c9b:	90                   	nop
ffffffff80108c9c:	90                   	nop
ffffffff80108c9d:	90                   	nop
ffffffff80108c9e:	90                   	nop
ffffffff80108c9f:	90                   	nop
ffffffff80108ca0:	90                   	nop
ffffffff80108ca1:	90                   	nop
ffffffff80108ca2:	90                   	nop
ffffffff80108ca3:	90                   	nop
ffffffff80108ca4:	90                   	nop
ffffffff80108ca5:	90                   	nop
ffffffff80108ca6:	90                   	nop
ffffffff80108ca7:	90                   	nop
ffffffff80108ca8:	90                   	nop
ffffffff80108ca9:	90                   	nop
ffffffff80108caa:	90                   	nop
ffffffff80108cab:	90                   	nop
ffffffff80108cac:	90                   	nop
ffffffff80108cad:	90                   	nop
ffffffff80108cae:	90                   	nop
ffffffff80108caf:	90                   	nop
ffffffff80108cb0:	90                   	nop
ffffffff80108cb1:	90                   	nop
ffffffff80108cb2:	90                   	nop
ffffffff80108cb3:	90                   	nop
ffffffff80108cb4:	90                   	nop
ffffffff80108cb5:	90                   	nop
ffffffff80108cb6:	90                   	nop
ffffffff80108cb7:	90                   	nop
ffffffff80108cb8:	90                   	nop
ffffffff80108cb9:	90                   	nop
ffffffff80108cba:	90                   	nop
ffffffff80108cbb:	90                   	nop
ffffffff80108cbc:	90                   	nop
ffffffff80108cbd:	90                   	nop
ffffffff80108cbe:	90                   	nop
ffffffff80108cbf:	90                   	nop
ffffffff80108cc0:	90                   	nop
ffffffff80108cc1:	90                   	nop
ffffffff80108cc2:	90                   	nop
ffffffff80108cc3:	90                   	nop
ffffffff80108cc4:	90                   	nop
ffffffff80108cc5:	90                   	nop
ffffffff80108cc6:	90                   	nop
ffffffff80108cc7:	90                   	nop
ffffffff80108cc8:	90                   	nop
ffffffff80108cc9:	90                   	nop
ffffffff80108cca:	90                   	nop
ffffffff80108ccb:	90                   	nop
ffffffff80108ccc:	90                   	nop
ffffffff80108ccd:	90                   	nop
ffffffff80108cce:	90                   	nop
ffffffff80108ccf:	90                   	nop
ffffffff80108cd0:	90                   	nop
ffffffff80108cd1:	90                   	nop
ffffffff80108cd2:	90                   	nop
ffffffff80108cd3:	90                   	nop
ffffffff80108cd4:	90                   	nop
ffffffff80108cd5:	90                   	nop
ffffffff80108cd6:	90                   	nop
ffffffff80108cd7:	90                   	nop
ffffffff80108cd8:	90                   	nop
ffffffff80108cd9:	90                   	nop
ffffffff80108cda:	90                   	nop
ffffffff80108cdb:	90                   	nop
ffffffff80108cdc:	90                   	nop
ffffffff80108cdd:	90                   	nop
ffffffff80108cde:	90                   	nop
ffffffff80108cdf:	90                   	nop
ffffffff80108ce0:	90                   	nop
ffffffff80108ce1:	90                   	nop
ffffffff80108ce2:	90                   	nop
ffffffff80108ce3:	90                   	nop
ffffffff80108ce4:	90                   	nop
ffffffff80108ce5:	90                   	nop
ffffffff80108ce6:	90                   	nop
ffffffff80108ce7:	90                   	nop
ffffffff80108ce8:	90                   	nop
ffffffff80108ce9:	90                   	nop
ffffffff80108cea:	90                   	nop
ffffffff80108ceb:	90                   	nop
ffffffff80108cec:	90                   	nop
ffffffff80108ced:	90                   	nop
ffffffff80108cee:	90                   	nop
ffffffff80108cef:	90                   	nop
ffffffff80108cf0:	90                   	nop
ffffffff80108cf1:	90                   	nop
ffffffff80108cf2:	90                   	nop
ffffffff80108cf3:	90                   	nop
ffffffff80108cf4:	90                   	nop
ffffffff80108cf5:	90                   	nop
ffffffff80108cf6:	90                   	nop
ffffffff80108cf7:	90                   	nop
ffffffff80108cf8:	90                   	nop
ffffffff80108cf9:	90                   	nop
ffffffff80108cfa:	90                   	nop
ffffffff80108cfb:	90                   	nop
ffffffff80108cfc:	90                   	nop
ffffffff80108cfd:	90                   	nop
ffffffff80108cfe:	90                   	nop
ffffffff80108cff:	90                   	nop
ffffffff80108d00:	90                   	nop
ffffffff80108d01:	90                   	nop
ffffffff80108d02:	90                   	nop
ffffffff80108d03:	90                   	nop
ffffffff80108d04:	90                   	nop
ffffffff80108d05:	90                   	nop
ffffffff80108d06:	90                   	nop
ffffffff80108d07:	90                   	nop
ffffffff80108d08:	90                   	nop
ffffffff80108d09:	90                   	nop
ffffffff80108d0a:	90                   	nop
ffffffff80108d0b:	90                   	nop
ffffffff80108d0c:	90                   	nop
ffffffff80108d0d:	90                   	nop
ffffffff80108d0e:	90                   	nop
ffffffff80108d0f:	90                   	nop
ffffffff80108d10:	90                   	nop
ffffffff80108d11:	90                   	nop
ffffffff80108d12:	90                   	nop
ffffffff80108d13:	90                   	nop
ffffffff80108d14:	90                   	nop
ffffffff80108d15:	90                   	nop
ffffffff80108d16:	90                   	nop
ffffffff80108d17:	90                   	nop
ffffffff80108d18:	90                   	nop
ffffffff80108d19:	90                   	nop
ffffffff80108d1a:	90                   	nop
ffffffff80108d1b:	90                   	nop
ffffffff80108d1c:	90                   	nop
ffffffff80108d1d:	90                   	nop
ffffffff80108d1e:	90                   	nop
ffffffff80108d1f:	90                   	nop
ffffffff80108d20:	90                   	nop
ffffffff80108d21:	90                   	nop
ffffffff80108d22:	90                   	nop
ffffffff80108d23:	90                   	nop
ffffffff80108d24:	90                   	nop
ffffffff80108d25:	90                   	nop
ffffffff80108d26:	90                   	nop
ffffffff80108d27:	90                   	nop
ffffffff80108d28:	90                   	nop
ffffffff80108d29:	90                   	nop
ffffffff80108d2a:	90                   	nop
ffffffff80108d2b:	90                   	nop
ffffffff80108d2c:	90                   	nop
ffffffff80108d2d:	90                   	nop
ffffffff80108d2e:	90                   	nop
ffffffff80108d2f:	90                   	nop
ffffffff80108d30:	90                   	nop
ffffffff80108d31:	90                   	nop
ffffffff80108d32:	90                   	nop
ffffffff80108d33:	90                   	nop
ffffffff80108d34:	90                   	nop
ffffffff80108d35:	90                   	nop
ffffffff80108d36:	90                   	nop
ffffffff80108d37:	90                   	nop
ffffffff80108d38:	90                   	nop
ffffffff80108d39:	90                   	nop
ffffffff80108d3a:	90                   	nop
ffffffff80108d3b:	90                   	nop
ffffffff80108d3c:	90                   	nop
ffffffff80108d3d:	90                   	nop
ffffffff80108d3e:	90                   	nop
ffffffff80108d3f:	90                   	nop
ffffffff80108d40:	90                   	nop
ffffffff80108d41:	90                   	nop
ffffffff80108d42:	90                   	nop
ffffffff80108d43:	90                   	nop
ffffffff80108d44:	90                   	nop
ffffffff80108d45:	90                   	nop
ffffffff80108d46:	90                   	nop
ffffffff80108d47:	90                   	nop
ffffffff80108d48:	90                   	nop
ffffffff80108d49:	90                   	nop
ffffffff80108d4a:	90                   	nop
ffffffff80108d4b:	90                   	nop
ffffffff80108d4c:	90                   	nop
ffffffff80108d4d:	90                   	nop
ffffffff80108d4e:	90                   	nop
ffffffff80108d4f:	90                   	nop
ffffffff80108d50:	90                   	nop
ffffffff80108d51:	90                   	nop
ffffffff80108d52:	90                   	nop
ffffffff80108d53:	90                   	nop
ffffffff80108d54:	90                   	nop
ffffffff80108d55:	90                   	nop
ffffffff80108d56:	90                   	nop
ffffffff80108d57:	90                   	nop
ffffffff80108d58:	90                   	nop
ffffffff80108d59:	90                   	nop
ffffffff80108d5a:	90                   	nop
ffffffff80108d5b:	90                   	nop
ffffffff80108d5c:	90                   	nop
ffffffff80108d5d:	90                   	nop
ffffffff80108d5e:	90                   	nop
ffffffff80108d5f:	90                   	nop
ffffffff80108d60:	90                   	nop
ffffffff80108d61:	90                   	nop
ffffffff80108d62:	90                   	nop
ffffffff80108d63:	90                   	nop
ffffffff80108d64:	90                   	nop
ffffffff80108d65:	90                   	nop
ffffffff80108d66:	90                   	nop
ffffffff80108d67:	90                   	nop
ffffffff80108d68:	90                   	nop
ffffffff80108d69:	90                   	nop
ffffffff80108d6a:	90                   	nop
ffffffff80108d6b:	90                   	nop
ffffffff80108d6c:	90                   	nop
ffffffff80108d6d:	90                   	nop
ffffffff80108d6e:	90                   	nop
ffffffff80108d6f:	90                   	nop
ffffffff80108d70:	90                   	nop
ffffffff80108d71:	90                   	nop
ffffffff80108d72:	90                   	nop
ffffffff80108d73:	90                   	nop
ffffffff80108d74:	90                   	nop
ffffffff80108d75:	90                   	nop
ffffffff80108d76:	90                   	nop
ffffffff80108d77:	90                   	nop
ffffffff80108d78:	90                   	nop
ffffffff80108d79:	90                   	nop
ffffffff80108d7a:	90                   	nop
ffffffff80108d7b:	90                   	nop
ffffffff80108d7c:	90                   	nop
ffffffff80108d7d:	90                   	nop
ffffffff80108d7e:	90                   	nop
ffffffff80108d7f:	90                   	nop
ffffffff80108d80:	90                   	nop
ffffffff80108d81:	90                   	nop
ffffffff80108d82:	90                   	nop
ffffffff80108d83:	90                   	nop
ffffffff80108d84:	90                   	nop
ffffffff80108d85:	90                   	nop
ffffffff80108d86:	90                   	nop
ffffffff80108d87:	90                   	nop
ffffffff80108d88:	90                   	nop
ffffffff80108d89:	90                   	nop
ffffffff80108d8a:	90                   	nop
ffffffff80108d8b:	90                   	nop
ffffffff80108d8c:	90                   	nop
ffffffff80108d8d:	90                   	nop
ffffffff80108d8e:	90                   	nop
ffffffff80108d8f:	90                   	nop
ffffffff80108d90:	90                   	nop
ffffffff80108d91:	90                   	nop
ffffffff80108d92:	90                   	nop
ffffffff80108d93:	90                   	nop
ffffffff80108d94:	90                   	nop
ffffffff80108d95:	90                   	nop
ffffffff80108d96:	90                   	nop
ffffffff80108d97:	90                   	nop
ffffffff80108d98:	90                   	nop
ffffffff80108d99:	90                   	nop
ffffffff80108d9a:	90                   	nop
ffffffff80108d9b:	90                   	nop
ffffffff80108d9c:	90                   	nop
ffffffff80108d9d:	90                   	nop
ffffffff80108d9e:	90                   	nop
ffffffff80108d9f:	90                   	nop
ffffffff80108da0:	90                   	nop
ffffffff80108da1:	90                   	nop
ffffffff80108da2:	90                   	nop
ffffffff80108da3:	90                   	nop
ffffffff80108da4:	90                   	nop
ffffffff80108da5:	90                   	nop
ffffffff80108da6:	90                   	nop
ffffffff80108da7:	90                   	nop
ffffffff80108da8:	90                   	nop
ffffffff80108da9:	90                   	nop
ffffffff80108daa:	90                   	nop
ffffffff80108dab:	90                   	nop
ffffffff80108dac:	90                   	nop
ffffffff80108dad:	90                   	nop
ffffffff80108dae:	90                   	nop
ffffffff80108daf:	90                   	nop
ffffffff80108db0:	90                   	nop
ffffffff80108db1:	90                   	nop
ffffffff80108db2:	90                   	nop
ffffffff80108db3:	90                   	nop
ffffffff80108db4:	90                   	nop
ffffffff80108db5:	90                   	nop
ffffffff80108db6:	90                   	nop
ffffffff80108db7:	90                   	nop
ffffffff80108db8:	90                   	nop
ffffffff80108db9:	90                   	nop
ffffffff80108dba:	90                   	nop
ffffffff80108dbb:	90                   	nop
ffffffff80108dbc:	90                   	nop
ffffffff80108dbd:	90                   	nop
ffffffff80108dbe:	90                   	nop
ffffffff80108dbf:	90                   	nop
ffffffff80108dc0:	90                   	nop
ffffffff80108dc1:	90                   	nop
ffffffff80108dc2:	90                   	nop
ffffffff80108dc3:	90                   	nop
ffffffff80108dc4:	90                   	nop
ffffffff80108dc5:	90                   	nop
ffffffff80108dc6:	90                   	nop
ffffffff80108dc7:	90                   	nop
ffffffff80108dc8:	90                   	nop
ffffffff80108dc9:	90                   	nop
ffffffff80108dca:	90                   	nop
ffffffff80108dcb:	90                   	nop
ffffffff80108dcc:	90                   	nop
ffffffff80108dcd:	90                   	nop
ffffffff80108dce:	90                   	nop
ffffffff80108dcf:	90                   	nop
ffffffff80108dd0:	90                   	nop
ffffffff80108dd1:	90                   	nop
ffffffff80108dd2:	90                   	nop
ffffffff80108dd3:	90                   	nop
ffffffff80108dd4:	90                   	nop
ffffffff80108dd5:	90                   	nop
ffffffff80108dd6:	90                   	nop
ffffffff80108dd7:	90                   	nop
ffffffff80108dd8:	90                   	nop
ffffffff80108dd9:	90                   	nop
ffffffff80108dda:	90                   	nop
ffffffff80108ddb:	90                   	nop
ffffffff80108ddc:	90                   	nop
ffffffff80108ddd:	90                   	nop
ffffffff80108dde:	90                   	nop
ffffffff80108ddf:	90                   	nop
ffffffff80108de0:	90                   	nop
ffffffff80108de1:	90                   	nop
ffffffff80108de2:	90                   	nop
ffffffff80108de3:	90                   	nop
ffffffff80108de4:	90                   	nop
ffffffff80108de5:	90                   	nop
ffffffff80108de6:	90                   	nop
ffffffff80108de7:	90                   	nop
ffffffff80108de8:	90                   	nop
ffffffff80108de9:	90                   	nop
ffffffff80108dea:	90                   	nop
ffffffff80108deb:	90                   	nop
ffffffff80108dec:	90                   	nop
ffffffff80108ded:	90                   	nop
ffffffff80108dee:	90                   	nop
ffffffff80108def:	90                   	nop
ffffffff80108df0:	90                   	nop
ffffffff80108df1:	90                   	nop
ffffffff80108df2:	90                   	nop
ffffffff80108df3:	90                   	nop
ffffffff80108df4:	90                   	nop
ffffffff80108df5:	90                   	nop
ffffffff80108df6:	90                   	nop
ffffffff80108df7:	90                   	nop
ffffffff80108df8:	90                   	nop
ffffffff80108df9:	90                   	nop
ffffffff80108dfa:	90                   	nop
ffffffff80108dfb:	90                   	nop
ffffffff80108dfc:	90                   	nop
ffffffff80108dfd:	90                   	nop
ffffffff80108dfe:	90                   	nop
ffffffff80108dff:	90                   	nop
ffffffff80108e00:	90                   	nop
ffffffff80108e01:	90                   	nop
ffffffff80108e02:	90                   	nop
ffffffff80108e03:	90                   	nop
ffffffff80108e04:	90                   	nop
ffffffff80108e05:	90                   	nop
ffffffff80108e06:	90                   	nop
ffffffff80108e07:	90                   	nop
ffffffff80108e08:	90                   	nop
ffffffff80108e09:	90                   	nop
ffffffff80108e0a:	90                   	nop
ffffffff80108e0b:	90                   	nop
ffffffff80108e0c:	90                   	nop
ffffffff80108e0d:	90                   	nop
ffffffff80108e0e:	90                   	nop
ffffffff80108e0f:	90                   	nop
ffffffff80108e10:	90                   	nop
ffffffff80108e11:	90                   	nop
ffffffff80108e12:	90                   	nop
ffffffff80108e13:	90                   	nop
ffffffff80108e14:	90                   	nop
ffffffff80108e15:	90                   	nop
ffffffff80108e16:	90                   	nop
ffffffff80108e17:	90                   	nop
ffffffff80108e18:	90                   	nop
ffffffff80108e19:	90                   	nop
ffffffff80108e1a:	90                   	nop
ffffffff80108e1b:	90                   	nop
ffffffff80108e1c:	90                   	nop
ffffffff80108e1d:	90                   	nop
ffffffff80108e1e:	90                   	nop
ffffffff80108e1f:	90                   	nop
ffffffff80108e20:	90                   	nop
ffffffff80108e21:	90                   	nop
ffffffff80108e22:	90                   	nop
ffffffff80108e23:	90                   	nop
ffffffff80108e24:	90                   	nop
ffffffff80108e25:	90                   	nop
ffffffff80108e26:	90                   	nop
ffffffff80108e27:	90                   	nop
ffffffff80108e28:	90                   	nop
ffffffff80108e29:	90                   	nop
ffffffff80108e2a:	90                   	nop
ffffffff80108e2b:	90                   	nop
ffffffff80108e2c:	90                   	nop
ffffffff80108e2d:	90                   	nop
ffffffff80108e2e:	90                   	nop
ffffffff80108e2f:	90                   	nop
ffffffff80108e30:	90                   	nop
ffffffff80108e31:	90                   	nop
ffffffff80108e32:	90                   	nop
ffffffff80108e33:	90                   	nop
ffffffff80108e34:	90                   	nop
ffffffff80108e35:	90                   	nop
ffffffff80108e36:	90                   	nop
ffffffff80108e37:	90                   	nop
ffffffff80108e38:	90                   	nop
ffffffff80108e39:	90                   	nop
ffffffff80108e3a:	90                   	nop
ffffffff80108e3b:	90                   	nop
ffffffff80108e3c:	90                   	nop
ffffffff80108e3d:	90                   	nop
ffffffff80108e3e:	90                   	nop
ffffffff80108e3f:	90                   	nop
ffffffff80108e40:	90                   	nop
ffffffff80108e41:	90                   	nop
ffffffff80108e42:	90                   	nop
ffffffff80108e43:	90                   	nop
ffffffff80108e44:	90                   	nop
ffffffff80108e45:	90                   	nop
ffffffff80108e46:	90                   	nop
ffffffff80108e47:	90                   	nop
ffffffff80108e48:	90                   	nop
ffffffff80108e49:	90                   	nop
ffffffff80108e4a:	90                   	nop
ffffffff80108e4b:	90                   	nop
ffffffff80108e4c:	90                   	nop
ffffffff80108e4d:	90                   	nop
ffffffff80108e4e:	90                   	nop
ffffffff80108e4f:	90                   	nop
ffffffff80108e50:	90                   	nop
ffffffff80108e51:	90                   	nop
ffffffff80108e52:	90                   	nop
ffffffff80108e53:	90                   	nop
ffffffff80108e54:	90                   	nop
ffffffff80108e55:	90                   	nop
ffffffff80108e56:	90                   	nop
ffffffff80108e57:	90                   	nop
ffffffff80108e58:	90                   	nop
ffffffff80108e59:	90                   	nop
ffffffff80108e5a:	90                   	nop
ffffffff80108e5b:	90                   	nop
ffffffff80108e5c:	90                   	nop
ffffffff80108e5d:	90                   	nop
ffffffff80108e5e:	90                   	nop
ffffffff80108e5f:	90                   	nop
ffffffff80108e60:	90                   	nop
ffffffff80108e61:	90                   	nop
ffffffff80108e62:	90                   	nop
ffffffff80108e63:	90                   	nop
ffffffff80108e64:	90                   	nop
ffffffff80108e65:	90                   	nop
ffffffff80108e66:	90                   	nop
ffffffff80108e67:	90                   	nop
ffffffff80108e68:	90                   	nop
ffffffff80108e69:	90                   	nop
ffffffff80108e6a:	90                   	nop
ffffffff80108e6b:	90                   	nop
ffffffff80108e6c:	90                   	nop
ffffffff80108e6d:	90                   	nop
ffffffff80108e6e:	90                   	nop
ffffffff80108e6f:	90                   	nop
ffffffff80108e70:	90                   	nop
ffffffff80108e71:	90                   	nop
ffffffff80108e72:	90                   	nop
ffffffff80108e73:	90                   	nop
ffffffff80108e74:	90                   	nop
ffffffff80108e75:	90                   	nop
ffffffff80108e76:	90                   	nop
ffffffff80108e77:	90                   	nop
ffffffff80108e78:	90                   	nop
ffffffff80108e79:	90                   	nop
ffffffff80108e7a:	90                   	nop
ffffffff80108e7b:	90                   	nop
ffffffff80108e7c:	90                   	nop
ffffffff80108e7d:	90                   	nop
ffffffff80108e7e:	90                   	nop
ffffffff80108e7f:	90                   	nop
ffffffff80108e80:	90                   	nop
ffffffff80108e81:	90                   	nop
ffffffff80108e82:	90                   	nop
ffffffff80108e83:	90                   	nop
ffffffff80108e84:	90                   	nop
ffffffff80108e85:	90                   	nop
ffffffff80108e86:	90                   	nop
ffffffff80108e87:	90                   	nop
ffffffff80108e88:	90                   	nop
ffffffff80108e89:	90                   	nop
ffffffff80108e8a:	90                   	nop
ffffffff80108e8b:	90                   	nop
ffffffff80108e8c:	90                   	nop
ffffffff80108e8d:	90                   	nop
ffffffff80108e8e:	90                   	nop
ffffffff80108e8f:	90                   	nop
ffffffff80108e90:	90                   	nop
ffffffff80108e91:	90                   	nop
ffffffff80108e92:	90                   	nop
ffffffff80108e93:	90                   	nop
ffffffff80108e94:	90                   	nop
ffffffff80108e95:	90                   	nop
ffffffff80108e96:	90                   	nop
ffffffff80108e97:	90                   	nop
ffffffff80108e98:	90                   	nop
ffffffff80108e99:	90                   	nop
ffffffff80108e9a:	90                   	nop
ffffffff80108e9b:	90                   	nop
ffffffff80108e9c:	90                   	nop
ffffffff80108e9d:	90                   	nop
ffffffff80108e9e:	90                   	nop
ffffffff80108e9f:	90                   	nop
ffffffff80108ea0:	90                   	nop
ffffffff80108ea1:	90                   	nop
ffffffff80108ea2:	90                   	nop
ffffffff80108ea3:	90                   	nop
ffffffff80108ea4:	90                   	nop
ffffffff80108ea5:	90                   	nop
ffffffff80108ea6:	90                   	nop
ffffffff80108ea7:	90                   	nop
ffffffff80108ea8:	90                   	nop
ffffffff80108ea9:	90                   	nop
ffffffff80108eaa:	90                   	nop
ffffffff80108eab:	90                   	nop
ffffffff80108eac:	90                   	nop
ffffffff80108ead:	90                   	nop
ffffffff80108eae:	90                   	nop
ffffffff80108eaf:	90                   	nop
ffffffff80108eb0:	90                   	nop
ffffffff80108eb1:	90                   	nop
ffffffff80108eb2:	90                   	nop
ffffffff80108eb3:	90                   	nop
ffffffff80108eb4:	90                   	nop
ffffffff80108eb5:	90                   	nop
ffffffff80108eb6:	90                   	nop
ffffffff80108eb7:	90                   	nop
ffffffff80108eb8:	90                   	nop
ffffffff80108eb9:	90                   	nop
ffffffff80108eba:	90                   	nop
ffffffff80108ebb:	90                   	nop
ffffffff80108ebc:	90                   	nop
ffffffff80108ebd:	90                   	nop
ffffffff80108ebe:	90                   	nop
ffffffff80108ebf:	90                   	nop
ffffffff80108ec0:	90                   	nop
ffffffff80108ec1:	90                   	nop
ffffffff80108ec2:	90                   	nop
ffffffff80108ec3:	90                   	nop
ffffffff80108ec4:	90                   	nop
ffffffff80108ec5:	90                   	nop
ffffffff80108ec6:	90                   	nop
ffffffff80108ec7:	90                   	nop
ffffffff80108ec8:	90                   	nop
ffffffff80108ec9:	90                   	nop
ffffffff80108eca:	90                   	nop
ffffffff80108ecb:	90                   	nop
ffffffff80108ecc:	90                   	nop
ffffffff80108ecd:	90                   	nop
ffffffff80108ece:	90                   	nop
ffffffff80108ecf:	90                   	nop
ffffffff80108ed0:	90                   	nop
ffffffff80108ed1:	90                   	nop
ffffffff80108ed2:	90                   	nop
ffffffff80108ed3:	90                   	nop
ffffffff80108ed4:	90                   	nop
ffffffff80108ed5:	90                   	nop
ffffffff80108ed6:	90                   	nop
ffffffff80108ed7:	90                   	nop
ffffffff80108ed8:	90                   	nop
ffffffff80108ed9:	90                   	nop
ffffffff80108eda:	90                   	nop
ffffffff80108edb:	90                   	nop
ffffffff80108edc:	90                   	nop
ffffffff80108edd:	90                   	nop
ffffffff80108ede:	90                   	nop
ffffffff80108edf:	90                   	nop
ffffffff80108ee0:	90                   	nop
ffffffff80108ee1:	90                   	nop
ffffffff80108ee2:	90                   	nop
ffffffff80108ee3:	90                   	nop
ffffffff80108ee4:	90                   	nop
ffffffff80108ee5:	90                   	nop
ffffffff80108ee6:	90                   	nop
ffffffff80108ee7:	90                   	nop
ffffffff80108ee8:	90                   	nop
ffffffff80108ee9:	90                   	nop
ffffffff80108eea:	90                   	nop
ffffffff80108eeb:	90                   	nop
ffffffff80108eec:	90                   	nop
ffffffff80108eed:	90                   	nop
ffffffff80108eee:	90                   	nop
ffffffff80108eef:	90                   	nop
ffffffff80108ef0:	90                   	nop
ffffffff80108ef1:	90                   	nop
ffffffff80108ef2:	90                   	nop
ffffffff80108ef3:	90                   	nop
ffffffff80108ef4:	90                   	nop
ffffffff80108ef5:	90                   	nop
ffffffff80108ef6:	90                   	nop
ffffffff80108ef7:	90                   	nop
ffffffff80108ef8:	90                   	nop
ffffffff80108ef9:	90                   	nop
ffffffff80108efa:	90                   	nop
ffffffff80108efb:	90                   	nop
ffffffff80108efc:	90                   	nop
ffffffff80108efd:	90                   	nop
ffffffff80108efe:	90                   	nop
ffffffff80108eff:	90                   	nop
ffffffff80108f00:	90                   	nop
ffffffff80108f01:	90                   	nop
ffffffff80108f02:	90                   	nop
ffffffff80108f03:	90                   	nop
ffffffff80108f04:	90                   	nop
ffffffff80108f05:	90                   	nop
ffffffff80108f06:	90                   	nop
ffffffff80108f07:	90                   	nop
ffffffff80108f08:	90                   	nop
ffffffff80108f09:	90                   	nop
ffffffff80108f0a:	90                   	nop
ffffffff80108f0b:	90                   	nop
ffffffff80108f0c:	90                   	nop
ffffffff80108f0d:	90                   	nop
ffffffff80108f0e:	90                   	nop
ffffffff80108f0f:	90                   	nop
ffffffff80108f10:	90                   	nop
ffffffff80108f11:	90                   	nop
ffffffff80108f12:	90                   	nop
ffffffff80108f13:	90                   	nop
ffffffff80108f14:	90                   	nop
ffffffff80108f15:	90                   	nop
ffffffff80108f16:	90                   	nop
ffffffff80108f17:	90                   	nop
ffffffff80108f18:	90                   	nop
ffffffff80108f19:	90                   	nop
ffffffff80108f1a:	90                   	nop
ffffffff80108f1b:	90                   	nop
ffffffff80108f1c:	90                   	nop
ffffffff80108f1d:	90                   	nop
ffffffff80108f1e:	90                   	nop
ffffffff80108f1f:	90                   	nop
ffffffff80108f20:	90                   	nop
ffffffff80108f21:	90                   	nop
ffffffff80108f22:	90                   	nop
ffffffff80108f23:	90                   	nop
ffffffff80108f24:	90                   	nop
ffffffff80108f25:	90                   	nop
ffffffff80108f26:	90                   	nop
ffffffff80108f27:	90                   	nop
ffffffff80108f28:	90                   	nop
ffffffff80108f29:	90                   	nop
ffffffff80108f2a:	90                   	nop
ffffffff80108f2b:	90                   	nop
ffffffff80108f2c:	90                   	nop
ffffffff80108f2d:	90                   	nop
ffffffff80108f2e:	90                   	nop
ffffffff80108f2f:	90                   	nop
ffffffff80108f30:	90                   	nop
ffffffff80108f31:	90                   	nop
ffffffff80108f32:	90                   	nop
ffffffff80108f33:	90                   	nop
ffffffff80108f34:	90                   	nop
ffffffff80108f35:	90                   	nop
ffffffff80108f36:	90                   	nop
ffffffff80108f37:	90                   	nop
ffffffff80108f38:	90                   	nop
ffffffff80108f39:	90                   	nop
ffffffff80108f3a:	90                   	nop
ffffffff80108f3b:	90                   	nop
ffffffff80108f3c:	90                   	nop
ffffffff80108f3d:	90                   	nop
ffffffff80108f3e:	90                   	nop
ffffffff80108f3f:	90                   	nop
ffffffff80108f40:	90                   	nop
ffffffff80108f41:	90                   	nop
ffffffff80108f42:	90                   	nop
ffffffff80108f43:	90                   	nop
ffffffff80108f44:	90                   	nop
ffffffff80108f45:	90                   	nop
ffffffff80108f46:	90                   	nop
ffffffff80108f47:	90                   	nop
ffffffff80108f48:	90                   	nop
ffffffff80108f49:	90                   	nop
ffffffff80108f4a:	90                   	nop
ffffffff80108f4b:	90                   	nop
ffffffff80108f4c:	90                   	nop
ffffffff80108f4d:	90                   	nop
ffffffff80108f4e:	90                   	nop
ffffffff80108f4f:	90                   	nop
ffffffff80108f50:	90                   	nop
ffffffff80108f51:	90                   	nop
ffffffff80108f52:	90                   	nop
ffffffff80108f53:	90                   	nop
ffffffff80108f54:	90                   	nop
ffffffff80108f55:	90                   	nop
ffffffff80108f56:	90                   	nop
ffffffff80108f57:	90                   	nop
ffffffff80108f58:	90                   	nop
ffffffff80108f59:	90                   	nop
ffffffff80108f5a:	90                   	nop
ffffffff80108f5b:	90                   	nop
ffffffff80108f5c:	90                   	nop
ffffffff80108f5d:	90                   	nop
ffffffff80108f5e:	90                   	nop
ffffffff80108f5f:	90                   	nop
ffffffff80108f60:	90                   	nop
ffffffff80108f61:	90                   	nop
ffffffff80108f62:	90                   	nop
ffffffff80108f63:	90                   	nop
ffffffff80108f64:	90                   	nop
ffffffff80108f65:	90                   	nop
ffffffff80108f66:	90                   	nop
ffffffff80108f67:	90                   	nop
ffffffff80108f68:	90                   	nop
ffffffff80108f69:	90                   	nop
ffffffff80108f6a:	90                   	nop
ffffffff80108f6b:	90                   	nop
ffffffff80108f6c:	90                   	nop
ffffffff80108f6d:	90                   	nop
ffffffff80108f6e:	90                   	nop
ffffffff80108f6f:	90                   	nop
ffffffff80108f70:	90                   	nop
ffffffff80108f71:	90                   	nop
ffffffff80108f72:	90                   	nop
ffffffff80108f73:	90                   	nop
ffffffff80108f74:	90                   	nop
ffffffff80108f75:	90                   	nop
ffffffff80108f76:	90                   	nop
ffffffff80108f77:	90                   	nop
ffffffff80108f78:	90                   	nop
ffffffff80108f79:	90                   	nop
ffffffff80108f7a:	90                   	nop
ffffffff80108f7b:	90                   	nop
ffffffff80108f7c:	90                   	nop
ffffffff80108f7d:	90                   	nop
ffffffff80108f7e:	90                   	nop
ffffffff80108f7f:	90                   	nop
ffffffff80108f80:	90                   	nop
ffffffff80108f81:	90                   	nop
ffffffff80108f82:	90                   	nop
ffffffff80108f83:	90                   	nop
ffffffff80108f84:	90                   	nop
ffffffff80108f85:	90                   	nop
ffffffff80108f86:	90                   	nop
ffffffff80108f87:	90                   	nop
ffffffff80108f88:	90                   	nop
ffffffff80108f89:	90                   	nop
ffffffff80108f8a:	90                   	nop
ffffffff80108f8b:	90                   	nop
ffffffff80108f8c:	90                   	nop
ffffffff80108f8d:	90                   	nop
ffffffff80108f8e:	90                   	nop
ffffffff80108f8f:	90                   	nop
ffffffff80108f90:	90                   	nop
ffffffff80108f91:	90                   	nop
ffffffff80108f92:	90                   	nop
ffffffff80108f93:	90                   	nop
ffffffff80108f94:	90                   	nop
ffffffff80108f95:	90                   	nop
ffffffff80108f96:	90                   	nop
ffffffff80108f97:	90                   	nop
ffffffff80108f98:	90                   	nop
ffffffff80108f99:	90                   	nop
ffffffff80108f9a:	90                   	nop
ffffffff80108f9b:	90                   	nop
ffffffff80108f9c:	90                   	nop
ffffffff80108f9d:	90                   	nop
ffffffff80108f9e:	90                   	nop
ffffffff80108f9f:	90                   	nop
ffffffff80108fa0:	90                   	nop
ffffffff80108fa1:	90                   	nop
ffffffff80108fa2:	90                   	nop
ffffffff80108fa3:	90                   	nop
ffffffff80108fa4:	90                   	nop
ffffffff80108fa5:	90                   	nop
ffffffff80108fa6:	90                   	nop
ffffffff80108fa7:	90                   	nop
ffffffff80108fa8:	90                   	nop
ffffffff80108fa9:	90                   	nop
ffffffff80108faa:	90                   	nop
ffffffff80108fab:	90                   	nop
ffffffff80108fac:	90                   	nop
ffffffff80108fad:	90                   	nop
ffffffff80108fae:	90                   	nop
ffffffff80108faf:	90                   	nop
ffffffff80108fb0:	90                   	nop
ffffffff80108fb1:	90                   	nop
ffffffff80108fb2:	90                   	nop
ffffffff80108fb3:	90                   	nop
ffffffff80108fb4:	90                   	nop
ffffffff80108fb5:	90                   	nop
ffffffff80108fb6:	90                   	nop
ffffffff80108fb7:	90                   	nop
ffffffff80108fb8:	90                   	nop
ffffffff80108fb9:	90                   	nop
ffffffff80108fba:	90                   	nop
ffffffff80108fbb:	90                   	nop
ffffffff80108fbc:	90                   	nop
ffffffff80108fbd:	90                   	nop
ffffffff80108fbe:	90                   	nop
ffffffff80108fbf:	90                   	nop
ffffffff80108fc0:	90                   	nop
ffffffff80108fc1:	90                   	nop
ffffffff80108fc2:	90                   	nop
ffffffff80108fc3:	90                   	nop
ffffffff80108fc4:	90                   	nop
ffffffff80108fc5:	90                   	nop
ffffffff80108fc6:	90                   	nop
ffffffff80108fc7:	90                   	nop
ffffffff80108fc8:	90                   	nop
ffffffff80108fc9:	90                   	nop
ffffffff80108fca:	90                   	nop
ffffffff80108fcb:	90                   	nop
ffffffff80108fcc:	90                   	nop
ffffffff80108fcd:	90                   	nop
ffffffff80108fce:	90                   	nop
ffffffff80108fcf:	90                   	nop
ffffffff80108fd0:	90                   	nop
ffffffff80108fd1:	90                   	nop
ffffffff80108fd2:	90                   	nop
ffffffff80108fd3:	90                   	nop
ffffffff80108fd4:	90                   	nop
ffffffff80108fd5:	90                   	nop
ffffffff80108fd6:	90                   	nop
ffffffff80108fd7:	90                   	nop
ffffffff80108fd8:	90                   	nop
ffffffff80108fd9:	90                   	nop
ffffffff80108fda:	90                   	nop
ffffffff80108fdb:	90                   	nop
ffffffff80108fdc:	90                   	nop
ffffffff80108fdd:	90                   	nop
ffffffff80108fde:	90                   	nop
ffffffff80108fdf:	90                   	nop
ffffffff80108fe0:	90                   	nop
ffffffff80108fe1:	90                   	nop
ffffffff80108fe2:	90                   	nop
ffffffff80108fe3:	90                   	nop
ffffffff80108fe4:	90                   	nop
ffffffff80108fe5:	90                   	nop
ffffffff80108fe6:	90                   	nop
ffffffff80108fe7:	90                   	nop
ffffffff80108fe8:	90                   	nop
ffffffff80108fe9:	90                   	nop
ffffffff80108fea:	90                   	nop
ffffffff80108feb:	90                   	nop
ffffffff80108fec:	90                   	nop
ffffffff80108fed:	90                   	nop
ffffffff80108fee:	90                   	nop
ffffffff80108fef:	90                   	nop
ffffffff80108ff0:	90                   	nop
ffffffff80108ff1:	90                   	nop
ffffffff80108ff2:	90                   	nop
ffffffff80108ff3:	90                   	nop
ffffffff80108ff4:	90                   	nop
ffffffff80108ff5:	90                   	nop
ffffffff80108ff6:	90                   	nop
ffffffff80108ff7:	90                   	nop
ffffffff80108ff8:	90                   	nop
ffffffff80108ff9:	90                   	nop
ffffffff80108ffa:	90                   	nop
ffffffff80108ffb:	90                   	nop
ffffffff80108ffc:	90                   	nop
ffffffff80108ffd:	90                   	nop
ffffffff80108ffe:	90                   	nop
ffffffff80108fff:	90                   	nop

ffffffff80109000 <RME_X64_Kpgt>:
	...

ffffffff8020b800 <__RME_X64_In>:
ffffffff8020b800:	52                   	push   %rdx
ffffffff8020b801:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020b804:	48 89 c0             	mov    %rax,%rax
ffffffff8020b807:	ec                   	in     (%dx),%al
ffffffff8020b808:	5a                   	pop    %rdx
ffffffff8020b809:	c3                   	retq   

ffffffff8020b80a <__RME_X64_Out>:
ffffffff8020b80a:	52                   	push   %rdx
ffffffff8020b80b:	50                   	push   %rax
ffffffff8020b80c:	48 89 fa             	mov    %rdi,%rdx
ffffffff8020b80f:	48 89 f0             	mov    %rsi,%rax
ffffffff8020b812:	ee                   	out    %al,(%dx)
ffffffff8020b813:	58                   	pop    %rax
ffffffff8020b814:	5a                   	pop    %rdx
ffffffff8020b815:	c3                   	retq   

ffffffff8020b816 <__RME_X64_Read_MSR>:
ffffffff8020b816:	51                   	push   %rcx
ffffffff8020b817:	52                   	push   %rdx
ffffffff8020b818:	48 89 f9             	mov    %rdi,%rcx
ffffffff8020b81b:	48 31 c0             	xor    %rax,%rax
ffffffff8020b81e:	0f 32                	rdmsr  
ffffffff8020b820:	48 c1 e2 20          	shl    $0x20,%rdx
ffffffff8020b824:	48 01 d0             	add    %rdx,%rax
ffffffff8020b827:	5a                   	pop    %rdx
ffffffff8020b828:	59                   	pop    %rcx
ffffffff8020b829:	c3                   	retq   

ffffffff8020b82a <__RME_X64_Write_MSR>:
ffffffff8020b82a:	51                   	push   %rcx
ffffffff8020b82b:	52                   	push   %rdx
ffffffff8020b82c:	50                   	push   %rax
ffffffff8020b82d:	48 89 f9             	mov    %rdi,%rcx
ffffffff8020b830:	89 f0                	mov    %esi,%eax
ffffffff8020b832:	48 89 f2             	mov    %rsi,%rdx
ffffffff8020b835:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8020b839:	0f 30                	wrmsr  
ffffffff8020b83b:	58                   	pop    %rax
ffffffff8020b83c:	5a                   	pop    %rdx
ffffffff8020b83d:	59                   	pop    %rcx
ffffffff8020b83e:	c3                   	retq   

ffffffff8020b83f <__RME_CPUID_Get>:
ffffffff8020b83f:	65 48 8b 04 25 e8 1f 	mov    %gs:0x1fe8,%rax
ffffffff8020b846:	00 00 
ffffffff8020b848:	c3                   	retq   

ffffffff8020b849 <__RME_X64_CPUID_Get>:
ffffffff8020b849:	41 50                	push   %r8
ffffffff8020b84b:	41 51                	push   %r9
ffffffff8020b84d:	53                   	push   %rbx
ffffffff8020b84e:	51                   	push   %rcx
ffffffff8020b84f:	52                   	push   %rdx
ffffffff8020b850:	48 89 f8             	mov    %rdi,%rax
ffffffff8020b853:	49 89 d0             	mov    %rdx,%r8
ffffffff8020b856:	49 89 c9             	mov    %rcx,%r9
ffffffff8020b859:	48 8b 1e             	mov    (%rsi),%rbx
ffffffff8020b85c:	49 8b 08             	mov    (%r8),%rcx
ffffffff8020b85f:	49 8b 11             	mov    (%r9),%rdx
ffffffff8020b862:	0f a2                	cpuid  
ffffffff8020b864:	48 89 1e             	mov    %rbx,(%rsi)
ffffffff8020b867:	49 89 08             	mov    %rcx,(%r8)
ffffffff8020b86a:	49 89 11             	mov    %rdx,(%r9)
ffffffff8020b86d:	5a                   	pop    %rdx
ffffffff8020b86e:	59                   	pop    %rcx
ffffffff8020b86f:	5b                   	pop    %rbx
ffffffff8020b870:	41 59                	pop    %r9
ffffffff8020b872:	41 58                	pop    %r8
ffffffff8020b874:	c3                   	retq   

ffffffff8020b875 <__RME_X64_GDT_Load>:
ffffffff8020b875:	0f 01 17             	lgdt   (%rdi)
ffffffff8020b878:	c3                   	retq   

ffffffff8020b879 <__RME_X64_IDT_Load>:
ffffffff8020b879:	0f 01 1f             	lidt   (%rdi)
ffffffff8020b87c:	c3                   	retq   

ffffffff8020b87d <__RME_X64_TSS_Load>:
ffffffff8020b87d:	0f 00 df             	ltr    %di
ffffffff8020b880:	c3                   	retq   

ffffffff8020b881 <__RME_Comp_Swap>:
ffffffff8020b881:	48 8b 06             	mov    (%rsi),%rax
ffffffff8020b884:	f0 48 0f b1 17       	lock cmpxchg %rdx,(%rdi)
ffffffff8020b889:	75 08                	jne    ffffffff8020b893 <__RME_Comp_Swap_Fail>
ffffffff8020b88b:	48 c7 c0 01 00 00 00 	mov    $0x1,%rax
ffffffff8020b892:	c3                   	retq   

ffffffff8020b893 <__RME_Comp_Swap_Fail>:
ffffffff8020b893:	48 89 06             	mov    %rax,(%rsi)
ffffffff8020b896:	48 c7 c0 00 00 00 00 	mov    $0x0,%rax
ffffffff8020b89d:	c3                   	retq   

ffffffff8020b89e <__RME_Fetch_Add>:
ffffffff8020b89e:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020b8a1:	f0 48 01 37          	lock add %rsi,(%rdi)
ffffffff8020b8a5:	c3                   	retq   

ffffffff8020b8a6 <__RME_Fetch_And>:
ffffffff8020b8a6:	48 8b 07             	mov    (%rdi),%rax
ffffffff8020b8a9:	f0 48 21 37          	lock and %rsi,(%rdi)
ffffffff8020b8ad:	c3                   	retq   

ffffffff8020b8ae <__RME_X64_Pgtbl_Set>:
ffffffff8020b8ae:	0f 22 df             	mov    %rdi,%cr3
ffffffff8020b8b1:	c3                   	retq   

ffffffff8020b8b2 <__RME_Disable_Int>:
ffffffff8020b8b2:	fa                   	cli    
ffffffff8020b8b3:	c3                   	retq   

ffffffff8020b8b4 <__RME_Enable_Int>:
ffffffff8020b8b4:	fb                   	sti    
ffffffff8020b8b5:	c3                   	retq   

ffffffff8020b8b6 <__RME_X64_Halt>:
ffffffff8020b8b6:	f4                   	hlt    
ffffffff8020b8b7:	c3                   	retq   

ffffffff8020b8b8 <_RME_Kmain>:
ffffffff8020b8b8:	48 89 fc             	mov    %rdi,%rsp
ffffffff8020b8bb:	e9 b0 b3 00 00       	jmpq   ffffffff80216c70 <RME_Kmain>

ffffffff8020b8c0 <__RME_MSB_Get>:
ffffffff8020b8c0:	f3 48 0f bd ff       	lzcnt  %rdi,%rdi
ffffffff8020b8c5:	48 c7 c0 3f 00 00 00 	mov    $0x3f,%rax
ffffffff8020b8cc:	48 29 f8             	sub    %rdi,%rax
ffffffff8020b8cf:	c3                   	retq   

ffffffff8020b8d0 <__RME_Enter_User_Mode>:
ffffffff8020b8d0:	48 89 f9             	mov    %rdi,%rcx
ffffffff8020b8d3:	48 89 f4             	mov    %rsi,%rsp
ffffffff8020b8d6:	49 c7 c3 00 32 00 00 	mov    $0x3200,%r11
ffffffff8020b8dd:	48 89 d7             	mov    %rdx,%rdi
ffffffff8020b8e0:	48 0f 07             	sysretq 

ffffffff8020b8e3 <__RME_X64_FAULT_DE_Handler>:
ffffffff8020b8e3:	0f 01 f8             	swapgs 
ffffffff8020b8e6:	6a 00                	pushq  $0x0
ffffffff8020b8e8:	6a 00                	pushq  $0x0
ffffffff8020b8ea:	e9 a6 00 00 00       	jmpq   ffffffff8020b995 <Fault_Handler>

ffffffff8020b8ef <__RME_X64_TRAP_DB_Handler>:
ffffffff8020b8ef:	0f 01 f8             	swapgs 
ffffffff8020b8f2:	6a 00                	pushq  $0x0
ffffffff8020b8f4:	6a 01                	pushq  $0x1
ffffffff8020b8f6:	e9 9a 00 00 00       	jmpq   ffffffff8020b995 <Fault_Handler>

ffffffff8020b8fb <__RME_X64_INT_NMI_Handler>:
ffffffff8020b8fb:	0f 01 f8             	swapgs 
ffffffff8020b8fe:	6a 00                	pushq  $0x0
ffffffff8020b900:	6a 02                	pushq  $0x2
ffffffff8020b902:	e9 8e 00 00 00       	jmpq   ffffffff8020b995 <Fault_Handler>

ffffffff8020b907 <__RME_X64_TRAP_BP_Handler>:
ffffffff8020b907:	0f 01 f8             	swapgs 
ffffffff8020b90a:	6a 00                	pushq  $0x0
ffffffff8020b90c:	6a 03                	pushq  $0x3
ffffffff8020b90e:	e9 82 00 00 00       	jmpq   ffffffff8020b995 <Fault_Handler>

ffffffff8020b913 <__RME_X64_TRAP_OF_Handler>:
ffffffff8020b913:	0f 01 f8             	swapgs 
ffffffff8020b916:	6a 00                	pushq  $0x0
ffffffff8020b918:	6a 04                	pushq  $0x4
ffffffff8020b91a:	eb 79                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b91c <__RME_X64_FAULT_BR_Handler>:
ffffffff8020b91c:	0f 01 f8             	swapgs 
ffffffff8020b91f:	6a 00                	pushq  $0x0
ffffffff8020b921:	6a 05                	pushq  $0x5
ffffffff8020b923:	eb 70                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b925 <__RME_X64_FAULT_UD_Handler>:
ffffffff8020b925:	0f 01 f8             	swapgs 
ffffffff8020b928:	6a 00                	pushq  $0x0
ffffffff8020b92a:	6a 06                	pushq  $0x6
ffffffff8020b92c:	eb 67                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b92e <__RME_X64_FAULT_NM_Handler>:
ffffffff8020b92e:	0f 01 f8             	swapgs 
ffffffff8020b931:	6a 00                	pushq  $0x0
ffffffff8020b933:	6a 07                	pushq  $0x7
ffffffff8020b935:	eb 5e                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b937 <__RME_X64_ABORT_DF_Handler>:
ffffffff8020b937:	0f 01 f8             	swapgs 
ffffffff8020b93a:	6a 08                	pushq  $0x8
ffffffff8020b93c:	eb 57                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b93e <__RME_X64_ABORT_OLD_MF_Handler>:
ffffffff8020b93e:	0f 01 f8             	swapgs 
ffffffff8020b941:	6a 00                	pushq  $0x0
ffffffff8020b943:	6a 09                	pushq  $0x9
ffffffff8020b945:	eb 4e                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b947 <__RME_X64_FAULT_TS_Handler>:
ffffffff8020b947:	0f 01 f8             	swapgs 
ffffffff8020b94a:	6a 0a                	pushq  $0xa
ffffffff8020b94c:	eb 47                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b94e <__RME_X64_FAULT_NP_Handler>:
ffffffff8020b94e:	0f 01 f8             	swapgs 
ffffffff8020b951:	6a 0b                	pushq  $0xb
ffffffff8020b953:	eb 40                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b955 <__RME_X64_FAULT_SS_Handler>:
ffffffff8020b955:	0f 01 f8             	swapgs 
ffffffff8020b958:	6a 0c                	pushq  $0xc
ffffffff8020b95a:	eb 39                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b95c <__RME_X64_FAULT_GP_Handler>:
ffffffff8020b95c:	0f 01 f8             	swapgs 
ffffffff8020b95f:	6a 0d                	pushq  $0xd
ffffffff8020b961:	eb 32                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b963 <__RME_X64_FAULT_PF_Handler>:
ffffffff8020b963:	0f 01 f8             	swapgs 
ffffffff8020b966:	6a 0e                	pushq  $0xe
ffffffff8020b968:	eb 2b                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b96a <__RME_X64_FAULT_MF_Handler>:
ffffffff8020b96a:	0f 01 f8             	swapgs 
ffffffff8020b96d:	6a 00                	pushq  $0x0
ffffffff8020b96f:	6a 10                	pushq  $0x10
ffffffff8020b971:	eb 22                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b973 <__RME_X64_FAULT_AC_Handler>:
ffffffff8020b973:	0f 01 f8             	swapgs 
ffffffff8020b976:	6a 11                	pushq  $0x11
ffffffff8020b978:	eb 1b                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b97a <__RME_X64_ABORT_MC_Handler>:
ffffffff8020b97a:	0f 01 f8             	swapgs 
ffffffff8020b97d:	6a 00                	pushq  $0x0
ffffffff8020b97f:	6a 12                	pushq  $0x12
ffffffff8020b981:	eb 12                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b983 <__RME_X64_FAULT_XM_Handler>:
ffffffff8020b983:	0f 01 f8             	swapgs 
ffffffff8020b986:	6a 00                	pushq  $0x0
ffffffff8020b988:	6a 13                	pushq  $0x13
ffffffff8020b98a:	eb 09                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b98c <__RME_X64_FAULT_VE_Handler>:
ffffffff8020b98c:	0f 01 f8             	swapgs 
ffffffff8020b98f:	6a 00                	pushq  $0x0
ffffffff8020b991:	6a 14                	pushq  $0x14
ffffffff8020b993:	eb 00                	jmp    ffffffff8020b995 <Fault_Handler>

ffffffff8020b995 <Fault_Handler>:
ffffffff8020b995:	41 57                	push   %r15
ffffffff8020b997:	41 56                	push   %r14
ffffffff8020b999:	41 55                	push   %r13
ffffffff8020b99b:	41 54                	push   %r12
ffffffff8020b99d:	41 53                	push   %r11
ffffffff8020b99f:	41 52                	push   %r10
ffffffff8020b9a1:	41 51                	push   %r9
ffffffff8020b9a3:	41 50                	push   %r8
ffffffff8020b9a5:	55                   	push   %rbp
ffffffff8020b9a6:	57                   	push   %rdi
ffffffff8020b9a7:	56                   	push   %rsi
ffffffff8020b9a8:	52                   	push   %rdx
ffffffff8020b9a9:	51                   	push   %rcx
ffffffff8020b9aa:	53                   	push   %rbx
ffffffff8020b9ab:	50                   	push   %rax
ffffffff8020b9ac:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020b9b0:	8e e0                	mov    %eax,%fs
ffffffff8020b9b2:	8e c0                	mov    %eax,%es
ffffffff8020b9b4:	8e d8                	mov    %eax,%ds
ffffffff8020b9b6:	48 89 e7             	mov    %rsp,%rdi
ffffffff8020b9b9:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
ffffffff8020b9be:	e8 6d 85 00 00       	callq  ffffffff80213f30 <__RME_X64_Fault_Handler>
ffffffff8020b9c3:	0f 01 f8             	swapgs 
ffffffff8020b9c6:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020b9ca:	8e e8                	mov    %eax,%gs
ffffffff8020b9cc:	8e e0                	mov    %eax,%fs
ffffffff8020b9ce:	8e c0                	mov    %eax,%es
ffffffff8020b9d0:	8e d8                	mov    %eax,%ds
ffffffff8020b9d2:	58                   	pop    %rax
ffffffff8020b9d3:	5b                   	pop    %rbx
ffffffff8020b9d4:	59                   	pop    %rcx
ffffffff8020b9d5:	5a                   	pop    %rdx
ffffffff8020b9d6:	5e                   	pop    %rsi
ffffffff8020b9d7:	5f                   	pop    %rdi
ffffffff8020b9d8:	5d                   	pop    %rbp
ffffffff8020b9d9:	41 58                	pop    %r8
ffffffff8020b9db:	41 59                	pop    %r9
ffffffff8020b9dd:	41 5a                	pop    %r10
ffffffff8020b9df:	41 5b                	pop    %r11
ffffffff8020b9e1:	41 5c                	pop    %r12
ffffffff8020b9e3:	41 5d                	pop    %r13
ffffffff8020b9e5:	41 5e                	pop    %r14
ffffffff8020b9e7:	41 5f                	pop    %r15
ffffffff8020b9e9:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020b9ed:	48 cf                	iretq  

ffffffff8020b9ef <__RME_X64_USER32_Handler>:
ffffffff8020b9ef:	0f 01 f8             	swapgs 
ffffffff8020b9f2:	6a 00                	pushq  $0x0
ffffffff8020b9f4:	6a 20                	pushq  $0x20
ffffffff8020b9f6:	e9 d3 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020b9fb <__RME_X64_USER33_Handler>:
ffffffff8020b9fb:	0f 01 f8             	swapgs 
ffffffff8020b9fe:	6a 00                	pushq  $0x0
ffffffff8020ba00:	6a 21                	pushq  $0x21
ffffffff8020ba02:	e9 c7 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba07 <__RME_X64_USER34_Handler>:
ffffffff8020ba07:	0f 01 f8             	swapgs 
ffffffff8020ba0a:	6a 00                	pushq  $0x0
ffffffff8020ba0c:	6a 22                	pushq  $0x22
ffffffff8020ba0e:	e9 bb 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba13 <__RME_X64_USER35_Handler>:
ffffffff8020ba13:	0f 01 f8             	swapgs 
ffffffff8020ba16:	6a 00                	pushq  $0x0
ffffffff8020ba18:	6a 23                	pushq  $0x23
ffffffff8020ba1a:	e9 af 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba1f <__RME_X64_USER36_Handler>:
ffffffff8020ba1f:	0f 01 f8             	swapgs 
ffffffff8020ba22:	6a 00                	pushq  $0x0
ffffffff8020ba24:	6a 24                	pushq  $0x24
ffffffff8020ba26:	e9 a3 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba2b <__RME_X64_USER37_Handler>:
ffffffff8020ba2b:	0f 01 f8             	swapgs 
ffffffff8020ba2e:	6a 00                	pushq  $0x0
ffffffff8020ba30:	6a 25                	pushq  $0x25
ffffffff8020ba32:	e9 97 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba37 <__RME_X64_USER38_Handler>:
ffffffff8020ba37:	0f 01 f8             	swapgs 
ffffffff8020ba3a:	6a 00                	pushq  $0x0
ffffffff8020ba3c:	6a 26                	pushq  $0x26
ffffffff8020ba3e:	e9 8b 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba43 <__RME_X64_USER39_Handler>:
ffffffff8020ba43:	0f 01 f8             	swapgs 
ffffffff8020ba46:	6a 00                	pushq  $0x0
ffffffff8020ba48:	6a 27                	pushq  $0x27
ffffffff8020ba4a:	e9 7f 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba4f <__RME_X64_USER40_Handler>:
ffffffff8020ba4f:	0f 01 f8             	swapgs 
ffffffff8020ba52:	6a 00                	pushq  $0x0
ffffffff8020ba54:	6a 28                	pushq  $0x28
ffffffff8020ba56:	e9 73 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba5b <__RME_X64_USER41_Handler>:
ffffffff8020ba5b:	0f 01 f8             	swapgs 
ffffffff8020ba5e:	6a 00                	pushq  $0x0
ffffffff8020ba60:	6a 29                	pushq  $0x29
ffffffff8020ba62:	e9 67 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba67 <__RME_X64_USER42_Handler>:
ffffffff8020ba67:	0f 01 f8             	swapgs 
ffffffff8020ba6a:	6a 00                	pushq  $0x0
ffffffff8020ba6c:	6a 2a                	pushq  $0x2a
ffffffff8020ba6e:	e9 5b 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba73 <__RME_X64_USER43_Handler>:
ffffffff8020ba73:	0f 01 f8             	swapgs 
ffffffff8020ba76:	6a 00                	pushq  $0x0
ffffffff8020ba78:	6a 2b                	pushq  $0x2b
ffffffff8020ba7a:	e9 4f 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba7f <__RME_X64_USER44_Handler>:
ffffffff8020ba7f:	0f 01 f8             	swapgs 
ffffffff8020ba82:	6a 00                	pushq  $0x0
ffffffff8020ba84:	6a 2c                	pushq  $0x2c
ffffffff8020ba86:	e9 43 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba8b <__RME_X64_USER45_Handler>:
ffffffff8020ba8b:	0f 01 f8             	swapgs 
ffffffff8020ba8e:	6a 00                	pushq  $0x0
ffffffff8020ba90:	6a 2d                	pushq  $0x2d
ffffffff8020ba92:	e9 37 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020ba97 <__RME_X64_USER46_Handler>:
ffffffff8020ba97:	0f 01 f8             	swapgs 
ffffffff8020ba9a:	6a 00                	pushq  $0x0
ffffffff8020ba9c:	6a 2e                	pushq  $0x2e
ffffffff8020ba9e:	e9 2b 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020baa3 <__RME_X64_USER47_Handler>:
ffffffff8020baa3:	0f 01 f8             	swapgs 
ffffffff8020baa6:	6a 00                	pushq  $0x0
ffffffff8020baa8:	6a 2f                	pushq  $0x2f
ffffffff8020baaa:	e9 1f 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020baaf <__RME_X64_USER48_Handler>:
ffffffff8020baaf:	0f 01 f8             	swapgs 
ffffffff8020bab2:	6a 00                	pushq  $0x0
ffffffff8020bab4:	6a 30                	pushq  $0x30
ffffffff8020bab6:	e9 13 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020babb <__RME_X64_USER49_Handler>:
ffffffff8020babb:	0f 01 f8             	swapgs 
ffffffff8020babe:	6a 00                	pushq  $0x0
ffffffff8020bac0:	6a 31                	pushq  $0x31
ffffffff8020bac2:	e9 07 0b 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bac7 <__RME_X64_USER50_Handler>:
ffffffff8020bac7:	0f 01 f8             	swapgs 
ffffffff8020baca:	6a 00                	pushq  $0x0
ffffffff8020bacc:	6a 32                	pushq  $0x32
ffffffff8020bace:	e9 fb 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bad3 <__RME_X64_USER51_Handler>:
ffffffff8020bad3:	0f 01 f8             	swapgs 
ffffffff8020bad6:	6a 00                	pushq  $0x0
ffffffff8020bad8:	6a 33                	pushq  $0x33
ffffffff8020bada:	e9 ef 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020badf <__RME_X64_USER52_Handler>:
ffffffff8020badf:	0f 01 f8             	swapgs 
ffffffff8020bae2:	6a 00                	pushq  $0x0
ffffffff8020bae4:	6a 34                	pushq  $0x34
ffffffff8020bae6:	e9 e3 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020baeb <__RME_X64_USER53_Handler>:
ffffffff8020baeb:	0f 01 f8             	swapgs 
ffffffff8020baee:	6a 00                	pushq  $0x0
ffffffff8020baf0:	6a 35                	pushq  $0x35
ffffffff8020baf2:	e9 d7 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020baf7 <__RME_X64_USER54_Handler>:
ffffffff8020baf7:	0f 01 f8             	swapgs 
ffffffff8020bafa:	6a 00                	pushq  $0x0
ffffffff8020bafc:	6a 36                	pushq  $0x36
ffffffff8020bafe:	e9 cb 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb03 <__RME_X64_USER55_Handler>:
ffffffff8020bb03:	0f 01 f8             	swapgs 
ffffffff8020bb06:	6a 00                	pushq  $0x0
ffffffff8020bb08:	6a 37                	pushq  $0x37
ffffffff8020bb0a:	e9 bf 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb0f <__RME_X64_USER56_Handler>:
ffffffff8020bb0f:	0f 01 f8             	swapgs 
ffffffff8020bb12:	6a 00                	pushq  $0x0
ffffffff8020bb14:	6a 38                	pushq  $0x38
ffffffff8020bb16:	e9 b3 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb1b <__RME_X64_USER57_Handler>:
ffffffff8020bb1b:	0f 01 f8             	swapgs 
ffffffff8020bb1e:	6a 00                	pushq  $0x0
ffffffff8020bb20:	6a 39                	pushq  $0x39
ffffffff8020bb22:	e9 a7 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb27 <__RME_X64_USER58_Handler>:
ffffffff8020bb27:	0f 01 f8             	swapgs 
ffffffff8020bb2a:	6a 00                	pushq  $0x0
ffffffff8020bb2c:	6a 3a                	pushq  $0x3a
ffffffff8020bb2e:	e9 9b 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb33 <__RME_X64_USER59_Handler>:
ffffffff8020bb33:	0f 01 f8             	swapgs 
ffffffff8020bb36:	6a 00                	pushq  $0x0
ffffffff8020bb38:	6a 3b                	pushq  $0x3b
ffffffff8020bb3a:	e9 8f 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb3f <__RME_X64_USER60_Handler>:
ffffffff8020bb3f:	0f 01 f8             	swapgs 
ffffffff8020bb42:	6a 00                	pushq  $0x0
ffffffff8020bb44:	6a 3c                	pushq  $0x3c
ffffffff8020bb46:	e9 83 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb4b <__RME_X64_USER61_Handler>:
ffffffff8020bb4b:	0f 01 f8             	swapgs 
ffffffff8020bb4e:	6a 00                	pushq  $0x0
ffffffff8020bb50:	6a 3d                	pushq  $0x3d
ffffffff8020bb52:	e9 77 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb57 <__RME_X64_USER62_Handler>:
ffffffff8020bb57:	0f 01 f8             	swapgs 
ffffffff8020bb5a:	6a 00                	pushq  $0x0
ffffffff8020bb5c:	6a 3e                	pushq  $0x3e
ffffffff8020bb5e:	e9 6b 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb63 <__RME_X64_USER63_Handler>:
ffffffff8020bb63:	0f 01 f8             	swapgs 
ffffffff8020bb66:	6a 00                	pushq  $0x0
ffffffff8020bb68:	6a 3f                	pushq  $0x3f
ffffffff8020bb6a:	e9 5f 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb6f <__RME_X64_USER64_Handler>:
ffffffff8020bb6f:	0f 01 f8             	swapgs 
ffffffff8020bb72:	6a 00                	pushq  $0x0
ffffffff8020bb74:	6a 40                	pushq  $0x40
ffffffff8020bb76:	e9 53 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb7b <__RME_X64_USER65_Handler>:
ffffffff8020bb7b:	0f 01 f8             	swapgs 
ffffffff8020bb7e:	6a 00                	pushq  $0x0
ffffffff8020bb80:	6a 41                	pushq  $0x41
ffffffff8020bb82:	e9 47 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb87 <__RME_X64_USER66_Handler>:
ffffffff8020bb87:	0f 01 f8             	swapgs 
ffffffff8020bb8a:	6a 00                	pushq  $0x0
ffffffff8020bb8c:	6a 42                	pushq  $0x42
ffffffff8020bb8e:	e9 3b 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb93 <__RME_X64_USER67_Handler>:
ffffffff8020bb93:	0f 01 f8             	swapgs 
ffffffff8020bb96:	6a 00                	pushq  $0x0
ffffffff8020bb98:	6a 43                	pushq  $0x43
ffffffff8020bb9a:	e9 2f 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bb9f <__RME_X64_USER68_Handler>:
ffffffff8020bb9f:	0f 01 f8             	swapgs 
ffffffff8020bba2:	6a 00                	pushq  $0x0
ffffffff8020bba4:	6a 44                	pushq  $0x44
ffffffff8020bba6:	e9 23 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bbab <__RME_X64_USER69_Handler>:
ffffffff8020bbab:	0f 01 f8             	swapgs 
ffffffff8020bbae:	6a 00                	pushq  $0x0
ffffffff8020bbb0:	6a 45                	pushq  $0x45
ffffffff8020bbb2:	e9 17 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bbb7 <__RME_X64_USER70_Handler>:
ffffffff8020bbb7:	0f 01 f8             	swapgs 
ffffffff8020bbba:	6a 00                	pushq  $0x0
ffffffff8020bbbc:	6a 46                	pushq  $0x46
ffffffff8020bbbe:	e9 0b 0a 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bbc3 <__RME_X64_USER71_Handler>:
ffffffff8020bbc3:	0f 01 f8             	swapgs 
ffffffff8020bbc6:	6a 00                	pushq  $0x0
ffffffff8020bbc8:	6a 47                	pushq  $0x47
ffffffff8020bbca:	e9 ff 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bbcf <__RME_X64_USER72_Handler>:
ffffffff8020bbcf:	0f 01 f8             	swapgs 
ffffffff8020bbd2:	6a 00                	pushq  $0x0
ffffffff8020bbd4:	6a 48                	pushq  $0x48
ffffffff8020bbd6:	e9 f3 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bbdb <__RME_X64_USER73_Handler>:
ffffffff8020bbdb:	0f 01 f8             	swapgs 
ffffffff8020bbde:	6a 00                	pushq  $0x0
ffffffff8020bbe0:	6a 49                	pushq  $0x49
ffffffff8020bbe2:	e9 e7 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bbe7 <__RME_X64_USER74_Handler>:
ffffffff8020bbe7:	0f 01 f8             	swapgs 
ffffffff8020bbea:	6a 00                	pushq  $0x0
ffffffff8020bbec:	6a 4a                	pushq  $0x4a
ffffffff8020bbee:	e9 db 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bbf3 <__RME_X64_USER75_Handler>:
ffffffff8020bbf3:	0f 01 f8             	swapgs 
ffffffff8020bbf6:	6a 00                	pushq  $0x0
ffffffff8020bbf8:	6a 4b                	pushq  $0x4b
ffffffff8020bbfa:	e9 cf 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bbff <__RME_X64_USER76_Handler>:
ffffffff8020bbff:	0f 01 f8             	swapgs 
ffffffff8020bc02:	6a 00                	pushq  $0x0
ffffffff8020bc04:	6a 4c                	pushq  $0x4c
ffffffff8020bc06:	e9 c3 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc0b <__RME_X64_USER77_Handler>:
ffffffff8020bc0b:	0f 01 f8             	swapgs 
ffffffff8020bc0e:	6a 00                	pushq  $0x0
ffffffff8020bc10:	6a 4d                	pushq  $0x4d
ffffffff8020bc12:	e9 b7 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc17 <__RME_X64_USER78_Handler>:
ffffffff8020bc17:	0f 01 f8             	swapgs 
ffffffff8020bc1a:	6a 00                	pushq  $0x0
ffffffff8020bc1c:	6a 4e                	pushq  $0x4e
ffffffff8020bc1e:	e9 ab 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc23 <__RME_X64_USER79_Handler>:
ffffffff8020bc23:	0f 01 f8             	swapgs 
ffffffff8020bc26:	6a 00                	pushq  $0x0
ffffffff8020bc28:	6a 4f                	pushq  $0x4f
ffffffff8020bc2a:	e9 9f 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc2f <__RME_X64_USER80_Handler>:
ffffffff8020bc2f:	0f 01 f8             	swapgs 
ffffffff8020bc32:	6a 00                	pushq  $0x0
ffffffff8020bc34:	6a 50                	pushq  $0x50
ffffffff8020bc36:	e9 93 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc3b <__RME_X64_USER81_Handler>:
ffffffff8020bc3b:	0f 01 f8             	swapgs 
ffffffff8020bc3e:	6a 00                	pushq  $0x0
ffffffff8020bc40:	6a 51                	pushq  $0x51
ffffffff8020bc42:	e9 87 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc47 <__RME_X64_USER82_Handler>:
ffffffff8020bc47:	0f 01 f8             	swapgs 
ffffffff8020bc4a:	6a 00                	pushq  $0x0
ffffffff8020bc4c:	6a 52                	pushq  $0x52
ffffffff8020bc4e:	e9 7b 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc53 <__RME_X64_USER83_Handler>:
ffffffff8020bc53:	0f 01 f8             	swapgs 
ffffffff8020bc56:	6a 00                	pushq  $0x0
ffffffff8020bc58:	6a 53                	pushq  $0x53
ffffffff8020bc5a:	e9 6f 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc5f <__RME_X64_USER84_Handler>:
ffffffff8020bc5f:	0f 01 f8             	swapgs 
ffffffff8020bc62:	6a 00                	pushq  $0x0
ffffffff8020bc64:	6a 54                	pushq  $0x54
ffffffff8020bc66:	e9 63 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc6b <__RME_X64_USER85_Handler>:
ffffffff8020bc6b:	0f 01 f8             	swapgs 
ffffffff8020bc6e:	6a 00                	pushq  $0x0
ffffffff8020bc70:	6a 55                	pushq  $0x55
ffffffff8020bc72:	e9 57 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc77 <__RME_X64_USER86_Handler>:
ffffffff8020bc77:	0f 01 f8             	swapgs 
ffffffff8020bc7a:	6a 00                	pushq  $0x0
ffffffff8020bc7c:	6a 56                	pushq  $0x56
ffffffff8020bc7e:	e9 4b 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc83 <__RME_X64_USER87_Handler>:
ffffffff8020bc83:	0f 01 f8             	swapgs 
ffffffff8020bc86:	6a 00                	pushq  $0x0
ffffffff8020bc88:	6a 57                	pushq  $0x57
ffffffff8020bc8a:	e9 3f 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc8f <__RME_X64_USER88_Handler>:
ffffffff8020bc8f:	0f 01 f8             	swapgs 
ffffffff8020bc92:	6a 00                	pushq  $0x0
ffffffff8020bc94:	6a 58                	pushq  $0x58
ffffffff8020bc96:	e9 33 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bc9b <__RME_X64_USER89_Handler>:
ffffffff8020bc9b:	0f 01 f8             	swapgs 
ffffffff8020bc9e:	6a 00                	pushq  $0x0
ffffffff8020bca0:	6a 59                	pushq  $0x59
ffffffff8020bca2:	e9 27 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bca7 <__RME_X64_USER90_Handler>:
ffffffff8020bca7:	0f 01 f8             	swapgs 
ffffffff8020bcaa:	6a 00                	pushq  $0x0
ffffffff8020bcac:	6a 5a                	pushq  $0x5a
ffffffff8020bcae:	e9 1b 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bcb3 <__RME_X64_USER91_Handler>:
ffffffff8020bcb3:	0f 01 f8             	swapgs 
ffffffff8020bcb6:	6a 00                	pushq  $0x0
ffffffff8020bcb8:	6a 5b                	pushq  $0x5b
ffffffff8020bcba:	e9 0f 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bcbf <__RME_X64_USER92_Handler>:
ffffffff8020bcbf:	0f 01 f8             	swapgs 
ffffffff8020bcc2:	6a 00                	pushq  $0x0
ffffffff8020bcc4:	6a 5c                	pushq  $0x5c
ffffffff8020bcc6:	e9 03 09 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bccb <__RME_X64_USER93_Handler>:
ffffffff8020bccb:	0f 01 f8             	swapgs 
ffffffff8020bcce:	6a 00                	pushq  $0x0
ffffffff8020bcd0:	6a 5d                	pushq  $0x5d
ffffffff8020bcd2:	e9 f7 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bcd7 <__RME_X64_USER94_Handler>:
ffffffff8020bcd7:	0f 01 f8             	swapgs 
ffffffff8020bcda:	6a 00                	pushq  $0x0
ffffffff8020bcdc:	6a 5e                	pushq  $0x5e
ffffffff8020bcde:	e9 eb 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bce3 <__RME_X64_USER95_Handler>:
ffffffff8020bce3:	0f 01 f8             	swapgs 
ffffffff8020bce6:	6a 00                	pushq  $0x0
ffffffff8020bce8:	6a 5f                	pushq  $0x5f
ffffffff8020bcea:	e9 df 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bcef <__RME_X64_USER96_Handler>:
ffffffff8020bcef:	0f 01 f8             	swapgs 
ffffffff8020bcf2:	6a 00                	pushq  $0x0
ffffffff8020bcf4:	6a 60                	pushq  $0x60
ffffffff8020bcf6:	e9 d3 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bcfb <__RME_X64_USER97_Handler>:
ffffffff8020bcfb:	0f 01 f8             	swapgs 
ffffffff8020bcfe:	6a 00                	pushq  $0x0
ffffffff8020bd00:	6a 61                	pushq  $0x61
ffffffff8020bd02:	e9 c7 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd07 <__RME_X64_USER98_Handler>:
ffffffff8020bd07:	0f 01 f8             	swapgs 
ffffffff8020bd0a:	6a 00                	pushq  $0x0
ffffffff8020bd0c:	6a 62                	pushq  $0x62
ffffffff8020bd0e:	e9 bb 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd13 <__RME_X64_USER99_Handler>:
ffffffff8020bd13:	0f 01 f8             	swapgs 
ffffffff8020bd16:	6a 00                	pushq  $0x0
ffffffff8020bd18:	6a 63                	pushq  $0x63
ffffffff8020bd1a:	e9 af 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd1f <__RME_X64_USER100_Handler>:
ffffffff8020bd1f:	0f 01 f8             	swapgs 
ffffffff8020bd22:	6a 00                	pushq  $0x0
ffffffff8020bd24:	6a 64                	pushq  $0x64
ffffffff8020bd26:	e9 a3 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd2b <__RME_X64_USER101_Handler>:
ffffffff8020bd2b:	0f 01 f8             	swapgs 
ffffffff8020bd2e:	6a 00                	pushq  $0x0
ffffffff8020bd30:	6a 65                	pushq  $0x65
ffffffff8020bd32:	e9 97 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd37 <__RME_X64_USER102_Handler>:
ffffffff8020bd37:	0f 01 f8             	swapgs 
ffffffff8020bd3a:	6a 00                	pushq  $0x0
ffffffff8020bd3c:	6a 66                	pushq  $0x66
ffffffff8020bd3e:	e9 8b 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd43 <__RME_X64_USER103_Handler>:
ffffffff8020bd43:	0f 01 f8             	swapgs 
ffffffff8020bd46:	6a 00                	pushq  $0x0
ffffffff8020bd48:	6a 67                	pushq  $0x67
ffffffff8020bd4a:	e9 7f 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd4f <__RME_X64_USER104_Handler>:
ffffffff8020bd4f:	0f 01 f8             	swapgs 
ffffffff8020bd52:	6a 00                	pushq  $0x0
ffffffff8020bd54:	6a 68                	pushq  $0x68
ffffffff8020bd56:	e9 73 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd5b <__RME_X64_USER105_Handler>:
ffffffff8020bd5b:	0f 01 f8             	swapgs 
ffffffff8020bd5e:	6a 00                	pushq  $0x0
ffffffff8020bd60:	6a 69                	pushq  $0x69
ffffffff8020bd62:	e9 67 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd67 <__RME_X64_USER106_Handler>:
ffffffff8020bd67:	0f 01 f8             	swapgs 
ffffffff8020bd6a:	6a 00                	pushq  $0x0
ffffffff8020bd6c:	6a 6a                	pushq  $0x6a
ffffffff8020bd6e:	e9 5b 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd73 <__RME_X64_USER107_Handler>:
ffffffff8020bd73:	0f 01 f8             	swapgs 
ffffffff8020bd76:	6a 00                	pushq  $0x0
ffffffff8020bd78:	6a 6b                	pushq  $0x6b
ffffffff8020bd7a:	e9 4f 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd7f <__RME_X64_USER108_Handler>:
ffffffff8020bd7f:	0f 01 f8             	swapgs 
ffffffff8020bd82:	6a 00                	pushq  $0x0
ffffffff8020bd84:	6a 6c                	pushq  $0x6c
ffffffff8020bd86:	e9 43 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd8b <__RME_X64_USER109_Handler>:
ffffffff8020bd8b:	0f 01 f8             	swapgs 
ffffffff8020bd8e:	6a 00                	pushq  $0x0
ffffffff8020bd90:	6a 6d                	pushq  $0x6d
ffffffff8020bd92:	e9 37 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bd97 <__RME_X64_USER110_Handler>:
ffffffff8020bd97:	0f 01 f8             	swapgs 
ffffffff8020bd9a:	6a 00                	pushq  $0x0
ffffffff8020bd9c:	6a 6e                	pushq  $0x6e
ffffffff8020bd9e:	e9 2b 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bda3 <__RME_X64_USER111_Handler>:
ffffffff8020bda3:	0f 01 f8             	swapgs 
ffffffff8020bda6:	6a 00                	pushq  $0x0
ffffffff8020bda8:	6a 6f                	pushq  $0x6f
ffffffff8020bdaa:	e9 1f 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bdaf <__RME_X64_USER112_Handler>:
ffffffff8020bdaf:	0f 01 f8             	swapgs 
ffffffff8020bdb2:	6a 00                	pushq  $0x0
ffffffff8020bdb4:	6a 70                	pushq  $0x70
ffffffff8020bdb6:	e9 13 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bdbb <__RME_X64_USER113_Handler>:
ffffffff8020bdbb:	0f 01 f8             	swapgs 
ffffffff8020bdbe:	6a 00                	pushq  $0x0
ffffffff8020bdc0:	6a 71                	pushq  $0x71
ffffffff8020bdc2:	e9 07 08 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bdc7 <__RME_X64_USER114_Handler>:
ffffffff8020bdc7:	0f 01 f8             	swapgs 
ffffffff8020bdca:	6a 00                	pushq  $0x0
ffffffff8020bdcc:	6a 72                	pushq  $0x72
ffffffff8020bdce:	e9 fb 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bdd3 <__RME_X64_USER115_Handler>:
ffffffff8020bdd3:	0f 01 f8             	swapgs 
ffffffff8020bdd6:	6a 00                	pushq  $0x0
ffffffff8020bdd8:	6a 73                	pushq  $0x73
ffffffff8020bdda:	e9 ef 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bddf <__RME_X64_USER116_Handler>:
ffffffff8020bddf:	0f 01 f8             	swapgs 
ffffffff8020bde2:	6a 00                	pushq  $0x0
ffffffff8020bde4:	6a 74                	pushq  $0x74
ffffffff8020bde6:	e9 e3 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bdeb <__RME_X64_USER117_Handler>:
ffffffff8020bdeb:	0f 01 f8             	swapgs 
ffffffff8020bdee:	6a 00                	pushq  $0x0
ffffffff8020bdf0:	6a 75                	pushq  $0x75
ffffffff8020bdf2:	e9 d7 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bdf7 <__RME_X64_USER118_Handler>:
ffffffff8020bdf7:	0f 01 f8             	swapgs 
ffffffff8020bdfa:	6a 00                	pushq  $0x0
ffffffff8020bdfc:	6a 76                	pushq  $0x76
ffffffff8020bdfe:	e9 cb 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be03 <__RME_X64_USER119_Handler>:
ffffffff8020be03:	0f 01 f8             	swapgs 
ffffffff8020be06:	6a 00                	pushq  $0x0
ffffffff8020be08:	6a 77                	pushq  $0x77
ffffffff8020be0a:	e9 bf 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be0f <__RME_X64_USER120_Handler>:
ffffffff8020be0f:	0f 01 f8             	swapgs 
ffffffff8020be12:	6a 00                	pushq  $0x0
ffffffff8020be14:	6a 78                	pushq  $0x78
ffffffff8020be16:	e9 b3 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be1b <__RME_X64_USER121_Handler>:
ffffffff8020be1b:	0f 01 f8             	swapgs 
ffffffff8020be1e:	6a 00                	pushq  $0x0
ffffffff8020be20:	6a 79                	pushq  $0x79
ffffffff8020be22:	e9 a7 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be27 <__RME_X64_USER122_Handler>:
ffffffff8020be27:	0f 01 f8             	swapgs 
ffffffff8020be2a:	6a 00                	pushq  $0x0
ffffffff8020be2c:	6a 7a                	pushq  $0x7a
ffffffff8020be2e:	e9 9b 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be33 <__RME_X64_USER123_Handler>:
ffffffff8020be33:	0f 01 f8             	swapgs 
ffffffff8020be36:	6a 00                	pushq  $0x0
ffffffff8020be38:	6a 7b                	pushq  $0x7b
ffffffff8020be3a:	e9 8f 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be3f <__RME_X64_USER124_Handler>:
ffffffff8020be3f:	0f 01 f8             	swapgs 
ffffffff8020be42:	6a 00                	pushq  $0x0
ffffffff8020be44:	6a 7c                	pushq  $0x7c
ffffffff8020be46:	e9 83 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be4b <__RME_X64_USER125_Handler>:
ffffffff8020be4b:	0f 01 f8             	swapgs 
ffffffff8020be4e:	6a 00                	pushq  $0x0
ffffffff8020be50:	6a 7d                	pushq  $0x7d
ffffffff8020be52:	e9 77 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be57 <__RME_X64_USER126_Handler>:
ffffffff8020be57:	0f 01 f8             	swapgs 
ffffffff8020be5a:	6a 00                	pushq  $0x0
ffffffff8020be5c:	6a 7e                	pushq  $0x7e
ffffffff8020be5e:	e9 6b 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be63 <__RME_X64_USER127_Handler>:
ffffffff8020be63:	0f 01 f8             	swapgs 
ffffffff8020be66:	6a 00                	pushq  $0x0
ffffffff8020be68:	6a 7f                	pushq  $0x7f
ffffffff8020be6a:	e9 5f 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be6f <__RME_X64_USER128_Handler>:
ffffffff8020be6f:	0f 01 f8             	swapgs 
ffffffff8020be72:	6a 00                	pushq  $0x0
ffffffff8020be74:	68 80 00 00 00       	pushq  $0x80
ffffffff8020be79:	e9 50 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be7e <__RME_X64_USER129_Handler>:
ffffffff8020be7e:	0f 01 f8             	swapgs 
ffffffff8020be81:	6a 00                	pushq  $0x0
ffffffff8020be83:	68 81 00 00 00       	pushq  $0x81
ffffffff8020be88:	e9 41 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be8d <__RME_X64_USER130_Handler>:
ffffffff8020be8d:	0f 01 f8             	swapgs 
ffffffff8020be90:	6a 00                	pushq  $0x0
ffffffff8020be92:	68 82 00 00 00       	pushq  $0x82
ffffffff8020be97:	e9 32 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020be9c <__RME_X64_USER131_Handler>:
ffffffff8020be9c:	0f 01 f8             	swapgs 
ffffffff8020be9f:	6a 00                	pushq  $0x0
ffffffff8020bea1:	68 83 00 00 00       	pushq  $0x83
ffffffff8020bea6:	e9 23 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020beab <__RME_X64_USER132_Handler>:
ffffffff8020beab:	0f 01 f8             	swapgs 
ffffffff8020beae:	6a 00                	pushq  $0x0
ffffffff8020beb0:	68 84 00 00 00       	pushq  $0x84
ffffffff8020beb5:	e9 14 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020beba <__RME_X64_USER133_Handler>:
ffffffff8020beba:	0f 01 f8             	swapgs 
ffffffff8020bebd:	6a 00                	pushq  $0x0
ffffffff8020bebf:	68 85 00 00 00       	pushq  $0x85
ffffffff8020bec4:	e9 05 07 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bec9 <__RME_X64_USER134_Handler>:
ffffffff8020bec9:	0f 01 f8             	swapgs 
ffffffff8020becc:	6a 00                	pushq  $0x0
ffffffff8020bece:	68 86 00 00 00       	pushq  $0x86
ffffffff8020bed3:	e9 f6 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bed8 <__RME_X64_USER135_Handler>:
ffffffff8020bed8:	0f 01 f8             	swapgs 
ffffffff8020bedb:	6a 00                	pushq  $0x0
ffffffff8020bedd:	68 87 00 00 00       	pushq  $0x87
ffffffff8020bee2:	e9 e7 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bee7 <__RME_X64_USER136_Handler>:
ffffffff8020bee7:	0f 01 f8             	swapgs 
ffffffff8020beea:	6a 00                	pushq  $0x0
ffffffff8020beec:	68 88 00 00 00       	pushq  $0x88
ffffffff8020bef1:	e9 d8 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bef6 <__RME_X64_USER137_Handler>:
ffffffff8020bef6:	0f 01 f8             	swapgs 
ffffffff8020bef9:	6a 00                	pushq  $0x0
ffffffff8020befb:	68 89 00 00 00       	pushq  $0x89
ffffffff8020bf00:	e9 c9 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf05 <__RME_X64_USER138_Handler>:
ffffffff8020bf05:	0f 01 f8             	swapgs 
ffffffff8020bf08:	6a 00                	pushq  $0x0
ffffffff8020bf0a:	68 8a 00 00 00       	pushq  $0x8a
ffffffff8020bf0f:	e9 ba 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf14 <__RME_X64_USER139_Handler>:
ffffffff8020bf14:	0f 01 f8             	swapgs 
ffffffff8020bf17:	6a 00                	pushq  $0x0
ffffffff8020bf19:	68 8b 00 00 00       	pushq  $0x8b
ffffffff8020bf1e:	e9 ab 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf23 <__RME_X64_USER140_Handler>:
ffffffff8020bf23:	0f 01 f8             	swapgs 
ffffffff8020bf26:	6a 00                	pushq  $0x0
ffffffff8020bf28:	68 8c 00 00 00       	pushq  $0x8c
ffffffff8020bf2d:	e9 9c 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf32 <__RME_X64_USER141_Handler>:
ffffffff8020bf32:	0f 01 f8             	swapgs 
ffffffff8020bf35:	6a 00                	pushq  $0x0
ffffffff8020bf37:	68 8d 00 00 00       	pushq  $0x8d
ffffffff8020bf3c:	e9 8d 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf41 <__RME_X64_USER142_Handler>:
ffffffff8020bf41:	0f 01 f8             	swapgs 
ffffffff8020bf44:	6a 00                	pushq  $0x0
ffffffff8020bf46:	68 8e 00 00 00       	pushq  $0x8e
ffffffff8020bf4b:	e9 7e 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf50 <__RME_X64_USER143_Handler>:
ffffffff8020bf50:	0f 01 f8             	swapgs 
ffffffff8020bf53:	6a 00                	pushq  $0x0
ffffffff8020bf55:	68 8f 00 00 00       	pushq  $0x8f
ffffffff8020bf5a:	e9 6f 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf5f <__RME_X64_USER144_Handler>:
ffffffff8020bf5f:	0f 01 f8             	swapgs 
ffffffff8020bf62:	6a 00                	pushq  $0x0
ffffffff8020bf64:	68 90 00 00 00       	pushq  $0x90
ffffffff8020bf69:	e9 60 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf6e <__RME_X64_USER145_Handler>:
ffffffff8020bf6e:	0f 01 f8             	swapgs 
ffffffff8020bf71:	6a 00                	pushq  $0x0
ffffffff8020bf73:	68 91 00 00 00       	pushq  $0x91
ffffffff8020bf78:	e9 51 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf7d <__RME_X64_USER146_Handler>:
ffffffff8020bf7d:	0f 01 f8             	swapgs 
ffffffff8020bf80:	6a 00                	pushq  $0x0
ffffffff8020bf82:	68 92 00 00 00       	pushq  $0x92
ffffffff8020bf87:	e9 42 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf8c <__RME_X64_USER147_Handler>:
ffffffff8020bf8c:	0f 01 f8             	swapgs 
ffffffff8020bf8f:	6a 00                	pushq  $0x0
ffffffff8020bf91:	68 93 00 00 00       	pushq  $0x93
ffffffff8020bf96:	e9 33 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bf9b <__RME_X64_USER148_Handler>:
ffffffff8020bf9b:	0f 01 f8             	swapgs 
ffffffff8020bf9e:	6a 00                	pushq  $0x0
ffffffff8020bfa0:	68 94 00 00 00       	pushq  $0x94
ffffffff8020bfa5:	e9 24 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bfaa <__RME_X64_USER149_Handler>:
ffffffff8020bfaa:	0f 01 f8             	swapgs 
ffffffff8020bfad:	6a 00                	pushq  $0x0
ffffffff8020bfaf:	68 95 00 00 00       	pushq  $0x95
ffffffff8020bfb4:	e9 15 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bfb9 <__RME_X64_USER150_Handler>:
ffffffff8020bfb9:	0f 01 f8             	swapgs 
ffffffff8020bfbc:	6a 00                	pushq  $0x0
ffffffff8020bfbe:	68 96 00 00 00       	pushq  $0x96
ffffffff8020bfc3:	e9 06 06 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bfc8 <__RME_X64_USER151_Handler>:
ffffffff8020bfc8:	0f 01 f8             	swapgs 
ffffffff8020bfcb:	6a 00                	pushq  $0x0
ffffffff8020bfcd:	68 97 00 00 00       	pushq  $0x97
ffffffff8020bfd2:	e9 f7 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bfd7 <__RME_X64_USER152_Handler>:
ffffffff8020bfd7:	0f 01 f8             	swapgs 
ffffffff8020bfda:	6a 00                	pushq  $0x0
ffffffff8020bfdc:	68 98 00 00 00       	pushq  $0x98
ffffffff8020bfe1:	e9 e8 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bfe6 <__RME_X64_USER153_Handler>:
ffffffff8020bfe6:	0f 01 f8             	swapgs 
ffffffff8020bfe9:	6a 00                	pushq  $0x0
ffffffff8020bfeb:	68 99 00 00 00       	pushq  $0x99
ffffffff8020bff0:	e9 d9 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020bff5 <__RME_X64_USER154_Handler>:
ffffffff8020bff5:	0f 01 f8             	swapgs 
ffffffff8020bff8:	6a 00                	pushq  $0x0
ffffffff8020bffa:	68 9a 00 00 00       	pushq  $0x9a
ffffffff8020bfff:	e9 ca 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c004 <__RME_X64_USER155_Handler>:
ffffffff8020c004:	0f 01 f8             	swapgs 
ffffffff8020c007:	6a 00                	pushq  $0x0
ffffffff8020c009:	68 9b 00 00 00       	pushq  $0x9b
ffffffff8020c00e:	e9 bb 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c013 <__RME_X64_USER156_Handler>:
ffffffff8020c013:	0f 01 f8             	swapgs 
ffffffff8020c016:	6a 00                	pushq  $0x0
ffffffff8020c018:	68 9c 00 00 00       	pushq  $0x9c
ffffffff8020c01d:	e9 ac 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c022 <__RME_X64_USER157_Handler>:
ffffffff8020c022:	0f 01 f8             	swapgs 
ffffffff8020c025:	6a 00                	pushq  $0x0
ffffffff8020c027:	68 9d 00 00 00       	pushq  $0x9d
ffffffff8020c02c:	e9 9d 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c031 <__RME_X64_USER158_Handler>:
ffffffff8020c031:	0f 01 f8             	swapgs 
ffffffff8020c034:	6a 00                	pushq  $0x0
ffffffff8020c036:	68 9e 00 00 00       	pushq  $0x9e
ffffffff8020c03b:	e9 8e 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c040 <__RME_X64_USER159_Handler>:
ffffffff8020c040:	0f 01 f8             	swapgs 
ffffffff8020c043:	6a 00                	pushq  $0x0
ffffffff8020c045:	68 9f 00 00 00       	pushq  $0x9f
ffffffff8020c04a:	e9 7f 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c04f <__RME_X64_USER160_Handler>:
ffffffff8020c04f:	0f 01 f8             	swapgs 
ffffffff8020c052:	6a 00                	pushq  $0x0
ffffffff8020c054:	68 a0 00 00 00       	pushq  $0xa0
ffffffff8020c059:	e9 70 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c05e <__RME_X64_USER161_Handler>:
ffffffff8020c05e:	0f 01 f8             	swapgs 
ffffffff8020c061:	6a 00                	pushq  $0x0
ffffffff8020c063:	68 a1 00 00 00       	pushq  $0xa1
ffffffff8020c068:	e9 61 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c06d <__RME_X64_USER162_Handler>:
ffffffff8020c06d:	0f 01 f8             	swapgs 
ffffffff8020c070:	6a 00                	pushq  $0x0
ffffffff8020c072:	68 a2 00 00 00       	pushq  $0xa2
ffffffff8020c077:	e9 52 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c07c <__RME_X64_USER163_Handler>:
ffffffff8020c07c:	0f 01 f8             	swapgs 
ffffffff8020c07f:	6a 00                	pushq  $0x0
ffffffff8020c081:	68 a3 00 00 00       	pushq  $0xa3
ffffffff8020c086:	e9 43 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c08b <__RME_X64_USER164_Handler>:
ffffffff8020c08b:	0f 01 f8             	swapgs 
ffffffff8020c08e:	6a 00                	pushq  $0x0
ffffffff8020c090:	68 a4 00 00 00       	pushq  $0xa4
ffffffff8020c095:	e9 34 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c09a <__RME_X64_USER165_Handler>:
ffffffff8020c09a:	0f 01 f8             	swapgs 
ffffffff8020c09d:	6a 00                	pushq  $0x0
ffffffff8020c09f:	68 a5 00 00 00       	pushq  $0xa5
ffffffff8020c0a4:	e9 25 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c0a9 <__RME_X64_USER166_Handler>:
ffffffff8020c0a9:	0f 01 f8             	swapgs 
ffffffff8020c0ac:	6a 00                	pushq  $0x0
ffffffff8020c0ae:	68 a6 00 00 00       	pushq  $0xa6
ffffffff8020c0b3:	e9 16 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c0b8 <__RME_X64_USER167_Handler>:
ffffffff8020c0b8:	0f 01 f8             	swapgs 
ffffffff8020c0bb:	6a 00                	pushq  $0x0
ffffffff8020c0bd:	68 a7 00 00 00       	pushq  $0xa7
ffffffff8020c0c2:	e9 07 05 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c0c7 <__RME_X64_USER168_Handler>:
ffffffff8020c0c7:	0f 01 f8             	swapgs 
ffffffff8020c0ca:	6a 00                	pushq  $0x0
ffffffff8020c0cc:	68 a8 00 00 00       	pushq  $0xa8
ffffffff8020c0d1:	e9 f8 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c0d6 <__RME_X64_USER169_Handler>:
ffffffff8020c0d6:	0f 01 f8             	swapgs 
ffffffff8020c0d9:	6a 00                	pushq  $0x0
ffffffff8020c0db:	68 a9 00 00 00       	pushq  $0xa9
ffffffff8020c0e0:	e9 e9 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c0e5 <__RME_X64_USER170_Handler>:
ffffffff8020c0e5:	0f 01 f8             	swapgs 
ffffffff8020c0e8:	6a 00                	pushq  $0x0
ffffffff8020c0ea:	68 aa 00 00 00       	pushq  $0xaa
ffffffff8020c0ef:	e9 da 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c0f4 <__RME_X64_USER171_Handler>:
ffffffff8020c0f4:	0f 01 f8             	swapgs 
ffffffff8020c0f7:	6a 00                	pushq  $0x0
ffffffff8020c0f9:	68 ab 00 00 00       	pushq  $0xab
ffffffff8020c0fe:	e9 cb 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c103 <__RME_X64_USER172_Handler>:
ffffffff8020c103:	0f 01 f8             	swapgs 
ffffffff8020c106:	6a 00                	pushq  $0x0
ffffffff8020c108:	68 ac 00 00 00       	pushq  $0xac
ffffffff8020c10d:	e9 bc 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c112 <__RME_X64_USER173_Handler>:
ffffffff8020c112:	0f 01 f8             	swapgs 
ffffffff8020c115:	6a 00                	pushq  $0x0
ffffffff8020c117:	68 ad 00 00 00       	pushq  $0xad
ffffffff8020c11c:	e9 ad 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c121 <__RME_X64_USER174_Handler>:
ffffffff8020c121:	0f 01 f8             	swapgs 
ffffffff8020c124:	6a 00                	pushq  $0x0
ffffffff8020c126:	68 ae 00 00 00       	pushq  $0xae
ffffffff8020c12b:	e9 9e 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c130 <__RME_X64_USER175_Handler>:
ffffffff8020c130:	0f 01 f8             	swapgs 
ffffffff8020c133:	6a 00                	pushq  $0x0
ffffffff8020c135:	68 af 00 00 00       	pushq  $0xaf
ffffffff8020c13a:	e9 8f 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c13f <__RME_X64_USER176_Handler>:
ffffffff8020c13f:	0f 01 f8             	swapgs 
ffffffff8020c142:	6a 00                	pushq  $0x0
ffffffff8020c144:	68 b0 00 00 00       	pushq  $0xb0
ffffffff8020c149:	e9 80 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c14e <__RME_X64_USER177_Handler>:
ffffffff8020c14e:	0f 01 f8             	swapgs 
ffffffff8020c151:	6a 00                	pushq  $0x0
ffffffff8020c153:	68 b1 00 00 00       	pushq  $0xb1
ffffffff8020c158:	e9 71 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c15d <__RME_X64_USER178_Handler>:
ffffffff8020c15d:	0f 01 f8             	swapgs 
ffffffff8020c160:	6a 00                	pushq  $0x0
ffffffff8020c162:	68 b2 00 00 00       	pushq  $0xb2
ffffffff8020c167:	e9 62 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c16c <__RME_X64_USER179_Handler>:
ffffffff8020c16c:	0f 01 f8             	swapgs 
ffffffff8020c16f:	6a 00                	pushq  $0x0
ffffffff8020c171:	68 b3 00 00 00       	pushq  $0xb3
ffffffff8020c176:	e9 53 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c17b <__RME_X64_USER180_Handler>:
ffffffff8020c17b:	0f 01 f8             	swapgs 
ffffffff8020c17e:	6a 00                	pushq  $0x0
ffffffff8020c180:	68 b4 00 00 00       	pushq  $0xb4
ffffffff8020c185:	e9 44 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c18a <__RME_X64_USER181_Handler>:
ffffffff8020c18a:	0f 01 f8             	swapgs 
ffffffff8020c18d:	6a 00                	pushq  $0x0
ffffffff8020c18f:	68 b5 00 00 00       	pushq  $0xb5
ffffffff8020c194:	e9 35 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c199 <__RME_X64_USER182_Handler>:
ffffffff8020c199:	0f 01 f8             	swapgs 
ffffffff8020c19c:	6a 00                	pushq  $0x0
ffffffff8020c19e:	68 b6 00 00 00       	pushq  $0xb6
ffffffff8020c1a3:	e9 26 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c1a8 <__RME_X64_USER183_Handler>:
ffffffff8020c1a8:	0f 01 f8             	swapgs 
ffffffff8020c1ab:	6a 00                	pushq  $0x0
ffffffff8020c1ad:	68 b7 00 00 00       	pushq  $0xb7
ffffffff8020c1b2:	e9 17 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c1b7 <__RME_X64_USER184_Handler>:
ffffffff8020c1b7:	0f 01 f8             	swapgs 
ffffffff8020c1ba:	6a 00                	pushq  $0x0
ffffffff8020c1bc:	68 b8 00 00 00       	pushq  $0xb8
ffffffff8020c1c1:	e9 08 04 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c1c6 <__RME_X64_USER185_Handler>:
ffffffff8020c1c6:	0f 01 f8             	swapgs 
ffffffff8020c1c9:	6a 00                	pushq  $0x0
ffffffff8020c1cb:	68 b9 00 00 00       	pushq  $0xb9
ffffffff8020c1d0:	e9 f9 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c1d5 <__RME_X64_USER186_Handler>:
ffffffff8020c1d5:	0f 01 f8             	swapgs 
ffffffff8020c1d8:	6a 00                	pushq  $0x0
ffffffff8020c1da:	68 ba 00 00 00       	pushq  $0xba
ffffffff8020c1df:	e9 ea 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c1e4 <__RME_X64_USER187_Handler>:
ffffffff8020c1e4:	0f 01 f8             	swapgs 
ffffffff8020c1e7:	6a 00                	pushq  $0x0
ffffffff8020c1e9:	68 bb 00 00 00       	pushq  $0xbb
ffffffff8020c1ee:	e9 db 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c1f3 <__RME_X64_USER188_Handler>:
ffffffff8020c1f3:	0f 01 f8             	swapgs 
ffffffff8020c1f6:	6a 00                	pushq  $0x0
ffffffff8020c1f8:	68 bc 00 00 00       	pushq  $0xbc
ffffffff8020c1fd:	e9 cc 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c202 <__RME_X64_USER189_Handler>:
ffffffff8020c202:	0f 01 f8             	swapgs 
ffffffff8020c205:	6a 00                	pushq  $0x0
ffffffff8020c207:	68 bd 00 00 00       	pushq  $0xbd
ffffffff8020c20c:	e9 bd 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c211 <__RME_X64_USER190_Handler>:
ffffffff8020c211:	0f 01 f8             	swapgs 
ffffffff8020c214:	6a 00                	pushq  $0x0
ffffffff8020c216:	68 be 00 00 00       	pushq  $0xbe
ffffffff8020c21b:	e9 ae 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c220 <__RME_X64_USER191_Handler>:
ffffffff8020c220:	0f 01 f8             	swapgs 
ffffffff8020c223:	6a 00                	pushq  $0x0
ffffffff8020c225:	68 bf 00 00 00       	pushq  $0xbf
ffffffff8020c22a:	e9 9f 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c22f <__RME_X64_USER192_Handler>:
ffffffff8020c22f:	0f 01 f8             	swapgs 
ffffffff8020c232:	6a 00                	pushq  $0x0
ffffffff8020c234:	68 c0 00 00 00       	pushq  $0xc0
ffffffff8020c239:	e9 90 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c23e <__RME_X64_USER193_Handler>:
ffffffff8020c23e:	0f 01 f8             	swapgs 
ffffffff8020c241:	6a 00                	pushq  $0x0
ffffffff8020c243:	68 c1 00 00 00       	pushq  $0xc1
ffffffff8020c248:	e9 81 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c24d <__RME_X64_USER194_Handler>:
ffffffff8020c24d:	0f 01 f8             	swapgs 
ffffffff8020c250:	6a 00                	pushq  $0x0
ffffffff8020c252:	68 c2 00 00 00       	pushq  $0xc2
ffffffff8020c257:	e9 72 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c25c <__RME_X64_USER195_Handler>:
ffffffff8020c25c:	0f 01 f8             	swapgs 
ffffffff8020c25f:	6a 00                	pushq  $0x0
ffffffff8020c261:	68 c3 00 00 00       	pushq  $0xc3
ffffffff8020c266:	e9 63 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c26b <__RME_X64_USER196_Handler>:
ffffffff8020c26b:	0f 01 f8             	swapgs 
ffffffff8020c26e:	6a 00                	pushq  $0x0
ffffffff8020c270:	68 c4 00 00 00       	pushq  $0xc4
ffffffff8020c275:	e9 54 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c27a <__RME_X64_USER197_Handler>:
ffffffff8020c27a:	0f 01 f8             	swapgs 
ffffffff8020c27d:	6a 00                	pushq  $0x0
ffffffff8020c27f:	68 c5 00 00 00       	pushq  $0xc5
ffffffff8020c284:	e9 45 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c289 <__RME_X64_USER198_Handler>:
ffffffff8020c289:	0f 01 f8             	swapgs 
ffffffff8020c28c:	6a 00                	pushq  $0x0
ffffffff8020c28e:	68 c6 00 00 00       	pushq  $0xc6
ffffffff8020c293:	e9 36 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c298 <__RME_X64_USER199_Handler>:
ffffffff8020c298:	0f 01 f8             	swapgs 
ffffffff8020c29b:	6a 00                	pushq  $0x0
ffffffff8020c29d:	68 c7 00 00 00       	pushq  $0xc7
ffffffff8020c2a2:	e9 27 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c2a7 <__RME_X64_USER200_Handler>:
ffffffff8020c2a7:	0f 01 f8             	swapgs 
ffffffff8020c2aa:	6a 00                	pushq  $0x0
ffffffff8020c2ac:	68 c8 00 00 00       	pushq  $0xc8
ffffffff8020c2b1:	e9 18 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c2b6 <__RME_X64_USER201_Handler>:
ffffffff8020c2b6:	0f 01 f8             	swapgs 
ffffffff8020c2b9:	6a 00                	pushq  $0x0
ffffffff8020c2bb:	68 c9 00 00 00       	pushq  $0xc9
ffffffff8020c2c0:	e9 09 03 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c2c5 <__RME_X64_USER202_Handler>:
ffffffff8020c2c5:	0f 01 f8             	swapgs 
ffffffff8020c2c8:	6a 00                	pushq  $0x0
ffffffff8020c2ca:	68 ca 00 00 00       	pushq  $0xca
ffffffff8020c2cf:	e9 fa 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c2d4 <__RME_X64_USER203_Handler>:
ffffffff8020c2d4:	0f 01 f8             	swapgs 
ffffffff8020c2d7:	6a 00                	pushq  $0x0
ffffffff8020c2d9:	68 cb 00 00 00       	pushq  $0xcb
ffffffff8020c2de:	e9 eb 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c2e3 <__RME_X64_USER204_Handler>:
ffffffff8020c2e3:	0f 01 f8             	swapgs 
ffffffff8020c2e6:	6a 00                	pushq  $0x0
ffffffff8020c2e8:	68 cc 00 00 00       	pushq  $0xcc
ffffffff8020c2ed:	e9 dc 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c2f2 <__RME_X64_USER205_Handler>:
ffffffff8020c2f2:	0f 01 f8             	swapgs 
ffffffff8020c2f5:	6a 00                	pushq  $0x0
ffffffff8020c2f7:	68 cd 00 00 00       	pushq  $0xcd
ffffffff8020c2fc:	e9 cd 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c301 <__RME_X64_USER206_Handler>:
ffffffff8020c301:	0f 01 f8             	swapgs 
ffffffff8020c304:	6a 00                	pushq  $0x0
ffffffff8020c306:	68 ce 00 00 00       	pushq  $0xce
ffffffff8020c30b:	e9 be 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c310 <__RME_X64_USER207_Handler>:
ffffffff8020c310:	0f 01 f8             	swapgs 
ffffffff8020c313:	6a 00                	pushq  $0x0
ffffffff8020c315:	68 cf 00 00 00       	pushq  $0xcf
ffffffff8020c31a:	e9 af 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c31f <__RME_X64_USER208_Handler>:
ffffffff8020c31f:	0f 01 f8             	swapgs 
ffffffff8020c322:	6a 00                	pushq  $0x0
ffffffff8020c324:	68 d0 00 00 00       	pushq  $0xd0
ffffffff8020c329:	e9 a0 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c32e <__RME_X64_USER209_Handler>:
ffffffff8020c32e:	0f 01 f8             	swapgs 
ffffffff8020c331:	6a 00                	pushq  $0x0
ffffffff8020c333:	68 d1 00 00 00       	pushq  $0xd1
ffffffff8020c338:	e9 91 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c33d <__RME_X64_USER210_Handler>:
ffffffff8020c33d:	0f 01 f8             	swapgs 
ffffffff8020c340:	6a 00                	pushq  $0x0
ffffffff8020c342:	68 d2 00 00 00       	pushq  $0xd2
ffffffff8020c347:	e9 82 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c34c <__RME_X64_USER211_Handler>:
ffffffff8020c34c:	0f 01 f8             	swapgs 
ffffffff8020c34f:	6a 00                	pushq  $0x0
ffffffff8020c351:	68 d3 00 00 00       	pushq  $0xd3
ffffffff8020c356:	e9 73 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c35b <__RME_X64_USER212_Handler>:
ffffffff8020c35b:	0f 01 f8             	swapgs 
ffffffff8020c35e:	6a 00                	pushq  $0x0
ffffffff8020c360:	68 d4 00 00 00       	pushq  $0xd4
ffffffff8020c365:	e9 64 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c36a <__RME_X64_USER213_Handler>:
ffffffff8020c36a:	0f 01 f8             	swapgs 
ffffffff8020c36d:	6a 00                	pushq  $0x0
ffffffff8020c36f:	68 d5 00 00 00       	pushq  $0xd5
ffffffff8020c374:	e9 55 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c379 <__RME_X64_USER214_Handler>:
ffffffff8020c379:	0f 01 f8             	swapgs 
ffffffff8020c37c:	6a 00                	pushq  $0x0
ffffffff8020c37e:	68 d6 00 00 00       	pushq  $0xd6
ffffffff8020c383:	e9 46 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c388 <__RME_X64_USER215_Handler>:
ffffffff8020c388:	0f 01 f8             	swapgs 
ffffffff8020c38b:	6a 00                	pushq  $0x0
ffffffff8020c38d:	68 d7 00 00 00       	pushq  $0xd7
ffffffff8020c392:	e9 37 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c397 <__RME_X64_USER216_Handler>:
ffffffff8020c397:	0f 01 f8             	swapgs 
ffffffff8020c39a:	6a 00                	pushq  $0x0
ffffffff8020c39c:	68 d8 00 00 00       	pushq  $0xd8
ffffffff8020c3a1:	e9 28 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c3a6 <__RME_X64_USER217_Handler>:
ffffffff8020c3a6:	0f 01 f8             	swapgs 
ffffffff8020c3a9:	6a 00                	pushq  $0x0
ffffffff8020c3ab:	68 d9 00 00 00       	pushq  $0xd9
ffffffff8020c3b0:	e9 19 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c3b5 <__RME_X64_USER218_Handler>:
ffffffff8020c3b5:	0f 01 f8             	swapgs 
ffffffff8020c3b8:	6a 00                	pushq  $0x0
ffffffff8020c3ba:	68 da 00 00 00       	pushq  $0xda
ffffffff8020c3bf:	e9 0a 02 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c3c4 <__RME_X64_USER219_Handler>:
ffffffff8020c3c4:	0f 01 f8             	swapgs 
ffffffff8020c3c7:	6a 00                	pushq  $0x0
ffffffff8020c3c9:	68 db 00 00 00       	pushq  $0xdb
ffffffff8020c3ce:	e9 fb 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c3d3 <__RME_X64_USER220_Handler>:
ffffffff8020c3d3:	0f 01 f8             	swapgs 
ffffffff8020c3d6:	6a 00                	pushq  $0x0
ffffffff8020c3d8:	68 dc 00 00 00       	pushq  $0xdc
ffffffff8020c3dd:	e9 ec 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c3e2 <__RME_X64_USER221_Handler>:
ffffffff8020c3e2:	0f 01 f8             	swapgs 
ffffffff8020c3e5:	6a 00                	pushq  $0x0
ffffffff8020c3e7:	68 dd 00 00 00       	pushq  $0xdd
ffffffff8020c3ec:	e9 dd 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c3f1 <__RME_X64_USER222_Handler>:
ffffffff8020c3f1:	0f 01 f8             	swapgs 
ffffffff8020c3f4:	6a 00                	pushq  $0x0
ffffffff8020c3f6:	68 de 00 00 00       	pushq  $0xde
ffffffff8020c3fb:	e9 ce 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c400 <__RME_X64_USER223_Handler>:
ffffffff8020c400:	0f 01 f8             	swapgs 
ffffffff8020c403:	6a 00                	pushq  $0x0
ffffffff8020c405:	68 df 00 00 00       	pushq  $0xdf
ffffffff8020c40a:	e9 bf 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c40f <__RME_X64_USER224_Handler>:
ffffffff8020c40f:	0f 01 f8             	swapgs 
ffffffff8020c412:	6a 00                	pushq  $0x0
ffffffff8020c414:	68 e0 00 00 00       	pushq  $0xe0
ffffffff8020c419:	e9 b0 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c41e <__RME_X64_USER225_Handler>:
ffffffff8020c41e:	0f 01 f8             	swapgs 
ffffffff8020c421:	6a 00                	pushq  $0x0
ffffffff8020c423:	68 e1 00 00 00       	pushq  $0xe1
ffffffff8020c428:	e9 a1 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c42d <__RME_X64_USER226_Handler>:
ffffffff8020c42d:	0f 01 f8             	swapgs 
ffffffff8020c430:	6a 00                	pushq  $0x0
ffffffff8020c432:	68 e2 00 00 00       	pushq  $0xe2
ffffffff8020c437:	e9 92 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c43c <__RME_X64_USER227_Handler>:
ffffffff8020c43c:	0f 01 f8             	swapgs 
ffffffff8020c43f:	6a 00                	pushq  $0x0
ffffffff8020c441:	68 e3 00 00 00       	pushq  $0xe3
ffffffff8020c446:	e9 83 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c44b <__RME_X64_USER228_Handler>:
ffffffff8020c44b:	0f 01 f8             	swapgs 
ffffffff8020c44e:	6a 00                	pushq  $0x0
ffffffff8020c450:	68 e4 00 00 00       	pushq  $0xe4
ffffffff8020c455:	e9 74 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c45a <__RME_X64_USER229_Handler>:
ffffffff8020c45a:	0f 01 f8             	swapgs 
ffffffff8020c45d:	6a 00                	pushq  $0x0
ffffffff8020c45f:	68 e5 00 00 00       	pushq  $0xe5
ffffffff8020c464:	e9 65 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c469 <__RME_X64_USER230_Handler>:
ffffffff8020c469:	0f 01 f8             	swapgs 
ffffffff8020c46c:	6a 00                	pushq  $0x0
ffffffff8020c46e:	68 e6 00 00 00       	pushq  $0xe6
ffffffff8020c473:	e9 56 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c478 <__RME_X64_USER231_Handler>:
ffffffff8020c478:	0f 01 f8             	swapgs 
ffffffff8020c47b:	6a 00                	pushq  $0x0
ffffffff8020c47d:	68 e7 00 00 00       	pushq  $0xe7
ffffffff8020c482:	e9 47 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c487 <__RME_X64_USER232_Handler>:
ffffffff8020c487:	0f 01 f8             	swapgs 
ffffffff8020c48a:	6a 00                	pushq  $0x0
ffffffff8020c48c:	68 e8 00 00 00       	pushq  $0xe8
ffffffff8020c491:	e9 38 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c496 <__RME_X64_USER233_Handler>:
ffffffff8020c496:	0f 01 f8             	swapgs 
ffffffff8020c499:	6a 00                	pushq  $0x0
ffffffff8020c49b:	68 e9 00 00 00       	pushq  $0xe9
ffffffff8020c4a0:	e9 29 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c4a5 <__RME_X64_USER234_Handler>:
ffffffff8020c4a5:	0f 01 f8             	swapgs 
ffffffff8020c4a8:	6a 00                	pushq  $0x0
ffffffff8020c4aa:	68 ea 00 00 00       	pushq  $0xea
ffffffff8020c4af:	e9 1a 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c4b4 <__RME_X64_USER235_Handler>:
ffffffff8020c4b4:	0f 01 f8             	swapgs 
ffffffff8020c4b7:	6a 00                	pushq  $0x0
ffffffff8020c4b9:	68 eb 00 00 00       	pushq  $0xeb
ffffffff8020c4be:	e9 0b 01 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c4c3 <__RME_X64_USER236_Handler>:
ffffffff8020c4c3:	0f 01 f8             	swapgs 
ffffffff8020c4c6:	6a 00                	pushq  $0x0
ffffffff8020c4c8:	68 ec 00 00 00       	pushq  $0xec
ffffffff8020c4cd:	e9 fc 00 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c4d2 <__RME_X64_USER237_Handler>:
ffffffff8020c4d2:	0f 01 f8             	swapgs 
ffffffff8020c4d5:	6a 00                	pushq  $0x0
ffffffff8020c4d7:	68 ed 00 00 00       	pushq  $0xed
ffffffff8020c4dc:	e9 ed 00 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c4e1 <__RME_X64_USER238_Handler>:
ffffffff8020c4e1:	0f 01 f8             	swapgs 
ffffffff8020c4e4:	6a 00                	pushq  $0x0
ffffffff8020c4e6:	68 ee 00 00 00       	pushq  $0xee
ffffffff8020c4eb:	e9 de 00 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c4f0 <__RME_X64_USER239_Handler>:
ffffffff8020c4f0:	0f 01 f8             	swapgs 
ffffffff8020c4f3:	6a 00                	pushq  $0x0
ffffffff8020c4f5:	68 ef 00 00 00       	pushq  $0xef
ffffffff8020c4fa:	e9 cf 00 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c4ff <__RME_X64_USER240_Handler>:
ffffffff8020c4ff:	0f 01 f8             	swapgs 
ffffffff8020c502:	6a 00                	pushq  $0x0
ffffffff8020c504:	68 f0 00 00 00       	pushq  $0xf0
ffffffff8020c509:	e9 c0 00 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c50e <__RME_X64_USER241_Handler>:
ffffffff8020c50e:	0f 01 f8             	swapgs 
ffffffff8020c511:	6a 00                	pushq  $0x0
ffffffff8020c513:	68 f1 00 00 00       	pushq  $0xf1
ffffffff8020c518:	e9 b1 00 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c51d <__RME_X64_USER242_Handler>:
ffffffff8020c51d:	0f 01 f8             	swapgs 
ffffffff8020c520:	6a 00                	pushq  $0x0
ffffffff8020c522:	68 f2 00 00 00       	pushq  $0xf2
ffffffff8020c527:	e9 a2 00 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c52c <__RME_X64_USER243_Handler>:
ffffffff8020c52c:	0f 01 f8             	swapgs 
ffffffff8020c52f:	6a 00                	pushq  $0x0
ffffffff8020c531:	68 f3 00 00 00       	pushq  $0xf3
ffffffff8020c536:	e9 93 00 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c53b <__RME_X64_USER244_Handler>:
ffffffff8020c53b:	0f 01 f8             	swapgs 
ffffffff8020c53e:	6a 00                	pushq  $0x0
ffffffff8020c540:	68 f4 00 00 00       	pushq  $0xf4
ffffffff8020c545:	e9 84 00 00 00       	jmpq   ffffffff8020c5ce <User_Handler>

ffffffff8020c54a <__RME_X64_USER245_Handler>:
ffffffff8020c54a:	0f 01 f8             	swapgs 
ffffffff8020c54d:	6a 00                	pushq  $0x0
ffffffff8020c54f:	68 f5 00 00 00       	pushq  $0xf5
ffffffff8020c554:	eb 78                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c556 <__RME_X64_USER246_Handler>:
ffffffff8020c556:	0f 01 f8             	swapgs 
ffffffff8020c559:	6a 00                	pushq  $0x0
ffffffff8020c55b:	68 f6 00 00 00       	pushq  $0xf6
ffffffff8020c560:	eb 6c                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c562 <__RME_X64_USER247_Handler>:
ffffffff8020c562:	0f 01 f8             	swapgs 
ffffffff8020c565:	6a 00                	pushq  $0x0
ffffffff8020c567:	68 f7 00 00 00       	pushq  $0xf7
ffffffff8020c56c:	eb 60                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c56e <__RME_X64_USER248_Handler>:
ffffffff8020c56e:	0f 01 f8             	swapgs 
ffffffff8020c571:	6a 00                	pushq  $0x0
ffffffff8020c573:	68 f8 00 00 00       	pushq  $0xf8
ffffffff8020c578:	eb 54                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c57a <__RME_X64_USER249_Handler>:
ffffffff8020c57a:	0f 01 f8             	swapgs 
ffffffff8020c57d:	6a 00                	pushq  $0x0
ffffffff8020c57f:	68 f9 00 00 00       	pushq  $0xf9
ffffffff8020c584:	eb 48                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c586 <__RME_X64_USER250_Handler>:
ffffffff8020c586:	0f 01 f8             	swapgs 
ffffffff8020c589:	6a 00                	pushq  $0x0
ffffffff8020c58b:	68 fa 00 00 00       	pushq  $0xfa
ffffffff8020c590:	eb 3c                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c592 <__RME_X64_USER251_Handler>:
ffffffff8020c592:	0f 01 f8             	swapgs 
ffffffff8020c595:	6a 00                	pushq  $0x0
ffffffff8020c597:	68 fb 00 00 00       	pushq  $0xfb
ffffffff8020c59c:	eb 30                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c59e <__RME_X64_USER252_Handler>:
ffffffff8020c59e:	0f 01 f8             	swapgs 
ffffffff8020c5a1:	6a 00                	pushq  $0x0
ffffffff8020c5a3:	68 fc 00 00 00       	pushq  $0xfc
ffffffff8020c5a8:	eb 24                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c5aa <__RME_X64_USER253_Handler>:
ffffffff8020c5aa:	0f 01 f8             	swapgs 
ffffffff8020c5ad:	6a 00                	pushq  $0x0
ffffffff8020c5af:	68 fd 00 00 00       	pushq  $0xfd
ffffffff8020c5b4:	eb 18                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c5b6 <__RME_X64_USER254_Handler>:
ffffffff8020c5b6:	0f 01 f8             	swapgs 
ffffffff8020c5b9:	6a 00                	pushq  $0x0
ffffffff8020c5bb:	68 fe 00 00 00       	pushq  $0xfe
ffffffff8020c5c0:	eb 0c                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c5c2 <__RME_X64_USER255_Handler>:
ffffffff8020c5c2:	0f 01 f8             	swapgs 
ffffffff8020c5c5:	6a 00                	pushq  $0x0
ffffffff8020c5c7:	68 ff 00 00 00       	pushq  $0xff
ffffffff8020c5cc:	eb 00                	jmp    ffffffff8020c5ce <User_Handler>

ffffffff8020c5ce <User_Handler>:
ffffffff8020c5ce:	41 57                	push   %r15
ffffffff8020c5d0:	41 56                	push   %r14
ffffffff8020c5d2:	41 55                	push   %r13
ffffffff8020c5d4:	41 54                	push   %r12
ffffffff8020c5d6:	41 53                	push   %r11
ffffffff8020c5d8:	41 52                	push   %r10
ffffffff8020c5da:	41 51                	push   %r9
ffffffff8020c5dc:	41 50                	push   %r8
ffffffff8020c5de:	55                   	push   %rbp
ffffffff8020c5df:	57                   	push   %rdi
ffffffff8020c5e0:	56                   	push   %rsi
ffffffff8020c5e1:	52                   	push   %rdx
ffffffff8020c5e2:	51                   	push   %rcx
ffffffff8020c5e3:	53                   	push   %rbx
ffffffff8020c5e4:	50                   	push   %rax
ffffffff8020c5e5:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c5e9:	8e e0                	mov    %eax,%fs
ffffffff8020c5eb:	8e c0                	mov    %eax,%es
ffffffff8020c5ed:	8e d8                	mov    %eax,%ds
ffffffff8020c5ef:	48 89 e7             	mov    %rsp,%rdi
ffffffff8020c5f2:	48 8b 74 24 78       	mov    0x78(%rsp),%rsi
ffffffff8020c5f7:	e8 c4 7c 00 00       	callq  ffffffff802142c0 <__RME_X64_Generic_Handler>
ffffffff8020c5fc:	e8 4f 4d 00 00       	callq  ffffffff80211350 <__RME_X64_LAPIC_Ack>
ffffffff8020c601:	0f 01 f8             	swapgs 
ffffffff8020c604:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c608:	8e e8                	mov    %eax,%gs
ffffffff8020c60a:	8e e0                	mov    %eax,%fs
ffffffff8020c60c:	8e c0                	mov    %eax,%es
ffffffff8020c60e:	8e d8                	mov    %eax,%ds
ffffffff8020c610:	58                   	pop    %rax
ffffffff8020c611:	5b                   	pop    %rbx
ffffffff8020c612:	59                   	pop    %rcx
ffffffff8020c613:	5a                   	pop    %rdx
ffffffff8020c614:	5e                   	pop    %rsi
ffffffff8020c615:	5f                   	pop    %rdi
ffffffff8020c616:	5d                   	pop    %rbp
ffffffff8020c617:	41 58                	pop    %r8
ffffffff8020c619:	41 59                	pop    %r9
ffffffff8020c61b:	41 5a                	pop    %r10
ffffffff8020c61d:	41 5b                	pop    %r11
ffffffff8020c61f:	41 5c                	pop    %r12
ffffffff8020c621:	41 5d                	pop    %r13
ffffffff8020c623:	41 5e                	pop    %r14
ffffffff8020c625:	41 5f                	pop    %r15
ffffffff8020c627:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020c62b:	48 cf                	iretq  

ffffffff8020c62d <SysTick_SMP_Handler>:
ffffffff8020c62d:	0f 01 f8             	swapgs 
ffffffff8020c630:	6a 00                	pushq  $0x0
ffffffff8020c632:	68 ff ff 00 00       	pushq  $0xffff
ffffffff8020c637:	41 57                	push   %r15
ffffffff8020c639:	41 56                	push   %r14
ffffffff8020c63b:	41 55                	push   %r13
ffffffff8020c63d:	41 54                	push   %r12
ffffffff8020c63f:	41 53                	push   %r11
ffffffff8020c641:	41 52                	push   %r10
ffffffff8020c643:	41 51                	push   %r9
ffffffff8020c645:	41 50                	push   %r8
ffffffff8020c647:	55                   	push   %rbp
ffffffff8020c648:	57                   	push   %rdi
ffffffff8020c649:	56                   	push   %rsi
ffffffff8020c64a:	52                   	push   %rdx
ffffffff8020c64b:	51                   	push   %rcx
ffffffff8020c64c:	53                   	push   %rbx
ffffffff8020c64d:	50                   	push   %rax
ffffffff8020c64e:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c652:	8e e0                	mov    %eax,%fs
ffffffff8020c654:	8e c0                	mov    %eax,%es
ffffffff8020c656:	8e d8                	mov    %eax,%ds
ffffffff8020c658:	48 89 e7             	mov    %rsp,%rdi
ffffffff8020c65b:	e8 90 a3 00 00       	callq  ffffffff802169f0 <_RME_Tick_SMP_Handler>
ffffffff8020c660:	e8 eb 4c 00 00       	callq  ffffffff80211350 <__RME_X64_LAPIC_Ack>
ffffffff8020c665:	0f 01 f8             	swapgs 
ffffffff8020c668:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c66c:	8e e8                	mov    %eax,%gs
ffffffff8020c66e:	8e e0                	mov    %eax,%fs
ffffffff8020c670:	8e c0                	mov    %eax,%es
ffffffff8020c672:	8e d8                	mov    %eax,%ds
ffffffff8020c674:	58                   	pop    %rax
ffffffff8020c675:	5b                   	pop    %rbx
ffffffff8020c676:	59                   	pop    %rcx
ffffffff8020c677:	5a                   	pop    %rdx
ffffffff8020c678:	5e                   	pop    %rsi
ffffffff8020c679:	5f                   	pop    %rdi
ffffffff8020c67a:	5d                   	pop    %rbp
ffffffff8020c67b:	41 58                	pop    %r8
ffffffff8020c67d:	41 59                	pop    %r9
ffffffff8020c67f:	41 5a                	pop    %r10
ffffffff8020c681:	41 5b                	pop    %r11
ffffffff8020c683:	41 5c                	pop    %r12
ffffffff8020c685:	41 5d                	pop    %r13
ffffffff8020c687:	41 5e                	pop    %r14
ffffffff8020c689:	41 5f                	pop    %r15
ffffffff8020c68b:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020c68f:	48 cf                	iretq  

ffffffff8020c691 <SysTick_Handler>:
ffffffff8020c691:	0f 01 f8             	swapgs 
ffffffff8020c694:	6a 00                	pushq  $0x0
ffffffff8020c696:	68 ff ff 00 00       	pushq  $0xffff
ffffffff8020c69b:	41 57                	push   %r15
ffffffff8020c69d:	41 56                	push   %r14
ffffffff8020c69f:	41 55                	push   %r13
ffffffff8020c6a1:	41 54                	push   %r12
ffffffff8020c6a3:	41 53                	push   %r11
ffffffff8020c6a5:	41 52                	push   %r10
ffffffff8020c6a7:	41 51                	push   %r9
ffffffff8020c6a9:	41 50                	push   %r8
ffffffff8020c6ab:	55                   	push   %rbp
ffffffff8020c6ac:	57                   	push   %rdi
ffffffff8020c6ad:	56                   	push   %rsi
ffffffff8020c6ae:	52                   	push   %rdx
ffffffff8020c6af:	51                   	push   %rcx
ffffffff8020c6b0:	53                   	push   %rbx
ffffffff8020c6b1:	50                   	push   %rax
ffffffff8020c6b2:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c6b6:	8e e0                	mov    %eax,%fs
ffffffff8020c6b8:	8e c0                	mov    %eax,%es
ffffffff8020c6ba:	8e d8                	mov    %eax,%ds
ffffffff8020c6bc:	48 89 e7             	mov    %rsp,%rdi
ffffffff8020c6bf:	e8 9c a5 00 00       	callq  ffffffff80216c60 <_RME_Tick_Handler>
ffffffff8020c6c4:	e8 87 4e 00 00       	callq  ffffffff80211550 <__RME_X64_SMP_Tick>
ffffffff8020c6c9:	e8 82 4c 00 00       	callq  ffffffff80211350 <__RME_X64_LAPIC_Ack>
ffffffff8020c6ce:	0f 01 f8             	swapgs 
ffffffff8020c6d1:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c6d5:	8e e8                	mov    %eax,%gs
ffffffff8020c6d7:	8e e0                	mov    %eax,%fs
ffffffff8020c6d9:	8e c0                	mov    %eax,%es
ffffffff8020c6db:	8e d8                	mov    %eax,%ds
ffffffff8020c6dd:	58                   	pop    %rax
ffffffff8020c6de:	5b                   	pop    %rbx
ffffffff8020c6df:	59                   	pop    %rcx
ffffffff8020c6e0:	5a                   	pop    %rdx
ffffffff8020c6e1:	5e                   	pop    %rsi
ffffffff8020c6e2:	5f                   	pop    %rdi
ffffffff8020c6e3:	5d                   	pop    %rbp
ffffffff8020c6e4:	41 58                	pop    %r8
ffffffff8020c6e6:	41 59                	pop    %r9
ffffffff8020c6e8:	41 5a                	pop    %r10
ffffffff8020c6ea:	41 5b                	pop    %r11
ffffffff8020c6ec:	41 5c                	pop    %r12
ffffffff8020c6ee:	41 5d                	pop    %r13
ffffffff8020c6f0:	41 5e                	pop    %r14
ffffffff8020c6f2:	41 5f                	pop    %r15
ffffffff8020c6f4:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020c6f8:	48 cf                	iretq  

ffffffff8020c6fa <SVC_Handler>:
ffffffff8020c6fa:	0f 01 f8             	swapgs 
ffffffff8020c6fd:	65 48 89 24 25 f8 1f 	mov    %rsp,%gs:0x1ff8
ffffffff8020c704:	00 00 
ffffffff8020c706:	65 48 8b 24 25 f0 1f 	mov    %gs:0x1ff0,%rsp
ffffffff8020c70d:	00 00 
ffffffff8020c70f:	6a 23                	pushq  $0x23
ffffffff8020c711:	65 ff 34 25 f8 1f 00 	pushq  %gs:0x1ff8
ffffffff8020c718:	00 
ffffffff8020c719:	41 53                	push   %r11
ffffffff8020c71b:	6a 2b                	pushq  $0x2b
ffffffff8020c71d:	51                   	push   %rcx
ffffffff8020c71e:	6a 00                	pushq  $0x0
ffffffff8020c720:	68 00 00 01 00       	pushq  $0x10000
ffffffff8020c725:	41 57                	push   %r15
ffffffff8020c727:	41 56                	push   %r14
ffffffff8020c729:	41 55                	push   %r13
ffffffff8020c72b:	41 54                	push   %r12
ffffffff8020c72d:	41 53                	push   %r11
ffffffff8020c72f:	41 52                	push   %r10
ffffffff8020c731:	41 51                	push   %r9
ffffffff8020c733:	41 50                	push   %r8
ffffffff8020c735:	55                   	push   %rbp
ffffffff8020c736:	57                   	push   %rdi
ffffffff8020c737:	56                   	push   %rsi
ffffffff8020c738:	52                   	push   %rdx
ffffffff8020c739:	51                   	push   %rcx
ffffffff8020c73a:	53                   	push   %rbx
ffffffff8020c73b:	50                   	push   %rax
ffffffff8020c73c:	66 b8 10 00          	mov    $0x10,%ax
ffffffff8020c740:	8e e0                	mov    %eax,%fs
ffffffff8020c742:	8e c0                	mov    %eax,%es
ffffffff8020c744:	8e d8                	mov    %eax,%ds
ffffffff8020c746:	48 89 e7             	mov    %rsp,%rdi
ffffffff8020c749:	e8 72 9d 00 00       	callq  ffffffff802164c0 <_RME_Svc_Handler>
ffffffff8020c74e:	0f 01 f8             	swapgs 
ffffffff8020c751:	66 b8 23 00          	mov    $0x23,%ax
ffffffff8020c755:	8e e8                	mov    %eax,%gs
ffffffff8020c757:	8e e0                	mov    %eax,%fs
ffffffff8020c759:	8e c0                	mov    %eax,%es
ffffffff8020c75b:	8e d8                	mov    %eax,%ds
ffffffff8020c75d:	58                   	pop    %rax
ffffffff8020c75e:	5b                   	pop    %rbx
ffffffff8020c75f:	59                   	pop    %rcx
ffffffff8020c760:	5a                   	pop    %rdx
ffffffff8020c761:	5e                   	pop    %rsi
ffffffff8020c762:	5f                   	pop    %rdi
ffffffff8020c763:	5d                   	pop    %rbp
ffffffff8020c764:	41 58                	pop    %r8
ffffffff8020c766:	41 59                	pop    %r9
ffffffff8020c768:	41 5a                	pop    %r10
ffffffff8020c76a:	41 5b                	pop    %r11
ffffffff8020c76c:	41 5c                	pop    %r12
ffffffff8020c76e:	41 5d                	pop    %r13
ffffffff8020c770:	41 5e                	pop    %r14
ffffffff8020c772:	41 5f                	pop    %r15
ffffffff8020c774:	48 f7 04 24 00 00 01 	testq  $0x10000,(%rsp)
ffffffff8020c77b:	00 
ffffffff8020c77c:	74 1c                	je     ffffffff8020c79a <Use_IRET>
ffffffff8020c77e:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff8020c785:	7f 00 00 
ffffffff8020c788:	48 23 4c 24 10       	and    0x10(%rsp),%rcx
ffffffff8020c78d:	4c 8b 5c 24 20       	mov    0x20(%rsp),%r11
ffffffff8020c792:	48 8b 64 24 28       	mov    0x28(%rsp),%rsp
ffffffff8020c797:	48 0f 07             	sysretq 

ffffffff8020c79a <Use_IRET>:
ffffffff8020c79a:	eb fe                	jmp    ffffffff8020c79a <Use_IRET>
ffffffff8020c79c:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8020c7a0:	48 cf                	iretq  
ffffffff8020c7a2:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8020c7a9:	00 00 00 
ffffffff8020c7ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8020c7b0 <__RME_X64_LAPIC_Init>:
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff8020c7b0:	48 8b 05 b9 f4 05 00 	mov    0x5f4b9(%rip),%rax        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c7b7:	48 85 c0             	test   %rax,%rax
ffffffff8020c7ba:	0f 84 30 01 00 00    	je     ffffffff8020c8f0 <__RME_X64_LAPIC_Init+0x140>

    /* Enable local APIC; set spurious interrupt vector to 32 */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_SVR, RME_X64_LAPIC_SVR_ENABLE|RME_X64_INT_SPUR);
ffffffff8020c7c0:	48 8b 15 a9 f4 05 00 	mov    0x5f4a9(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c7c7:	48 b8 f0 00 00 00 00 	movabs $0xffff8000000000f0,%rax
ffffffff8020c7ce:	80 ff ff 
ffffffff8020c7d1:	c7 04 02 80 01 00 00 	movl   $0x180,(%rdx,%rax,1)

    /* Disable local interrupt lines */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT0, RME_X64_LAPIC_MASKED);
ffffffff8020c7d8:	48 8b 15 91 f4 05 00 	mov    0x5f491(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c7df:	48 b8 50 03 00 00 00 	movabs $0xffff800000000350,%rax
ffffffff8020c7e6:	80 ff ff 
ffffffff8020c7e9:	c7 04 02 00 00 01 00 	movl   $0x10000,(%rdx,%rax,1)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_LINT1, RME_X64_LAPIC_MASKED);
ffffffff8020c7f0:	48 8b 15 79 f4 05 00 	mov    0x5f479(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c7f7:	48 b8 60 03 00 00 00 	movabs $0xffff800000000360,%rax
ffffffff8020c7fe:	80 ff ff 
ffffffff8020c801:	c7 04 02 00 00 01 00 	movl   $0x10000,(%rdx,%rax,1)

    /* Disable performance counter overflow interrupts when there is one */
    if(((RME_X64_LAPIC_READ(RME_X64_LAPIC_VER)>>16)&0xFF)>=4)
ffffffff8020c808:	48 8b 15 61 f4 05 00 	mov    0x5f461(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c80f:	48 b8 30 00 00 00 00 	movabs $0xffff800000000030,%rax
ffffffff8020c816:	80 ff ff 
ffffffff8020c819:	80 7c 02 02 03       	cmpb   $0x3,0x2(%rdx,%rax,1)
ffffffff8020c81e:	76 18                	jbe    ffffffff8020c838 <__RME_X64_LAPIC_Init+0x88>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_PCINT, RME_X64_LAPIC_MASKED);
ffffffff8020c820:	48 8b 15 49 f4 05 00 	mov    0x5f449(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c827:	48 b8 40 03 00 00 00 	movabs $0xffff800000000340,%rax
ffffffff8020c82e:	80 ff ff 
ffffffff8020c831:	c7 04 02 00 00 01 00 	movl   $0x10000,(%rdx,%rax,1)

    /* Map error interrupt to IRQ_ERROR */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ERROR, RME_X64_INT_ERROR);
ffffffff8020c838:	48 8b 15 31 f4 05 00 	mov    0x5f431(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c83f:	48 b8 70 03 00 00 00 	movabs $0xffff800000000370,%rax
ffffffff8020c846:	80 ff ff 
ffffffff8020c849:	c7 04 02 81 00 00 00 	movl   $0x81,(%rdx,%rax,1)

    /* Clear error status register (requires back-to-back writes) */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff8020c850:	48 8b 15 19 f4 05 00 	mov    0x5f419(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c857:	48 b8 80 02 00 00 00 	movabs $0xffff800000000280,%rax
ffffffff8020c85e:	80 ff ff 
ffffffff8020c861:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ESR, 0);
ffffffff8020c868:	48 8b 15 01 f4 05 00 	mov    0x5f401(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c86f:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Ack(void)
{
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff8020c876:	48 8b 15 f3 f3 05 00 	mov    0x5f3f3(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c87d:	48 b8 b0 00 00 00 00 	movabs $0xffff8000000000b0,%rax
ffffffff8020c884:	80 ff ff 
ffffffff8020c887:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)

    /* Acknowledge any outstanding interrupts */
    __RME_X64_LAPIC_Ack();

    /* Send an Init Level De-Assert to synchronise arbitration IDs */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0);
ffffffff8020c88e:	48 8b 15 db f3 05 00 	mov    0x5f3db(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c895:	48 b8 10 03 00 00 00 	movabs $0xffff800000000310,%rax
ffffffff8020c89c:	80 ff ff 
ffffffff8020c89f:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_BCAST|
ffffffff8020c8a6:	48 8b 15 c3 f3 05 00 	mov    0x5f3c3(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c8ad:	48 b8 00 03 00 00 00 	movabs $0xffff800000000300,%rax
ffffffff8020c8b4:	80 ff ff 
ffffffff8020c8b7:	c7 04 02 00 85 08 00 	movl   $0x88500,(%rdx,%rax,1)
ffffffff8020c8be:	66 90                	xchg   %ax,%ax
                                             RME_X64_LAPIC_ICRLO_INIT|
                                             RME_X64_LAPIC_ICRLO_LEVEL);
    while(RME_X64_LAPIC_READ(RME_X64_LAPIC_ICRLO)&RME_X64_LAPIC_ICRLO_DELIVS);
ffffffff8020c8c0:	48 8b 15 a9 f3 05 00 	mov    0x5f3a9(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c8c7:	8b 14 02             	mov    (%rdx,%rax,1),%edx
ffffffff8020c8ca:	80 e6 10             	and    $0x10,%dh
ffffffff8020c8cd:	75 f1                	jne    ffffffff8020c8c0 <__RME_X64_LAPIC_Init+0x110>

    /* Enable interrupts on the APIC */
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_TPR, 0);
ffffffff8020c8cf:	48 8b 15 9a f3 05 00 	mov    0x5f39a(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8020c8d6:	48 b8 80 00 00 00 00 	movabs $0xffff800000000080,%rax
ffffffff8020c8dd:	80 ff ff 
ffffffff8020c8e0:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
ffffffff8020c8e7:	c3                   	retq   
ffffffff8020c8e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8020c8ef:	00 
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Init(void)
{
ffffffff8020c8f0:	48 83 ec 08          	sub    $0x8,%rsp
    /* LAPIC initialization - Check if there is any LAPIC */
    RME_ASSERT(RME_X64_LAPIC_Addr!=0);
ffffffff8020c8f4:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8020c8fb:	e8 10 a6 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8020c900:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff8020c907:	e8 04 a6 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8020c90c:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8020c913:	e8 f8 a5 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8020c918:	bf 43 03 00 00       	mov    $0x343,%edi
ffffffff8020c91d:	e8 ae a3 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8020c922:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8020c929:	e8 e2 a5 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8020c92e:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8020c935:	e8 d6 a5 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8020c93a:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8020c941:	e8 ca a5 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8020c946:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff8020c94d:	e8 be a5 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8020c952:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8020c959:	e8 b2 a5 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8020c95e:	eb fe                	jmp    ffffffff8020c95e <__RME_X64_LAPIC_Init+0x1ae>

ffffffff8020c960 <__RME_X64_CPU_Local_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_CPU_Local_Init(void)
{
ffffffff8020c960:	55                   	push   %rbp
ffffffff8020c961:	53                   	push   %rbx
ffffffff8020c962:	48 83 ec 18          	sub    $0x18,%rsp
    struct RME_X64_CPUID_Entry* CPUID_Entry;
    ptr_t* GDT_Table;
    ptr_t TSS_Table;
    cnt_t Count;

    IDT_Table=(struct RME_X64_IDT_Entry*)(RME_X64_Layout.PerCPU_Start+RME_X64_CPU_Cnt*2*RME_POW2(RME_PGTBL_SIZE_4K));
ffffffff8020c966:	48 8b 15 b3 03 06 00 	mov    0x603b3(%rip),%rdx        # ffffffff8026cd20 <RME_X64_Layout+0x20>
ffffffff8020c96d:	48 8b 1d 6c 03 06 00 	mov    0x6036c(%rip),%rbx        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
ffffffff8020c974:	48 89 d8             	mov    %rbx,%rax
ffffffff8020c977:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8020c97b:	48 8d 1c 10          	lea    (%rax,%rdx,1),%rbx
ffffffff8020c97f:	48 8d 43 05          	lea    0x5(%rbx),%rax
ffffffff8020c983:	48 8d 93 05 10 00 00 	lea    0x1005(%rbx),%rdx
ffffffff8020c98a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
        IDT_Table[Count].Type_Attr=0;
ffffffff8020c990:	c6 00 00             	movb   $0x0,(%rax)
ffffffff8020c993:	48 83 c0 10          	add    $0x10,%rax
    ptr_t TSS_Table;
    cnt_t Count;

    IDT_Table=(struct RME_X64_IDT_Entry*)(RME_X64_Layout.PerCPU_Start+RME_X64_CPU_Cnt*2*RME_POW2(RME_PGTBL_SIZE_4K));
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
ffffffff8020c997:	48 39 d0             	cmp    %rdx,%rax
ffffffff8020c99a:	75 f4                	jne    ffffffff8020c990 <__RME_X64_CPU_Local_Init+0x30>
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8020c99c:	48 c7 c0 e3 b8 20 80 	mov    $0xffffffff8020b8e3,%rax
ffffffff8020c9a3:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8020c9a8:	bf 08 00 00 00       	mov    $0x8,%edi
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8020c9ad:	66 89 03             	mov    %ax,(%rbx)
ffffffff8020c9b0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020c9b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020c9b7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020c9bb:	89 43 08             	mov    %eax,0x8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8020c9be:	48 c7 c0 ef b8 20 80 	mov    $0xffffffff8020b8ef,%rax
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8020c9c5:	66 89 53 06          	mov    %dx,0x6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8020c9c9:	66 89 43 10          	mov    %ax,0x10(%rbx)
ffffffff8020c9cd:	48 89 c2             	mov    %rax,%rdx
ffffffff8020c9d0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020c9d4:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8020c9d8:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    for(Count=0;Count<256;Count++)
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8020c9de:	89 43 18             	mov    %eax,0x18(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8020c9e1:	48 c7 c0 fb b8 20 80 	mov    $0xffffffff8020b8fb,%rax
    for(Count=0;Count<256;Count++)
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8020c9e8:	66 89 53 16          	mov    %dx,0x16(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8020c9ec:	66 89 43 20          	mov    %ax,0x20(%rbx)
ffffffff8020c9f0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020c9f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020c9f7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020c9fb:	89 43 28             	mov    %eax,0x28(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8020c9fe:	48 c7 c0 07 b9 20 80 	mov    $0xffffffff8020b907,%rax
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8020ca05:	66 89 53 26          	mov    %dx,0x26(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8020ca09:	66 89 43 30          	mov    %ax,0x30(%rbx)
ffffffff8020ca0d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ca10:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ca14:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ca18:	41 b9 08 00 00 00    	mov    $0x8,%r9d
ffffffff8020ca1e:	89 43 38             	mov    %eax,0x38(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8020ca21:	48 c7 c0 13 b9 20 80 	mov    $0xffffffff8020b913,%rax

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8020ca28:	66 89 53 36          	mov    %dx,0x36(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8020ca2c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ca2f:	66 89 43 40          	mov    %ax,0x40(%rbx)
ffffffff8020ca33:	41 ba 08 00 00 00    	mov    $0x8,%r10d
ffffffff8020ca39:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ca3d:	48 c1 e8 20          	shr    $0x20,%rax
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8020ca41:	66 89 73 02          	mov    %si,0x2(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8020ca45:	66 89 7b 12          	mov    %di,0x12(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8020ca49:	66 44 89 43 22       	mov    %r8w,0x22(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8020ca4e:	41 bb 08 00 00 00    	mov    $0x8,%r11d

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8020ca54:	66 44 89 4b 32       	mov    %r9w,0x32(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8020ca59:	66 44 89 53 42       	mov    %r10w,0x42(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8020ca5e:	bd 08 00 00 00       	mov    $0x8,%ebp
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8020ca63:	c6 43 04 00          	movb   $0x0,0x4(%rbx)
ffffffff8020ca67:	c6 43 05 8e          	movb   $0x8e,0x5(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8020ca6b:	b9 08 00 00 00       	mov    $0x8,%ecx
    /* Clean up the whole IDT */
    for(Count=0;Count<256;Count++)
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
ffffffff8020ca70:	c7 43 0c 00 00 00 00 	movl   $0x0,0xc(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8020ca77:	c6 43 14 00          	movb   $0x0,0x14(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8020ca7b:	be 08 00 00 00       	mov    $0x8,%esi
    for(Count=0;Count<256;Count++)
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
ffffffff8020ca80:	c6 43 15 8e          	movb   $0x8e,0x15(%rbx)
ffffffff8020ca84:	c7 43 1c 00 00 00 00 	movl   $0x0,0x1c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8020ca8b:	bf 08 00 00 00       	mov    $0x8,%edi
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8020ca90:	c6 43 24 00          	movb   $0x0,0x24(%rbx)
ffffffff8020ca94:	c6 43 25 8e          	movb   $0x8e,0x25(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8020ca98:	41 b8 08 00 00 00    	mov    $0x8,%r8d
        IDT_Table[Count].Type_Attr=0;

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
ffffffff8020ca9e:	c7 43 2c 00 00 00 00 	movl   $0x0,0x2c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8020caa5:	c6 43 34 00          	movb   $0x0,0x34(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8020caa9:	41 b9 08 00 00 00    	mov    $0x8,%r9d

    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
ffffffff8020caaf:	c6 43 35 ee          	movb   $0xee,0x35(%rbx)
ffffffff8020cab3:	c7 43 3c 00 00 00 00 	movl   $0x0,0x3c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8020caba:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8020cac0:	c6 43 44 00          	movb   $0x0,0x44(%rbx)
ffffffff8020cac4:	c6 43 45 8e          	movb   $0x8e,0x45(%rbx)
ffffffff8020cac8:	66 89 53 46          	mov    %dx,0x46(%rbx)
ffffffff8020cacc:	89 43 48             	mov    %eax,0x48(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8020cacf:	48 c7 c0 1c b9 20 80 	mov    $0xffffffff8020b91c,%rax
ffffffff8020cad6:	66 89 43 50          	mov    %ax,0x50(%rbx)
ffffffff8020cada:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cadd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cae1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cae5:	89 43 58             	mov    %eax,0x58(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8020cae8:	48 c7 c0 25 b9 20 80 	mov    $0xffffffff8020b925,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8020caef:	66 89 53 56          	mov    %dx,0x56(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8020caf3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020caf6:	66 89 43 60          	mov    %ax,0x60(%rbx)
ffffffff8020cafa:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cafe:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8020cb02:	66 44 89 5b 52       	mov    %r11w,0x52(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8020cb07:	66 89 53 66          	mov    %dx,0x66(%rbx)
ffffffff8020cb0b:	89 43 68             	mov    %eax,0x68(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff8020cb0e:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020cb13:	48 c7 c0 2e b9 20 80 	mov    $0xffffffff8020b92e,%rax
ffffffff8020cb1a:	66 89 53 72          	mov    %dx,0x72(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8020cb1e:	66 89 6b 62          	mov    %bp,0x62(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff8020cb22:	66 89 43 70          	mov    %ax,0x70(%rbx)
ffffffff8020cb26:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cb29:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cb2d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cb31:	89 43 78             	mov    %eax,0x78(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8020cb34:	48 c7 c0 37 b9 20 80 	mov    $0xffffffff8020b937,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff8020cb3b:	66 89 53 76          	mov    %dx,0x76(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8020cb3f:	66 89 83 80 00 00 00 	mov    %ax,0x80(%rbx)
ffffffff8020cb46:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cb49:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cb4d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cb51:	66 89 8b 82 00 00 00 	mov    %cx,0x82(%rbx)
ffffffff8020cb58:	89 83 88 00 00 00    	mov    %eax,0x88(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8020cb5e:	48 c7 c0 3e b9 20 80 	mov    $0xffffffff8020b93e,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8020cb65:	66 89 93 86 00 00 00 	mov    %dx,0x86(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8020cb6c:	66 89 83 90 00 00 00 	mov    %ax,0x90(%rbx)
ffffffff8020cb73:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cb76:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cb7a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cb7e:	66 89 b3 92 00 00 00 	mov    %si,0x92(%rbx)
    /* Install the vectors - only the INT3 is trap (for debugging), all other ones are interrupt */
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
ffffffff8020cb85:	c7 43 4c 00 00 00 00 	movl   $0x0,0x4c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8020cb8c:	c6 43 54 00          	movb   $0x0,0x54(%rbx)
ffffffff8020cb90:	c6 43 55 8e          	movb   $0x8e,0x55(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8020cb94:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_DE, RME_X64_IDT_VECT, __RME_X64_FAULT_DE_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
ffffffff8020cb9a:	c7 43 5c 00 00 00 00 	movl   $0x0,0x5c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8020cba1:	c6 43 64 00          	movb   $0x0,0x64(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8020cba5:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_DB, RME_X64_IDT_VECT, __RME_X64_TRAP_DB_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
ffffffff8020cbaa:	c6 43 65 8e          	movb   $0x8e,0x65(%rbx)
ffffffff8020cbae:	c7 43 6c 00 00 00 00 	movl   $0x0,0x6c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8020cbb5:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff8020cbba:	c6 43 74 00          	movb   $0x0,0x74(%rbx)
ffffffff8020cbbe:	c6 43 75 8e          	movb   $0x8e,0x75(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8020cbc2:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_NMI, RME_X64_IDT_VECT, __RME_X64_INT_NMI_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_BP, RME_X64_IDT_TRAP, __RME_X64_TRAP_BP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
ffffffff8020cbc7:	c7 43 7c 00 00 00 00 	movl   $0x0,0x7c(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
ffffffff8020cbce:	c6 83 84 00 00 00 00 	movb   $0x0,0x84(%rbx)
ffffffff8020cbd5:	c6 83 85 00 00 00 8e 	movb   $0x8e,0x85(%rbx)
ffffffff8020cbdc:	c7 83 8c 00 00 00 00 	movl   $0x0,0x8c(%rbx)
ffffffff8020cbe3:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8020cbe6:	c6 83 94 00 00 00 00 	movb   $0x0,0x94(%rbx)
ffffffff8020cbed:	89 83 98 00 00 00    	mov    %eax,0x98(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8020cbf3:	48 c7 c0 47 b9 20 80 	mov    $0xffffffff8020b947,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8020cbfa:	66 89 93 96 00 00 00 	mov    %dx,0x96(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8020cc01:	66 89 83 a0 00 00 00 	mov    %ax,0xa0(%rbx)
ffffffff8020cc08:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cc0b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cc0f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cc13:	66 89 bb a2 00 00 00 	mov    %di,0xa2(%rbx)
ffffffff8020cc1a:	89 83 a8 00 00 00    	mov    %eax,0xa8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8020cc20:	48 c7 c0 4e b9 20 80 	mov    $0xffffffff8020b94e,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8020cc27:	66 89 93 a6 00 00 00 	mov    %dx,0xa6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8020cc2e:	66 89 83 b0 00 00 00 	mov    %ax,0xb0(%rbx)
ffffffff8020cc35:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cc38:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cc3c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cc40:	89 83 b8 00 00 00    	mov    %eax,0xb8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8020cc46:	48 c7 c0 55 b9 20 80 	mov    $0xffffffff8020b955,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8020cc4d:	66 89 93 b6 00 00 00 	mov    %dx,0xb6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8020cc54:	66 89 83 c0 00 00 00 	mov    %ax,0xc0(%rbx)
ffffffff8020cc5b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cc5e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cc62:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8020cc66:	66 44 89 83 b2 00 00 	mov    %r8w,0xb2(%rbx)
ffffffff8020cc6d:	00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8020cc6e:	89 83 c8 00 00 00    	mov    %eax,0xc8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8020cc74:	48 c7 c0 5c b9 20 80 	mov    $0xffffffff8020b95c,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8020cc7b:	66 89 93 c6 00 00 00 	mov    %dx,0xc6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8020cc82:	66 89 83 d0 00 00 00 	mov    %ax,0xd0(%rbx)
ffffffff8020cc89:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cc8c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cc90:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cc94:	89 83 d8 00 00 00    	mov    %eax,0xd8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8020cc9a:	48 c7 c0 63 b9 20 80 	mov    $0xffffffff8020b963,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8020cca1:	66 44 89 8b c2 00 00 	mov    %r9w,0xc2(%rbx)
ffffffff8020cca8:	00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8020cca9:	66 44 89 93 d2 00 00 	mov    %r10w,0xd2(%rbx)
ffffffff8020ccb0:	00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8020ccb1:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8020ccb6:	66 89 93 d6 00 00 00 	mov    %dx,0xd6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8020ccbd:	c6 83 95 00 00 00 8e 	movb   $0x8e,0x95(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8020ccc4:	48 89 c2             	mov    %rax,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_TRAP_OF, RME_X64_IDT_VECT, __RME_X64_TRAP_OF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
ffffffff8020ccc7:	c7 83 9c 00 00 00 00 	movl   $0x0,0x9c(%rbx)
ffffffff8020ccce:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8020ccd1:	c6 83 a4 00 00 00 00 	movb   $0x0,0xa4(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8020ccd8:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_BR, RME_X64_IDT_VECT, __RME_X64_FAULT_BR_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
ffffffff8020ccdc:	c6 83 a5 00 00 00 8e 	movb   $0x8e,0xa5(%rbx)
ffffffff8020cce3:	c7 83 ac 00 00 00 00 	movl   $0x0,0xac(%rbx)
ffffffff8020ccea:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8020cced:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8020ccf3:	c6 83 b4 00 00 00 00 	movb   $0x0,0xb4(%rbx)
ffffffff8020ccfa:	c6 83 b5 00 00 00 8e 	movb   $0x8e,0xb5(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8020cd01:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_UD, RME_X64_IDT_VECT, __RME_X64_FAULT_UD_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
ffffffff8020cd07:	c7 83 bc 00 00 00 00 	movl   $0x0,0xbc(%rbx)
ffffffff8020cd0e:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8020cd11:	c6 83 c4 00 00 00 00 	movb   $0x0,0xc4(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8020cd18:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NM, RME_X64_IDT_VECT, __RME_X64_FAULT_NM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_DF, RME_X64_IDT_VECT, __RME_X64_ABORT_DF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
ffffffff8020cd1e:	c6 83 c5 00 00 00 8e 	movb   $0x8e,0xc5(%rbx)
ffffffff8020cd25:	c7 83 cc 00 00 00 00 	movl   $0x0,0xcc(%rbx)
ffffffff8020cd2c:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
ffffffff8020cd2f:	c6 83 d4 00 00 00 00 	movb   $0x0,0xd4(%rbx)
ffffffff8020cd36:	c6 83 d5 00 00 00 8e 	movb   $0x8e,0xd5(%rbx)
ffffffff8020cd3d:	c7 83 dc 00 00 00 00 	movl   $0x0,0xdc(%rbx)
ffffffff8020cd44:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8020cd47:	66 89 83 e0 00 00 00 	mov    %ax,0xe0(%rbx)
ffffffff8020cd4e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cd52:	89 83 e8 00 00 00    	mov    %eax,0xe8(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8020cd58:	48 c7 c0 6a b9 20 80 	mov    $0xffffffff8020b96a,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8020cd5f:	66 89 93 e6 00 00 00 	mov    %dx,0xe6(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8020cd66:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cd69:	66 89 83 00 01 00 00 	mov    %ax,0x100(%rbx)
ffffffff8020cd70:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cd74:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cd78:	89 83 08 01 00 00    	mov    %eax,0x108(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8020cd7e:	48 c7 c0 73 b9 20 80 	mov    $0xffffffff8020b973,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8020cd85:	66 89 93 06 01 00 00 	mov    %dx,0x106(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8020cd8c:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020cd91:	66 89 83 10 01 00 00 	mov    %ax,0x110(%rbx)
ffffffff8020cd98:	66 89 93 12 01 00 00 	mov    %dx,0x112(%rbx)
ffffffff8020cd9f:	48 89 c2             	mov    %rax,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8020cda2:	66 44 89 9b e2 00 00 	mov    %r11w,0xe2(%rbx)
ffffffff8020cda9:	00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8020cdaa:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cdae:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8020cdb2:	66 89 ab 02 01 00 00 	mov    %bp,0x102(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8020cdb9:	89 83 18 01 00 00    	mov    %eax,0x118(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8020cdbf:	48 c7 c0 7a b9 20 80 	mov    $0xffffffff8020b97a,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8020cdc6:	66 89 93 16 01 00 00 	mov    %dx,0x116(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8020cdcd:	66 89 83 20 01 00 00 	mov    %ax,0x120(%rbx)
ffffffff8020cdd4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cdd7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cddb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cddf:	89 83 28 01 00 00    	mov    %eax,0x128(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8020cde5:	48 c7 c0 83 b9 20 80 	mov    $0xffffffff8020b983,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8020cdec:	66 89 93 26 01 00 00 	mov    %dx,0x126(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8020cdf3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cdf6:	66 89 83 30 01 00 00 	mov    %ax,0x130(%rbx)
ffffffff8020cdfd:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ce01:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8020ce05:	66 89 8b 22 01 00 00 	mov    %cx,0x122(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8020ce0c:	66 89 b3 32 01 00 00 	mov    %si,0x132(%rbx)
ffffffff8020ce13:	66 89 93 36 01 00 00 	mov    %dx,0x136(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8020ce1a:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8020ce20:	c6 83 e4 00 00 00 00 	movb   $0x0,0xe4(%rbx)
ffffffff8020ce27:	c6 83 e5 00 00 00 8e 	movb   $0x8e,0xe5(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8020ce2e:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_OLD_MF, RME_X64_IDT_VECT, __RME_X64_ABORT_OLD_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
ffffffff8020ce33:	c7 83 ec 00 00 00 00 	movl   $0x0,0xec(%rbx)
ffffffff8020ce3a:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8020ce3d:	c6 83 04 01 00 00 00 	movb   $0x0,0x104(%rbx)

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8020ce44:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_TS, RME_X64_IDT_VECT, __RME_X64_FAULT_TS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
ffffffff8020ce49:	c6 83 05 01 00 00 8e 	movb   $0x8e,0x105(%rbx)
ffffffff8020ce50:	c7 83 0c 01 00 00 00 	movl   $0x0,0x10c(%rbx)
ffffffff8020ce57:	00 00 00 

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8020ce5a:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_NP, RME_X64_IDT_VECT, __RME_X64_FAULT_NP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_SS, RME_X64_IDT_VECT, __RME_X64_FAULT_SS_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
ffffffff8020ce5f:	c6 83 14 01 00 00 00 	movb   $0x0,0x114(%rbx)
ffffffff8020ce66:	c6 83 15 01 00 00 8e 	movb   $0x8e,0x115(%rbx)
ffffffff8020ce6d:	c7 83 1c 01 00 00 00 	movl   $0x0,0x11c(%rbx)
ffffffff8020ce74:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
ffffffff8020ce77:	c6 83 24 01 00 00 00 	movb   $0x0,0x124(%rbx)
ffffffff8020ce7e:	c6 83 25 01 00 00 8e 	movb   $0x8e,0x125(%rbx)
ffffffff8020ce85:	c7 83 2c 01 00 00 00 	movl   $0x0,0x12c(%rbx)
ffffffff8020ce8c:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8020ce8f:	c6 83 34 01 00 00 00 	movb   $0x0,0x134(%rbx)
ffffffff8020ce96:	c6 83 35 01 00 00 8e 	movb   $0x8e,0x135(%rbx)
ffffffff8020ce9d:	89 83 38 01 00 00    	mov    %eax,0x138(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8020cea3:	48 c7 c0 8c b9 20 80 	mov    $0xffffffff8020b98c,%rax
ffffffff8020ceaa:	66 89 bb 42 01 00 00 	mov    %di,0x142(%rbx)
ffffffff8020ceb1:	66 89 83 40 01 00 00 	mov    %ax,0x140(%rbx)
ffffffff8020ceb8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cebb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cebf:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cec3:	89 83 48 01 00 00    	mov    %eax,0x148(%rbx)

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8020cec9:	48 c7 c0 ef b9 20 80 	mov    $0xffffffff8020b9ef,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8020ced0:	66 89 93 46 01 00 00 	mov    %dx,0x146(%rbx)

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8020ced7:	66 89 83 00 02 00 00 	mov    %ax,0x200(%rbx)
ffffffff8020cede:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cee1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cee5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cee9:	66 44 89 83 02 02 00 	mov    %r8w,0x202(%rbx)
ffffffff8020cef0:	00 
ffffffff8020cef1:	89 83 08 02 00 00    	mov    %eax,0x208(%rbx)
ffffffff8020cef7:	48 c7 c0 fb b9 20 80 	mov    $0xffffffff8020b9fb,%rax
ffffffff8020cefe:	66 89 93 06 02 00 00 	mov    %dx,0x206(%rbx)
ffffffff8020cf05:	66 89 83 10 02 00 00 	mov    %ax,0x210(%rbx)
ffffffff8020cf0c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cf0f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cf13:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cf17:	89 83 18 02 00 00    	mov    %eax,0x218(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8020cf1d:	48 c7 c0 07 ba 20 80 	mov    $0xffffffff8020ba07,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8020cf24:	66 89 93 16 02 00 00 	mov    %dx,0x216(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8020cf2b:	66 89 83 20 02 00 00 	mov    %ax,0x220(%rbx)
ffffffff8020cf32:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cf35:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cf39:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8020cf3d:	66 44 89 8b 12 02 00 	mov    %r9w,0x212(%rbx)
ffffffff8020cf44:	00 
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8020cf45:	89 83 28 02 00 00    	mov    %eax,0x228(%rbx)
ffffffff8020cf4b:	48 c7 c0 13 ba 20 80 	mov    $0xffffffff8020ba13,%rax
ffffffff8020cf52:	66 89 93 26 02 00 00 	mov    %dx,0x226(%rbx)
ffffffff8020cf59:	66 89 83 30 02 00 00 	mov    %ax,0x230(%rbx)
ffffffff8020cf60:	48 89 c2             	mov    %rax,%rdx
ffffffff8020cf63:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020cf67:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020cf6b:	66 44 89 93 22 02 00 	mov    %r10w,0x222(%rbx)
ffffffff8020cf72:	00 
ffffffff8020cf73:	66 44 89 9b 32 02 00 	mov    %r11w,0x232(%rbx)
ffffffff8020cf7a:	00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_GP, RME_X64_IDT_VECT, __RME_X64_FAULT_GP_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
ffffffff8020cf7b:	c7 83 3c 01 00 00 00 	movl   $0x0,0x13c(%rbx)
ffffffff8020cf82:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8020cf85:	c6 83 44 01 00 00 00 	movb   $0x0,0x144(%rbx)
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8020cf8c:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_PF, RME_X64_IDT_VECT, __RME_X64_FAULT_PF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_MF, RME_X64_IDT_VECT, __RME_X64_FAULT_MF_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_AC, RME_X64_IDT_VECT, __RME_X64_FAULT_AC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);
ffffffff8020cf91:	c6 83 45 01 00 00 8e 	movb   $0x8e,0x145(%rbx)
ffffffff8020cf98:	c7 83 4c 01 00 00 00 	movl   $0x0,0x14c(%rbx)
ffffffff8020cf9f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8020cfa2:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8020cfa8:	c6 83 04 02 00 00 00 	movb   $0x0,0x204(%rbx)
ffffffff8020cfaf:	c6 83 05 02 00 00 8e 	movb   $0x8e,0x205(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8020cfb6:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8020cfbc:	c7 83 0c 02 00 00 00 	movl   $0x0,0x20c(%rbx)
ffffffff8020cfc3:	00 00 00 
ffffffff8020cfc6:	c6 83 14 02 00 00 00 	movb   $0x0,0x214(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8020cfcd:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_SET_IDT(IDT_Table, RME_X64_ABORT_MC, RME_X64_IDT_VECT, __RME_X64_ABORT_MC_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
ffffffff8020cfd3:	c6 83 15 02 00 00 8e 	movb   $0x8e,0x215(%rbx)
ffffffff8020cfda:	c7 83 1c 02 00 00 00 	movl   $0x0,0x21c(%rbx)
ffffffff8020cfe1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020cfe4:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8020cfea:	c6 83 24 02 00 00 00 	movb   $0x0,0x224(%rbx)
ffffffff8020cff1:	c6 83 25 02 00 00 8e 	movb   $0x8e,0x225(%rbx)
ffffffff8020cff8:	c7 83 2c 02 00 00 00 	movl   $0x0,0x22c(%rbx)
ffffffff8020cfff:	00 00 00 
ffffffff8020d002:	c6 83 34 02 00 00 00 	movb   $0x0,0x234(%rbx)
ffffffff8020d009:	c6 83 35 02 00 00 8e 	movb   $0x8e,0x235(%rbx)
ffffffff8020d010:	89 83 38 02 00 00    	mov    %eax,0x238(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8020d016:	48 c7 c0 1f ba 20 80 	mov    $0xffffffff8020ba1f,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8020d01d:	66 89 93 36 02 00 00 	mov    %dx,0x236(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8020d024:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d027:	66 89 83 40 02 00 00 	mov    %ax,0x240(%rbx)
ffffffff8020d02e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d032:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d036:	66 89 ab 42 02 00 00 	mov    %bp,0x242(%rbx)
ffffffff8020d03d:	66 89 93 46 02 00 00 	mov    %dx,0x246(%rbx)
ffffffff8020d044:	89 83 48 02 00 00    	mov    %eax,0x248(%rbx)
ffffffff8020d04a:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020d04f:	48 c7 c0 2b ba 20 80 	mov    $0xffffffff8020ba2b,%rax
ffffffff8020d056:	66 89 93 52 02 00 00 	mov    %dx,0x252(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8020d05d:	66 89 8b 62 02 00 00 	mov    %cx,0x262(%rbx)
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8020d064:	66 89 83 50 02 00 00 	mov    %ax,0x250(%rbx)
ffffffff8020d06b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d06e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d072:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d076:	89 83 58 02 00 00    	mov    %eax,0x258(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8020d07c:	48 c7 c0 37 ba 20 80 	mov    $0xffffffff8020ba37,%rax
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8020d083:	66 89 93 56 02 00 00 	mov    %dx,0x256(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8020d08a:	66 89 83 60 02 00 00 	mov    %ax,0x260(%rbx)
ffffffff8020d091:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d094:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d098:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d09c:	66 89 b3 72 02 00 00 	mov    %si,0x272(%rbx)
ffffffff8020d0a3:	89 83 68 02 00 00    	mov    %eax,0x268(%rbx)
ffffffff8020d0a9:	48 c7 c0 43 ba 20 80 	mov    $0xffffffff8020ba43,%rax
ffffffff8020d0b0:	66 89 93 66 02 00 00 	mov    %dx,0x266(%rbx)
ffffffff8020d0b7:	66 89 83 70 02 00 00 	mov    %ax,0x270(%rbx)
ffffffff8020d0be:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d0c1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d0c5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d0c9:	89 83 78 02 00 00    	mov    %eax,0x278(%rbx)

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8020d0cf:	48 c7 c0 4f ba 20 80 	mov    $0xffffffff8020ba4f,%rax

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8020d0d6:	66 89 93 76 02 00 00 	mov    %dx,0x276(%rbx)

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8020d0dd:	66 89 83 80 02 00 00 	mov    %ax,0x280(%rbx)
ffffffff8020d0e4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d0e7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d0eb:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_XM, RME_X64_IDT_VECT, __RME_X64_FAULT_XM_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
ffffffff8020d0ef:	c7 83 3c 02 00 00 00 	movl   $0x0,0x23c(%rbx)
ffffffff8020d0f6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8020d0f9:	c6 83 44 02 00 00 00 	movb   $0x0,0x244(%rbx)
ffffffff8020d100:	c6 83 45 02 00 00 8e 	movb   $0x8e,0x245(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020d107:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8020d10c:	c7 83 4c 02 00 00 00 	movl   $0x0,0x24c(%rbx)
ffffffff8020d113:	00 00 00 
ffffffff8020d116:	c6 83 54 02 00 00 00 	movb   $0x0,0x254(%rbx)
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8020d11d:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_SET_IDT(IDT_Table, RME_X64_FAULT_VE, RME_X64_IDT_VECT, __RME_X64_FAULT_VE_Handler);

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
ffffffff8020d122:	c6 83 55 02 00 00 8e 	movb   $0x8e,0x255(%rbx)
ffffffff8020d129:	c7 83 5c 02 00 00 00 	movl   $0x0,0x25c(%rbx)
ffffffff8020d130:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8020d133:	be 08 00 00 00       	mov    $0x8,%esi

    /* Install user handlers */
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);
ffffffff8020d138:	c6 83 64 02 00 00 00 	movb   $0x0,0x264(%rbx)
ffffffff8020d13f:	c6 83 65 02 00 00 8e 	movb   $0x8e,0x265(%rbx)
ffffffff8020d146:	c7 83 6c 02 00 00 00 	movl   $0x0,0x26c(%rbx)
ffffffff8020d14d:	00 00 00 
ffffffff8020d150:	c6 83 74 02 00 00 00 	movb   $0x0,0x274(%rbx)
ffffffff8020d157:	c6 83 75 02 00 00 8e 	movb   $0x8e,0x275(%rbx)
ffffffff8020d15e:	c7 83 7c 02 00 00 00 	movl   $0x0,0x27c(%rbx)
ffffffff8020d165:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8020d168:	66 89 bb 82 02 00 00 	mov    %di,0x282(%rbx)
ffffffff8020d16f:	89 83 88 02 00 00    	mov    %eax,0x288(%rbx)
ffffffff8020d175:	48 c7 c0 5b ba 20 80 	mov    $0xffffffff8020ba5b,%rax
ffffffff8020d17c:	66 89 93 86 02 00 00 	mov    %dx,0x286(%rbx)
ffffffff8020d183:	66 89 83 90 02 00 00 	mov    %ax,0x290(%rbx)
ffffffff8020d18a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d18d:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d191:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d195:	66 44 89 83 92 02 00 	mov    %r8w,0x292(%rbx)
ffffffff8020d19c:	00 
ffffffff8020d19d:	89 83 98 02 00 00    	mov    %eax,0x298(%rbx)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8020d1a3:	48 c7 c0 67 ba 20 80 	mov    $0xffffffff8020ba67,%rax
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8020d1aa:	66 89 93 96 02 00 00 	mov    %dx,0x296(%rbx)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8020d1b1:	66 89 83 a0 02 00 00 	mov    %ax,0x2a0(%rbx)
ffffffff8020d1b8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d1bb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d1bf:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d1c3:	89 83 a8 02 00 00    	mov    %eax,0x2a8(%rbx)
ffffffff8020d1c9:	48 c7 c0 73 ba 20 80 	mov    $0xffffffff8020ba73,%rax
ffffffff8020d1d0:	66 89 93 a6 02 00 00 	mov    %dx,0x2a6(%rbx)
ffffffff8020d1d7:	66 89 83 b0 02 00 00 	mov    %ax,0x2b0(%rbx)
ffffffff8020d1de:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d1e1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d1e5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d1e9:	66 44 89 8b a2 02 00 	mov    %r9w,0x2a2(%rbx)
ffffffff8020d1f0:	00 
ffffffff8020d1f1:	89 83 b8 02 00 00    	mov    %eax,0x2b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020d1f7:	48 c7 c0 7f ba 20 80 	mov    $0xffffffff8020ba7f,%rax
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8020d1fe:	66 89 93 b6 02 00 00 	mov    %dx,0x2b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020d205:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d208:	66 89 83 c0 02 00 00 	mov    %ax,0x2c0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8020d20f:	66 44 89 93 b2 02 00 	mov    %r10w,0x2b2(%rbx)
ffffffff8020d216:	00 
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020d217:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d21b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d21f:	66 44 89 9b c2 02 00 	mov    %r11w,0x2c2(%rbx)
ffffffff8020d226:	00 
ffffffff8020d227:	89 83 c8 02 00 00    	mov    %eax,0x2c8(%rbx)
ffffffff8020d22d:	48 c7 c0 8b ba 20 80 	mov    $0xffffffff8020ba8b,%rax
ffffffff8020d234:	66 89 93 c6 02 00 00 	mov    %dx,0x2c6(%rbx)
ffffffff8020d23b:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8020d23e:	c6 83 84 02 00 00 00 	movb   $0x0,0x284(%rbx)
ffffffff8020d245:	c6 83 85 02 00 00 8e 	movb   $0x8e,0x285(%rbx)
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020d24c:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 32); RME_X64_USER_IDT(IDT_Table, 33);
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
ffffffff8020d250:	c7 83 8c 02 00 00 00 	movl   $0x0,0x28c(%rbx)
ffffffff8020d257:	00 00 00 
ffffffff8020d25a:	c6 83 94 02 00 00 00 	movb   $0x0,0x294(%rbx)
ffffffff8020d261:	c6 83 95 02 00 00 8e 	movb   $0x8e,0x295(%rbx)
ffffffff8020d268:	c7 83 9c 02 00 00 00 	movl   $0x0,0x29c(%rbx)
ffffffff8020d26f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8020d272:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8020d277:	c6 83 a4 02 00 00 00 	movb   $0x0,0x2a4(%rbx)
ffffffff8020d27e:	c6 83 a5 02 00 00 8e 	movb   $0x8e,0x2a5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8020d285:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8020d28b:	c7 83 ac 02 00 00 00 	movl   $0x0,0x2ac(%rbx)
ffffffff8020d292:	00 00 00 
ffffffff8020d295:	c6 83 b4 02 00 00 00 	movb   $0x0,0x2b4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8020d29c:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 34); RME_X64_USER_IDT(IDT_Table, 35);
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
ffffffff8020d2a2:	c6 83 b5 02 00 00 8e 	movb   $0x8e,0x2b5(%rbx)
ffffffff8020d2a9:	c7 83 bc 02 00 00 00 	movl   $0x0,0x2bc(%rbx)
ffffffff8020d2b0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8020d2b3:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020d2b9:	c6 83 c4 02 00 00 00 	movb   $0x0,0x2c4(%rbx)
ffffffff8020d2c0:	c6 83 c5 02 00 00 8e 	movb   $0x8e,0x2c5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8020d2c7:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020d2cd:	c7 83 cc 02 00 00 00 	movl   $0x0,0x2cc(%rbx)
ffffffff8020d2d4:	00 00 00 
ffffffff8020d2d7:	66 89 83 d0 02 00 00 	mov    %ax,0x2d0(%rbx)
ffffffff8020d2de:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d2e2:	66 89 93 d6 02 00 00 	mov    %dx,0x2d6(%rbx)
ffffffff8020d2e9:	89 83 d8 02 00 00    	mov    %eax,0x2d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8020d2ef:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020d2f4:	48 c7 c0 97 ba 20 80 	mov    $0xffffffff8020ba97,%rax
ffffffff8020d2fb:	66 89 93 e2 02 00 00 	mov    %dx,0x2e2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020d302:	66 89 ab d2 02 00 00 	mov    %bp,0x2d2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8020d309:	66 89 83 e0 02 00 00 	mov    %ax,0x2e0(%rbx)
ffffffff8020d310:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d313:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d317:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d31b:	89 83 e8 02 00 00    	mov    %eax,0x2e8(%rbx)
ffffffff8020d321:	48 c7 c0 a3 ba 20 80 	mov    $0xffffffff8020baa3,%rax
ffffffff8020d328:	66 89 93 e6 02 00 00 	mov    %dx,0x2e6(%rbx)
ffffffff8020d32f:	66 89 83 f0 02 00 00 	mov    %ax,0x2f0(%rbx)
ffffffff8020d336:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d339:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d33d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d341:	66 89 8b f2 02 00 00 	mov    %cx,0x2f2(%rbx)
ffffffff8020d348:	89 83 f8 02 00 00    	mov    %eax,0x2f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8020d34e:	48 c7 c0 af ba 20 80 	mov    $0xffffffff8020baaf,%rax
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8020d355:	66 89 93 f6 02 00 00 	mov    %dx,0x2f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8020d35c:	66 89 83 00 03 00 00 	mov    %ax,0x300(%rbx)
ffffffff8020d363:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d366:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d36a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d36e:	89 83 08 03 00 00    	mov    %eax,0x308(%rbx)
ffffffff8020d374:	48 c7 c0 bb ba 20 80 	mov    $0xffffffff8020babb,%rax
ffffffff8020d37b:	66 89 93 06 03 00 00 	mov    %dx,0x306(%rbx)
ffffffff8020d382:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d385:	66 89 83 10 03 00 00 	mov    %ax,0x310(%rbx)
ffffffff8020d38c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d390:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d394:	66 89 b3 02 03 00 00 	mov    %si,0x302(%rbx)
ffffffff8020d39b:	66 89 bb 12 03 00 00 	mov    %di,0x312(%rbx)
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020d3a2:	c6 83 d4 02 00 00 00 	movb   $0x0,0x2d4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8020d3a9:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 36); RME_X64_USER_IDT(IDT_Table, 37);
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
ffffffff8020d3ae:	c6 83 d5 02 00 00 8e 	movb   $0x8e,0x2d5(%rbx)
ffffffff8020d3b5:	c7 83 dc 02 00 00 00 	movl   $0x0,0x2dc(%rbx)
ffffffff8020d3bc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8020d3bf:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8020d3c4:	c6 83 e4 02 00 00 00 	movb   $0x0,0x2e4(%rbx)
ffffffff8020d3cb:	c6 83 e5 02 00 00 8e 	movb   $0x8e,0x2e5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8020d3d2:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8020d3d7:	c7 83 ec 02 00 00 00 	movl   $0x0,0x2ec(%rbx)
ffffffff8020d3de:	00 00 00 
ffffffff8020d3e1:	c6 83 f4 02 00 00 00 	movb   $0x0,0x2f4(%rbx)

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d3e8:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 38); RME_X64_USER_IDT(IDT_Table, 39);

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
ffffffff8020d3ed:	c6 83 f5 02 00 00 8e 	movb   $0x8e,0x2f5(%rbx)
ffffffff8020d3f4:	c7 83 fc 02 00 00 00 	movl   $0x0,0x2fc(%rbx)
ffffffff8020d3fb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8020d3fe:	c6 83 04 03 00 00 00 	movb   $0x0,0x304(%rbx)
ffffffff8020d405:	c6 83 05 03 00 00 8e 	movb   $0x8e,0x305(%rbx)
ffffffff8020d40c:	c7 83 0c 03 00 00 00 	movl   $0x0,0x30c(%rbx)
ffffffff8020d413:	00 00 00 
ffffffff8020d416:	c6 83 14 03 00 00 00 	movb   $0x0,0x314(%rbx)
ffffffff8020d41d:	c6 83 15 03 00 00 8e 	movb   $0x8e,0x315(%rbx)
ffffffff8020d424:	66 89 93 16 03 00 00 	mov    %dx,0x316(%rbx)
ffffffff8020d42b:	89 83 18 03 00 00    	mov    %eax,0x318(%rbx)

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8020d431:	48 c7 c0 c7 ba 20 80 	mov    $0xffffffff8020bac7,%rax
ffffffff8020d438:	66 44 89 83 22 03 00 	mov    %r8w,0x322(%rbx)
ffffffff8020d43f:	00 
ffffffff8020d440:	66 89 83 20 03 00 00 	mov    %ax,0x320(%rbx)
ffffffff8020d447:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d44a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d44e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d452:	89 83 28 03 00 00    	mov    %eax,0x328(%rbx)
ffffffff8020d458:	48 c7 c0 d3 ba 20 80 	mov    $0xffffffff8020bad3,%rax
ffffffff8020d45f:	66 89 93 26 03 00 00 	mov    %dx,0x326(%rbx)
ffffffff8020d466:	66 89 83 30 03 00 00 	mov    %ax,0x330(%rbx)
ffffffff8020d46d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d470:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d474:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d478:	66 44 89 8b 32 03 00 	mov    %r9w,0x332(%rbx)
ffffffff8020d47f:	00 
ffffffff8020d480:	89 83 38 03 00 00    	mov    %eax,0x338(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8020d486:	48 c7 c0 df ba 20 80 	mov    $0xffffffff8020badf,%rax
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8020d48d:	66 89 93 36 03 00 00 	mov    %dx,0x336(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8020d494:	66 89 83 40 03 00 00 	mov    %ax,0x340(%rbx)
ffffffff8020d49b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d49e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d4a2:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d4a6:	89 83 48 03 00 00    	mov    %eax,0x348(%rbx)
ffffffff8020d4ac:	48 c7 c0 eb ba 20 80 	mov    $0xffffffff8020baeb,%rax
ffffffff8020d4b3:	66 89 93 46 03 00 00 	mov    %dx,0x346(%rbx)
ffffffff8020d4ba:	66 89 83 50 03 00 00 	mov    %ax,0x350(%rbx)
ffffffff8020d4c1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d4c4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d4c8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d4cc:	66 44 89 93 42 03 00 	mov    %r10w,0x342(%rbx)
ffffffff8020d4d3:	00 
ffffffff8020d4d4:	89 83 58 03 00 00    	mov    %eax,0x358(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8020d4da:	48 c7 c0 f7 ba 20 80 	mov    $0xffffffff8020baf7,%rax
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8020d4e1:	66 89 93 56 03 00 00 	mov    %dx,0x356(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8020d4e8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d4eb:	66 89 83 60 03 00 00 	mov    %ax,0x360(%rbx)
ffffffff8020d4f2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d4f6:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8020d4fa:	66 44 89 9b 52 03 00 	mov    %r11w,0x352(%rbx)
ffffffff8020d501:	00 
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8020d502:	66 89 ab 62 03 00 00 	mov    %bp,0x362(%rbx)

    RME_X64_USER_IDT(IDT_Table, 40); RME_X64_USER_IDT(IDT_Table, 41);
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);
ffffffff8020d509:	c7 83 1c 03 00 00 00 	movl   $0x0,0x31c(%rbx)
ffffffff8020d510:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8020d513:	c6 83 24 03 00 00 00 	movb   $0x0,0x324(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d51a:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8020d520:	c6 83 25 03 00 00 8e 	movb   $0x8e,0x325(%rbx)
ffffffff8020d527:	c7 83 2c 03 00 00 00 	movl   $0x0,0x32c(%rbx)
ffffffff8020d52e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8020d531:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8020d537:	c6 83 34 03 00 00 00 	movb   $0x0,0x334(%rbx)
ffffffff8020d53e:	c6 83 35 03 00 00 8e 	movb   $0x8e,0x335(%rbx)
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8020d545:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 42); RME_X64_USER_IDT(IDT_Table, 43);
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
ffffffff8020d54b:	c7 83 3c 03 00 00 00 	movl   $0x0,0x33c(%rbx)
ffffffff8020d552:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8020d555:	c6 83 44 03 00 00 00 	movb   $0x0,0x344(%rbx)
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8020d55c:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8020d562:	c6 83 45 03 00 00 8e 	movb   $0x8e,0x345(%rbx)
ffffffff8020d569:	c7 83 4c 03 00 00 00 	movl   $0x0,0x34c(%rbx)
ffffffff8020d570:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8020d573:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 44); RME_X64_USER_IDT(IDT_Table, 45);
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
ffffffff8020d578:	c6 83 54 03 00 00 00 	movb   $0x0,0x354(%rbx)
ffffffff8020d57f:	c6 83 55 03 00 00 8e 	movb   $0x8e,0x355(%rbx)
ffffffff8020d586:	c7 83 5c 03 00 00 00 	movl   $0x0,0x35c(%rbx)
ffffffff8020d58d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8020d590:	c6 83 64 03 00 00 00 	movb   $0x0,0x364(%rbx)
ffffffff8020d597:	66 89 93 66 03 00 00 	mov    %dx,0x366(%rbx)
ffffffff8020d59e:	89 83 68 03 00 00    	mov    %eax,0x368(%rbx)
ffffffff8020d5a4:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020d5a9:	48 c7 c0 03 bb 20 80 	mov    $0xffffffff8020bb03,%rax
ffffffff8020d5b0:	66 89 93 72 03 00 00 	mov    %dx,0x372(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8020d5b7:	66 89 8b 82 03 00 00 	mov    %cx,0x382(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8020d5be:	66 89 83 70 03 00 00 	mov    %ax,0x370(%rbx)
ffffffff8020d5c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d5c8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d5cc:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d5d0:	89 83 78 03 00 00    	mov    %eax,0x378(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8020d5d6:	48 c7 c0 0f bb 20 80 	mov    $0xffffffff8020bb0f,%rax
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8020d5dd:	66 89 93 76 03 00 00 	mov    %dx,0x376(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8020d5e4:	66 89 83 80 03 00 00 	mov    %ax,0x380(%rbx)
ffffffff8020d5eb:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d5ee:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d5f2:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d5f6:	66 89 b3 92 03 00 00 	mov    %si,0x392(%rbx)
ffffffff8020d5fd:	89 83 88 03 00 00    	mov    %eax,0x388(%rbx)
ffffffff8020d603:	48 c7 c0 1b bb 20 80 	mov    $0xffffffff8020bb1b,%rax
ffffffff8020d60a:	66 89 93 86 03 00 00 	mov    %dx,0x386(%rbx)
ffffffff8020d611:	66 89 83 90 03 00 00 	mov    %ax,0x390(%rbx)
ffffffff8020d618:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d61b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d61f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d623:	89 83 98 03 00 00    	mov    %eax,0x398(%rbx)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d629:	48 c7 c0 27 bb 20 80 	mov    $0xffffffff8020bb27,%rax
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8020d630:	66 89 93 96 03 00 00 	mov    %dx,0x396(%rbx)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d637:	66 89 83 a0 03 00 00 	mov    %ax,0x3a0(%rbx)
ffffffff8020d63e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d641:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d645:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d649:	66 89 bb a2 03 00 00 	mov    %di,0x3a2(%rbx)
ffffffff8020d650:	89 83 a8 03 00 00    	mov    %eax,0x3a8(%rbx)
ffffffff8020d656:	48 c7 c0 33 bb 20 80 	mov    $0xffffffff8020bb33,%rax
ffffffff8020d65d:	66 89 93 a6 03 00 00 	mov    %dx,0x3a6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8020d664:	c6 83 65 03 00 00 8e 	movb   $0x8e,0x365(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d66b:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8020d66e:	c7 83 6c 03 00 00 00 	movl   $0x0,0x36c(%rbx)
ffffffff8020d675:	00 00 00 
ffffffff8020d678:	c6 83 74 03 00 00 00 	movb   $0x0,0x374(%rbx)
ffffffff8020d67f:	c6 83 75 03 00 00 8e 	movb   $0x8e,0x375(%rbx)
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d686:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 46); RME_X64_USER_IDT(IDT_Table, 47);
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
ffffffff8020d68a:	c7 83 7c 03 00 00 00 	movl   $0x0,0x37c(%rbx)
ffffffff8020d691:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8020d694:	c6 83 84 03 00 00 00 	movb   $0x0,0x384(%rbx)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8020d69b:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8020d6a0:	c6 83 85 03 00 00 8e 	movb   $0x8e,0x385(%rbx)
ffffffff8020d6a7:	c7 83 8c 03 00 00 00 	movl   $0x0,0x38c(%rbx)
ffffffff8020d6ae:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8020d6b1:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8020d6b6:	c6 83 94 03 00 00 00 	movb   $0x0,0x394(%rbx)
ffffffff8020d6bd:	c6 83 95 03 00 00 8e 	movb   $0x8e,0x395(%rbx)
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8020d6c4:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 48); RME_X64_USER_IDT(IDT_Table, 49);

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
ffffffff8020d6c9:	c7 83 9c 03 00 00 00 	movl   $0x0,0x39c(%rbx)
ffffffff8020d6d0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d6d3:	c6 83 a4 03 00 00 00 	movb   $0x0,0x3a4(%rbx)
ffffffff8020d6da:	c6 83 a5 03 00 00 8e 	movb   $0x8e,0x3a5(%rbx)
ffffffff8020d6e1:	c7 83 ac 03 00 00 00 	movl   $0x0,0x3ac(%rbx)
ffffffff8020d6e8:	00 00 00 
ffffffff8020d6eb:	66 89 83 b0 03 00 00 	mov    %ax,0x3b0(%rbx)
ffffffff8020d6f2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d6f6:	66 89 93 b6 03 00 00 	mov    %dx,0x3b6(%rbx)
ffffffff8020d6fd:	89 83 b8 03 00 00    	mov    %eax,0x3b8(%rbx)

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8020d703:	48 c7 c0 3f bb 20 80 	mov    $0xffffffff8020bb3f,%rax

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d70a:	66 44 89 83 b2 03 00 	mov    %r8w,0x3b2(%rbx)
ffffffff8020d711:	00 

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8020d712:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d715:	66 89 83 c0 03 00 00 	mov    %ax,0x3c0(%rbx)
ffffffff8020d71c:	66 44 89 8b c2 03 00 	mov    %r9w,0x3c2(%rbx)
ffffffff8020d723:	00 
ffffffff8020d724:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d728:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d72c:	66 44 89 93 d2 03 00 	mov    %r10w,0x3d2(%rbx)
ffffffff8020d733:	00 
ffffffff8020d734:	89 83 c8 03 00 00    	mov    %eax,0x3c8(%rbx)
ffffffff8020d73a:	48 c7 c0 4b bb 20 80 	mov    $0xffffffff8020bb4b,%rax
ffffffff8020d741:	66 89 93 c6 03 00 00 	mov    %dx,0x3c6(%rbx)
ffffffff8020d748:	66 89 83 d0 03 00 00 	mov    %ax,0x3d0(%rbx)
ffffffff8020d74f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d752:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d756:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d75a:	89 83 d8 03 00 00    	mov    %eax,0x3d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8020d760:	48 c7 c0 57 bb 20 80 	mov    $0xffffffff8020bb57,%rax
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8020d767:	66 89 93 d6 03 00 00 	mov    %dx,0x3d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8020d76e:	66 89 83 e0 03 00 00 	mov    %ax,0x3e0(%rbx)
ffffffff8020d775:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d778:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d77c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d780:	66 44 89 9b e2 03 00 	mov    %r11w,0x3e2(%rbx)
ffffffff8020d787:	00 
ffffffff8020d788:	89 83 e8 03 00 00    	mov    %eax,0x3e8(%rbx)
ffffffff8020d78e:	48 c7 c0 63 bb 20 80 	mov    $0xffffffff8020bb63,%rax
ffffffff8020d795:	66 89 93 e6 03 00 00 	mov    %dx,0x3e6(%rbx)
ffffffff8020d79c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d79f:	66 89 83 f0 03 00 00 	mov    %ax,0x3f0(%rbx)
ffffffff8020d7a6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d7aa:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d7ae:	66 89 ab f2 03 00 00 	mov    %bp,0x3f2(%rbx)

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d7b5:	c6 83 b4 03 00 00 00 	movb   $0x0,0x3b4(%rbx)

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8020d7bc:	66 89 93 f6 03 00 00 	mov    %dx,0x3f6(%rbx)

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d7c3:	c6 83 b5 03 00 00 8e 	movb   $0x8e,0x3b5(%rbx)

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8020d7ca:	ba 08 00 00 00       	mov    $0x8,%edx

    RME_X64_USER_IDT(IDT_Table, 50); RME_X64_USER_IDT(IDT_Table, 51);
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);
ffffffff8020d7cf:	c7 83 bc 03 00 00 00 	movl   $0x0,0x3bc(%rbx)
ffffffff8020d7d6:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8020d7d9:	c6 83 c4 03 00 00 00 	movb   $0x0,0x3c4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8020d7e0:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8020d7e6:	c6 83 c5 03 00 00 8e 	movb   $0x8e,0x3c5(%rbx)
ffffffff8020d7ed:	c7 83 cc 03 00 00 00 	movl   $0x0,0x3cc(%rbx)
ffffffff8020d7f4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8020d7f7:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8020d7fd:	c6 83 d4 03 00 00 00 	movb   $0x0,0x3d4(%rbx)
ffffffff8020d804:	c6 83 d5 03 00 00 8e 	movb   $0x8e,0x3d5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8020d80b:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 52); RME_X64_USER_IDT(IDT_Table, 53);
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
ffffffff8020d811:	c7 83 dc 03 00 00 00 	movl   $0x0,0x3dc(%rbx)
ffffffff8020d818:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8020d81b:	c6 83 e4 03 00 00 00 	movb   $0x0,0x3e4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8020d822:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8020d828:	c6 83 e5 03 00 00 8e 	movb   $0x8e,0x3e5(%rbx)
ffffffff8020d82f:	c7 83 ec 03 00 00 00 	movl   $0x0,0x3ec(%rbx)
ffffffff8020d836:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8020d839:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8020d83e:	c6 83 f4 03 00 00 00 	movb   $0x0,0x3f4(%rbx)
ffffffff8020d845:	c6 83 f5 03 00 00 8e 	movb   $0x8e,0x3f5(%rbx)
ffffffff8020d84c:	89 83 f8 03 00 00    	mov    %eax,0x3f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8020d852:	48 c7 c0 6f bb 20 80 	mov    $0xffffffff8020bb6f,%rax
ffffffff8020d859:	66 89 93 02 04 00 00 	mov    %dx,0x402(%rbx)
ffffffff8020d860:	66 89 83 00 04 00 00 	mov    %ax,0x400(%rbx)
ffffffff8020d867:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d86a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d86e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d872:	89 83 08 04 00 00    	mov    %eax,0x408(%rbx)
ffffffff8020d878:	48 c7 c0 7b bb 20 80 	mov    $0xffffffff8020bb7b,%rax
ffffffff8020d87f:	66 89 93 06 04 00 00 	mov    %dx,0x406(%rbx)
ffffffff8020d886:	66 89 83 10 04 00 00 	mov    %ax,0x410(%rbx)
ffffffff8020d88d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d890:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d894:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d898:	66 89 8b 12 04 00 00 	mov    %cx,0x412(%rbx)
ffffffff8020d89f:	89 83 18 04 00 00    	mov    %eax,0x418(%rbx)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8020d8a5:	48 c7 c0 87 bb 20 80 	mov    $0xffffffff8020bb87,%rax
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8020d8ac:	66 89 93 16 04 00 00 	mov    %dx,0x416(%rbx)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8020d8b3:	66 89 83 20 04 00 00 	mov    %ax,0x420(%rbx)
ffffffff8020d8ba:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d8bd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d8c1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d8c5:	89 83 28 04 00 00    	mov    %eax,0x428(%rbx)
ffffffff8020d8cb:	48 c7 c0 93 bb 20 80 	mov    $0xffffffff8020bb93,%rax
ffffffff8020d8d2:	66 89 93 26 04 00 00 	mov    %dx,0x426(%rbx)
ffffffff8020d8d9:	66 89 83 30 04 00 00 	mov    %ax,0x430(%rbx)
ffffffff8020d8e0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d8e3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d8e7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d8eb:	66 89 b3 22 04 00 00 	mov    %si,0x422(%rbx)
ffffffff8020d8f2:	89 83 38 04 00 00    	mov    %eax,0x438(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8020d8f8:	48 c7 c0 9f bb 20 80 	mov    $0xffffffff8020bb9f,%rax
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8020d8ff:	66 89 93 36 04 00 00 	mov    %dx,0x436(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8020d906:	66 89 83 40 04 00 00 	mov    %ax,0x440(%rbx)
ffffffff8020d90d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d910:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d914:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8020d918:	66 89 bb 32 04 00 00 	mov    %di,0x432(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8020d91f:	66 44 89 83 42 04 00 	mov    %r8w,0x442(%rbx)
ffffffff8020d926:	00 
    RME_X64_USER_IDT(IDT_Table, 54); RME_X64_USER_IDT(IDT_Table, 55);
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
ffffffff8020d927:	c7 83 fc 03 00 00 00 	movl   $0x0,0x3fc(%rbx)
ffffffff8020d92e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8020d931:	c6 83 04 04 00 00 00 	movb   $0x0,0x404(%rbx)
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8020d938:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8020d93d:	c6 83 05 04 00 00 8e 	movb   $0x8e,0x405(%rbx)
ffffffff8020d944:	c7 83 0c 04 00 00 00 	movl   $0x0,0x40c(%rbx)
ffffffff8020d94b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8020d94e:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8020d953:	c6 83 14 04 00 00 00 	movb   $0x0,0x414(%rbx)
ffffffff8020d95a:	c6 83 15 04 00 00 8e 	movb   $0x8e,0x415(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8020d961:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 56); RME_X64_USER_IDT(IDT_Table, 57);
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
ffffffff8020d966:	c7 83 1c 04 00 00 00 	movl   $0x0,0x41c(%rbx)
ffffffff8020d96d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8020d970:	c6 83 24 04 00 00 00 	movb   $0x0,0x424(%rbx)
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8020d977:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 58); RME_X64_USER_IDT(IDT_Table, 59);

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
ffffffff8020d97d:	c6 83 25 04 00 00 8e 	movb   $0x8e,0x425(%rbx)
ffffffff8020d984:	c7 83 2c 04 00 00 00 	movl   $0x0,0x42c(%rbx)
ffffffff8020d98b:	00 00 00 
ffffffff8020d98e:	c6 83 34 04 00 00 00 	movb   $0x0,0x434(%rbx)
ffffffff8020d995:	c6 83 35 04 00 00 8e 	movb   $0x8e,0x435(%rbx)
ffffffff8020d99c:	c7 83 3c 04 00 00 00 	movl   $0x0,0x43c(%rbx)
ffffffff8020d9a3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8020d9a6:	c6 83 44 04 00 00 00 	movb   $0x0,0x444(%rbx)
ffffffff8020d9ad:	c6 83 45 04 00 00 8e 	movb   $0x8e,0x445(%rbx)
ffffffff8020d9b4:	89 83 48 04 00 00    	mov    %eax,0x448(%rbx)
ffffffff8020d9ba:	48 c7 c0 ab bb 20 80 	mov    $0xffffffff8020bbab,%rax
ffffffff8020d9c1:	66 89 93 46 04 00 00 	mov    %dx,0x446(%rbx)
ffffffff8020d9c8:	66 89 83 50 04 00 00 	mov    %ax,0x450(%rbx)
ffffffff8020d9cf:	48 89 c2             	mov    %rax,%rdx
ffffffff8020d9d2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020d9d6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020d9da:	66 44 89 8b 52 04 00 	mov    %r9w,0x452(%rbx)
ffffffff8020d9e1:	00 
ffffffff8020d9e2:	89 83 58 04 00 00    	mov    %eax,0x458(%rbx)

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8020d9e8:	48 c7 c0 b7 bb 20 80 	mov    $0xffffffff8020bbb7,%rax

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8020d9ef:	66 89 93 56 04 00 00 	mov    %dx,0x456(%rbx)

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8020d9f6:	66 89 83 60 04 00 00 	mov    %ax,0x460(%rbx)
ffffffff8020d9fd:	48 89 c2             	mov    %rax,%rdx
ffffffff8020da00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020da04:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020da08:	89 83 68 04 00 00    	mov    %eax,0x468(%rbx)
ffffffff8020da0e:	48 c7 c0 c3 bb 20 80 	mov    $0xffffffff8020bbc3,%rax
ffffffff8020da15:	66 89 93 66 04 00 00 	mov    %dx,0x466(%rbx)
ffffffff8020da1c:	66 89 83 70 04 00 00 	mov    %ax,0x470(%rbx)
ffffffff8020da23:	48 89 c2             	mov    %rax,%rdx
ffffffff8020da26:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020da2a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020da2e:	66 44 89 93 62 04 00 	mov    %r10w,0x462(%rbx)
ffffffff8020da35:	00 
ffffffff8020da36:	89 83 78 04 00 00    	mov    %eax,0x478(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8020da3c:	48 c7 c0 cf bb 20 80 	mov    $0xffffffff8020bbcf,%rax
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8020da43:	66 89 93 76 04 00 00 	mov    %dx,0x476(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8020da4a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020da4d:	66 89 83 80 04 00 00 	mov    %ax,0x480(%rbx)
ffffffff8020da54:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020da58:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020da5c:	89 83 88 04 00 00    	mov    %eax,0x488(%rbx)
ffffffff8020da62:	48 c7 c0 db bb 20 80 	mov    $0xffffffff8020bbdb,%rax
ffffffff8020da69:	66 89 93 86 04 00 00 	mov    %dx,0x486(%rbx)
ffffffff8020da70:	ba 08 00 00 00       	mov    $0x8,%edx
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8020da75:	66 44 89 9b 72 04 00 	mov    %r11w,0x472(%rbx)
ffffffff8020da7c:	00 
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8020da7d:	66 89 ab 82 04 00 00 	mov    %bp,0x482(%rbx)
ffffffff8020da84:	66 89 83 90 04 00 00 	mov    %ax,0x490(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020da8b:	41 b9 08 00 00 00    	mov    $0x8,%r9d

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8020da91:	c7 83 4c 04 00 00 00 	movl   $0x0,0x44c(%rbx)
ffffffff8020da98:	00 00 00 
ffffffff8020da9b:	c6 83 54 04 00 00 00 	movb   $0x0,0x454(%rbx)

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020daa2:	41 ba 08 00 00 00    	mov    $0x8,%r10d

    RME_X64_USER_IDT(IDT_Table, 60); RME_X64_USER_IDT(IDT_Table, 61);
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);
ffffffff8020daa8:	c6 83 55 04 00 00 8e 	movb   $0x8e,0x455(%rbx)
ffffffff8020daaf:	c7 83 5c 04 00 00 00 	movl   $0x0,0x45c(%rbx)
ffffffff8020dab6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8020dab9:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8020dabf:	c6 83 64 04 00 00 00 	movb   $0x0,0x464(%rbx)
ffffffff8020dac6:	c6 83 65 04 00 00 8e 	movb   $0x8e,0x465(%rbx)
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8020dacd:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 62); RME_X64_USER_IDT(IDT_Table, 63);
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
ffffffff8020dad2:	c7 83 6c 04 00 00 00 	movl   $0x0,0x46c(%rbx)
ffffffff8020dad9:	00 00 00 
ffffffff8020dadc:	c6 83 74 04 00 00 00 	movb   $0x0,0x474(%rbx)
ffffffff8020dae3:	c6 83 75 04 00 00 8e 	movb   $0x8e,0x475(%rbx)
ffffffff8020daea:	c7 83 7c 04 00 00 00 	movl   $0x0,0x47c(%rbx)
ffffffff8020daf1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8020daf4:	c6 83 84 04 00 00 00 	movb   $0x0,0x484(%rbx)
ffffffff8020dafb:	c6 83 85 04 00 00 8e 	movb   $0x8e,0x485(%rbx)
ffffffff8020db02:	c7 83 8c 04 00 00 00 	movl   $0x0,0x48c(%rbx)
ffffffff8020db09:	00 00 00 
ffffffff8020db0c:	66 89 93 92 04 00 00 	mov    %dx,0x492(%rbx)
ffffffff8020db13:	48 89 c2             	mov    %rax,%rdx
ffffffff8020db16:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020db1a:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8020db1e:	66 89 8b a2 04 00 00 	mov    %cx,0x4a2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8020db25:	89 83 98 04 00 00    	mov    %eax,0x498(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8020db2b:	48 c7 c0 e7 bb 20 80 	mov    $0xffffffff8020bbe7,%rax
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8020db32:	66 89 93 96 04 00 00 	mov    %dx,0x496(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8020db39:	66 89 83 a0 04 00 00 	mov    %ax,0x4a0(%rbx)
ffffffff8020db40:	48 89 c2             	mov    %rax,%rdx
ffffffff8020db43:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020db47:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020db4b:	89 83 a8 04 00 00    	mov    %eax,0x4a8(%rbx)
ffffffff8020db51:	48 c7 c0 f3 bb 20 80 	mov    $0xffffffff8020bbf3,%rax
ffffffff8020db58:	66 89 93 a6 04 00 00 	mov    %dx,0x4a6(%rbx)
ffffffff8020db5f:	66 89 83 b0 04 00 00 	mov    %ax,0x4b0(%rbx)
ffffffff8020db66:	48 89 c2             	mov    %rax,%rdx
ffffffff8020db69:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020db6d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020db71:	66 89 b3 b2 04 00 00 	mov    %si,0x4b2(%rbx)
ffffffff8020db78:	89 83 b8 04 00 00    	mov    %eax,0x4b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8020db7e:	48 c7 c0 ff bb 20 80 	mov    $0xffffffff8020bbff,%rax
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8020db85:	66 89 93 b6 04 00 00 	mov    %dx,0x4b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8020db8c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020db8f:	66 89 83 c0 04 00 00 	mov    %ax,0x4c0(%rbx)
ffffffff8020db96:	66 89 bb c2 04 00 00 	mov    %di,0x4c2(%rbx)
ffffffff8020db9d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020dba1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dba5:	66 44 89 83 d2 04 00 	mov    %r8w,0x4d2(%rbx)
ffffffff8020dbac:	00 
ffffffff8020dbad:	89 83 c8 04 00 00    	mov    %eax,0x4c8(%rbx)
ffffffff8020dbb3:	48 c7 c0 0b bc 20 80 	mov    $0xffffffff8020bc0b,%rax
ffffffff8020dbba:	66 89 93 c6 04 00 00 	mov    %dx,0x4c6(%rbx)
ffffffff8020dbc1:	66 89 83 d0 04 00 00 	mov    %ax,0x4d0(%rbx)
ffffffff8020dbc8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dbcb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dbcf:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020dbd3:	89 83 d8 04 00 00    	mov    %eax,0x4d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020dbd9:	48 c7 c0 17 bc 20 80 	mov    $0xffffffff8020bc17,%rax
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8020dbe0:	66 89 93 d6 04 00 00 	mov    %dx,0x4d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8020dbe7:	c6 83 94 04 00 00 00 	movb   $0x0,0x494(%rbx)
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020dbee:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 64); RME_X64_USER_IDT(IDT_Table, 65);
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
ffffffff8020dbf1:	c6 83 95 04 00 00 8e 	movb   $0x8e,0x495(%rbx)
ffffffff8020dbf8:	c7 83 9c 04 00 00 00 	movl   $0x0,0x49c(%rbx)
ffffffff8020dbff:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020dc02:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8020dc06:	c6 83 a4 04 00 00 00 	movb   $0x0,0x4a4(%rbx)
ffffffff8020dc0d:	c6 83 a5 04 00 00 8e 	movb   $0x8e,0x4a5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8020dc14:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8020dc19:	c7 83 ac 04 00 00 00 	movl   $0x0,0x4ac(%rbx)
ffffffff8020dc20:	00 00 00 
ffffffff8020dc23:	c6 83 b4 04 00 00 00 	movb   $0x0,0x4b4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020dc2a:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 66); RME_X64_USER_IDT(IDT_Table, 67);
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
ffffffff8020dc2f:	c6 83 b5 04 00 00 8e 	movb   $0x8e,0x4b5(%rbx)
ffffffff8020dc36:	c7 83 bc 04 00 00 00 	movl   $0x0,0x4bc(%rbx)
ffffffff8020dc3d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020dc40:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8020dc45:	c6 83 c4 04 00 00 00 	movb   $0x0,0x4c4(%rbx)
ffffffff8020dc4c:	c6 83 c5 04 00 00 8e 	movb   $0x8e,0x4c5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8020dc53:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 68); RME_X64_USER_IDT(IDT_Table, 69);

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
ffffffff8020dc59:	c7 83 cc 04 00 00 00 	movl   $0x0,0x4cc(%rbx)
ffffffff8020dc60:	00 00 00 
ffffffff8020dc63:	c6 83 d4 04 00 00 00 	movb   $0x0,0x4d4(%rbx)
ffffffff8020dc6a:	c6 83 d5 04 00 00 8e 	movb   $0x8e,0x4d5(%rbx)
ffffffff8020dc71:	c7 83 dc 04 00 00 00 	movl   $0x0,0x4dc(%rbx)
ffffffff8020dc78:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020dc7b:	66 89 83 e0 04 00 00 	mov    %ax,0x4e0(%rbx)
ffffffff8020dc82:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dc86:	66 89 93 e6 04 00 00 	mov    %dx,0x4e6(%rbx)
ffffffff8020dc8d:	89 83 e8 04 00 00    	mov    %eax,0x4e8(%rbx)
ffffffff8020dc93:	48 c7 c0 23 bc 20 80 	mov    $0xffffffff8020bc23,%rax
ffffffff8020dc9a:	66 44 89 8b e2 04 00 	mov    %r9w,0x4e2(%rbx)
ffffffff8020dca1:	00 
ffffffff8020dca2:	66 89 83 f0 04 00 00 	mov    %ax,0x4f0(%rbx)
ffffffff8020dca9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dcac:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dcb0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020dcb4:	89 83 f8 04 00 00    	mov    %eax,0x4f8(%rbx)

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8020dcba:	48 c7 c0 2f bc 20 80 	mov    $0xffffffff8020bc2f,%rax

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020dcc1:	66 89 93 f6 04 00 00 	mov    %dx,0x4f6(%rbx)

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8020dcc8:	66 89 83 00 05 00 00 	mov    %ax,0x500(%rbx)
ffffffff8020dccf:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dcd2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dcd6:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020dcda:	66 44 89 93 f2 04 00 	mov    %r10w,0x4f2(%rbx)
ffffffff8020dce1:	00 

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8020dce2:	89 83 08 05 00 00    	mov    %eax,0x508(%rbx)
ffffffff8020dce8:	48 c7 c0 3b bc 20 80 	mov    $0xffffffff8020bc3b,%rax
ffffffff8020dcef:	66 89 93 06 05 00 00 	mov    %dx,0x506(%rbx)
ffffffff8020dcf6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dcf9:	66 89 83 10 05 00 00 	mov    %ax,0x510(%rbx)
ffffffff8020dd00:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dd04:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020dd08:	89 83 18 05 00 00    	mov    %eax,0x518(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8020dd0e:	48 c7 c0 47 bc 20 80 	mov    $0xffffffff8020bc47,%rax
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8020dd15:	66 89 93 16 05 00 00 	mov    %dx,0x516(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8020dd1c:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020dd21:	66 89 83 20 05 00 00 	mov    %ax,0x520(%rbx)
ffffffff8020dd28:	66 89 93 22 05 00 00 	mov    %dx,0x522(%rbx)
ffffffff8020dd2f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dd32:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dd36:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8020dd3a:	66 44 89 9b 02 05 00 	mov    %r11w,0x502(%rbx)
ffffffff8020dd41:	00 
ffffffff8020dd42:	66 89 ab 12 05 00 00 	mov    %bp,0x512(%rbx)

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020dd49:	c6 83 e4 04 00 00 00 	movb   $0x0,0x4e4(%rbx)
ffffffff8020dd50:	c6 83 e5 04 00 00 8e 	movb   $0x8e,0x4e5(%rbx)

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8020dd57:	41 b9 08 00 00 00    	mov    $0x8,%r9d

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020dd5d:	c7 83 ec 04 00 00 00 	movl   $0x0,0x4ec(%rbx)
ffffffff8020dd64:	00 00 00 
ffffffff8020dd67:	c6 83 f4 04 00 00 00 	movb   $0x0,0x4f4(%rbx)

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8020dd6e:	41 ba 08 00 00 00    	mov    $0x8,%r10d

    RME_X64_USER_IDT(IDT_Table, 70); RME_X64_USER_IDT(IDT_Table, 71);
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);
ffffffff8020dd74:	c6 83 f5 04 00 00 8e 	movb   $0x8e,0x4f5(%rbx)
ffffffff8020dd7b:	c7 83 fc 04 00 00 00 	movl   $0x0,0x4fc(%rbx)
ffffffff8020dd82:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8020dd85:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8020dd8b:	c6 83 04 05 00 00 00 	movb   $0x0,0x504(%rbx)
ffffffff8020dd92:	c6 83 05 05 00 00 8e 	movb   $0x8e,0x505(%rbx)
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8020dd99:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 72); RME_X64_USER_IDT(IDT_Table, 73);
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
ffffffff8020dd9e:	c7 83 0c 05 00 00 00 	movl   $0x0,0x50c(%rbx)
ffffffff8020dda5:	00 00 00 
ffffffff8020dda8:	c6 83 14 05 00 00 00 	movb   $0x0,0x514(%rbx)
ffffffff8020ddaf:	c6 83 15 05 00 00 8e 	movb   $0x8e,0x515(%rbx)
ffffffff8020ddb6:	c7 83 1c 05 00 00 00 	movl   $0x0,0x51c(%rbx)
ffffffff8020ddbd:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8020ddc0:	c6 83 24 05 00 00 00 	movb   $0x0,0x524(%rbx)
ffffffff8020ddc7:	c6 83 25 05 00 00 8e 	movb   $0x8e,0x525(%rbx)
ffffffff8020ddce:	66 89 93 26 05 00 00 	mov    %dx,0x526(%rbx)
ffffffff8020ddd5:	89 83 28 05 00 00    	mov    %eax,0x528(%rbx)
ffffffff8020dddb:	48 c7 c0 53 bc 20 80 	mov    $0xffffffff8020bc53,%rax
ffffffff8020dde2:	66 89 83 30 05 00 00 	mov    %ax,0x530(%rbx)
ffffffff8020dde9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ddec:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ddf0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ddf4:	89 83 38 05 00 00    	mov    %eax,0x538(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020ddfa:	48 c7 c0 5f bc 20 80 	mov    $0xffffffff8020bc5f,%rax
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8020de01:	66 89 93 36 05 00 00 	mov    %dx,0x536(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020de08:	66 89 83 40 05 00 00 	mov    %ax,0x540(%rbx)
ffffffff8020de0f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de12:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020de16:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8020de1a:	66 89 8b 32 05 00 00 	mov    %cx,0x532(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020de21:	89 83 48 05 00 00    	mov    %eax,0x548(%rbx)
ffffffff8020de27:	48 c7 c0 6b bc 20 80 	mov    $0xffffffff8020bc6b,%rax
ffffffff8020de2e:	66 89 93 46 05 00 00 	mov    %dx,0x546(%rbx)
ffffffff8020de35:	66 89 83 50 05 00 00 	mov    %ax,0x550(%rbx)
ffffffff8020de3c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de3f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020de43:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020de47:	89 83 58 05 00 00    	mov    %eax,0x558(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8020de4d:	48 c7 c0 77 bc 20 80 	mov    $0xffffffff8020bc77,%rax
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020de54:	66 89 93 56 05 00 00 	mov    %dx,0x556(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8020de5b:	66 89 83 60 05 00 00 	mov    %ax,0x560(%rbx)
ffffffff8020de62:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de65:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020de69:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020de6d:	66 89 b3 42 05 00 00 	mov    %si,0x542(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8020de74:	89 83 68 05 00 00    	mov    %eax,0x568(%rbx)
ffffffff8020de7a:	48 c7 c0 83 bc 20 80 	mov    $0xffffffff8020bc83,%rax
ffffffff8020de81:	66 89 93 66 05 00 00 	mov    %dx,0x566(%rbx)
ffffffff8020de88:	66 89 83 70 05 00 00 	mov    %ax,0x570(%rbx)
ffffffff8020de8f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020de92:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020de96:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020de9a:	66 89 bb 52 05 00 00 	mov    %di,0x552(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8020dea1:	66 44 89 83 62 05 00 	mov    %r8w,0x562(%rbx)
ffffffff8020dea8:	00 
ffffffff8020dea9:	66 44 89 8b 72 05 00 	mov    %r9w,0x572(%rbx)
ffffffff8020deb0:	00 
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8020deb1:	c7 83 2c 05 00 00 00 	movl   $0x0,0x52c(%rbx)
ffffffff8020deb8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020debb:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8020dec0:	c6 83 34 05 00 00 00 	movb   $0x0,0x534(%rbx)
ffffffff8020dec7:	c6 83 35 05 00 00 8e 	movb   $0x8e,0x535(%rbx)
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020dece:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 74); RME_X64_USER_IDT(IDT_Table, 75);
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
ffffffff8020ded3:	c7 83 3c 05 00 00 00 	movl   $0x0,0x53c(%rbx)
ffffffff8020deda:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020dedd:	c6 83 44 05 00 00 00 	movb   $0x0,0x544(%rbx)
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8020dee4:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020dee9:	c6 83 45 05 00 00 8e 	movb   $0x8e,0x545(%rbx)
ffffffff8020def0:	c7 83 4c 05 00 00 00 	movl   $0x0,0x54c(%rbx)
ffffffff8020def7:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8020defa:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020df00:	c6 83 54 05 00 00 00 	movb   $0x0,0x554(%rbx)
ffffffff8020df07:	c6 83 55 05 00 00 8e 	movb   $0x8e,0x555(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8020df0e:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 76); RME_X64_USER_IDT(IDT_Table, 77);
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
ffffffff8020df14:	c7 83 5c 05 00 00 00 	movl   $0x0,0x55c(%rbx)
ffffffff8020df1b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8020df1e:	c6 83 64 05 00 00 00 	movb   $0x0,0x564(%rbx)
ffffffff8020df25:	c6 83 65 05 00 00 8e 	movb   $0x8e,0x565(%rbx)
ffffffff8020df2c:	c7 83 6c 05 00 00 00 	movl   $0x0,0x56c(%rbx)
ffffffff8020df33:	00 00 00 
ffffffff8020df36:	c6 83 74 05 00 00 00 	movb   $0x0,0x574(%rbx)
ffffffff8020df3d:	89 83 78 05 00 00    	mov    %eax,0x578(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8020df43:	48 c7 c0 8f bc 20 80 	mov    $0xffffffff8020bc8f,%rax
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8020df4a:	66 89 93 76 05 00 00 	mov    %dx,0x576(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8020df51:	66 89 83 80 05 00 00 	mov    %ax,0x580(%rbx)
ffffffff8020df58:	48 89 c2             	mov    %rax,%rdx
ffffffff8020df5b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020df5f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020df63:	66 44 89 93 82 05 00 	mov    %r10w,0x582(%rbx)
ffffffff8020df6a:	00 
ffffffff8020df6b:	89 83 88 05 00 00    	mov    %eax,0x588(%rbx)
ffffffff8020df71:	48 c7 c0 9b bc 20 80 	mov    $0xffffffff8020bc9b,%rax
ffffffff8020df78:	66 89 93 86 05 00 00 	mov    %dx,0x586(%rbx)
ffffffff8020df7f:	66 89 83 90 05 00 00 	mov    %ax,0x590(%rbx)
ffffffff8020df86:	48 89 c2             	mov    %rax,%rdx
ffffffff8020df89:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020df8d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020df91:	89 83 98 05 00 00    	mov    %eax,0x598(%rbx)

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8020df97:	48 c7 c0 a7 bc 20 80 	mov    $0xffffffff8020bca7,%rax

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8020df9e:	66 89 93 96 05 00 00 	mov    %dx,0x596(%rbx)

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8020dfa5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dfa8:	66 89 83 a0 05 00 00 	mov    %ax,0x5a0(%rbx)
ffffffff8020dfaf:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020dfb3:	48 c1 e8 20          	shr    $0x20,%rax

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8020dfb7:	66 44 89 9b 92 05 00 	mov    %r11w,0x592(%rbx)
ffffffff8020dfbe:	00 

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8020dfbf:	66 89 93 a6 05 00 00 	mov    %dx,0x5a6(%rbx)
ffffffff8020dfc6:	89 83 a8 05 00 00    	mov    %eax,0x5a8(%rbx)
ffffffff8020dfcc:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020dfd1:	48 c7 c0 b3 bc 20 80 	mov    $0xffffffff8020bcb3,%rax
ffffffff8020dfd8:	66 89 93 b2 05 00 00 	mov    %dx,0x5b2(%rbx)
ffffffff8020dfdf:	66 89 ab a2 05 00 00 	mov    %bp,0x5a2(%rbx)
ffffffff8020dfe6:	66 89 83 b0 05 00 00 	mov    %ax,0x5b0(%rbx)
ffffffff8020dfed:	48 89 c2             	mov    %rax,%rdx
ffffffff8020dff0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020dff4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020dff8:	89 83 b8 05 00 00    	mov    %eax,0x5b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020dffe:	48 c7 c0 bf bc 20 80 	mov    $0xffffffff8020bcbf,%rax
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8020e005:	66 89 93 b6 05 00 00 	mov    %dx,0x5b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020e00c:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8020e00f:	c6 83 75 05 00 00 8e 	movb   $0x8e,0x575(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020e016:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 78); RME_X64_USER_IDT(IDT_Table, 79);

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
ffffffff8020e01a:	c7 83 7c 05 00 00 00 	movl   $0x0,0x57c(%rbx)
ffffffff8020e021:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8020e024:	c6 83 84 05 00 00 00 	movb   $0x0,0x584(%rbx)
ffffffff8020e02b:	c6 83 85 05 00 00 8e 	movb   $0x8e,0x585(%rbx)
ffffffff8020e032:	c7 83 8c 05 00 00 00 	movl   $0x0,0x58c(%rbx)
ffffffff8020e039:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8020e03c:	41 ba 08 00 00 00    	mov    $0x8,%r10d

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8020e042:	c6 83 94 05 00 00 00 	movb   $0x0,0x594(%rbx)
ffffffff8020e049:	c6 83 95 05 00 00 8e 	movb   $0x8e,0x595(%rbx)

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8020e050:	41 bb 08 00 00 00    	mov    $0x8,%r11d

    RME_X64_USER_IDT(IDT_Table, 80); RME_X64_USER_IDT(IDT_Table, 81);
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);
ffffffff8020e056:	c7 83 9c 05 00 00 00 	movl   $0x0,0x59c(%rbx)
ffffffff8020e05d:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8020e060:	c6 83 a4 05 00 00 00 	movb   $0x0,0x5a4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8020e067:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 82); RME_X64_USER_IDT(IDT_Table, 83);
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
ffffffff8020e06c:	c6 83 a5 05 00 00 8e 	movb   $0x8e,0x5a5(%rbx)
ffffffff8020e073:	c7 83 ac 05 00 00 00 	movl   $0x0,0x5ac(%rbx)
ffffffff8020e07a:	00 00 00 
ffffffff8020e07d:	c6 83 b4 05 00 00 00 	movb   $0x0,0x5b4(%rbx)
ffffffff8020e084:	c6 83 b5 05 00 00 8e 	movb   $0x8e,0x5b5(%rbx)
ffffffff8020e08b:	c7 83 bc 05 00 00 00 	movl   $0x0,0x5bc(%rbx)
ffffffff8020e092:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020e095:	66 89 83 c0 05 00 00 	mov    %ax,0x5c0(%rbx)
ffffffff8020e09c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e0a0:	89 83 c8 05 00 00    	mov    %eax,0x5c8(%rbx)
ffffffff8020e0a6:	48 c7 c0 cb bc 20 80 	mov    $0xffffffff8020bccb,%rax
ffffffff8020e0ad:	66 89 93 c6 05 00 00 	mov    %dx,0x5c6(%rbx)
ffffffff8020e0b4:	66 89 83 d0 05 00 00 	mov    %ax,0x5d0(%rbx)
ffffffff8020e0bb:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e0be:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e0c2:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e0c6:	89 83 d8 05 00 00    	mov    %eax,0x5d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8020e0cc:	48 c7 c0 d7 bc 20 80 	mov    $0xffffffff8020bcd7,%rax
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020e0d3:	66 89 93 d6 05 00 00 	mov    %dx,0x5d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8020e0da:	66 89 83 e0 05 00 00 	mov    %ax,0x5e0(%rbx)
ffffffff8020e0e1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e0e4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e0e8:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020e0ec:	66 89 8b c2 05 00 00 	mov    %cx,0x5c2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8020e0f3:	89 83 e8 05 00 00    	mov    %eax,0x5e8(%rbx)
ffffffff8020e0f9:	48 c7 c0 e3 bc 20 80 	mov    $0xffffffff8020bce3,%rax
ffffffff8020e100:	66 89 93 e6 05 00 00 	mov    %dx,0x5e6(%rbx)
ffffffff8020e107:	66 89 83 f0 05 00 00 	mov    %ax,0x5f0(%rbx)
ffffffff8020e10e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e111:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e115:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e119:	89 83 f8 05 00 00    	mov    %eax,0x5f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8020e11f:	48 c7 c0 ef bc 20 80 	mov    $0xffffffff8020bcef,%rax
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8020e126:	66 89 93 f6 05 00 00 	mov    %dx,0x5f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8020e12d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e130:	66 89 83 00 06 00 00 	mov    %ax,0x600(%rbx)
ffffffff8020e137:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e13b:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020e13f:	66 89 b3 d2 05 00 00 	mov    %si,0x5d2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8020e146:	66 89 bb e2 05 00 00 	mov    %di,0x5e2(%rbx)
ffffffff8020e14d:	66 44 89 83 f2 05 00 	mov    %r8w,0x5f2(%rbx)
ffffffff8020e154:	00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8020e155:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8020e15a:	66 44 89 8b 02 06 00 	mov    %r9w,0x602(%rbx)
ffffffff8020e161:	00 
ffffffff8020e162:	66 89 93 06 06 00 00 	mov    %dx,0x606(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8020e169:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020e16e:	c6 83 c4 05 00 00 00 	movb   $0x0,0x5c4(%rbx)
ffffffff8020e175:	c6 83 c5 05 00 00 8e 	movb   $0x8e,0x5c5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8020e17c:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020e181:	c7 83 cc 05 00 00 00 	movl   $0x0,0x5cc(%rbx)
ffffffff8020e188:	00 00 00 
ffffffff8020e18b:	c6 83 d4 05 00 00 00 	movb   $0x0,0x5d4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8020e192:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 84); RME_X64_USER_IDT(IDT_Table, 85);
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
ffffffff8020e198:	c6 83 d5 05 00 00 8e 	movb   $0x8e,0x5d5(%rbx)
ffffffff8020e19f:	c7 83 dc 05 00 00 00 	movl   $0x0,0x5dc(%rbx)
ffffffff8020e1a6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8020e1a9:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 86); RME_X64_USER_IDT(IDT_Table, 87);
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
ffffffff8020e1af:	c6 83 e4 05 00 00 00 	movb   $0x0,0x5e4(%rbx)
ffffffff8020e1b6:	c6 83 e5 05 00 00 8e 	movb   $0x8e,0x5e5(%rbx)
ffffffff8020e1bd:	c7 83 ec 05 00 00 00 	movl   $0x0,0x5ec(%rbx)
ffffffff8020e1c4:	00 00 00 
ffffffff8020e1c7:	c6 83 f4 05 00 00 00 	movb   $0x0,0x5f4(%rbx)
ffffffff8020e1ce:	c6 83 f5 05 00 00 8e 	movb   $0x8e,0x5f5(%rbx)
ffffffff8020e1d5:	c7 83 fc 05 00 00 00 	movl   $0x0,0x5fc(%rbx)
ffffffff8020e1dc:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8020e1df:	c6 83 04 06 00 00 00 	movb   $0x0,0x604(%rbx)
ffffffff8020e1e6:	c6 83 05 06 00 00 8e 	movb   $0x8e,0x605(%rbx)
ffffffff8020e1ed:	89 83 08 06 00 00    	mov    %eax,0x608(%rbx)
ffffffff8020e1f3:	48 c7 c0 fb bc 20 80 	mov    $0xffffffff8020bcfb,%rax
ffffffff8020e1fa:	66 44 89 93 12 06 00 	mov    %r10w,0x612(%rbx)
ffffffff8020e201:	00 
ffffffff8020e202:	66 89 83 10 06 00 00 	mov    %ax,0x610(%rbx)
ffffffff8020e209:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e20c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e210:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e214:	89 83 18 06 00 00    	mov    %eax,0x618(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8020e21a:	48 c7 c0 07 bd 20 80 	mov    $0xffffffff8020bd07,%rax
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8020e221:	66 89 93 16 06 00 00 	mov    %dx,0x616(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8020e228:	66 89 83 20 06 00 00 	mov    %ax,0x620(%rbx)
ffffffff8020e22f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e232:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e236:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e23a:	66 44 89 9b 22 06 00 	mov    %r11w,0x622(%rbx)
ffffffff8020e241:	00 
ffffffff8020e242:	89 83 28 06 00 00    	mov    %eax,0x628(%rbx)
ffffffff8020e248:	48 c7 c0 13 bd 20 80 	mov    $0xffffffff8020bd13,%rax
ffffffff8020e24f:	66 89 93 26 06 00 00 	mov    %dx,0x626(%rbx)
ffffffff8020e256:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e259:	66 89 83 30 06 00 00 	mov    %ax,0x630(%rbx)
ffffffff8020e260:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e264:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e268:	89 83 38 06 00 00    	mov    %eax,0x638(%rbx)

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8020e26e:	48 c7 c0 1f bd 20 80 	mov    $0xffffffff8020bd1f,%rax

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8020e275:	66 89 93 36 06 00 00 	mov    %dx,0x636(%rbx)

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8020e27c:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020e281:	66 89 83 40 06 00 00 	mov    %ax,0x640(%rbx)
ffffffff8020e288:	66 89 93 42 06 00 00 	mov    %dx,0x642(%rbx)
ffffffff8020e28f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e292:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e296:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e29a:	89 83 48 06 00 00    	mov    %eax,0x648(%rbx)
ffffffff8020e2a0:	48 c7 c0 2b bd 20 80 	mov    $0xffffffff8020bd2b,%rax
ffffffff8020e2a7:	66 89 93 46 06 00 00 	mov    %dx,0x646(%rbx)
ffffffff8020e2ae:	66 89 83 50 06 00 00 	mov    %ax,0x650(%rbx)
ffffffff8020e2b5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e2b8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e2bc:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8020e2c0:	66 89 ab 32 06 00 00 	mov    %bp,0x632(%rbx)

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8020e2c7:	66 89 8b 52 06 00 00 	mov    %cx,0x652(%rbx)
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8020e2ce:	c7 83 0c 06 00 00 00 	movl   $0x0,0x60c(%rbx)
ffffffff8020e2d5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e2d8:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8020e2de:	c6 83 14 06 00 00 00 	movb   $0x0,0x614(%rbx)
ffffffff8020e2e5:	c6 83 15 06 00 00 8e 	movb   $0x8e,0x615(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e2ec:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 88); RME_X64_USER_IDT(IDT_Table, 89);

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
ffffffff8020e2f2:	c7 83 1c 06 00 00 00 	movl   $0x0,0x61c(%rbx)
ffffffff8020e2f9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8020e2fc:	c6 83 24 06 00 00 00 	movb   $0x0,0x624(%rbx)

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8020e303:	bd 08 00 00 00       	mov    $0x8,%ebp

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8020e308:	c6 83 25 06 00 00 8e 	movb   $0x8e,0x625(%rbx)
ffffffff8020e30f:	c7 83 2c 06 00 00 00 	movl   $0x0,0x62c(%rbx)
ffffffff8020e316:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e319:	b9 08 00 00 00       	mov    $0x8,%ecx

    RME_X64_USER_IDT(IDT_Table, 90); RME_X64_USER_IDT(IDT_Table, 91);
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);
ffffffff8020e31e:	c6 83 34 06 00 00 00 	movb   $0x0,0x634(%rbx)
ffffffff8020e325:	c6 83 35 06 00 00 8e 	movb   $0x8e,0x635(%rbx)
ffffffff8020e32c:	c7 83 3c 06 00 00 00 	movl   $0x0,0x63c(%rbx)
ffffffff8020e333:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8020e336:	c6 83 44 06 00 00 00 	movb   $0x0,0x644(%rbx)
ffffffff8020e33d:	c6 83 45 06 00 00 8e 	movb   $0x8e,0x645(%rbx)
ffffffff8020e344:	c7 83 4c 06 00 00 00 	movl   $0x0,0x64c(%rbx)
ffffffff8020e34b:	00 00 00 
ffffffff8020e34e:	c6 83 54 06 00 00 00 	movb   $0x0,0x654(%rbx)
ffffffff8020e355:	c6 83 55 06 00 00 8e 	movb   $0x8e,0x655(%rbx)
ffffffff8020e35c:	89 83 58 06 00 00    	mov    %eax,0x658(%rbx)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8020e362:	48 c7 c0 37 bd 20 80 	mov    $0xffffffff8020bd37,%rax
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8020e369:	66 89 93 56 06 00 00 	mov    %dx,0x656(%rbx)
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8020e370:	66 89 83 60 06 00 00 	mov    %ax,0x660(%rbx)
ffffffff8020e377:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e37a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e37e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e382:	89 83 68 06 00 00    	mov    %eax,0x668(%rbx)
ffffffff8020e388:	48 c7 c0 43 bd 20 80 	mov    $0xffffffff8020bd43,%rax
ffffffff8020e38f:	66 89 93 66 06 00 00 	mov    %dx,0x666(%rbx)
ffffffff8020e396:	66 89 83 70 06 00 00 	mov    %ax,0x670(%rbx)
ffffffff8020e39d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e3a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e3a4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e3a8:	66 89 b3 62 06 00 00 	mov    %si,0x662(%rbx)
ffffffff8020e3af:	89 83 78 06 00 00    	mov    %eax,0x678(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8020e3b5:	48 c7 c0 4f bd 20 80 	mov    $0xffffffff8020bd4f,%rax
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8020e3bc:	66 89 93 76 06 00 00 	mov    %dx,0x676(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8020e3c3:	66 89 83 80 06 00 00 	mov    %ax,0x680(%rbx)
ffffffff8020e3ca:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e3cd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e3d1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e3d5:	89 83 88 06 00 00    	mov    %eax,0x688(%rbx)
ffffffff8020e3db:	48 c7 c0 5b bd 20 80 	mov    $0xffffffff8020bd5b,%rax
ffffffff8020e3e2:	66 89 93 86 06 00 00 	mov    %dx,0x686(%rbx)
ffffffff8020e3e9:	66 89 83 90 06 00 00 	mov    %ax,0x690(%rbx)
ffffffff8020e3f0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e3f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e3f7:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8020e3fb:	66 89 bb 72 06 00 00 	mov    %di,0x672(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8020e402:	89 83 98 06 00 00    	mov    %eax,0x698(%rbx)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e408:	48 c7 c0 67 bd 20 80 	mov    $0xffffffff8020bd67,%rax
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8020e40f:	66 89 93 96 06 00 00 	mov    %dx,0x696(%rbx)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e416:	66 89 83 a0 06 00 00 	mov    %ax,0x6a0(%rbx)
ffffffff8020e41d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e420:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e424:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8020e428:	66 44 89 83 82 06 00 	mov    %r8w,0x682(%rbx)
ffffffff8020e42f:	00 
ffffffff8020e430:	66 44 89 8b 92 06 00 	mov    %r9w,0x692(%rbx)
ffffffff8020e437:	00 
    RME_X64_USER_IDT(IDT_Table, 92); RME_X64_USER_IDT(IDT_Table, 93);
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
ffffffff8020e438:	c7 83 5c 06 00 00 00 	movl   $0x0,0x65c(%rbx)
ffffffff8020e43f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8020e442:	c6 83 64 06 00 00 00 	movb   $0x0,0x664(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e449:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8020e44e:	c6 83 65 06 00 00 8e 	movb   $0x8e,0x665(%rbx)
ffffffff8020e455:	c7 83 6c 06 00 00 00 	movl   $0x0,0x66c(%rbx)
ffffffff8020e45c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8020e45f:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8020e464:	c6 83 74 06 00 00 00 	movb   $0x0,0x674(%rbx)
ffffffff8020e46b:	c6 83 75 06 00 00 8e 	movb   $0x8e,0x675(%rbx)
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8020e472:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 94); RME_X64_USER_IDT(IDT_Table, 95);
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
ffffffff8020e478:	c7 83 7c 06 00 00 00 	movl   $0x0,0x67c(%rbx)
ffffffff8020e47f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8020e482:	c6 83 84 06 00 00 00 	movb   $0x0,0x684(%rbx)
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8020e489:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 96); RME_X64_USER_IDT(IDT_Table, 97);
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
ffffffff8020e48f:	c6 83 85 06 00 00 8e 	movb   $0x8e,0x685(%rbx)
ffffffff8020e496:	c7 83 8c 06 00 00 00 	movl   $0x0,0x68c(%rbx)
ffffffff8020e49d:	00 00 00 
ffffffff8020e4a0:	c6 83 94 06 00 00 00 	movb   $0x0,0x694(%rbx)
ffffffff8020e4a7:	c6 83 95 06 00 00 8e 	movb   $0x8e,0x695(%rbx)
ffffffff8020e4ae:	c7 83 9c 06 00 00 00 	movl   $0x0,0x69c(%rbx)
ffffffff8020e4b5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e4b8:	66 44 89 93 a2 06 00 	mov    %r10w,0x6a2(%rbx)
ffffffff8020e4bf:	00 
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8020e4c0:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e4c6:	89 83 a8 06 00 00    	mov    %eax,0x6a8(%rbx)
ffffffff8020e4cc:	48 c7 c0 73 bd 20 80 	mov    $0xffffffff8020bd73,%rax
ffffffff8020e4d3:	66 89 93 a6 06 00 00 	mov    %dx,0x6a6(%rbx)
ffffffff8020e4da:	66 89 83 b0 06 00 00 	mov    %ax,0x6b0(%rbx)
ffffffff8020e4e1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e4e4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e4e8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e4ec:	89 83 b8 06 00 00    	mov    %eax,0x6b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8020e4f2:	48 c7 c0 7f bd 20 80 	mov    $0xffffffff8020bd7f,%rax
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e4f9:	66 89 93 b6 06 00 00 	mov    %dx,0x6b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8020e500:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e503:	66 89 83 c0 06 00 00 	mov    %ax,0x6c0(%rbx)
ffffffff8020e50a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e50e:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e512:	66 44 89 9b b2 06 00 	mov    %r11w,0x6b2(%rbx)
ffffffff8020e519:	00 
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8020e51a:	66 89 93 c6 06 00 00 	mov    %dx,0x6c6(%rbx)
ffffffff8020e521:	89 83 c8 06 00 00    	mov    %eax,0x6c8(%rbx)
ffffffff8020e527:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020e52c:	48 c7 c0 8b bd 20 80 	mov    $0xffffffff8020bd8b,%rax
ffffffff8020e533:	66 89 93 d2 06 00 00 	mov    %dx,0x6d2(%rbx)
ffffffff8020e53a:	66 89 ab c2 06 00 00 	mov    %bp,0x6c2(%rbx)
ffffffff8020e541:	66 89 83 d0 06 00 00 	mov    %ax,0x6d0(%rbx)
ffffffff8020e548:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e54b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e54f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e553:	89 83 d8 06 00 00    	mov    %eax,0x6d8(%rbx)

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e559:	48 c7 c0 97 bd 20 80 	mov    $0xffffffff8020bd97,%rax

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8020e560:	66 89 93 d6 06 00 00 	mov    %dx,0x6d6(%rbx)

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e567:	66 89 83 e0 06 00 00 	mov    %ax,0x6e0(%rbx)
ffffffff8020e56e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e571:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e575:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e579:	66 89 8b e2 06 00 00 	mov    %cx,0x6e2(%rbx)
ffffffff8020e580:	89 83 e8 06 00 00    	mov    %eax,0x6e8(%rbx)
ffffffff8020e586:	48 c7 c0 a3 bd 20 80 	mov    $0xffffffff8020bda3,%rax
ffffffff8020e58d:	66 89 93 e6 06 00 00 	mov    %dx,0x6e6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e594:	c6 83 a4 06 00 00 00 	movb   $0x0,0x6a4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e59b:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e59e:	c6 83 a5 06 00 00 8e 	movb   $0x8e,0x6a5(%rbx)
ffffffff8020e5a5:	c7 83 ac 06 00 00 00 	movl   $0x0,0x6ac(%rbx)
ffffffff8020e5ac:	00 00 00 
ffffffff8020e5af:	c6 83 b4 06 00 00 00 	movb   $0x0,0x6b4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e5b6:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 98); RME_X64_USER_IDT(IDT_Table, 99);

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
ffffffff8020e5ba:	c6 83 b5 06 00 00 8e 	movb   $0x8e,0x6b5(%rbx)
ffffffff8020e5c1:	c7 83 bc 06 00 00 00 	movl   $0x0,0x6bc(%rbx)
ffffffff8020e5c8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8020e5cb:	41 bb 08 00 00 00    	mov    $0x8,%r11d

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8020e5d1:	c6 83 c4 06 00 00 00 	movb   $0x0,0x6c4(%rbx)
ffffffff8020e5d8:	c6 83 c5 06 00 00 8e 	movb   $0x8e,0x6c5(%rbx)

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8020e5df:	bd 08 00 00 00       	mov    $0x8,%ebp

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8020e5e4:	c7 83 cc 06 00 00 00 	movl   $0x0,0x6cc(%rbx)
ffffffff8020e5eb:	00 00 00 
ffffffff8020e5ee:	c6 83 d4 06 00 00 00 	movb   $0x0,0x6d4(%rbx)

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8020e5f5:	b9 08 00 00 00       	mov    $0x8,%ecx

    RME_X64_USER_IDT(IDT_Table, 100); RME_X64_USER_IDT(IDT_Table, 101);
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);
ffffffff8020e5fa:	c6 83 d5 06 00 00 8e 	movb   $0x8e,0x6d5(%rbx)
ffffffff8020e601:	c7 83 dc 06 00 00 00 	movl   $0x0,0x6dc(%rbx)
ffffffff8020e608:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e60b:	c6 83 e4 06 00 00 00 	movb   $0x0,0x6e4(%rbx)
ffffffff8020e612:	c6 83 e5 06 00 00 8e 	movb   $0x8e,0x6e5(%rbx)
ffffffff8020e619:	c7 83 ec 06 00 00 00 	movl   $0x0,0x6ec(%rbx)
ffffffff8020e620:	00 00 00 
ffffffff8020e623:	66 89 83 f0 06 00 00 	mov    %ax,0x6f0(%rbx)
ffffffff8020e62a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e62e:	89 83 f8 06 00 00    	mov    %eax,0x6f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8020e634:	48 c7 c0 af bd 20 80 	mov    $0xffffffff8020bdaf,%rax
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e63b:	66 89 93 f6 06 00 00 	mov    %dx,0x6f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8020e642:	66 89 83 00 07 00 00 	mov    %ax,0x700(%rbx)
ffffffff8020e649:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e64c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e650:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e654:	89 83 08 07 00 00    	mov    %eax,0x708(%rbx)
ffffffff8020e65a:	48 c7 c0 bb bd 20 80 	mov    $0xffffffff8020bdbb,%rax
ffffffff8020e661:	66 89 93 06 07 00 00 	mov    %dx,0x706(%rbx)
ffffffff8020e668:	66 89 83 10 07 00 00 	mov    %ax,0x710(%rbx)
ffffffff8020e66f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e672:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e676:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e67a:	66 89 b3 f2 06 00 00 	mov    %si,0x6f2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8020e681:	89 83 18 07 00 00    	mov    %eax,0x718(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8020e687:	48 c7 c0 c7 bd 20 80 	mov    $0xffffffff8020bdc7,%rax
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8020e68e:	66 89 93 16 07 00 00 	mov    %dx,0x716(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8020e695:	66 89 83 20 07 00 00 	mov    %ax,0x720(%rbx)
ffffffff8020e69c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e69f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e6a3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e6a7:	89 83 28 07 00 00    	mov    %eax,0x728(%rbx)
ffffffff8020e6ad:	48 c7 c0 d3 bd 20 80 	mov    $0xffffffff8020bdd3,%rax
ffffffff8020e6b4:	66 89 93 26 07 00 00 	mov    %dx,0x726(%rbx)
ffffffff8020e6bb:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e6be:	66 89 83 30 07 00 00 	mov    %ax,0x730(%rbx)
ffffffff8020e6c5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e6c9:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8020e6cd:	66 89 bb 02 07 00 00 	mov    %di,0x702(%rbx)
ffffffff8020e6d4:	66 44 89 83 12 07 00 	mov    %r8w,0x712(%rbx)
ffffffff8020e6db:	00 
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8020e6dc:	66 44 89 8b 22 07 00 	mov    %r9w,0x722(%rbx)
ffffffff8020e6e3:	00 
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e6e4:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8020e6e9:	66 44 89 93 32 07 00 	mov    %r10w,0x732(%rbx)
ffffffff8020e6f0:	00 
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e6f1:	c6 83 f4 06 00 00 00 	movb   $0x0,0x6f4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e6f8:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 102); RME_X64_USER_IDT(IDT_Table, 103);
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
ffffffff8020e6fd:	c6 83 f5 06 00 00 8e 	movb   $0x8e,0x6f5(%rbx)
ffffffff8020e704:	c7 83 fc 06 00 00 00 	movl   $0x0,0x6fc(%rbx)
ffffffff8020e70b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020e70e:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8020e714:	c6 83 04 07 00 00 00 	movb   $0x0,0x704(%rbx)
ffffffff8020e71b:	c6 83 05 07 00 00 8e 	movb   $0x8e,0x705(%rbx)
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020e722:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8020e728:	c7 83 0c 07 00 00 00 	movl   $0x0,0x70c(%rbx)
ffffffff8020e72f:	00 00 00 
ffffffff8020e732:	c6 83 14 07 00 00 00 	movb   $0x0,0x714(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020e739:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 104); RME_X64_USER_IDT(IDT_Table, 105);
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
ffffffff8020e73f:	c6 83 15 07 00 00 8e 	movb   $0x8e,0x715(%rbx)
ffffffff8020e746:	c7 83 1c 07 00 00 00 	movl   $0x0,0x71c(%rbx)
ffffffff8020e74d:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8020e750:	c6 83 24 07 00 00 00 	movb   $0x0,0x724(%rbx)
ffffffff8020e757:	c6 83 25 07 00 00 8e 	movb   $0x8e,0x725(%rbx)
ffffffff8020e75e:	c7 83 2c 07 00 00 00 	movl   $0x0,0x72c(%rbx)
ffffffff8020e765:	00 00 00 
ffffffff8020e768:	c6 83 34 07 00 00 00 	movb   $0x0,0x734(%rbx)
ffffffff8020e76f:	c6 83 35 07 00 00 8e 	movb   $0x8e,0x735(%rbx)
ffffffff8020e776:	66 89 93 36 07 00 00 	mov    %dx,0x736(%rbx)
ffffffff8020e77d:	89 83 38 07 00 00    	mov    %eax,0x738(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8020e783:	48 c7 c0 df bd 20 80 	mov    $0xffffffff8020bddf,%rax
ffffffff8020e78a:	66 44 89 9b 42 07 00 	mov    %r11w,0x742(%rbx)
ffffffff8020e791:	00 
ffffffff8020e792:	66 89 83 40 07 00 00 	mov    %ax,0x740(%rbx)
ffffffff8020e799:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e79c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e7a0:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e7a4:	89 83 48 07 00 00    	mov    %eax,0x748(%rbx)
ffffffff8020e7aa:	48 c7 c0 eb bd 20 80 	mov    $0xffffffff8020bdeb,%rax
ffffffff8020e7b1:	66 89 93 46 07 00 00 	mov    %dx,0x746(%rbx)
ffffffff8020e7b8:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e7bb:	66 89 83 50 07 00 00 	mov    %ax,0x750(%rbx)
ffffffff8020e7c2:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e7c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e7ca:	66 89 ab 52 07 00 00 	mov    %bp,0x752(%rbx)
ffffffff8020e7d1:	66 89 93 56 07 00 00 	mov    %dx,0x756(%rbx)
ffffffff8020e7d8:	89 83 58 07 00 00    	mov    %eax,0x758(%rbx)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8020e7de:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020e7e3:	48 c7 c0 f7 bd 20 80 	mov    $0xffffffff8020bdf7,%rax
ffffffff8020e7ea:	66 89 93 62 07 00 00 	mov    %dx,0x762(%rbx)
ffffffff8020e7f1:	66 89 8b 72 07 00 00 	mov    %cx,0x772(%rbx)
ffffffff8020e7f8:	66 89 83 60 07 00 00 	mov    %ax,0x760(%rbx)
ffffffff8020e7ff:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e802:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e806:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e80a:	89 83 68 07 00 00    	mov    %eax,0x768(%rbx)
ffffffff8020e810:	48 c7 c0 03 be 20 80 	mov    $0xffffffff8020be03,%rax
ffffffff8020e817:	66 89 93 66 07 00 00 	mov    %dx,0x766(%rbx)
ffffffff8020e81e:	66 89 83 70 07 00 00 	mov    %ax,0x770(%rbx)
ffffffff8020e825:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e828:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e82c:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e830:	66 89 b3 82 07 00 00 	mov    %si,0x782(%rbx)

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8020e837:	89 83 78 07 00 00    	mov    %eax,0x778(%rbx)

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e83d:	48 c7 c0 0f be 20 80 	mov    $0xffffffff8020be0f,%rax

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8020e844:	66 89 93 76 07 00 00 	mov    %dx,0x776(%rbx)

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e84b:	66 89 83 80 07 00 00 	mov    %ax,0x780(%rbx)
ffffffff8020e852:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e855:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e859:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 106); RME_X64_USER_IDT(IDT_Table, 107);
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
ffffffff8020e85d:	c7 83 3c 07 00 00 00 	movl   $0x0,0x73c(%rbx)
ffffffff8020e864:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8020e867:	c6 83 44 07 00 00 00 	movb   $0x0,0x744(%rbx)
ffffffff8020e86e:	c6 83 45 07 00 00 8e 	movb   $0x8e,0x745(%rbx)
ffffffff8020e875:	c7 83 4c 07 00 00 00 	movl   $0x0,0x74c(%rbx)
ffffffff8020e87c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020e87f:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8020e885:	c6 83 54 07 00 00 00 	movb   $0x0,0x754(%rbx)
ffffffff8020e88c:	c6 83 55 07 00 00 8e 	movb   $0x8e,0x755(%rbx)
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8020e893:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 108); RME_X64_USER_IDT(IDT_Table, 109);

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
ffffffff8020e898:	c7 83 5c 07 00 00 00 	movl   $0x0,0x75c(%rbx)
ffffffff8020e89f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8020e8a2:	c6 83 64 07 00 00 00 	movb   $0x0,0x764(%rbx)

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8020e8a9:	b9 08 00 00 00       	mov    $0x8,%ecx

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8020e8ae:	c6 83 65 07 00 00 8e 	movb   $0x8e,0x765(%rbx)
ffffffff8020e8b5:	c7 83 6c 07 00 00 00 	movl   $0x0,0x76c(%rbx)
ffffffff8020e8bc:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8020e8bf:	be 08 00 00 00       	mov    $0x8,%esi

    RME_X64_USER_IDT(IDT_Table, 110); RME_X64_USER_IDT(IDT_Table, 111);
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);
ffffffff8020e8c4:	c6 83 74 07 00 00 00 	movb   $0x0,0x774(%rbx)
ffffffff8020e8cb:	c6 83 75 07 00 00 8e 	movb   $0x8e,0x775(%rbx)
ffffffff8020e8d2:	c7 83 7c 07 00 00 00 	movl   $0x0,0x77c(%rbx)
ffffffff8020e8d9:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e8dc:	c6 83 84 07 00 00 00 	movb   $0x0,0x784(%rbx)
ffffffff8020e8e3:	89 83 88 07 00 00    	mov    %eax,0x788(%rbx)
ffffffff8020e8e9:	48 c7 c0 1b be 20 80 	mov    $0xffffffff8020be1b,%rax
ffffffff8020e8f0:	66 89 93 86 07 00 00 	mov    %dx,0x786(%rbx)
ffffffff8020e8f7:	66 89 83 90 07 00 00 	mov    %ax,0x790(%rbx)
ffffffff8020e8fe:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e901:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e905:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e909:	89 83 98 07 00 00    	mov    %eax,0x798(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020e90f:	48 c7 c0 27 be 20 80 	mov    $0xffffffff8020be27,%rax
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e916:	66 89 93 96 07 00 00 	mov    %dx,0x796(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020e91d:	66 89 83 a0 07 00 00 	mov    %ax,0x7a0(%rbx)
ffffffff8020e924:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e927:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e92b:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e92f:	66 89 bb 92 07 00 00 	mov    %di,0x792(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020e936:	89 83 a8 07 00 00    	mov    %eax,0x7a8(%rbx)
ffffffff8020e93c:	48 c7 c0 33 be 20 80 	mov    $0xffffffff8020be33,%rax
ffffffff8020e943:	66 89 93 a6 07 00 00 	mov    %dx,0x7a6(%rbx)
ffffffff8020e94a:	66 89 83 b0 07 00 00 	mov    %ax,0x7b0(%rbx)
ffffffff8020e951:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e954:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020e958:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e95c:	89 83 b8 07 00 00    	mov    %eax,0x7b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020e962:	48 c7 c0 3f be 20 80 	mov    $0xffffffff8020be3f,%rax
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020e969:	66 89 93 b6 07 00 00 	mov    %dx,0x7b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020e970:	48 89 c2             	mov    %rax,%rdx
ffffffff8020e973:	66 89 83 c0 07 00 00 	mov    %ax,0x7c0(%rbx)
ffffffff8020e97a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020e97e:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020e982:	66 44 89 83 a2 07 00 	mov    %r8w,0x7a2(%rbx)
ffffffff8020e989:	00 
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020e98a:	89 83 c8 07 00 00    	mov    %eax,0x7c8(%rbx)
ffffffff8020e990:	48 c7 c0 4b be 20 80 	mov    $0xffffffff8020be4b,%rax
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020e997:	66 44 89 8b b2 07 00 	mov    %r9w,0x7b2(%rbx)
ffffffff8020e99e:	00 
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020e99f:	66 44 89 93 c2 07 00 	mov    %r10w,0x7c2(%rbx)
ffffffff8020e9a6:	00 
ffffffff8020e9a7:	66 89 93 c6 07 00 00 	mov    %dx,0x7c6(%rbx)
ffffffff8020e9ae:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e9b1:	c6 83 85 07 00 00 8e 	movb   $0x8e,0x785(%rbx)
ffffffff8020e9b8:	c7 83 8c 07 00 00 00 	movl   $0x0,0x78c(%rbx)
ffffffff8020e9bf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020e9c2:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e9c6:	c6 83 94 07 00 00 00 	movb   $0x0,0x794(%rbx)
ffffffff8020e9cd:	c6 83 95 07 00 00 8e 	movb   $0x8e,0x795(%rbx)
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8020e9d4:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 112); RME_X64_USER_IDT(IDT_Table, 113);
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
ffffffff8020e9d9:	c7 83 9c 07 00 00 00 	movl   $0x0,0x79c(%rbx)
ffffffff8020e9e0:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020e9e3:	c6 83 a4 07 00 00 00 	movb   $0x0,0x7a4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8020e9ea:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020e9f0:	c6 83 a5 07 00 00 8e 	movb   $0x8e,0x7a5(%rbx)
ffffffff8020e9f7:	c7 83 ac 07 00 00 00 	movl   $0x0,0x7ac(%rbx)
ffffffff8020e9fe:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8020ea01:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020ea07:	c6 83 b4 07 00 00 00 	movb   $0x0,0x7b4(%rbx)
ffffffff8020ea0e:	c6 83 b5 07 00 00 8e 	movb   $0x8e,0x7b5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8020ea15:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 114); RME_X64_USER_IDT(IDT_Table, 115);
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
ffffffff8020ea1b:	c7 83 bc 07 00 00 00 	movl   $0x0,0x7bc(%rbx)
ffffffff8020ea22:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020ea25:	c6 83 c4 07 00 00 00 	movb   $0x0,0x7c4(%rbx)
ffffffff8020ea2c:	c6 83 c5 07 00 00 8e 	movb   $0x8e,0x7c5(%rbx)
ffffffff8020ea33:	c7 83 cc 07 00 00 00 	movl   $0x0,0x7cc(%rbx)
ffffffff8020ea3a:	00 00 00 
ffffffff8020ea3d:	66 89 83 d0 07 00 00 	mov    %ax,0x7d0(%rbx)
ffffffff8020ea44:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ea48:	66 89 93 d6 07 00 00 	mov    %dx,0x7d6(%rbx)
ffffffff8020ea4f:	89 83 d8 07 00 00    	mov    %eax,0x7d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8020ea55:	48 c7 c0 57 be 20 80 	mov    $0xffffffff8020be57,%rax
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020ea5c:	66 44 89 9b d2 07 00 	mov    %r11w,0x7d2(%rbx)
ffffffff8020ea63:	00 
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8020ea64:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ea67:	66 89 83 e0 07 00 00 	mov    %ax,0x7e0(%rbx)
ffffffff8020ea6e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ea72:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ea76:	89 83 e8 07 00 00    	mov    %eax,0x7e8(%rbx)
ffffffff8020ea7c:	48 c7 c0 63 be 20 80 	mov    $0xffffffff8020be63,%rax
ffffffff8020ea83:	66 89 93 e6 07 00 00 	mov    %dx,0x7e6(%rbx)
ffffffff8020ea8a:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020ea8f:	66 89 83 f0 07 00 00 	mov    %ax,0x7f0(%rbx)
ffffffff8020ea96:	66 89 93 f2 07 00 00 	mov    %dx,0x7f2(%rbx)
ffffffff8020ea9d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eaa0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eaa4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020eaa8:	89 83 f8 07 00 00    	mov    %eax,0x7f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8020eaae:	48 c7 c0 6f be 20 80 	mov    $0xffffffff8020be6f,%rax
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8020eab5:	66 89 93 f6 07 00 00 	mov    %dx,0x7f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8020eabc:	66 89 83 00 08 00 00 	mov    %ax,0x800(%rbx)
ffffffff8020eac3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eac6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eaca:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8020eace:	66 89 ab e2 07 00 00 	mov    %bp,0x7e2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8020ead5:	89 83 08 08 00 00    	mov    %eax,0x808(%rbx)
ffffffff8020eadb:	48 c7 c0 7e be 20 80 	mov    $0xffffffff8020be7e,%rax
ffffffff8020eae2:	66 89 93 06 08 00 00 	mov    %dx,0x806(%rbx)
ffffffff8020eae9:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eaec:	66 89 83 10 08 00 00 	mov    %ax,0x810(%rbx)
ffffffff8020eaf3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eaf7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020eafb:	66 89 8b 02 08 00 00 	mov    %cx,0x802(%rbx)
ffffffff8020eb02:	66 89 b3 12 08 00 00 	mov    %si,0x812(%rbx)
ffffffff8020eb09:	66 89 93 16 08 00 00 	mov    %dx,0x816(%rbx)
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020eb10:	c6 83 d4 07 00 00 00 	movb   $0x0,0x7d4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020eb17:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 116); RME_X64_USER_IDT(IDT_Table, 117);
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
ffffffff8020eb1d:	c6 83 d5 07 00 00 8e 	movb   $0x8e,0x7d5(%rbx)
ffffffff8020eb24:	c7 83 dc 07 00 00 00 	movl   $0x0,0x7dc(%rbx)
ffffffff8020eb2b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020eb2e:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8020eb33:	c6 83 e4 07 00 00 00 	movb   $0x0,0x7e4(%rbx)
ffffffff8020eb3a:	c6 83 e5 07 00 00 8e 	movb   $0x8e,0x7e5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8020eb41:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8020eb46:	c7 83 ec 07 00 00 00 	movl   $0x0,0x7ec(%rbx)
ffffffff8020eb4d:	00 00 00 
ffffffff8020eb50:	c6 83 f4 07 00 00 00 	movb   $0x0,0x7f4(%rbx)

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8020eb57:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 118); RME_X64_USER_IDT(IDT_Table, 119);

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
ffffffff8020eb5c:	c6 83 f5 07 00 00 8e 	movb   $0x8e,0x7f5(%rbx)
ffffffff8020eb63:	c7 83 fc 07 00 00 00 	movl   $0x0,0x7fc(%rbx)
ffffffff8020eb6a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8020eb6d:	c6 83 04 08 00 00 00 	movb   $0x0,0x804(%rbx)
ffffffff8020eb74:	c6 83 05 08 00 00 8e 	movb   $0x8e,0x805(%rbx)
ffffffff8020eb7b:	c7 83 0c 08 00 00 00 	movl   $0x0,0x80c(%rbx)
ffffffff8020eb82:	00 00 00 
ffffffff8020eb85:	c6 83 14 08 00 00 00 	movb   $0x0,0x814(%rbx)
ffffffff8020eb8c:	c6 83 15 08 00 00 8e 	movb   $0x8e,0x815(%rbx)
ffffffff8020eb93:	89 83 18 08 00 00    	mov    %eax,0x818(%rbx)

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8020eb99:	48 c7 c0 8d be 20 80 	mov    $0xffffffff8020be8d,%rax
ffffffff8020eba0:	66 89 83 20 08 00 00 	mov    %ax,0x820(%rbx)
ffffffff8020eba7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ebaa:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ebae:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ebb2:	89 83 28 08 00 00    	mov    %eax,0x828(%rbx)
ffffffff8020ebb8:	48 c7 c0 9c be 20 80 	mov    $0xffffffff8020be9c,%rax
ffffffff8020ebbf:	66 89 93 26 08 00 00 	mov    %dx,0x826(%rbx)
ffffffff8020ebc6:	66 89 83 30 08 00 00 	mov    %ax,0x830(%rbx)
ffffffff8020ebcd:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ebd0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ebd4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ebd8:	66 89 bb 22 08 00 00 	mov    %di,0x822(%rbx)
ffffffff8020ebdf:	89 83 38 08 00 00    	mov    %eax,0x838(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8020ebe5:	48 c7 c0 ab be 20 80 	mov    $0xffffffff8020beab,%rax
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8020ebec:	66 89 93 36 08 00 00 	mov    %dx,0x836(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8020ebf3:	66 89 83 40 08 00 00 	mov    %ax,0x840(%rbx)
ffffffff8020ebfa:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ebfd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ec01:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ec05:	89 83 48 08 00 00    	mov    %eax,0x848(%rbx)
ffffffff8020ec0b:	48 c7 c0 ba be 20 80 	mov    $0xffffffff8020beba,%rax
ffffffff8020ec12:	66 89 93 46 08 00 00 	mov    %dx,0x846(%rbx)
ffffffff8020ec19:	66 89 83 50 08 00 00 	mov    %ax,0x850(%rbx)
ffffffff8020ec20:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ec23:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ec27:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8020ec2b:	66 44 89 83 32 08 00 	mov    %r8w,0x832(%rbx)
ffffffff8020ec32:	00 
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8020ec33:	89 83 58 08 00 00    	mov    %eax,0x858(%rbx)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020ec39:	48 c7 c0 c9 be 20 80 	mov    $0xffffffff8020bec9,%rax
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8020ec40:	66 89 93 56 08 00 00 	mov    %dx,0x856(%rbx)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020ec47:	66 89 83 60 08 00 00 	mov    %ax,0x860(%rbx)
ffffffff8020ec4e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ec51:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ec55:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8020ec59:	66 44 89 8b 42 08 00 	mov    %r9w,0x842(%rbx)
ffffffff8020ec60:	00 
ffffffff8020ec61:	66 44 89 93 52 08 00 	mov    %r10w,0x852(%rbx)
ffffffff8020ec68:	00 
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020ec69:	66 44 89 9b 62 08 00 	mov    %r11w,0x862(%rbx)
ffffffff8020ec70:	00 

    RME_X64_USER_IDT(IDT_Table, 120); RME_X64_USER_IDT(IDT_Table, 121);
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);
ffffffff8020ec71:	c7 83 1c 08 00 00 00 	movl   $0x0,0x81c(%rbx)
ffffffff8020ec78:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8020ec7b:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8020ec80:	c6 83 24 08 00 00 00 	movb   $0x0,0x824(%rbx)
ffffffff8020ec87:	c6 83 25 08 00 00 8e 	movb   $0x8e,0x825(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8020ec8e:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8020ec94:	c7 83 2c 08 00 00 00 	movl   $0x0,0x82c(%rbx)
ffffffff8020ec9b:	00 00 00 
ffffffff8020ec9e:	c6 83 34 08 00 00 00 	movb   $0x0,0x834(%rbx)
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8020eca5:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 122); RME_X64_USER_IDT(IDT_Table, 123);
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
ffffffff8020ecab:	c6 83 35 08 00 00 8e 	movb   $0x8e,0x835(%rbx)
ffffffff8020ecb2:	c7 83 3c 08 00 00 00 	movl   $0x0,0x83c(%rbx)
ffffffff8020ecb9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8020ecbc:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8020ecc2:	c6 83 44 08 00 00 00 	movb   $0x0,0x844(%rbx)
ffffffff8020ecc9:	c6 83 45 08 00 00 8e 	movb   $0x8e,0x845(%rbx)
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8020ecd0:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 124); RME_X64_USER_IDT(IDT_Table, 125);
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
ffffffff8020ecd6:	c7 83 4c 08 00 00 00 	movl   $0x0,0x84c(%rbx)
ffffffff8020ecdd:	00 00 00 
ffffffff8020ece0:	c6 83 54 08 00 00 00 	movb   $0x0,0x854(%rbx)
ffffffff8020ece7:	c6 83 55 08 00 00 8e 	movb   $0x8e,0x855(%rbx)
ffffffff8020ecee:	c7 83 5c 08 00 00 00 	movl   $0x0,0x85c(%rbx)
ffffffff8020ecf5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020ecf8:	c6 83 64 08 00 00 00 	movb   $0x0,0x864(%rbx)
ffffffff8020ecff:	c6 83 65 08 00 00 8e 	movb   $0x8e,0x865(%rbx)
ffffffff8020ed06:	89 83 68 08 00 00    	mov    %eax,0x868(%rbx)
ffffffff8020ed0c:	48 c7 c0 d8 be 20 80 	mov    $0xffffffff8020bed8,%rax
ffffffff8020ed13:	66 89 93 66 08 00 00 	mov    %dx,0x866(%rbx)
ffffffff8020ed1a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed1d:	66 89 83 70 08 00 00 	mov    %ax,0x870(%rbx)
ffffffff8020ed24:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ed28:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ed2c:	89 83 78 08 00 00    	mov    %eax,0x878(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8020ed32:	48 c7 c0 e7 be 20 80 	mov    $0xffffffff8020bee7,%rax
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020ed39:	66 89 93 76 08 00 00 	mov    %dx,0x876(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8020ed40:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020ed45:	66 89 83 80 08 00 00 	mov    %ax,0x880(%rbx)
ffffffff8020ed4c:	66 89 93 82 08 00 00 	mov    %dx,0x882(%rbx)
ffffffff8020ed53:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed56:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ed5a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ed5e:	89 83 88 08 00 00    	mov    %eax,0x888(%rbx)
ffffffff8020ed64:	48 c7 c0 f6 be 20 80 	mov    $0xffffffff8020bef6,%rax
ffffffff8020ed6b:	66 89 93 86 08 00 00 	mov    %dx,0x886(%rbx)
ffffffff8020ed72:	66 89 83 90 08 00 00 	mov    %ax,0x890(%rbx)
ffffffff8020ed79:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ed7c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ed80:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020ed84:	66 89 ab 72 08 00 00 	mov    %bp,0x872(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8020ed8b:	89 83 98 08 00 00    	mov    %eax,0x898(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8020ed91:	48 c7 c0 05 bf 20 80 	mov    $0xffffffff8020bf05,%rax
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8020ed98:	66 89 93 96 08 00 00 	mov    %dx,0x896(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8020ed9f:	66 89 83 a0 08 00 00 	mov    %ax,0x8a0(%rbx)
ffffffff8020eda6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eda9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020edad:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020edb1:	89 83 a8 08 00 00    	mov    %eax,0x8a8(%rbx)
ffffffff8020edb7:	48 c7 c0 14 bf 20 80 	mov    $0xffffffff8020bf14,%rax
ffffffff8020edbe:	66 89 93 a6 08 00 00 	mov    %dx,0x8a6(%rbx)
ffffffff8020edc5:	66 89 83 b0 08 00 00 	mov    %ax,0x8b0(%rbx)
ffffffff8020edcc:	48 89 c2             	mov    %rax,%rdx
ffffffff8020edcf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020edd3:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8020edd7:	66 89 8b 92 08 00 00 	mov    %cx,0x892(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8020edde:	66 89 b3 a2 08 00 00 	mov    %si,0x8a2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020ede5:	c7 83 6c 08 00 00 00 	movl   $0x0,0x86c(%rbx)
ffffffff8020edec:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8020edef:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020edf4:	c6 83 74 08 00 00 00 	movb   $0x0,0x874(%rbx)
ffffffff8020edfb:	c6 83 75 08 00 00 8e 	movb   $0x8e,0x875(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff8020ee02:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 126); RME_X64_USER_IDT(IDT_Table, 127);
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
ffffffff8020ee07:	c7 83 7c 08 00 00 00 	movl   $0x0,0x87c(%rbx)
ffffffff8020ee0e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8020ee11:	c6 83 84 08 00 00 00 	movb   $0x0,0x884(%rbx)
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff8020ee18:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 128); RME_X64_USER_IDT(IDT_Table, 129);

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
ffffffff8020ee1d:	c6 83 85 08 00 00 8e 	movb   $0x8e,0x885(%rbx)
ffffffff8020ee24:	c7 83 8c 08 00 00 00 	movl   $0x0,0x88c(%rbx)
ffffffff8020ee2b:	00 00 00 
ffffffff8020ee2e:	c6 83 94 08 00 00 00 	movb   $0x0,0x894(%rbx)
ffffffff8020ee35:	c6 83 95 08 00 00 8e 	movb   $0x8e,0x895(%rbx)
ffffffff8020ee3c:	c7 83 9c 08 00 00 00 	movl   $0x0,0x89c(%rbx)
ffffffff8020ee43:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8020ee46:	c6 83 a4 08 00 00 00 	movb   $0x0,0x8a4(%rbx)
ffffffff8020ee4d:	c6 83 a5 08 00 00 8e 	movb   $0x8e,0x8a5(%rbx)
ffffffff8020ee54:	c7 83 ac 08 00 00 00 	movl   $0x0,0x8ac(%rbx)
ffffffff8020ee5b:	00 00 00 
ffffffff8020ee5e:	66 89 bb b2 08 00 00 	mov    %di,0x8b2(%rbx)
ffffffff8020ee65:	89 83 b8 08 00 00    	mov    %eax,0x8b8(%rbx)

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8020ee6b:	48 c7 c0 23 bf 20 80 	mov    $0xffffffff8020bf23,%rax

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8020ee72:	66 89 93 b6 08 00 00 	mov    %dx,0x8b6(%rbx)

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8020ee79:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ee7c:	66 89 83 c0 08 00 00 	mov    %ax,0x8c0(%rbx)
ffffffff8020ee83:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ee87:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ee8b:	66 44 89 83 c2 08 00 	mov    %r8w,0x8c2(%rbx)
ffffffff8020ee92:	00 
ffffffff8020ee93:	89 83 c8 08 00 00    	mov    %eax,0x8c8(%rbx)
ffffffff8020ee99:	48 c7 c0 32 bf 20 80 	mov    $0xffffffff8020bf32,%rax
ffffffff8020eea0:	66 89 93 c6 08 00 00 	mov    %dx,0x8c6(%rbx)
ffffffff8020eea7:	66 89 83 d0 08 00 00 	mov    %ax,0x8d0(%rbx)
ffffffff8020eeae:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eeb1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eeb5:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020eeb9:	89 83 d8 08 00 00    	mov    %eax,0x8d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8020eebf:	48 c7 c0 41 bf 20 80 	mov    $0xffffffff8020bf41,%rax
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8020eec6:	66 89 93 d6 08 00 00 	mov    %dx,0x8d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8020eecd:	66 89 83 e0 08 00 00 	mov    %ax,0x8e0(%rbx)
ffffffff8020eed4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020eed7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020eedb:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8020eedf:	66 44 89 8b d2 08 00 	mov    %r9w,0x8d2(%rbx)
ffffffff8020eee6:	00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8020eee7:	89 83 e8 08 00 00    	mov    %eax,0x8e8(%rbx)
ffffffff8020eeed:	48 c7 c0 50 bf 20 80 	mov    $0xffffffff8020bf50,%rax
ffffffff8020eef4:	66 89 93 e6 08 00 00 	mov    %dx,0x8e6(%rbx)
ffffffff8020eefb:	66 89 83 f0 08 00 00 	mov    %ax,0x8f0(%rbx)
ffffffff8020ef02:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ef05:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ef09:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ef0d:	89 83 f8 08 00 00    	mov    %eax,0x8f8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8020ef13:	48 c7 c0 5f bf 20 80 	mov    $0xffffffff8020bf5f,%rax
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8020ef1a:	66 89 93 f6 08 00 00 	mov    %dx,0x8f6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8020ef21:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8020ef24:	66 44 89 93 e2 08 00 	mov    %r10w,0x8e2(%rbx)
ffffffff8020ef2b:	00 
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8020ef2c:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8020ef30:	66 44 89 9b f2 08 00 	mov    %r11w,0x8f2(%rbx)
ffffffff8020ef37:	00 

    RME_X64_USER_IDT(IDT_Table, 130); RME_X64_USER_IDT(IDT_Table, 131);
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);
ffffffff8020ef38:	c6 83 b4 08 00 00 00 	movb   $0x0,0x8b4(%rbx)
ffffffff8020ef3f:	c6 83 b5 08 00 00 8e 	movb   $0x8e,0x8b5(%rbx)
ffffffff8020ef46:	c7 83 bc 08 00 00 00 	movl   $0x0,0x8bc(%rbx)
ffffffff8020ef4d:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020ef50:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8020ef55:	c6 83 c4 08 00 00 00 	movb   $0x0,0x8c4(%rbx)
ffffffff8020ef5c:	c6 83 c5 08 00 00 8e 	movb   $0x8e,0x8c5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020ef63:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8020ef69:	c7 83 cc 08 00 00 00 	movl   $0x0,0x8cc(%rbx)
ffffffff8020ef70:	00 00 00 
ffffffff8020ef73:	c6 83 d4 08 00 00 00 	movb   $0x0,0x8d4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020ef7a:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 132); RME_X64_USER_IDT(IDT_Table, 133);
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
ffffffff8020ef80:	c6 83 d5 08 00 00 8e 	movb   $0x8e,0x8d5(%rbx)
ffffffff8020ef87:	c7 83 dc 08 00 00 00 	movl   $0x0,0x8dc(%rbx)
ffffffff8020ef8e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020ef91:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8020ef97:	c6 83 e4 08 00 00 00 	movb   $0x0,0x8e4(%rbx)
ffffffff8020ef9e:	c6 83 e5 08 00 00 8e 	movb   $0x8e,0x8e5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8020efa5:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 134); RME_X64_USER_IDT(IDT_Table, 135);
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
ffffffff8020efab:	c7 83 ec 08 00 00 00 	movl   $0x0,0x8ec(%rbx)
ffffffff8020efb2:	00 00 00 
ffffffff8020efb5:	c6 83 f4 08 00 00 00 	movb   $0x0,0x8f4(%rbx)
ffffffff8020efbc:	c6 83 f5 08 00 00 8e 	movb   $0x8e,0x8f5(%rbx)
ffffffff8020efc3:	c7 83 fc 08 00 00 00 	movl   $0x0,0x8fc(%rbx)
ffffffff8020efca:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8020efcd:	66 89 83 00 09 00 00 	mov    %ax,0x900(%rbx)
ffffffff8020efd4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020efd8:	66 89 93 06 09 00 00 	mov    %dx,0x906(%rbx)
ffffffff8020efdf:	89 83 08 09 00 00    	mov    %eax,0x908(%rbx)
ffffffff8020efe5:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020efea:	48 c7 c0 6e bf 20 80 	mov    $0xffffffff8020bf6e,%rax
ffffffff8020eff1:	66 89 83 10 09 00 00 	mov    %ax,0x910(%rbx)
ffffffff8020eff8:	66 89 93 12 09 00 00 	mov    %dx,0x912(%rbx)
ffffffff8020efff:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f002:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f006:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f00a:	66 89 ab 02 09 00 00 	mov    %bp,0x902(%rbx)
ffffffff8020f011:	89 83 18 09 00 00    	mov    %eax,0x918(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff8020f017:	48 c7 c0 7d bf 20 80 	mov    $0xffffffff8020bf7d,%rax
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8020f01e:	66 89 93 16 09 00 00 	mov    %dx,0x916(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff8020f025:	66 89 83 20 09 00 00 	mov    %ax,0x920(%rbx)
ffffffff8020f02c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f02f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f033:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f037:	89 83 28 09 00 00    	mov    %eax,0x928(%rbx)
ffffffff8020f03d:	48 c7 c0 8c bf 20 80 	mov    $0xffffffff8020bf8c,%rax
ffffffff8020f044:	66 89 93 26 09 00 00 	mov    %dx,0x926(%rbx)
ffffffff8020f04b:	66 89 83 30 09 00 00 	mov    %ax,0x930(%rbx)
ffffffff8020f052:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f055:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f059:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f05d:	66 89 8b 22 09 00 00 	mov    %cx,0x922(%rbx)
ffffffff8020f064:	89 83 38 09 00 00    	mov    %eax,0x938(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020f06a:	48 c7 c0 9b bf 20 80 	mov    $0xffffffff8020bf9b,%rax
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff8020f071:	66 89 93 36 09 00 00 	mov    %dx,0x936(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020f078:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f07b:	66 89 83 40 09 00 00 	mov    %ax,0x940(%rbx)
ffffffff8020f082:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f086:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff8020f08a:	66 89 b3 32 09 00 00 	mov    %si,0x932(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020f091:	66 89 bb 42 09 00 00 	mov    %di,0x942(%rbx)
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8020f098:	c6 83 04 09 00 00 00 	movb   $0x0,0x904(%rbx)
ffffffff8020f09f:	c6 83 05 09 00 00 8e 	movb   $0x8e,0x905(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8020f0a6:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8020f0ab:	c7 83 0c 09 00 00 00 	movl   $0x0,0x90c(%rbx)
ffffffff8020f0b2:	00 00 00 
ffffffff8020f0b5:	c6 83 14 09 00 00 00 	movb   $0x0,0x914(%rbx)
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8020f0bc:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 136); RME_X64_USER_IDT(IDT_Table, 137);
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
ffffffff8020f0c1:	c6 83 15 09 00 00 8e 	movb   $0x8e,0x915(%rbx)
ffffffff8020f0c8:	c7 83 1c 09 00 00 00 	movl   $0x0,0x91c(%rbx)
ffffffff8020f0cf:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8020f0d2:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff8020f0d7:	c6 83 24 09 00 00 00 	movb   $0x0,0x924(%rbx)
ffffffff8020f0de:	c6 83 25 09 00 00 8e 	movb   $0x8e,0x925(%rbx)
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8020f0e5:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 138); RME_X64_USER_IDT(IDT_Table, 139);

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
ffffffff8020f0ea:	c7 83 2c 09 00 00 00 	movl   $0x0,0x92c(%rbx)
ffffffff8020f0f1:	00 00 00 
ffffffff8020f0f4:	c6 83 34 09 00 00 00 	movb   $0x0,0x934(%rbx)
ffffffff8020f0fb:	c6 83 35 09 00 00 8e 	movb   $0x8e,0x935(%rbx)
ffffffff8020f102:	c7 83 3c 09 00 00 00 	movl   $0x0,0x93c(%rbx)
ffffffff8020f109:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020f10c:	c6 83 44 09 00 00 00 	movb   $0x0,0x944(%rbx)
ffffffff8020f113:	c6 83 45 09 00 00 8e 	movb   $0x8e,0x945(%rbx)
ffffffff8020f11a:	66 89 93 46 09 00 00 	mov    %dx,0x946(%rbx)
ffffffff8020f121:	89 83 48 09 00 00    	mov    %eax,0x948(%rbx)
ffffffff8020f127:	48 c7 c0 aa bf 20 80 	mov    $0xffffffff8020bfaa,%rax
ffffffff8020f12e:	66 89 83 50 09 00 00 	mov    %ax,0x950(%rbx)
ffffffff8020f135:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f138:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f13c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f140:	89 83 58 09 00 00    	mov    %eax,0x958(%rbx)

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020f146:	48 c7 c0 b9 bf 20 80 	mov    $0xffffffff8020bfb9,%rax

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020f14d:	66 89 93 56 09 00 00 	mov    %dx,0x956(%rbx)

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020f154:	66 89 83 60 09 00 00 	mov    %ax,0x960(%rbx)
ffffffff8020f15b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f15e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f162:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020f166:	66 44 89 83 52 09 00 	mov    %r8w,0x952(%rbx)
ffffffff8020f16d:	00 

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020f16e:	89 83 68 09 00 00    	mov    %eax,0x968(%rbx)
ffffffff8020f174:	48 c7 c0 c8 bf 20 80 	mov    $0xffffffff8020bfc8,%rax
ffffffff8020f17b:	66 89 93 66 09 00 00 	mov    %dx,0x966(%rbx)
ffffffff8020f182:	66 89 83 70 09 00 00 	mov    %ax,0x970(%rbx)
ffffffff8020f189:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f18c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f190:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f194:	89 83 78 09 00 00    	mov    %eax,0x978(%rbx)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8020f19a:	48 c7 c0 d7 bf 20 80 	mov    $0xffffffff8020bfd7,%rax
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020f1a1:	66 89 93 76 09 00 00 	mov    %dx,0x976(%rbx)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8020f1a8:	66 89 83 80 09 00 00 	mov    %ax,0x980(%rbx)
ffffffff8020f1af:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f1b2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f1b6:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020f1ba:	66 44 89 8b 62 09 00 	mov    %r9w,0x962(%rbx)
ffffffff8020f1c1:	00 
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8020f1c2:	89 83 88 09 00 00    	mov    %eax,0x988(%rbx)
ffffffff8020f1c8:	48 c7 c0 e6 bf 20 80 	mov    $0xffffffff8020bfe6,%rax
ffffffff8020f1cf:	66 89 93 86 09 00 00 	mov    %dx,0x986(%rbx)
ffffffff8020f1d6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f1d9:	66 89 83 90 09 00 00 	mov    %ax,0x990(%rbx)
ffffffff8020f1e0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f1e4:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020f1e8:	66 44 89 93 72 09 00 	mov    %r10w,0x972(%rbx)
ffffffff8020f1ef:	00 
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8020f1f0:	66 44 89 9b 82 09 00 	mov    %r11w,0x982(%rbx)
ffffffff8020f1f7:	00 
ffffffff8020f1f8:	66 89 ab 92 09 00 00 	mov    %bp,0x992(%rbx)

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020f1ff:	c7 83 4c 09 00 00 00 	movl   $0x0,0x94c(%rbx)
ffffffff8020f206:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f209:	41 b8 08 00 00 00    	mov    $0x8,%r8d

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020f20f:	c6 83 54 09 00 00 00 	movb   $0x0,0x954(%rbx)
ffffffff8020f216:	c6 83 55 09 00 00 8e 	movb   $0x8e,0x955(%rbx)

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f21d:	41 b9 08 00 00 00    	mov    $0x8,%r9d

    RME_X64_USER_IDT(IDT_Table, 140); RME_X64_USER_IDT(IDT_Table, 141);
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);
ffffffff8020f223:	c7 83 5c 09 00 00 00 	movl   $0x0,0x95c(%rbx)
ffffffff8020f22a:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020f22d:	c6 83 64 09 00 00 00 	movb   $0x0,0x964(%rbx)
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8020f234:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020f23a:	c6 83 65 09 00 00 8e 	movb   $0x8e,0x965(%rbx)
ffffffff8020f241:	c7 83 6c 09 00 00 00 	movl   $0x0,0x96c(%rbx)
ffffffff8020f248:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8020f24b:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020f251:	c6 83 74 09 00 00 00 	movb   $0x0,0x974(%rbx)
ffffffff8020f258:	c6 83 75 09 00 00 8e 	movb   $0x8e,0x975(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8020f25f:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 142); RME_X64_USER_IDT(IDT_Table, 143);
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
ffffffff8020f264:	c7 83 7c 09 00 00 00 	movl   $0x0,0x97c(%rbx)
ffffffff8020f26b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8020f26e:	c6 83 84 09 00 00 00 	movb   $0x0,0x984(%rbx)
ffffffff8020f275:	c6 83 85 09 00 00 8e 	movb   $0x8e,0x985(%rbx)
ffffffff8020f27c:	c7 83 8c 09 00 00 00 	movl   $0x0,0x98c(%rbx)
ffffffff8020f283:	00 00 00 
ffffffff8020f286:	c6 83 94 09 00 00 00 	movb   $0x0,0x994(%rbx)
ffffffff8020f28d:	66 89 93 96 09 00 00 	mov    %dx,0x996(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8020f294:	ba 08 00 00 00       	mov    $0x8,%edx
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8020f299:	89 83 98 09 00 00    	mov    %eax,0x998(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8020f29f:	48 c7 c0 f5 bf 20 80 	mov    $0xffffffff8020bff5,%rax
ffffffff8020f2a6:	66 89 93 a2 09 00 00 	mov    %dx,0x9a2(%rbx)
ffffffff8020f2ad:	66 89 83 a0 09 00 00 	mov    %ax,0x9a0(%rbx)
ffffffff8020f2b4:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f2b7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2bb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f2bf:	89 83 a8 09 00 00    	mov    %eax,0x9a8(%rbx)
ffffffff8020f2c5:	48 c7 c0 04 c0 20 80 	mov    $0xffffffff8020c004,%rax
ffffffff8020f2cc:	66 89 93 a6 09 00 00 	mov    %dx,0x9a6(%rbx)
ffffffff8020f2d3:	66 89 83 b0 09 00 00 	mov    %ax,0x9b0(%rbx)
ffffffff8020f2da:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f2dd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f2e1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f2e5:	66 89 8b b2 09 00 00 	mov    %cx,0x9b2(%rbx)
ffffffff8020f2ec:	89 83 b8 09 00 00    	mov    %eax,0x9b8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8020f2f2:	48 c7 c0 13 c0 20 80 	mov    $0xffffffff8020c013,%rax
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8020f2f9:	66 89 93 b6 09 00 00 	mov    %dx,0x9b6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8020f300:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f303:	66 89 83 c0 09 00 00 	mov    %ax,0x9c0(%rbx)
ffffffff8020f30a:	66 89 b3 c2 09 00 00 	mov    %si,0x9c2(%rbx)
ffffffff8020f311:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f315:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f319:	66 89 bb d2 09 00 00 	mov    %di,0x9d2(%rbx)
ffffffff8020f320:	89 83 c8 09 00 00    	mov    %eax,0x9c8(%rbx)
ffffffff8020f326:	48 c7 c0 22 c0 20 80 	mov    $0xffffffff8020c022,%rax
ffffffff8020f32d:	66 89 93 c6 09 00 00 	mov    %dx,0x9c6(%rbx)
ffffffff8020f334:	66 89 83 d0 09 00 00 	mov    %ax,0x9d0(%rbx)
ffffffff8020f33b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f33e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f342:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f346:	89 83 d8 09 00 00    	mov    %eax,0x9d8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f34c:	48 c7 c0 31 c0 20 80 	mov    $0xffffffff8020c031,%rax
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8020f353:	66 89 93 d6 09 00 00 	mov    %dx,0x9d6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8020f35a:	c6 83 95 09 00 00 8e 	movb   $0x8e,0x995(%rbx)
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f361:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 144); RME_X64_USER_IDT(IDT_Table, 145);
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
ffffffff8020f364:	c7 83 9c 09 00 00 00 	movl   $0x0,0x99c(%rbx)
ffffffff8020f36b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8020f36e:	c6 83 a4 09 00 00 00 	movb   $0x0,0x9a4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f375:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8020f379:	c6 83 a5 09 00 00 8e 	movb   $0x8e,0x9a5(%rbx)
ffffffff8020f380:	c7 83 ac 09 00 00 00 	movl   $0x0,0x9ac(%rbx)
ffffffff8020f387:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8020f38a:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8020f38f:	c6 83 b4 09 00 00 00 	movb   $0x0,0x9b4(%rbx)
ffffffff8020f396:	c6 83 b5 09 00 00 8e 	movb   $0x8e,0x9b5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8020f39d:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 146); RME_X64_USER_IDT(IDT_Table, 147);
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
ffffffff8020f3a2:	c7 83 bc 09 00 00 00 	movl   $0x0,0x9bc(%rbx)
ffffffff8020f3a9:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8020f3ac:	c6 83 c4 09 00 00 00 	movb   $0x0,0x9c4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8020f3b3:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 148); RME_X64_USER_IDT(IDT_Table, 149);

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
ffffffff8020f3b8:	c6 83 c5 09 00 00 8e 	movb   $0x8e,0x9c5(%rbx)
ffffffff8020f3bf:	c7 83 cc 09 00 00 00 	movl   $0x0,0x9cc(%rbx)
ffffffff8020f3c6:	00 00 00 
ffffffff8020f3c9:	c6 83 d4 09 00 00 00 	movb   $0x0,0x9d4(%rbx)
ffffffff8020f3d0:	c6 83 d5 09 00 00 8e 	movb   $0x8e,0x9d5(%rbx)
ffffffff8020f3d7:	c7 83 dc 09 00 00 00 	movl   $0x0,0x9dc(%rbx)
ffffffff8020f3de:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f3e1:	66 89 83 e0 09 00 00 	mov    %ax,0x9e0(%rbx)
ffffffff8020f3e8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f3ec:	89 83 e8 09 00 00    	mov    %eax,0x9e8(%rbx)
ffffffff8020f3f2:	48 c7 c0 40 c0 20 80 	mov    $0xffffffff8020c040,%rax
ffffffff8020f3f9:	66 89 93 e6 09 00 00 	mov    %dx,0x9e6(%rbx)
ffffffff8020f400:	66 89 83 f0 09 00 00 	mov    %ax,0x9f0(%rbx)
ffffffff8020f407:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f40a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f40e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f412:	89 83 f8 09 00 00    	mov    %eax,0x9f8(%rbx)

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8020f418:	48 c7 c0 4f c0 20 80 	mov    $0xffffffff8020c04f,%rax

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f41f:	66 89 93 f6 09 00 00 	mov    %dx,0x9f6(%rbx)

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8020f426:	66 89 83 00 0a 00 00 	mov    %ax,0xa00(%rbx)
ffffffff8020f42d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f430:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f434:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f438:	66 44 89 83 e2 09 00 	mov    %r8w,0x9e2(%rbx)
ffffffff8020f43f:	00 

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8020f440:	89 83 08 0a 00 00    	mov    %eax,0xa08(%rbx)
ffffffff8020f446:	48 c7 c0 5e c0 20 80 	mov    $0xffffffff8020c05e,%rax
ffffffff8020f44d:	66 89 93 06 0a 00 00 	mov    %dx,0xa06(%rbx)
ffffffff8020f454:	66 89 83 10 0a 00 00 	mov    %ax,0xa10(%rbx)
ffffffff8020f45b:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f45e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f462:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f466:	89 83 18 0a 00 00    	mov    %eax,0xa18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8020f46c:	48 c7 c0 6d c0 20 80 	mov    $0xffffffff8020c06d,%rax
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8020f473:	66 89 93 16 0a 00 00 	mov    %dx,0xa16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8020f47a:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f47d:	66 89 83 20 0a 00 00 	mov    %ax,0xa20(%rbx)
ffffffff8020f484:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f488:	48 c1 e8 20          	shr    $0x20,%rax

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f48c:	66 44 89 8b f2 09 00 	mov    %r9w,0x9f2(%rbx)
ffffffff8020f493:	00 

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8020f494:	66 44 89 93 02 0a 00 	mov    %r10w,0xa02(%rbx)
ffffffff8020f49b:	00 
ffffffff8020f49c:	66 44 89 9b 12 0a 00 	mov    %r11w,0xa12(%rbx)
ffffffff8020f4a3:	00 
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8020f4a4:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8020f4aa:	66 89 ab 22 0a 00 00 	mov    %bp,0xa22(%rbx)
ffffffff8020f4b1:	66 89 93 26 0a 00 00 	mov    %dx,0xa26(%rbx)
ffffffff8020f4b8:	ba 08 00 00 00       	mov    $0x8,%edx

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f4bd:	c6 83 e4 09 00 00 00 	movb   $0x0,0x9e4(%rbx)
ffffffff8020f4c4:	c6 83 e5 09 00 00 8e 	movb   $0x8e,0x9e5(%rbx)

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8020f4cb:	41 b9 08 00 00 00    	mov    $0x8,%r9d

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f4d1:	c7 83 ec 09 00 00 00 	movl   $0x0,0x9ec(%rbx)
ffffffff8020f4d8:	00 00 00 
ffffffff8020f4db:	c6 83 f4 09 00 00 00 	movb   $0x0,0x9f4(%rbx)

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8020f4e2:	41 ba 08 00 00 00    	mov    $0x8,%r10d

    RME_X64_USER_IDT(IDT_Table, 150); RME_X64_USER_IDT(IDT_Table, 151);
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);
ffffffff8020f4e8:	c6 83 f5 09 00 00 8e 	movb   $0x8e,0x9f5(%rbx)
ffffffff8020f4ef:	c7 83 fc 09 00 00 00 	movl   $0x0,0x9fc(%rbx)
ffffffff8020f4f6:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8020f4f9:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8020f4ff:	c6 83 04 0a 00 00 00 	movb   $0x0,0xa04(%rbx)
ffffffff8020f506:	c6 83 05 0a 00 00 8e 	movb   $0x8e,0xa05(%rbx)
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8020f50d:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 152); RME_X64_USER_IDT(IDT_Table, 153);
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
ffffffff8020f512:	c7 83 0c 0a 00 00 00 	movl   $0x0,0xa0c(%rbx)
ffffffff8020f519:	00 00 00 
ffffffff8020f51c:	c6 83 14 0a 00 00 00 	movb   $0x0,0xa14(%rbx)
ffffffff8020f523:	c6 83 15 0a 00 00 8e 	movb   $0x8e,0xa15(%rbx)
ffffffff8020f52a:	c7 83 1c 0a 00 00 00 	movl   $0x0,0xa1c(%rbx)
ffffffff8020f531:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8020f534:	c6 83 24 0a 00 00 00 	movb   $0x0,0xa24(%rbx)
ffffffff8020f53b:	c6 83 25 0a 00 00 8e 	movb   $0x8e,0xa25(%rbx)
ffffffff8020f542:	89 83 28 0a 00 00    	mov    %eax,0xa28(%rbx)
ffffffff8020f548:	48 c7 c0 7c c0 20 80 	mov    $0xffffffff8020c07c,%rax
ffffffff8020f54f:	66 89 93 32 0a 00 00 	mov    %dx,0xa32(%rbx)
ffffffff8020f556:	66 89 83 30 0a 00 00 	mov    %ax,0xa30(%rbx)
ffffffff8020f55d:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f560:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f564:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f568:	89 83 38 0a 00 00    	mov    %eax,0xa38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8020f56e:	48 c7 c0 8b c0 20 80 	mov    $0xffffffff8020c08b,%rax
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8020f575:	66 89 93 36 0a 00 00 	mov    %dx,0xa36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8020f57c:	66 89 83 40 0a 00 00 	mov    %ax,0xa40(%rbx)
ffffffff8020f583:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f586:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f58a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f58e:	66 89 8b 42 0a 00 00 	mov    %cx,0xa42(%rbx)
ffffffff8020f595:	89 83 48 0a 00 00    	mov    %eax,0xa48(%rbx)
ffffffff8020f59b:	48 c7 c0 9a c0 20 80 	mov    $0xffffffff8020c09a,%rax
ffffffff8020f5a2:	66 89 93 46 0a 00 00 	mov    %dx,0xa46(%rbx)
ffffffff8020f5a9:	66 89 83 50 0a 00 00 	mov    %ax,0xa50(%rbx)
ffffffff8020f5b0:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f5b3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f5b7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f5bb:	89 83 58 0a 00 00    	mov    %eax,0xa58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8020f5c1:	48 c7 c0 a9 c0 20 80 	mov    $0xffffffff8020c0a9,%rax
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8020f5c8:	66 89 93 56 0a 00 00 	mov    %dx,0xa56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8020f5cf:	66 89 83 60 0a 00 00 	mov    %ax,0xa60(%rbx)
ffffffff8020f5d6:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f5d9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f5dd:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8020f5e1:	66 89 b3 52 0a 00 00 	mov    %si,0xa52(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8020f5e8:	89 83 68 0a 00 00    	mov    %eax,0xa68(%rbx)
ffffffff8020f5ee:	48 c7 c0 b8 c0 20 80 	mov    $0xffffffff8020c0b8,%rax
ffffffff8020f5f5:	66 89 93 66 0a 00 00 	mov    %dx,0xa66(%rbx)
ffffffff8020f5fc:	66 89 83 70 0a 00 00 	mov    %ax,0xa70(%rbx)
ffffffff8020f603:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f606:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f60a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f60e:	66 89 bb 62 0a 00 00 	mov    %di,0xa62(%rbx)
ffffffff8020f615:	66 44 89 83 72 0a 00 	mov    %r8w,0xa72(%rbx)
ffffffff8020f61c:	00 
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8020f61d:	c7 83 2c 0a 00 00 00 	movl   $0x0,0xa2c(%rbx)
ffffffff8020f624:	00 00 00 
ffffffff8020f627:	c6 83 34 0a 00 00 00 	movb   $0x0,0xa34(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8020f62e:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 154); RME_X64_USER_IDT(IDT_Table, 155);
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
ffffffff8020f633:	c6 83 35 0a 00 00 8e 	movb   $0x8e,0xa35(%rbx)
ffffffff8020f63a:	c7 83 3c 0a 00 00 00 	movl   $0x0,0xa3c(%rbx)
ffffffff8020f641:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8020f644:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8020f649:	c6 83 44 0a 00 00 00 	movb   $0x0,0xa44(%rbx)
ffffffff8020f650:	c6 83 45 0a 00 00 8e 	movb   $0x8e,0xa45(%rbx)
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8020f657:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8020f65c:	c7 83 4c 0a 00 00 00 	movl   $0x0,0xa4c(%rbx)
ffffffff8020f663:	00 00 00 
ffffffff8020f666:	c6 83 54 0a 00 00 00 	movb   $0x0,0xa54(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020f66d:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 156); RME_X64_USER_IDT(IDT_Table, 157);
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
ffffffff8020f673:	c6 83 55 0a 00 00 8e 	movb   $0x8e,0xa55(%rbx)
ffffffff8020f67a:	c7 83 5c 0a 00 00 00 	movl   $0x0,0xa5c(%rbx)
ffffffff8020f681:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8020f684:	c6 83 64 0a 00 00 00 	movb   $0x0,0xa64(%rbx)
ffffffff8020f68b:	c6 83 65 0a 00 00 8e 	movb   $0x8e,0xa65(%rbx)
ffffffff8020f692:	c7 83 6c 0a 00 00 00 	movl   $0x0,0xa6c(%rbx)
ffffffff8020f699:	00 00 00 
ffffffff8020f69c:	c6 83 74 0a 00 00 00 	movb   $0x0,0xa74(%rbx)
ffffffff8020f6a3:	c6 83 75 0a 00 00 8e 	movb   $0x8e,0xa75(%rbx)
ffffffff8020f6aa:	89 83 78 0a 00 00    	mov    %eax,0xa78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8020f6b0:	48 c7 c0 c7 c0 20 80 	mov    $0xffffffff8020c0c7,%rax
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8020f6b7:	66 89 93 76 0a 00 00 	mov    %dx,0xa76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8020f6be:	66 89 83 80 0a 00 00 	mov    %ax,0xa80(%rbx)
ffffffff8020f6c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f6c8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f6cc:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f6d0:	66 44 89 8b 82 0a 00 	mov    %r9w,0xa82(%rbx)
ffffffff8020f6d7:	00 
ffffffff8020f6d8:	89 83 88 0a 00 00    	mov    %eax,0xa88(%rbx)
ffffffff8020f6de:	48 c7 c0 d6 c0 20 80 	mov    $0xffffffff8020c0d6,%rax
ffffffff8020f6e5:	66 89 93 86 0a 00 00 	mov    %dx,0xa86(%rbx)
ffffffff8020f6ec:	66 89 83 90 0a 00 00 	mov    %ax,0xa90(%rbx)
ffffffff8020f6f3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f6f6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f6fa:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f6fe:	89 83 98 0a 00 00    	mov    %eax,0xa98(%rbx)

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8020f704:	48 c7 c0 e5 c0 20 80 	mov    $0xffffffff8020c0e5,%rax

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8020f70b:	66 89 93 96 0a 00 00 	mov    %dx,0xa96(%rbx)

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8020f712:	66 89 83 a0 0a 00 00 	mov    %ax,0xaa0(%rbx)
ffffffff8020f719:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f71c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f720:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8020f724:	66 44 89 93 92 0a 00 	mov    %r10w,0xa92(%rbx)
ffffffff8020f72b:	00 

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8020f72c:	89 83 a8 0a 00 00    	mov    %eax,0xaa8(%rbx)
ffffffff8020f732:	48 c7 c0 f4 c0 20 80 	mov    $0xffffffff8020c0f4,%rax
ffffffff8020f739:	66 89 93 a6 0a 00 00 	mov    %dx,0xaa6(%rbx)
ffffffff8020f740:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f743:	66 89 83 b0 0a 00 00 	mov    %ax,0xab0(%rbx)
ffffffff8020f74a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f74e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f752:	89 83 b8 0a 00 00    	mov    %eax,0xab8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8020f758:	48 c7 c0 03 c1 20 80 	mov    $0xffffffff8020c103,%rax
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8020f75f:	66 89 93 b6 0a 00 00 	mov    %dx,0xab6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8020f766:	ba 08 00 00 00       	mov    $0x8,%edx
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8020f76b:	66 44 89 9b a2 0a 00 	mov    %r11w,0xaa2(%rbx)
ffffffff8020f772:	00 
ffffffff8020f773:	66 89 ab b2 0a 00 00 	mov    %bp,0xab2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8020f77a:	66 89 83 c0 0a 00 00 	mov    %ax,0xac0(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020f781:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 158); RME_X64_USER_IDT(IDT_Table, 159);

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
ffffffff8020f787:	c7 83 7c 0a 00 00 00 	movl   $0x0,0xa7c(%rbx)
ffffffff8020f78e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8020f791:	c6 83 84 0a 00 00 00 	movb   $0x0,0xa84(%rbx)

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8020f798:	41 ba 08 00 00 00    	mov    $0x8,%r10d

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8020f79e:	c6 83 85 0a 00 00 8e 	movb   $0x8e,0xa85(%rbx)
ffffffff8020f7a5:	c7 83 8c 0a 00 00 00 	movl   $0x0,0xa8c(%rbx)
ffffffff8020f7ac:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8020f7af:	41 bb 08 00 00 00    	mov    $0x8,%r11d

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8020f7b5:	c6 83 94 0a 00 00 00 	movb   $0x0,0xa94(%rbx)
ffffffff8020f7bc:	c6 83 95 0a 00 00 8e 	movb   $0x8e,0xa95(%rbx)
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff8020f7c3:	bd 08 00 00 00       	mov    $0x8,%ebp

    RME_X64_USER_IDT(IDT_Table, 160); RME_X64_USER_IDT(IDT_Table, 161);
    RME_X64_USER_IDT(IDT_Table, 162); RME_X64_USER_IDT(IDT_Table, 163);
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);
ffffffff8020f7c8:	c7 83 9c 0a 00 00 00 	movl   $0x0,0xa9c(%rbx)
ffffffff8020f7cf:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
ffffffff8020f7d2:	c6 83 a4 0a 00 00 00 	movb   $0x0,0xaa4(%rbx)
ffffffff8020f7d9:	c6 83 a5 0a 00 00 8e 	movb   $0x8e,0xaa5(%rbx)
ffffffff8020f7e0:	c7 83 ac 0a 00 00 00 	movl   $0x0,0xaac(%rbx)
ffffffff8020f7e7:	00 00 00 
ffffffff8020f7ea:	c6 83 b4 0a 00 00 00 	movb   $0x0,0xab4(%rbx)
ffffffff8020f7f1:	c6 83 b5 0a 00 00 8e 	movb   $0x8e,0xab5(%rbx)
ffffffff8020f7f8:	c7 83 bc 0a 00 00 00 	movl   $0x0,0xabc(%rbx)
ffffffff8020f7ff:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8020f802:	66 89 93 c2 0a 00 00 	mov    %dx,0xac2(%rbx)
ffffffff8020f809:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f80c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f810:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f814:	66 89 8b d2 0a 00 00 	mov    %cx,0xad2(%rbx)
ffffffff8020f81b:	89 83 c8 0a 00 00    	mov    %eax,0xac8(%rbx)
ffffffff8020f821:	48 c7 c0 12 c1 20 80 	mov    $0xffffffff8020c112,%rax
ffffffff8020f828:	66 89 93 c6 0a 00 00 	mov    %dx,0xac6(%rbx)
ffffffff8020f82f:	66 89 83 d0 0a 00 00 	mov    %ax,0xad0(%rbx)
ffffffff8020f836:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f839:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f83d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f841:	89 83 d8 0a 00 00    	mov    %eax,0xad8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8020f847:	48 c7 c0 21 c1 20 80 	mov    $0xffffffff8020c121,%rax
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8020f84e:	66 89 93 d6 0a 00 00 	mov    %dx,0xad6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8020f855:	66 89 83 e0 0a 00 00 	mov    %ax,0xae0(%rbx)
ffffffff8020f85c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f85f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f863:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f867:	66 89 b3 e2 0a 00 00 	mov    %si,0xae2(%rbx)
ffffffff8020f86e:	89 83 e8 0a 00 00    	mov    %eax,0xae8(%rbx)
ffffffff8020f874:	48 c7 c0 30 c1 20 80 	mov    $0xffffffff8020c130,%rax
ffffffff8020f87b:	66 89 93 e6 0a 00 00 	mov    %dx,0xae6(%rbx)
ffffffff8020f882:	66 89 83 f0 0a 00 00 	mov    %ax,0xaf0(%rbx)
ffffffff8020f889:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f88c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f890:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f894:	89 83 f8 0a 00 00    	mov    %eax,0xaf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020f89a:	48 c7 c0 3f c1 20 80 	mov    $0xffffffff8020c13f,%rax
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8020f8a1:	66 89 93 f6 0a 00 00 	mov    %dx,0xaf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020f8a8:	66 89 83 00 0b 00 00 	mov    %ax,0xb00(%rbx)
ffffffff8020f8af:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f8b2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f8b6:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8020f8ba:	66 89 bb f2 0a 00 00 	mov    %di,0xaf2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020f8c1:	89 83 08 0b 00 00    	mov    %eax,0xb08(%rbx)
ffffffff8020f8c7:	48 c7 c0 4e c1 20 80 	mov    $0xffffffff8020c14e,%rax
ffffffff8020f8ce:	66 44 89 83 02 0b 00 	mov    %r8w,0xb02(%rbx)
ffffffff8020f8d5:	00 
ffffffff8020f8d6:	66 89 93 06 0b 00 00 	mov    %dx,0xb06(%rbx)
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8020f8dd:	c6 83 c4 0a 00 00 00 	movb   $0x0,0xac4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020f8e4:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8020f8e7:	c6 83 c5 0a 00 00 8e 	movb   $0x8e,0xac5(%rbx)
ffffffff8020f8ee:	c7 83 cc 0a 00 00 00 	movl   $0x0,0xacc(%rbx)
ffffffff8020f8f5:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020f8f8:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8020f8fc:	c6 83 d4 0a 00 00 00 	movb   $0x0,0xad4(%rbx)
ffffffff8020f903:	c6 83 d5 0a 00 00 8e 	movb   $0x8e,0xad5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8020f90a:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 164); RME_X64_USER_IDT(IDT_Table, 165);
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
ffffffff8020f90f:	c7 83 dc 0a 00 00 00 	movl   $0x0,0xadc(%rbx)
ffffffff8020f916:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8020f919:	c6 83 e4 0a 00 00 00 	movb   $0x0,0xae4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8020f920:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8020f925:	c6 83 e5 0a 00 00 8e 	movb   $0x8e,0xae5(%rbx)
ffffffff8020f92c:	c7 83 ec 0a 00 00 00 	movl   $0x0,0xaec(%rbx)
ffffffff8020f933:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8020f936:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8020f93b:	c6 83 f4 0a 00 00 00 	movb   $0x0,0xaf4(%rbx)
ffffffff8020f942:	c6 83 f5 0a 00 00 8e 	movb   $0x8e,0xaf5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8020f949:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 166); RME_X64_USER_IDT(IDT_Table, 167);
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
ffffffff8020f94f:	c7 83 fc 0a 00 00 00 	movl   $0x0,0xafc(%rbx)
ffffffff8020f956:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020f959:	c6 83 04 0b 00 00 00 	movb   $0x0,0xb04(%rbx)
ffffffff8020f960:	c6 83 05 0b 00 00 8e 	movb   $0x8e,0xb05(%rbx)
ffffffff8020f967:	c7 83 0c 0b 00 00 00 	movl   $0x0,0xb0c(%rbx)
ffffffff8020f96e:	00 00 00 
ffffffff8020f971:	66 89 83 10 0b 00 00 	mov    %ax,0xb10(%rbx)
ffffffff8020f978:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f97c:	66 89 93 16 0b 00 00 	mov    %dx,0xb16(%rbx)
ffffffff8020f983:	89 83 18 0b 00 00    	mov    %eax,0xb18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8020f989:	48 c7 c0 5d c1 20 80 	mov    $0xffffffff8020c15d,%rax
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020f990:	66 44 89 8b 12 0b 00 	mov    %r9w,0xb12(%rbx)
ffffffff8020f997:	00 
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8020f998:	66 89 83 20 0b 00 00 	mov    %ax,0xb20(%rbx)
ffffffff8020f99f:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f9a2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f9a6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f9aa:	89 83 28 0b 00 00    	mov    %eax,0xb28(%rbx)
ffffffff8020f9b0:	48 c7 c0 6c c1 20 80 	mov    $0xffffffff8020c16c,%rax
ffffffff8020f9b7:	66 89 93 26 0b 00 00 	mov    %dx,0xb26(%rbx)
ffffffff8020f9be:	66 89 83 30 0b 00 00 	mov    %ax,0xb30(%rbx)
ffffffff8020f9c5:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f9c8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f9cc:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f9d0:	66 44 89 93 22 0b 00 	mov    %r10w,0xb22(%rbx)
ffffffff8020f9d7:	00 
ffffffff8020f9d8:	89 83 38 0b 00 00    	mov    %eax,0xb38(%rbx)

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff8020f9de:	48 c7 c0 7b c1 20 80 	mov    $0xffffffff8020c17b,%rax

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8020f9e5:	66 89 93 36 0b 00 00 	mov    %dx,0xb36(%rbx)

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff8020f9ec:	48 89 c2             	mov    %rax,%rdx
ffffffff8020f9ef:	66 89 83 40 0b 00 00 	mov    %ax,0xb40(%rbx)
ffffffff8020f9f6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020f9fa:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020f9fe:	89 83 48 0b 00 00    	mov    %eax,0xb48(%rbx)
ffffffff8020fa04:	48 c7 c0 8a c1 20 80 	mov    $0xffffffff8020c18a,%rax
ffffffff8020fa0b:	66 89 93 46 0b 00 00 	mov    %dx,0xb46(%rbx)
ffffffff8020fa12:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020fa17:	66 89 83 50 0b 00 00 	mov    %ax,0xb50(%rbx)
ffffffff8020fa1e:	66 89 93 52 0b 00 00 	mov    %dx,0xb52(%rbx)
ffffffff8020fa25:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fa28:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fa2c:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8020fa30:	66 44 89 9b 32 0b 00 	mov    %r11w,0xb32(%rbx)
ffffffff8020fa37:	00 

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff8020fa38:	66 89 ab 42 0b 00 00 	mov    %bp,0xb42(%rbx)
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020fa3f:	c6 83 14 0b 00 00 00 	movb   $0x0,0xb14(%rbx)
ffffffff8020fa46:	c6 83 15 0b 00 00 8e 	movb   $0x8e,0xb15(%rbx)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8020fa4d:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 168); RME_X64_USER_IDT(IDT_Table, 169);

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
ffffffff8020fa53:	c7 83 1c 0b 00 00 00 	movl   $0x0,0xb1c(%rbx)
ffffffff8020fa5a:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8020fa5d:	c6 83 24 0b 00 00 00 	movb   $0x0,0xb24(%rbx)

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8020fa64:	41 ba 08 00 00 00    	mov    $0x8,%r10d

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8020fa6a:	c6 83 25 0b 00 00 8e 	movb   $0x8e,0xb25(%rbx)
ffffffff8020fa71:	c7 83 2c 0b 00 00 00 	movl   $0x0,0xb2c(%rbx)
ffffffff8020fa78:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff8020fa7b:	41 bb 08 00 00 00    	mov    $0x8,%r11d

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8020fa81:	c6 83 34 0b 00 00 00 	movb   $0x0,0xb34(%rbx)
ffffffff8020fa88:	c6 83 35 0b 00 00 8e 	movb   $0x8e,0xb35(%rbx)

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff8020fa8f:	bd 08 00 00 00       	mov    $0x8,%ebp

    RME_X64_USER_IDT(IDT_Table, 170); RME_X64_USER_IDT(IDT_Table, 171);
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);
ffffffff8020fa94:	c7 83 3c 0b 00 00 00 	movl   $0x0,0xb3c(%rbx)
ffffffff8020fa9b:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff8020fa9e:	c6 83 44 0b 00 00 00 	movb   $0x0,0xb44(%rbx)
ffffffff8020faa5:	c6 83 45 0b 00 00 8e 	movb   $0x8e,0xb45(%rbx)
ffffffff8020faac:	c7 83 4c 0b 00 00 00 	movl   $0x0,0xb4c(%rbx)
ffffffff8020fab3:	00 00 00 
ffffffff8020fab6:	c6 83 54 0b 00 00 00 	movb   $0x0,0xb54(%rbx)
ffffffff8020fabd:	c6 83 55 0b 00 00 8e 	movb   $0x8e,0xb55(%rbx)
ffffffff8020fac4:	66 89 93 56 0b 00 00 	mov    %dx,0xb56(%rbx)
ffffffff8020facb:	89 83 58 0b 00 00    	mov    %eax,0xb58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8020fad1:	48 c7 c0 99 c1 20 80 	mov    $0xffffffff8020c199,%rax
ffffffff8020fad8:	66 89 83 60 0b 00 00 	mov    %ax,0xb60(%rbx)
ffffffff8020fadf:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fae2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fae6:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020faea:	89 83 68 0b 00 00    	mov    %eax,0xb68(%rbx)
ffffffff8020faf0:	48 c7 c0 a8 c1 20 80 	mov    $0xffffffff8020c1a8,%rax
ffffffff8020faf7:	66 89 93 66 0b 00 00 	mov    %dx,0xb66(%rbx)
ffffffff8020fafe:	66 89 83 70 0b 00 00 	mov    %ax,0xb70(%rbx)
ffffffff8020fb05:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb08:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fb0c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fb10:	66 89 8b 62 0b 00 00 	mov    %cx,0xb62(%rbx)
ffffffff8020fb17:	89 83 78 0b 00 00    	mov    %eax,0xb78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8020fb1d:	48 c7 c0 b7 c1 20 80 	mov    $0xffffffff8020c1b7,%rax
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8020fb24:	66 89 93 76 0b 00 00 	mov    %dx,0xb76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8020fb2b:	66 89 83 80 0b 00 00 	mov    %ax,0xb80(%rbx)
ffffffff8020fb32:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb35:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fb39:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fb3d:	89 83 88 0b 00 00    	mov    %eax,0xb88(%rbx)
ffffffff8020fb43:	48 c7 c0 c6 c1 20 80 	mov    $0xffffffff8020c1c6,%rax
ffffffff8020fb4a:	66 89 93 86 0b 00 00 	mov    %dx,0xb86(%rbx)
ffffffff8020fb51:	66 89 83 90 0b 00 00 	mov    %ax,0xb90(%rbx)
ffffffff8020fb58:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb5b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fb5f:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8020fb63:	66 89 b3 72 0b 00 00 	mov    %si,0xb72(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8020fb6a:	89 83 98 0b 00 00    	mov    %eax,0xb98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8020fb70:	48 c7 c0 d5 c1 20 80 	mov    $0xffffffff8020c1d5,%rax
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8020fb77:	66 89 93 96 0b 00 00 	mov    %dx,0xb96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8020fb7e:	66 89 83 a0 0b 00 00 	mov    %ax,0xba0(%rbx)
ffffffff8020fb85:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fb88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fb8c:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8020fb90:	66 89 bb 82 0b 00 00 	mov    %di,0xb82(%rbx)
ffffffff8020fb97:	66 44 89 83 92 0b 00 	mov    %r8w,0xb92(%rbx)
ffffffff8020fb9e:	00 
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8020fb9f:	66 44 89 8b a2 0b 00 	mov    %r9w,0xba2(%rbx)
ffffffff8020fba6:	00 
    RME_X64_USER_IDT(IDT_Table, 172); RME_X64_USER_IDT(IDT_Table, 173);
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
ffffffff8020fba7:	c7 83 5c 0b 00 00 00 	movl   $0x0,0xb5c(%rbx)
ffffffff8020fbae:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8020fbb1:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8020fbb6:	c6 83 64 0b 00 00 00 	movb   $0x0,0xb64(%rbx)
ffffffff8020fbbd:	c6 83 65 0b 00 00 8e 	movb   $0x8e,0xb65(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8020fbc4:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8020fbc9:	c7 83 6c 0b 00 00 00 	movl   $0x0,0xb6c(%rbx)
ffffffff8020fbd0:	00 00 00 
ffffffff8020fbd3:	c6 83 74 0b 00 00 00 	movb   $0x0,0xb74(%rbx)
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8020fbda:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 174); RME_X64_USER_IDT(IDT_Table, 175);
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
ffffffff8020fbdf:	c6 83 75 0b 00 00 8e 	movb   $0x8e,0xb75(%rbx)
ffffffff8020fbe6:	c7 83 7c 0b 00 00 00 	movl   $0x0,0xb7c(%rbx)
ffffffff8020fbed:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8020fbf0:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8020fbf6:	c6 83 84 0b 00 00 00 	movb   $0x0,0xb84(%rbx)
ffffffff8020fbfd:	c6 83 85 0b 00 00 8e 	movb   $0x8e,0xb85(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8020fc04:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 176); RME_X64_USER_IDT(IDT_Table, 177);
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
ffffffff8020fc0a:	c7 83 8c 0b 00 00 00 	movl   $0x0,0xb8c(%rbx)
ffffffff8020fc11:	00 00 00 
ffffffff8020fc14:	c6 83 94 0b 00 00 00 	movb   $0x0,0xb94(%rbx)
ffffffff8020fc1b:	c6 83 95 0b 00 00 8e 	movb   $0x8e,0xb95(%rbx)
ffffffff8020fc22:	c7 83 9c 0b 00 00 00 	movl   $0x0,0xb9c(%rbx)
ffffffff8020fc29:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8020fc2c:	c6 83 a4 0b 00 00 00 	movb   $0x0,0xba4(%rbx)
ffffffff8020fc33:	89 83 a8 0b 00 00    	mov    %eax,0xba8(%rbx)
ffffffff8020fc39:	48 c7 c0 e4 c1 20 80 	mov    $0xffffffff8020c1e4,%rax
ffffffff8020fc40:	66 89 93 a6 0b 00 00 	mov    %dx,0xba6(%rbx)
ffffffff8020fc47:	66 89 83 b0 0b 00 00 	mov    %ax,0xbb0(%rbx)
ffffffff8020fc4e:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fc51:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fc55:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fc59:	66 44 89 93 b2 0b 00 	mov    %r10w,0xbb2(%rbx)
ffffffff8020fc60:	00 
ffffffff8020fc61:	89 83 b8 0b 00 00    	mov    %eax,0xbb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff8020fc67:	48 c7 c0 f3 c1 20 80 	mov    $0xffffffff8020c1f3,%rax
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8020fc6e:	66 89 93 b6 0b 00 00 	mov    %dx,0xbb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff8020fc75:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fc78:	66 89 83 c0 0b 00 00 	mov    %ax,0xbc0(%rbx)
ffffffff8020fc7f:	66 44 89 9b c2 0b 00 	mov    %r11w,0xbc2(%rbx)
ffffffff8020fc86:	00 
ffffffff8020fc87:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fc8b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fc8f:	66 89 ab d2 0b 00 00 	mov    %bp,0xbd2(%rbx)
ffffffff8020fc96:	89 83 c8 0b 00 00    	mov    %eax,0xbc8(%rbx)
ffffffff8020fc9c:	48 c7 c0 02 c2 20 80 	mov    $0xffffffff8020c202,%rax
ffffffff8020fca3:	66 89 93 c6 0b 00 00 	mov    %dx,0xbc6(%rbx)
ffffffff8020fcaa:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fcad:	66 89 83 d0 0b 00 00 	mov    %ax,0xbd0(%rbx)
ffffffff8020fcb4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fcb8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fcbc:	89 83 d8 0b 00 00    	mov    %eax,0xbd8(%rbx)

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8020fcc2:	48 c7 c0 11 c2 20 80 	mov    $0xffffffff8020c211,%rax

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff8020fcc9:	66 89 93 d6 0b 00 00 	mov    %dx,0xbd6(%rbx)

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8020fcd0:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020fcd5:	66 89 83 e0 0b 00 00 	mov    %ax,0xbe0(%rbx)
ffffffff8020fcdc:	66 89 93 e2 0b 00 00 	mov    %dx,0xbe2(%rbx)
ffffffff8020fce3:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fce6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fcea:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fcee:	89 83 e8 0b 00 00    	mov    %eax,0xbe8(%rbx)
ffffffff8020fcf4:	48 c7 c0 20 c2 20 80 	mov    $0xffffffff8020c220,%rax
ffffffff8020fcfb:	66 89 93 e6 0b 00 00 	mov    %dx,0xbe6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8020fd02:	c6 83 a5 0b 00 00 8e 	movb   $0x8e,0xba5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8020fd09:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8020fd0c:	c7 83 ac 0b 00 00 00 	movl   $0x0,0xbac(%rbx)
ffffffff8020fd13:	00 00 00 
ffffffff8020fd16:	c6 83 b4 0b 00 00 00 	movb   $0x0,0xbb4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8020fd1d:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 178); RME_X64_USER_IDT(IDT_Table, 179);

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
ffffffff8020fd21:	c6 83 b5 0b 00 00 8e 	movb   $0x8e,0xbb5(%rbx)
ffffffff8020fd28:	c7 83 bc 0b 00 00 00 	movl   $0x0,0xbbc(%rbx)
ffffffff8020fd2f:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff8020fd32:	41 ba 08 00 00 00    	mov    $0x8,%r10d

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff8020fd38:	c6 83 c4 0b 00 00 00 	movb   $0x0,0xbc4(%rbx)
ffffffff8020fd3f:	c6 83 c5 0b 00 00 8e 	movb   $0x8e,0xbc5(%rbx)

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff8020fd46:	41 bb 08 00 00 00    	mov    $0x8,%r11d

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff8020fd4c:	c7 83 cc 0b 00 00 00 	movl   $0x0,0xbcc(%rbx)
ffffffff8020fd53:	00 00 00 
ffffffff8020fd56:	c6 83 d4 0b 00 00 00 	movb   $0x0,0xbd4(%rbx)

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff8020fd5d:	bd 08 00 00 00       	mov    $0x8,%ebp

    RME_X64_USER_IDT(IDT_Table, 180); RME_X64_USER_IDT(IDT_Table, 181);
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);
ffffffff8020fd62:	c6 83 d5 0b 00 00 8e 	movb   $0x8e,0xbd5(%rbx)
ffffffff8020fd69:	c7 83 dc 0b 00 00 00 	movl   $0x0,0xbdc(%rbx)
ffffffff8020fd70:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8020fd73:	c6 83 e4 0b 00 00 00 	movb   $0x0,0xbe4(%rbx)
ffffffff8020fd7a:	c6 83 e5 0b 00 00 8e 	movb   $0x8e,0xbe5(%rbx)
ffffffff8020fd81:	c7 83 ec 0b 00 00 00 	movl   $0x0,0xbec(%rbx)
ffffffff8020fd88:	00 00 00 
ffffffff8020fd8b:	66 89 83 f0 0b 00 00 	mov    %ax,0xbf0(%rbx)
ffffffff8020fd92:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fd96:	89 83 f8 0b 00 00    	mov    %eax,0xbf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8020fd9c:	48 c7 c0 2f c2 20 80 	mov    $0xffffffff8020c22f,%rax
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8020fda3:	66 89 93 f6 0b 00 00 	mov    %dx,0xbf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8020fdaa:	66 89 83 00 0c 00 00 	mov    %ax,0xc00(%rbx)
ffffffff8020fdb1:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fdb4:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fdb8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fdbc:	89 83 08 0c 00 00    	mov    %eax,0xc08(%rbx)
ffffffff8020fdc2:	48 c7 c0 3e c2 20 80 	mov    $0xffffffff8020c23e,%rax
ffffffff8020fdc9:	66 89 93 06 0c 00 00 	mov    %dx,0xc06(%rbx)
ffffffff8020fdd0:	66 89 83 10 0c 00 00 	mov    %ax,0xc10(%rbx)
ffffffff8020fdd7:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fdda:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fdde:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8020fde2:	66 89 8b f2 0b 00 00 	mov    %cx,0xbf2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8020fde9:	89 83 18 0c 00 00    	mov    %eax,0xc18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8020fdef:	48 c7 c0 4d c2 20 80 	mov    $0xffffffff8020c24d,%rax
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8020fdf6:	66 89 93 16 0c 00 00 	mov    %dx,0xc16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8020fdfd:	66 89 83 20 0c 00 00 	mov    %ax,0xc20(%rbx)
ffffffff8020fe04:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe07:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020fe0b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fe0f:	89 83 28 0c 00 00    	mov    %eax,0xc28(%rbx)
ffffffff8020fe15:	48 c7 c0 5c c2 20 80 	mov    $0xffffffff8020c25c,%rax
ffffffff8020fe1c:	66 89 93 26 0c 00 00 	mov    %dx,0xc26(%rbx)
ffffffff8020fe23:	48 89 c2             	mov    %rax,%rdx
ffffffff8020fe26:	66 89 83 30 0c 00 00 	mov    %ax,0xc30(%rbx)
ffffffff8020fe2d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020fe31:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8020fe35:	66 89 b3 02 0c 00 00 	mov    %si,0xc02(%rbx)
ffffffff8020fe3c:	66 89 bb 12 0c 00 00 	mov    %di,0xc12(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8020fe43:	66 44 89 83 22 0c 00 	mov    %r8w,0xc22(%rbx)
ffffffff8020fe4a:	00 
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff8020fe4b:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8020fe50:	66 44 89 8b 32 0c 00 	mov    %r9w,0xc32(%rbx)
ffffffff8020fe57:	00 
ffffffff8020fe58:	66 89 93 36 0c 00 00 	mov    %dx,0xc36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff8020fe5f:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8020fe64:	c6 83 f4 0b 00 00 00 	movb   $0x0,0xbf4(%rbx)
ffffffff8020fe6b:	c6 83 f5 0b 00 00 8e 	movb   $0x8e,0xbf5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff8020fe72:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 182); RME_X64_USER_IDT(IDT_Table, 183);
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
ffffffff8020fe77:	c7 83 fc 0b 00 00 00 	movl   $0x0,0xbfc(%rbx)
ffffffff8020fe7e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8020fe81:	c6 83 04 0c 00 00 00 	movb   $0x0,0xc04(%rbx)
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff8020fe88:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8020fe8e:	c6 83 05 0c 00 00 8e 	movb   $0x8e,0xc05(%rbx)
ffffffff8020fe95:	c7 83 0c 0c 00 00 00 	movl   $0x0,0xc0c(%rbx)
ffffffff8020fe9c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff8020fe9f:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 184); RME_X64_USER_IDT(IDT_Table, 185);
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
ffffffff8020fea5:	c6 83 14 0c 00 00 00 	movb   $0x0,0xc14(%rbx)
ffffffff8020feac:	c6 83 15 0c 00 00 8e 	movb   $0x8e,0xc15(%rbx)
ffffffff8020feb3:	c7 83 1c 0c 00 00 00 	movl   $0x0,0xc1c(%rbx)
ffffffff8020feba:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8020febd:	c6 83 24 0c 00 00 00 	movb   $0x0,0xc24(%rbx)
ffffffff8020fec4:	c6 83 25 0c 00 00 8e 	movb   $0x8e,0xc25(%rbx)
ffffffff8020fecb:	c7 83 2c 0c 00 00 00 	movl   $0x0,0xc2c(%rbx)
ffffffff8020fed2:	00 00 00 
ffffffff8020fed5:	c6 83 34 0c 00 00 00 	movb   $0x0,0xc34(%rbx)
ffffffff8020fedc:	c6 83 35 0c 00 00 8e 	movb   $0x8e,0xc35(%rbx)
ffffffff8020fee3:	89 83 38 0c 00 00    	mov    %eax,0xc38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff8020fee9:	48 c7 c0 6b c2 20 80 	mov    $0xffffffff8020c26b,%rax
ffffffff8020fef0:	66 44 89 93 42 0c 00 	mov    %r10w,0xc42(%rbx)
ffffffff8020fef7:	00 
ffffffff8020fef8:	66 89 83 40 0c 00 00 	mov    %ax,0xc40(%rbx)
ffffffff8020feff:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff02:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ff06:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ff0a:	89 83 48 0c 00 00    	mov    %eax,0xc48(%rbx)
ffffffff8020ff10:	48 c7 c0 7a c2 20 80 	mov    $0xffffffff8020c27a,%rax
ffffffff8020ff17:	66 89 93 46 0c 00 00 	mov    %dx,0xc46(%rbx)
ffffffff8020ff1e:	66 89 83 50 0c 00 00 	mov    %ax,0xc50(%rbx)
ffffffff8020ff25:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff28:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ff2c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ff30:	66 44 89 9b 52 0c 00 	mov    %r11w,0xc52(%rbx)
ffffffff8020ff37:	00 
ffffffff8020ff38:	89 83 58 0c 00 00    	mov    %eax,0xc58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff8020ff3e:	48 c7 c0 89 c2 20 80 	mov    $0xffffffff8020c289,%rax
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff8020ff45:	66 89 93 56 0c 00 00 	mov    %dx,0xc56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff8020ff4c:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff4f:	66 89 83 60 0c 00 00 	mov    %ax,0xc60(%rbx)
ffffffff8020ff56:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ff5a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ff5e:	89 83 68 0c 00 00    	mov    %eax,0xc68(%rbx)
ffffffff8020ff64:	48 c7 c0 98 c2 20 80 	mov    $0xffffffff8020c298,%rax
ffffffff8020ff6b:	66 89 93 66 0c 00 00 	mov    %dx,0xc66(%rbx)
ffffffff8020ff72:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff8020ff77:	66 89 83 70 0c 00 00 	mov    %ax,0xc70(%rbx)
ffffffff8020ff7e:	66 89 93 72 0c 00 00 	mov    %dx,0xc72(%rbx)
ffffffff8020ff85:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ff88:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ff8c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8020ff90:	89 83 78 0c 00 00    	mov    %eax,0xc78(%rbx)

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff8020ff96:	48 c7 c0 a7 c2 20 80 	mov    $0xffffffff8020c2a7,%rax

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff8020ff9d:	66 89 93 76 0c 00 00 	mov    %dx,0xc76(%rbx)

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff8020ffa4:	66 89 83 80 0c 00 00 	mov    %ax,0xc80(%rbx)
ffffffff8020ffab:	48 89 c2             	mov    %rax,%rdx
ffffffff8020ffae:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8020ffb2:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff8020ffb6:	66 89 ab 62 0c 00 00 	mov    %bp,0xc62(%rbx)

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff8020ffbd:	66 89 8b 82 0c 00 00 	mov    %cx,0xc82(%rbx)
    RME_X64_USER_IDT(IDT_Table, 186); RME_X64_USER_IDT(IDT_Table, 187);
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
ffffffff8020ffc4:	c7 83 3c 0c 00 00 00 	movl   $0x0,0xc3c(%rbx)
ffffffff8020ffcb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff8020ffce:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff8020ffd4:	c6 83 44 0c 00 00 00 	movb   $0x0,0xc44(%rbx)
ffffffff8020ffdb:	c6 83 45 0c 00 00 8e 	movb   $0x8e,0xc45(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff8020ffe2:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff8020ffe8:	c7 83 4c 0c 00 00 00 	movl   $0x0,0xc4c(%rbx)
ffffffff8020ffef:	00 00 00 
ffffffff8020fff2:	c6 83 54 0c 00 00 00 	movb   $0x0,0xc54(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff8020fff9:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 188); RME_X64_USER_IDT(IDT_Table, 189);

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
ffffffff8020fffe:	c6 83 55 0c 00 00 8e 	movb   $0x8e,0xc55(%rbx)
ffffffff80210005:	c7 83 5c 0c 00 00 00 	movl   $0x0,0xc5c(%rbx)
ffffffff8021000c:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff8021000f:	b9 08 00 00 00       	mov    $0x8,%ecx

    RME_X64_USER_IDT(IDT_Table, 190); RME_X64_USER_IDT(IDT_Table, 191);
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);
ffffffff80210014:	c6 83 64 0c 00 00 00 	movb   $0x0,0xc64(%rbx)
ffffffff8021001b:	c6 83 65 0c 00 00 8e 	movb   $0x8e,0xc65(%rbx)
ffffffff80210022:	c7 83 6c 0c 00 00 00 	movl   $0x0,0xc6c(%rbx)
ffffffff80210029:	00 00 00 
ffffffff8021002c:	c6 83 74 0c 00 00 00 	movb   $0x0,0xc74(%rbx)
ffffffff80210033:	c6 83 75 0c 00 00 8e 	movb   $0x8e,0xc75(%rbx)
ffffffff8021003a:	c7 83 7c 0c 00 00 00 	movl   $0x0,0xc7c(%rbx)
ffffffff80210041:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80210044:	c6 83 84 0c 00 00 00 	movb   $0x0,0xc84(%rbx)
ffffffff8021004b:	c6 83 85 0c 00 00 8e 	movb   $0x8e,0xc85(%rbx)
ffffffff80210052:	89 83 88 0c 00 00    	mov    %eax,0xc88(%rbx)
ffffffff80210058:	48 c7 c0 b6 c2 20 80 	mov    $0xffffffff8020c2b6,%rax
ffffffff8021005f:	66 89 93 86 0c 00 00 	mov    %dx,0xc86(%rbx)
ffffffff80210066:	66 89 83 90 0c 00 00 	mov    %ax,0xc90(%rbx)
ffffffff8021006d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210070:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210074:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210078:	89 83 98 0c 00 00    	mov    %eax,0xc98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff8021007e:	48 c7 c0 c5 c2 20 80 	mov    $0xffffffff8020c2c5,%rax
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80210085:	66 89 93 96 0c 00 00 	mov    %dx,0xc96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff8021008c:	66 89 83 a0 0c 00 00 	mov    %ax,0xca0(%rbx)
ffffffff80210093:	48 89 c2             	mov    %rax,%rdx
ffffffff80210096:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021009a:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff8021009e:	66 89 b3 92 0c 00 00 	mov    %si,0xc92(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff802100a5:	89 83 a8 0c 00 00    	mov    %eax,0xca8(%rbx)
ffffffff802100ab:	48 c7 c0 d4 c2 20 80 	mov    $0xffffffff8020c2d4,%rax
ffffffff802100b2:	66 89 93 a6 0c 00 00 	mov    %dx,0xca6(%rbx)
ffffffff802100b9:	66 89 83 b0 0c 00 00 	mov    %ax,0xcb0(%rbx)
ffffffff802100c0:	48 89 c2             	mov    %rax,%rdx
ffffffff802100c3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802100c7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802100cb:	89 83 b8 0c 00 00    	mov    %eax,0xcb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802100d1:	48 c7 c0 e3 c2 20 80 	mov    $0xffffffff8020c2e3,%rax
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff802100d8:	66 89 93 b6 0c 00 00 	mov    %dx,0xcb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802100df:	48 89 c2             	mov    %rax,%rdx
ffffffff802100e2:	66 89 83 c0 0c 00 00 	mov    %ax,0xcc0(%rbx)
ffffffff802100e9:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802100ed:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff802100f1:	66 89 bb a2 0c 00 00 	mov    %di,0xca2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802100f8:	89 83 c8 0c 00 00    	mov    %eax,0xcc8(%rbx)
ffffffff802100fe:	48 c7 c0 f2 c2 20 80 	mov    $0xffffffff8020c2f2,%rax
ffffffff80210105:	66 89 93 c6 0c 00 00 	mov    %dx,0xcc6(%rbx)
ffffffff8021010c:	66 89 83 d0 0c 00 00 	mov    %ax,0xcd0(%rbx)
ffffffff80210113:	48 89 c2             	mov    %rax,%rdx
ffffffff80210116:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021011a:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff8021011e:	66 44 89 83 b2 0c 00 	mov    %r8w,0xcb2(%rbx)
ffffffff80210125:	00 
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80210126:	66 44 89 8b c2 0c 00 	mov    %r9w,0xcc2(%rbx)
ffffffff8021012d:	00 
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff8021012e:	c7 83 8c 0c 00 00 00 	movl   $0x0,0xc8c(%rbx)
ffffffff80210135:	00 00 00 
ffffffff80210138:	c6 83 94 0c 00 00 00 	movb   $0x0,0xc94(%rbx)
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff8021013f:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 192); RME_X64_USER_IDT(IDT_Table, 193);
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
ffffffff80210144:	c6 83 95 0c 00 00 8e 	movb   $0x8e,0xc95(%rbx)
ffffffff8021014b:	c7 83 9c 0c 00 00 00 	movl   $0x0,0xc9c(%rbx)
ffffffff80210152:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80210155:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff8021015a:	c6 83 a4 0c 00 00 00 	movb   $0x0,0xca4(%rbx)
ffffffff80210161:	c6 83 a5 0c 00 00 8e 	movb   $0x8e,0xca5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80210168:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff8021016e:	c7 83 ac 0c 00 00 00 	movl   $0x0,0xcac(%rbx)
ffffffff80210175:	00 00 00 
ffffffff80210178:	c6 83 b4 0c 00 00 00 	movb   $0x0,0xcb4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff8021017f:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 194); RME_X64_USER_IDT(IDT_Table, 195);
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
ffffffff80210185:	c6 83 b5 0c 00 00 8e 	movb   $0x8e,0xcb5(%rbx)
ffffffff8021018c:	c7 83 bc 0c 00 00 00 	movl   $0x0,0xcbc(%rbx)
ffffffff80210193:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80210196:	c6 83 c4 0c 00 00 00 	movb   $0x0,0xcc4(%rbx)
ffffffff8021019d:	c6 83 c5 0c 00 00 8e 	movb   $0x8e,0xcc5(%rbx)
ffffffff802101a4:	c7 83 cc 0c 00 00 00 	movl   $0x0,0xccc(%rbx)
ffffffff802101ab:	00 00 00 
ffffffff802101ae:	66 44 89 93 d2 0c 00 	mov    %r10w,0xcd2(%rbx)
ffffffff802101b5:	00 
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802101b6:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802101bc:	89 83 d8 0c 00 00    	mov    %eax,0xcd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802101c2:	48 c7 c0 01 c3 20 80 	mov    $0xffffffff8020c301,%rax
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff802101c9:	66 89 93 d6 0c 00 00 	mov    %dx,0xcd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802101d0:	66 89 83 e0 0c 00 00 	mov    %ax,0xce0(%rbx)
ffffffff802101d7:	48 89 c2             	mov    %rax,%rdx
ffffffff802101da:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802101de:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802101e2:	89 83 e8 0c 00 00    	mov    %eax,0xce8(%rbx)
ffffffff802101e8:	48 c7 c0 10 c3 20 80 	mov    $0xffffffff8020c310,%rax
ffffffff802101ef:	66 89 93 e6 0c 00 00 	mov    %dx,0xce6(%rbx)
ffffffff802101f6:	48 89 c2             	mov    %rax,%rdx
ffffffff802101f9:	66 89 83 f0 0c 00 00 	mov    %ax,0xcf0(%rbx)
ffffffff80210200:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210204:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210208:	66 44 89 9b e2 0c 00 	mov    %r11w,0xce2(%rbx)
ffffffff8021020f:	00 
ffffffff80210210:	66 89 93 f6 0c 00 00 	mov    %dx,0xcf6(%rbx)
ffffffff80210217:	89 83 f8 0c 00 00    	mov    %eax,0xcf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff8021021d:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80210222:	48 c7 c0 1f c3 20 80 	mov    $0xffffffff8020c31f,%rax
ffffffff80210229:	66 89 93 02 0d 00 00 	mov    %dx,0xd02(%rbx)
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff80210230:	66 89 ab f2 0c 00 00 	mov    %bp,0xcf2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80210237:	66 89 83 00 0d 00 00 	mov    %ax,0xd00(%rbx)
ffffffff8021023e:	48 89 c2             	mov    %rax,%rdx
ffffffff80210241:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210245:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210249:	89 83 08 0d 00 00    	mov    %eax,0xd08(%rbx)
ffffffff8021024f:	48 c7 c0 2e c3 20 80 	mov    $0xffffffff8020c32e,%rax
ffffffff80210256:	66 89 93 06 0d 00 00 	mov    %dx,0xd06(%rbx)
ffffffff8021025d:	66 89 83 10 0d 00 00 	mov    %ax,0xd10(%rbx)
ffffffff80210264:	48 89 c2             	mov    %rax,%rdx
ffffffff80210267:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021026b:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021026f:	66 89 8b 12 0d 00 00 	mov    %cx,0xd12(%rbx)
ffffffff80210276:	89 83 18 0d 00 00    	mov    %eax,0xd18(%rbx)

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff8021027c:	48 c7 c0 3d c3 20 80 	mov    $0xffffffff8020c33d,%rax

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff80210283:	66 89 93 16 0d 00 00 	mov    %dx,0xd16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff8021028a:	c6 83 d4 0c 00 00 00 	movb   $0x0,0xcd4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80210291:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 196); RME_X64_USER_IDT(IDT_Table, 197);
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
ffffffff80210294:	c6 83 d5 0c 00 00 8e 	movb   $0x8e,0xcd5(%rbx)
ffffffff8021029b:	c7 83 dc 0c 00 00 00 	movl   $0x0,0xcdc(%rbx)
ffffffff802102a2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802102a5:	c6 83 e4 0c 00 00 00 	movb   $0x0,0xce4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff802102ac:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802102b0:	c6 83 e5 0c 00 00 8e 	movb   $0x8e,0xce5(%rbx)
ffffffff802102b7:	c7 83 ec 0c 00 00 00 	movl   $0x0,0xcec(%rbx)
ffffffff802102be:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802102c1:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802102c7:	c6 83 f4 0c 00 00 00 	movb   $0x0,0xcf4(%rbx)
ffffffff802102ce:	c6 83 f5 0c 00 00 8e 	movb   $0x8e,0xcf5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff802102d5:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 198); RME_X64_USER_IDT(IDT_Table, 199);

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
ffffffff802102da:	c7 83 fc 0c 00 00 00 	movl   $0x0,0xcfc(%rbx)
ffffffff802102e1:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802102e4:	c6 83 04 0d 00 00 00 	movb   $0x0,0xd04(%rbx)

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802102eb:	b9 08 00 00 00       	mov    $0x8,%ecx

    RME_X64_USER_IDT(IDT_Table, 200); RME_X64_USER_IDT(IDT_Table, 201);
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);
ffffffff802102f0:	c6 83 05 0d 00 00 8e 	movb   $0x8e,0xd05(%rbx)
ffffffff802102f7:	c7 83 0c 0d 00 00 00 	movl   $0x0,0xd0c(%rbx)
ffffffff802102fe:	00 00 00 
ffffffff80210301:	c6 83 14 0d 00 00 00 	movb   $0x0,0xd14(%rbx)
ffffffff80210308:	c6 83 15 0d 00 00 8e 	movb   $0x8e,0xd15(%rbx)
ffffffff8021030f:	c7 83 1c 0d 00 00 00 	movl   $0x0,0xd1c(%rbx)
ffffffff80210316:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80210319:	66 89 83 20 0d 00 00 	mov    %ax,0xd20(%rbx)
ffffffff80210320:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210324:	89 83 28 0d 00 00    	mov    %eax,0xd28(%rbx)
ffffffff8021032a:	48 c7 c0 4c c3 20 80 	mov    $0xffffffff8020c34c,%rax
ffffffff80210331:	66 89 93 26 0d 00 00 	mov    %dx,0xd26(%rbx)
ffffffff80210338:	66 89 83 30 0d 00 00 	mov    %ax,0xd30(%rbx)
ffffffff8021033f:	48 89 c2             	mov    %rax,%rdx
ffffffff80210342:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210346:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021034a:	89 83 38 0d 00 00    	mov    %eax,0xd38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80210350:	48 c7 c0 5b c3 20 80 	mov    $0xffffffff8020c35b,%rax
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80210357:	66 89 93 36 0d 00 00 	mov    %dx,0xd36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff8021035e:	66 89 83 40 0d 00 00 	mov    %ax,0xd40(%rbx)
ffffffff80210365:	48 89 c2             	mov    %rax,%rdx
ffffffff80210368:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021036c:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff80210370:	66 89 b3 22 0d 00 00 	mov    %si,0xd22(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80210377:	89 83 48 0d 00 00    	mov    %eax,0xd48(%rbx)
ffffffff8021037d:	48 c7 c0 6a c3 20 80 	mov    $0xffffffff8020c36a,%rax
ffffffff80210384:	66 89 93 46 0d 00 00 	mov    %dx,0xd46(%rbx)
ffffffff8021038b:	66 89 83 50 0d 00 00 	mov    %ax,0xd50(%rbx)
ffffffff80210392:	48 89 c2             	mov    %rax,%rdx
ffffffff80210395:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210399:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021039d:	89 83 58 0d 00 00    	mov    %eax,0xd58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802103a3:	48 c7 c0 79 c3 20 80 	mov    $0xffffffff8020c379,%rax
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff802103aa:	66 89 93 56 0d 00 00 	mov    %dx,0xd56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802103b1:	48 89 c2             	mov    %rax,%rdx
ffffffff802103b4:	66 89 83 60 0d 00 00 	mov    %ax,0xd60(%rbx)
ffffffff802103bb:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802103bf:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff802103c3:	66 89 bb 32 0d 00 00 	mov    %di,0xd32(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff802103ca:	66 44 89 83 42 0d 00 	mov    %r8w,0xd42(%rbx)
ffffffff802103d1:	00 
ffffffff802103d2:	66 44 89 8b 52 0d 00 	mov    %r9w,0xd52(%rbx)
ffffffff802103d9:	00 
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802103da:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802103df:	66 44 89 93 62 0d 00 	mov    %r10w,0xd62(%rbx)
ffffffff802103e6:	00 
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff802103e7:	c6 83 24 0d 00 00 00 	movb   $0x0,0xd24(%rbx)
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff802103ee:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff802103f3:	c6 83 25 0d 00 00 8e 	movb   $0x8e,0xd25(%rbx)
ffffffff802103fa:	c7 83 2c 0d 00 00 00 	movl   $0x0,0xd2c(%rbx)
ffffffff80210401:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80210404:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff8021040a:	c6 83 34 0d 00 00 00 	movb   $0x0,0xd34(%rbx)
ffffffff80210411:	c6 83 35 0d 00 00 8e 	movb   $0x8e,0xd35(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80210418:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 202); RME_X64_USER_IDT(IDT_Table, 203);
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
ffffffff8021041e:	c7 83 3c 0d 00 00 00 	movl   $0x0,0xd3c(%rbx)
ffffffff80210425:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80210428:	c6 83 44 0d 00 00 00 	movb   $0x0,0xd44(%rbx)
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff8021042f:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 204); RME_X64_USER_IDT(IDT_Table, 205);
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
ffffffff80210435:	c6 83 45 0d 00 00 8e 	movb   $0x8e,0xd45(%rbx)
ffffffff8021043c:	c7 83 4c 0d 00 00 00 	movl   $0x0,0xd4c(%rbx)
ffffffff80210443:	00 00 00 
ffffffff80210446:	c6 83 54 0d 00 00 00 	movb   $0x0,0xd54(%rbx)
ffffffff8021044d:	c6 83 55 0d 00 00 8e 	movb   $0x8e,0xd55(%rbx)
ffffffff80210454:	c7 83 5c 0d 00 00 00 	movl   $0x0,0xd5c(%rbx)
ffffffff8021045b:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff8021045e:	c6 83 64 0d 00 00 00 	movb   $0x0,0xd64(%rbx)
ffffffff80210465:	c6 83 65 0d 00 00 8e 	movb   $0x8e,0xd65(%rbx)
ffffffff8021046c:	66 89 93 66 0d 00 00 	mov    %dx,0xd66(%rbx)
ffffffff80210473:	89 83 68 0d 00 00    	mov    %eax,0xd68(%rbx)
ffffffff80210479:	48 c7 c0 88 c3 20 80 	mov    $0xffffffff8020c388,%rax
ffffffff80210480:	66 44 89 9b 72 0d 00 	mov    %r11w,0xd72(%rbx)
ffffffff80210487:	00 
ffffffff80210488:	66 89 83 70 0d 00 00 	mov    %ax,0xd70(%rbx)
ffffffff8021048f:	48 89 c2             	mov    %rax,%rdx
ffffffff80210492:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210496:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021049a:	89 83 78 0d 00 00    	mov    %eax,0xd78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff802104a0:	48 c7 c0 97 c3 20 80 	mov    $0xffffffff8020c397,%rax
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff802104a7:	66 89 93 76 0d 00 00 	mov    %dx,0xd76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff802104ae:	48 89 c2             	mov    %rax,%rdx
ffffffff802104b1:	66 89 83 80 0d 00 00 	mov    %ax,0xd80(%rbx)
ffffffff802104b8:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802104bc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802104c0:	66 89 ab 82 0d 00 00 	mov    %bp,0xd82(%rbx)
ffffffff802104c7:	66 89 93 86 0d 00 00 	mov    %dx,0xd86(%rbx)
ffffffff802104ce:	89 83 88 0d 00 00    	mov    %eax,0xd88(%rbx)
ffffffff802104d4:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff802104d9:	48 c7 c0 a6 c3 20 80 	mov    $0xffffffff8020c3a6,%rax
ffffffff802104e0:	66 89 93 92 0d 00 00 	mov    %dx,0xd92(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802104e7:	66 89 8b a2 0d 00 00 	mov    %cx,0xda2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff802104ee:	66 89 83 90 0d 00 00 	mov    %ax,0xd90(%rbx)
ffffffff802104f5:	48 89 c2             	mov    %rax,%rdx
ffffffff802104f8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802104fc:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210500:	89 83 98 0d 00 00    	mov    %eax,0xd98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80210506:	48 c7 c0 b5 c3 20 80 	mov    $0xffffffff8020c3b5,%rax
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff8021050d:	66 89 93 96 0d 00 00 	mov    %dx,0xd96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff80210514:	66 89 83 a0 0d 00 00 	mov    %ax,0xda0(%rbx)
ffffffff8021051b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021051e:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210522:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210526:	66 89 b3 b2 0d 00 00 	mov    %si,0xdb2(%rbx)
ffffffff8021052d:	89 83 a8 0d 00 00    	mov    %eax,0xda8(%rbx)
ffffffff80210533:	48 c7 c0 c4 c3 20 80 	mov    $0xffffffff8020c3c4,%rax
ffffffff8021053a:	66 89 93 a6 0d 00 00 	mov    %dx,0xda6(%rbx)
ffffffff80210541:	66 89 83 b0 0d 00 00 	mov    %ax,0xdb0(%rbx)
ffffffff80210548:	48 89 c2             	mov    %rax,%rdx
ffffffff8021054b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021054f:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 206); RME_X64_USER_IDT(IDT_Table, 207);
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
ffffffff80210553:	c7 83 6c 0d 00 00 00 	movl   $0x0,0xd6c(%rbx)
ffffffff8021055a:	00 00 00 
ffffffff8021055d:	c6 83 74 0d 00 00 00 	movb   $0x0,0xd74(%rbx)
ffffffff80210564:	c6 83 75 0d 00 00 8e 	movb   $0x8e,0xd75(%rbx)
ffffffff8021056b:	c7 83 7c 0d 00 00 00 	movl   $0x0,0xd7c(%rbx)
ffffffff80210572:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80210575:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff8021057b:	c6 83 84 0d 00 00 00 	movb   $0x0,0xd84(%rbx)
ffffffff80210582:	c6 83 85 0d 00 00 8e 	movb   $0x8e,0xd85(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80210589:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff8021058e:	c7 83 8c 0d 00 00 00 	movl   $0x0,0xd8c(%rbx)
ffffffff80210595:	00 00 00 
ffffffff80210598:	c6 83 94 0d 00 00 00 	movb   $0x0,0xd94(%rbx)
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff8021059f:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 208); RME_X64_USER_IDT(IDT_Table, 209);

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
ffffffff802105a4:	c6 83 95 0d 00 00 8e 	movb   $0x8e,0xd95(%rbx)
ffffffff802105ab:	c7 83 9c 0d 00 00 00 	movl   $0x0,0xd9c(%rbx)
ffffffff802105b2:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802105b5:	be 08 00 00 00       	mov    $0x8,%esi

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802105ba:	c6 83 a4 0d 00 00 00 	movb   $0x0,0xda4(%rbx)
ffffffff802105c1:	c6 83 a5 0d 00 00 8e 	movb   $0x8e,0xda5(%rbx)
ffffffff802105c8:	c7 83 ac 0d 00 00 00 	movl   $0x0,0xdac(%rbx)
ffffffff802105cf:	00 00 00 
ffffffff802105d2:	c6 83 b4 0d 00 00 00 	movb   $0x0,0xdb4(%rbx)
ffffffff802105d9:	89 83 b8 0d 00 00    	mov    %eax,0xdb8(%rbx)

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff802105df:	48 c7 c0 d3 c3 20 80 	mov    $0xffffffff8020c3d3,%rax

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802105e6:	66 89 93 b6 0d 00 00 	mov    %dx,0xdb6(%rbx)

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff802105ed:	48 89 c2             	mov    %rax,%rdx
ffffffff802105f0:	66 89 83 c0 0d 00 00 	mov    %ax,0xdc0(%rbx)
ffffffff802105f7:	66 89 bb c2 0d 00 00 	mov    %di,0xdc2(%rbx)
ffffffff802105fe:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210602:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210606:	66 44 89 83 d2 0d 00 	mov    %r8w,0xdd2(%rbx)
ffffffff8021060d:	00 
ffffffff8021060e:	89 83 c8 0d 00 00    	mov    %eax,0xdc8(%rbx)
ffffffff80210614:	48 c7 c0 e2 c3 20 80 	mov    $0xffffffff8020c3e2,%rax
ffffffff8021061b:	66 89 93 c6 0d 00 00 	mov    %dx,0xdc6(%rbx)
ffffffff80210622:	66 89 83 d0 0d 00 00 	mov    %ax,0xdd0(%rbx)
ffffffff80210629:	48 89 c2             	mov    %rax,%rdx
ffffffff8021062c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210630:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210634:	89 83 d8 0d 00 00    	mov    %eax,0xdd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff8021063a:	48 c7 c0 f1 c3 20 80 	mov    $0xffffffff8020c3f1,%rax
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff80210641:	66 89 93 d6 0d 00 00 	mov    %dx,0xdd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80210648:	66 89 83 e0 0d 00 00 	mov    %ax,0xde0(%rbx)
ffffffff8021064f:	48 89 c2             	mov    %rax,%rdx
ffffffff80210652:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210656:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021065a:	66 44 89 8b e2 0d 00 	mov    %r9w,0xde2(%rbx)
ffffffff80210661:	00 
ffffffff80210662:	89 83 e8 0d 00 00    	mov    %eax,0xde8(%rbx)
ffffffff80210668:	48 c7 c0 00 c4 20 80 	mov    $0xffffffff8020c400,%rax
ffffffff8021066f:	66 89 93 e6 0d 00 00 	mov    %dx,0xde6(%rbx)
ffffffff80210676:	66 89 83 f0 0d 00 00 	mov    %ax,0xdf0(%rbx)
ffffffff8021067d:	48 89 c2             	mov    %rax,%rdx
ffffffff80210680:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210684:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210688:	89 83 f8 0d 00 00    	mov    %eax,0xdf8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff8021068e:	48 c7 c0 0f c4 20 80 	mov    $0xffffffff8020c40f,%rax
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80210695:	66 44 89 93 f2 0d 00 	mov    %r10w,0xdf2(%rbx)
ffffffff8021069c:	00 
ffffffff8021069d:	66 89 93 f6 0d 00 00 	mov    %dx,0xdf6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff802106a4:	48 89 c2             	mov    %rax,%rdx

    RME_X64_USER_IDT(IDT_Table, 210); RME_X64_USER_IDT(IDT_Table, 211);
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);
ffffffff802106a7:	c6 83 b5 0d 00 00 8e 	movb   $0x8e,0xdb5(%rbx)
ffffffff802106ae:	c7 83 bc 0d 00 00 00 	movl   $0x0,0xdbc(%rbx)
ffffffff802106b5:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff802106b8:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff802106bc:	c6 83 c4 0d 00 00 00 	movb   $0x0,0xdc4(%rbx)
ffffffff802106c3:	c6 83 c5 0d 00 00 8e 	movb   $0x8e,0xdc5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802106ca:	bf 08 00 00 00       	mov    $0x8,%edi
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff802106cf:	c7 83 cc 0d 00 00 00 	movl   $0x0,0xdcc(%rbx)
ffffffff802106d6:	00 00 00 
ffffffff802106d9:	c6 83 d4 0d 00 00 00 	movb   $0x0,0xdd4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802106e0:	41 b8 08 00 00 00    	mov    $0x8,%r8d
    RME_X64_USER_IDT(IDT_Table, 212); RME_X64_USER_IDT(IDT_Table, 213);
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
ffffffff802106e6:	c6 83 d5 0d 00 00 8e 	movb   $0x8e,0xdd5(%rbx)
ffffffff802106ed:	c7 83 dc 0d 00 00 00 	movl   $0x0,0xddc(%rbx)
ffffffff802106f4:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802106f7:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff802106fd:	c6 83 e4 0d 00 00 00 	movb   $0x0,0xde4(%rbx)
ffffffff80210704:	c6 83 e5 0d 00 00 8e 	movb   $0x8e,0xde5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff8021070b:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 214); RME_X64_USER_IDT(IDT_Table, 215);
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
ffffffff80210711:	c7 83 ec 0d 00 00 00 	movl   $0x0,0xdec(%rbx)
ffffffff80210718:	00 00 00 
ffffffff8021071b:	c6 83 f4 0d 00 00 00 	movb   $0x0,0xdf4(%rbx)
ffffffff80210722:	c6 83 f5 0d 00 00 8e 	movb   $0x8e,0xdf5(%rbx)
ffffffff80210729:	c7 83 fc 0d 00 00 00 	movl   $0x0,0xdfc(%rbx)
ffffffff80210730:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80210733:	66 89 83 00 0e 00 00 	mov    %ax,0xe00(%rbx)
ffffffff8021073a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021073e:	66 89 93 06 0e 00 00 	mov    %dx,0xe06(%rbx)
ffffffff80210745:	89 83 08 0e 00 00    	mov    %eax,0xe08(%rbx)
ffffffff8021074b:	48 c7 c0 1e c4 20 80 	mov    $0xffffffff8020c41e,%rax
ffffffff80210752:	66 44 89 9b 02 0e 00 	mov    %r11w,0xe02(%rbx)
ffffffff80210759:	00 
ffffffff8021075a:	48 89 c2             	mov    %rax,%rdx
ffffffff8021075d:	66 89 83 10 0e 00 00 	mov    %ax,0xe10(%rbx)
ffffffff80210764:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210768:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021076c:	89 83 18 0e 00 00    	mov    %eax,0xe18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80210772:	48 c7 c0 2d c4 20 80 	mov    $0xffffffff8020c42d,%rax
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80210779:	66 89 93 16 0e 00 00 	mov    %dx,0xe16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80210780:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80210785:	66 89 83 20 0e 00 00 	mov    %ax,0xe20(%rbx)
ffffffff8021078c:	66 89 93 22 0e 00 00 	mov    %dx,0xe22(%rbx)
ffffffff80210793:	48 89 c2             	mov    %rax,%rdx
ffffffff80210796:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021079a:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff8021079e:	89 83 28 0e 00 00    	mov    %eax,0xe28(%rbx)
ffffffff802107a4:	48 c7 c0 3c c4 20 80 	mov    $0xffffffff8020c43c,%rax
ffffffff802107ab:	66 89 93 26 0e 00 00 	mov    %dx,0xe26(%rbx)
ffffffff802107b2:	66 89 83 30 0e 00 00 	mov    %ax,0xe30(%rbx)
ffffffff802107b9:	48 89 c2             	mov    %rax,%rdx
ffffffff802107bc:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802107c0:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff802107c4:	66 89 ab 12 0e 00 00 	mov    %bp,0xe12(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff802107cb:	89 83 38 0e 00 00    	mov    %eax,0xe38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802107d1:	48 c7 c0 4b c4 20 80 	mov    $0xffffffff8020c44b,%rax
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff802107d8:	66 89 93 36 0e 00 00 	mov    %dx,0xe36(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802107df:	48 89 c2             	mov    %rax,%rdx
ffffffff802107e2:	66 89 83 40 0e 00 00 	mov    %ax,0xe40(%rbx)
ffffffff802107e9:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802107ed:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff802107f1:	66 89 8b 32 0e 00 00 	mov    %cx,0xe32(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802107f8:	66 89 b3 42 0e 00 00 	mov    %si,0xe42(%rbx)
ffffffff802107ff:	66 89 93 46 0e 00 00 	mov    %dx,0xe46(%rbx)
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80210806:	c6 83 04 0e 00 00 00 	movb   $0x0,0xe04(%rbx)
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff8021080d:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80210813:	c6 83 05 0e 00 00 8e 	movb   $0x8e,0xe05(%rbx)
ffffffff8021081a:	c7 83 0c 0e 00 00 00 	movl   $0x0,0xe0c(%rbx)
ffffffff80210821:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80210824:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff80210829:	c6 83 14 0e 00 00 00 	movb   $0x0,0xe14(%rbx)
ffffffff80210830:	c6 83 15 0e 00 00 8e 	movb   $0x8e,0xe15(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80210837:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 216); RME_X64_USER_IDT(IDT_Table, 217);
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
ffffffff8021083c:	c7 83 1c 0e 00 00 00 	movl   $0x0,0xe1c(%rbx)
ffffffff80210843:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80210846:	c6 83 24 0e 00 00 00 	movb   $0x0,0xe24(%rbx)
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff8021084d:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 218); RME_X64_USER_IDT(IDT_Table, 219);

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
ffffffff80210852:	c6 83 25 0e 00 00 8e 	movb   $0x8e,0xe25(%rbx)
ffffffff80210859:	c7 83 2c 0e 00 00 00 	movl   $0x0,0xe2c(%rbx)
ffffffff80210860:	00 00 00 
ffffffff80210863:	c6 83 34 0e 00 00 00 	movb   $0x0,0xe34(%rbx)
ffffffff8021086a:	c6 83 35 0e 00 00 8e 	movb   $0x8e,0xe35(%rbx)
ffffffff80210871:	c7 83 3c 0e 00 00 00 	movl   $0x0,0xe3c(%rbx)
ffffffff80210878:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff8021087b:	c6 83 44 0e 00 00 00 	movb   $0x0,0xe44(%rbx)
ffffffff80210882:	c6 83 45 0e 00 00 8e 	movb   $0x8e,0xe45(%rbx)
ffffffff80210889:	89 83 48 0e 00 00    	mov    %eax,0xe48(%rbx)
ffffffff8021088f:	48 c7 c0 5a c4 20 80 	mov    $0xffffffff8020c45a,%rax
ffffffff80210896:	66 89 83 50 0e 00 00 	mov    %ax,0xe50(%rbx)
ffffffff8021089d:	48 89 c2             	mov    %rax,%rdx
ffffffff802108a0:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802108a4:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802108a8:	89 83 58 0e 00 00    	mov    %eax,0xe58(%rbx)

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802108ae:	48 c7 c0 69 c4 20 80 	mov    $0xffffffff8020c469,%rax

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802108b5:	66 89 93 56 0e 00 00 	mov    %dx,0xe56(%rbx)

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802108bc:	66 89 83 60 0e 00 00 	mov    %ax,0xe60(%rbx)
ffffffff802108c3:	48 89 c2             	mov    %rax,%rdx
ffffffff802108c6:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802108ca:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff802108ce:	66 89 bb 52 0e 00 00 	mov    %di,0xe52(%rbx)

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802108d5:	89 83 68 0e 00 00    	mov    %eax,0xe68(%rbx)
ffffffff802108db:	48 c7 c0 78 c4 20 80 	mov    $0xffffffff8020c478,%rax
ffffffff802108e2:	66 89 93 66 0e 00 00 	mov    %dx,0xe66(%rbx)
ffffffff802108e9:	66 89 83 70 0e 00 00 	mov    %ax,0xe70(%rbx)
ffffffff802108f0:	48 89 c2             	mov    %rax,%rdx
ffffffff802108f3:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802108f7:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff802108fb:	89 83 78 0e 00 00    	mov    %eax,0xe78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80210901:	48 c7 c0 87 c4 20 80 	mov    $0xffffffff8020c487,%rax
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80210908:	66 89 93 76 0e 00 00 	mov    %dx,0xe76(%rbx)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff8021090f:	66 89 83 80 0e 00 00 	mov    %ax,0xe80(%rbx)
ffffffff80210916:	48 89 c2             	mov    %rax,%rdx
ffffffff80210919:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021091d:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80210921:	66 44 89 83 62 0e 00 	mov    %r8w,0xe62(%rbx)
ffffffff80210928:	00 
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80210929:	89 83 88 0e 00 00    	mov    %eax,0xe88(%rbx)
ffffffff8021092f:	48 c7 c0 96 c4 20 80 	mov    $0xffffffff8020c496,%rax
ffffffff80210936:	66 89 93 86 0e 00 00 	mov    %dx,0xe86(%rbx)
ffffffff8021093d:	66 89 83 90 0e 00 00 	mov    %ax,0xe90(%rbx)
ffffffff80210944:	48 89 c2             	mov    %rax,%rdx
ffffffff80210947:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021094b:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff8021094f:	66 44 89 8b 72 0e 00 	mov    %r9w,0xe72(%rbx)
ffffffff80210956:	00 
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80210957:	66 44 89 93 82 0e 00 	mov    %r10w,0xe82(%rbx)
ffffffff8021095e:	00 
ffffffff8021095f:	66 44 89 9b 92 0e 00 	mov    %r11w,0xe92(%rbx)
ffffffff80210966:	00 

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80210967:	c7 83 4c 0e 00 00 00 	movl   $0x0,0xe4c(%rbx)
ffffffff8021096e:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80210971:	bf 08 00 00 00       	mov    $0x8,%edi

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff80210976:	c6 83 54 0e 00 00 00 	movb   $0x0,0xe54(%rbx)
ffffffff8021097d:	c6 83 55 0e 00 00 8e 	movb   $0x8e,0xe55(%rbx)

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80210984:	41 b8 08 00 00 00    	mov    $0x8,%r8d

    RME_X64_USER_IDT(IDT_Table, 220); RME_X64_USER_IDT(IDT_Table, 221);
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);
ffffffff8021098a:	c7 83 5c 0e 00 00 00 	movl   $0x0,0xe5c(%rbx)
ffffffff80210991:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff80210994:	c6 83 64 0e 00 00 00 	movb   $0x0,0xe64(%rbx)
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff8021099b:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802109a1:	c6 83 65 0e 00 00 8e 	movb   $0x8e,0xe65(%rbx)
ffffffff802109a8:	c7 83 6c 0e 00 00 00 	movl   $0x0,0xe6c(%rbx)
ffffffff802109af:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff802109b2:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802109b8:	c6 83 74 0e 00 00 00 	movb   $0x0,0xe74(%rbx)
ffffffff802109bf:	c6 83 75 0e 00 00 8e 	movb   $0x8e,0xe75(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff802109c6:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 222); RME_X64_USER_IDT(IDT_Table, 223);
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
ffffffff802109cc:	c7 83 7c 0e 00 00 00 	movl   $0x0,0xe7c(%rbx)
ffffffff802109d3:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff802109d6:	c6 83 84 0e 00 00 00 	movb   $0x0,0xe84(%rbx)
ffffffff802109dd:	c6 83 85 0e 00 00 8e 	movb   $0x8e,0xe85(%rbx)
ffffffff802109e4:	c7 83 8c 0e 00 00 00 	movl   $0x0,0xe8c(%rbx)
ffffffff802109eb:	00 00 00 
ffffffff802109ee:	c6 83 94 0e 00 00 00 	movb   $0x0,0xe94(%rbx)
ffffffff802109f5:	c6 83 95 0e 00 00 8e 	movb   $0x8e,0xe95(%rbx)
ffffffff802109fc:	89 83 98 0e 00 00    	mov    %eax,0xe98(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80210a02:	48 c7 c0 a5 c4 20 80 	mov    $0xffffffff8020c4a5,%rax
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80210a09:	66 89 93 96 0e 00 00 	mov    %dx,0xe96(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80210a10:	48 89 c2             	mov    %rax,%rdx
ffffffff80210a13:	66 89 83 a0 0e 00 00 	mov    %ax,0xea0(%rbx)
ffffffff80210a1a:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210a1e:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210a22:	89 83 a8 0e 00 00    	mov    %eax,0xea8(%rbx)
ffffffff80210a28:	48 c7 c0 b4 c4 20 80 	mov    $0xffffffff8020c4b4,%rax
ffffffff80210a2f:	66 89 93 a6 0e 00 00 	mov    %dx,0xea6(%rbx)
ffffffff80210a36:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80210a3b:	66 89 83 b0 0e 00 00 	mov    %ax,0xeb0(%rbx)
ffffffff80210a42:	66 89 93 b2 0e 00 00 	mov    %dx,0xeb2(%rbx)
ffffffff80210a49:	48 89 c2             	mov    %rax,%rdx
ffffffff80210a4c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210a50:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210a54:	89 83 b8 0e 00 00    	mov    %eax,0xeb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80210a5a:	48 c7 c0 c3 c4 20 80 	mov    $0xffffffff8020c4c3,%rax
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80210a61:	66 89 93 b6 0e 00 00 	mov    %dx,0xeb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80210a68:	48 89 c2             	mov    %rax,%rdx
ffffffff80210a6b:	66 89 83 c0 0e 00 00 	mov    %ax,0xec0(%rbx)
ffffffff80210a72:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210a76:	48 c1 e8 20          	shr    $0x20,%rax
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80210a7a:	66 89 ab a2 0e 00 00 	mov    %bp,0xea2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80210a81:	89 83 c8 0e 00 00    	mov    %eax,0xec8(%rbx)
ffffffff80210a87:	48 c7 c0 d2 c4 20 80 	mov    $0xffffffff8020c4d2,%rax
ffffffff80210a8e:	66 89 93 c6 0e 00 00 	mov    %dx,0xec6(%rbx)
ffffffff80210a95:	66 89 83 d0 0e 00 00 	mov    %ax,0xed0(%rbx)
ffffffff80210a9c:	48 89 c2             	mov    %rax,%rdx
ffffffff80210a9f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210aa3:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210aa7:	89 83 d8 0e 00 00    	mov    %eax,0xed8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80210aad:	48 c7 c0 e1 c4 20 80 	mov    $0xffffffff8020c4e1,%rax
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80210ab4:	66 89 93 d6 0e 00 00 	mov    %dx,0xed6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80210abb:	66 89 83 e0 0e 00 00 	mov    %ax,0xee0(%rbx)
ffffffff80210ac2:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ac5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210ac9:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80210acd:	66 89 8b c2 0e 00 00 	mov    %cx,0xec2(%rbx)
ffffffff80210ad4:	66 89 b3 d2 0e 00 00 	mov    %si,0xed2(%rbx)
    RME_X64_USER_IDT(IDT_Table, 224); RME_X64_USER_IDT(IDT_Table, 225);
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
ffffffff80210adb:	c7 83 9c 0e 00 00 00 	movl   $0x0,0xe9c(%rbx)
ffffffff80210ae2:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80210ae5:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80210aea:	c6 83 a4 0e 00 00 00 	movb   $0x0,0xea4(%rbx)
ffffffff80210af1:	c6 83 a5 0e 00 00 8e 	movb   $0x8e,0xea5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80210af8:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80210afd:	c7 83 ac 0e 00 00 00 	movl   $0x0,0xeac(%rbx)
ffffffff80210b04:	00 00 00 
ffffffff80210b07:	c6 83 b4 0e 00 00 00 	movb   $0x0,0xeb4(%rbx)
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80210b0e:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 226); RME_X64_USER_IDT(IDT_Table, 227);
    RME_X64_USER_IDT(IDT_Table, 228); RME_X64_USER_IDT(IDT_Table, 229);

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
ffffffff80210b13:	c6 83 b5 0e 00 00 8e 	movb   $0x8e,0xeb5(%rbx)
ffffffff80210b1a:	c7 83 bc 0e 00 00 00 	movl   $0x0,0xebc(%rbx)
ffffffff80210b21:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
ffffffff80210b24:	c6 83 c4 0e 00 00 00 	movb   $0x0,0xec4(%rbx)
ffffffff80210b2b:	c6 83 c5 0e 00 00 8e 	movb   $0x8e,0xec5(%rbx)
ffffffff80210b32:	c7 83 cc 0e 00 00 00 	movl   $0x0,0xecc(%rbx)
ffffffff80210b39:	00 00 00 
ffffffff80210b3c:	c6 83 d4 0e 00 00 00 	movb   $0x0,0xed4(%rbx)
ffffffff80210b43:	c6 83 d5 0e 00 00 8e 	movb   $0x8e,0xed5(%rbx)
ffffffff80210b4a:	c7 83 dc 0e 00 00 00 	movl   $0x0,0xedc(%rbx)
ffffffff80210b51:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80210b54:	66 89 bb e2 0e 00 00 	mov    %di,0xee2(%rbx)
ffffffff80210b5b:	89 83 e8 0e 00 00    	mov    %eax,0xee8(%rbx)
ffffffff80210b61:	48 c7 c0 f0 c4 20 80 	mov    $0xffffffff8020c4f0,%rax
ffffffff80210b68:	66 89 93 e6 0e 00 00 	mov    %dx,0xee6(%rbx)
ffffffff80210b6f:	66 89 83 f0 0e 00 00 	mov    %ax,0xef0(%rbx)
ffffffff80210b76:	48 89 c2             	mov    %rax,%rdx
ffffffff80210b79:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210b7d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210b81:	66 44 89 83 f2 0e 00 	mov    %r8w,0xef2(%rbx)
ffffffff80210b88:	00 
ffffffff80210b89:	89 83 f8 0e 00 00    	mov    %eax,0xef8(%rbx)

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80210b8f:	48 c7 c0 ff c4 20 80 	mov    $0xffffffff8020c4ff,%rax

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80210b96:	66 89 93 f6 0e 00 00 	mov    %dx,0xef6(%rbx)

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80210b9d:	66 89 83 00 0f 00 00 	mov    %ax,0xf00(%rbx)
ffffffff80210ba4:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ba7:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210bab:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210baf:	89 83 08 0f 00 00    	mov    %eax,0xf08(%rbx)
ffffffff80210bb5:	48 c7 c0 0e c5 20 80 	mov    $0xffffffff8020c50e,%rax
ffffffff80210bbc:	66 89 93 06 0f 00 00 	mov    %dx,0xf06(%rbx)
ffffffff80210bc3:	66 89 83 10 0f 00 00 	mov    %ax,0xf10(%rbx)
ffffffff80210bca:	48 89 c2             	mov    %rax,%rdx
ffffffff80210bcd:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210bd1:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210bd5:	66 44 89 8b 02 0f 00 	mov    %r9w,0xf02(%rbx)
ffffffff80210bdc:	00 
ffffffff80210bdd:	89 83 18 0f 00 00    	mov    %eax,0xf18(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80210be3:	48 c7 c0 1d c5 20 80 	mov    $0xffffffff8020c51d,%rax
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80210bea:	66 89 93 16 0f 00 00 	mov    %dx,0xf16(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80210bf1:	66 89 83 20 0f 00 00 	mov    %ax,0xf20(%rbx)
ffffffff80210bf8:	48 89 c2             	mov    %rax,%rdx
ffffffff80210bfb:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210bff:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210c03:	89 83 28 0f 00 00    	mov    %eax,0xf28(%rbx)
ffffffff80210c09:	48 c7 c0 2c c5 20 80 	mov    $0xffffffff8020c52c,%rax
ffffffff80210c10:	66 89 93 26 0f 00 00 	mov    %dx,0xf26(%rbx)
ffffffff80210c17:	48 89 c2             	mov    %rax,%rdx
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80210c1a:	66 44 89 93 12 0f 00 	mov    %r10w,0xf12(%rbx)
ffffffff80210c21:	00 
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80210c22:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210c26:	66 44 89 9b 22 0f 00 	mov    %r11w,0xf22(%rbx)
ffffffff80210c2d:	00 

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80210c2e:	c6 83 e4 0e 00 00 00 	movb   $0x0,0xee4(%rbx)
ffffffff80210c35:	c6 83 e5 0e 00 00 8e 	movb   $0x8e,0xee5(%rbx)
ffffffff80210c3c:	c7 83 ec 0e 00 00 00 	movl   $0x0,0xeec(%rbx)
ffffffff80210c43:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80210c46:	bf 08 00 00 00       	mov    $0x8,%edi

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80210c4b:	c6 83 f4 0e 00 00 00 	movb   $0x0,0xef4(%rbx)
ffffffff80210c52:	c6 83 f5 0e 00 00 8e 	movb   $0x8e,0xef5(%rbx)

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80210c59:	41 b8 08 00 00 00    	mov    $0x8,%r8d

    RME_X64_USER_IDT(IDT_Table, 230); RME_X64_USER_IDT(IDT_Table, 231);
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);
ffffffff80210c5f:	c7 83 fc 0e 00 00 00 	movl   $0x0,0xefc(%rbx)
ffffffff80210c66:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80210c69:	c6 83 04 0f 00 00 00 	movb   $0x0,0xf04(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80210c70:	41 b9 08 00 00 00    	mov    $0x8,%r9d
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80210c76:	c6 83 05 0f 00 00 8e 	movb   $0x8e,0xf05(%rbx)
ffffffff80210c7d:	c7 83 0c 0f 00 00 00 	movl   $0x0,0xf0c(%rbx)
ffffffff80210c84:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80210c87:	41 ba 08 00 00 00    	mov    $0x8,%r10d
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80210c8d:	c6 83 14 0f 00 00 00 	movb   $0x0,0xf14(%rbx)
ffffffff80210c94:	c6 83 15 0f 00 00 8e 	movb   $0x8e,0xf15(%rbx)
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80210c9b:	41 bb 08 00 00 00    	mov    $0x8,%r11d
    RME_X64_USER_IDT(IDT_Table, 232); RME_X64_USER_IDT(IDT_Table, 233);
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
ffffffff80210ca1:	c7 83 1c 0f 00 00 00 	movl   $0x0,0xf1c(%rbx)
ffffffff80210ca8:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80210cab:	c6 83 24 0f 00 00 00 	movb   $0x0,0xf24(%rbx)
ffffffff80210cb2:	c6 83 25 0f 00 00 8e 	movb   $0x8e,0xf25(%rbx)
ffffffff80210cb9:	c7 83 2c 0f 00 00 00 	movl   $0x0,0xf2c(%rbx)
ffffffff80210cc0:	00 00 00 
ffffffff80210cc3:	66 89 83 30 0f 00 00 	mov    %ax,0xf30(%rbx)
ffffffff80210cca:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210cce:	66 89 93 36 0f 00 00 	mov    %dx,0xf36(%rbx)
ffffffff80210cd5:	89 83 38 0f 00 00    	mov    %eax,0xf38(%rbx)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80210cdb:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80210ce0:	48 c7 c0 3b c5 20 80 	mov    $0xffffffff8020c53b,%rax
ffffffff80210ce7:	66 89 83 40 0f 00 00 	mov    %ax,0xf40(%rbx)
ffffffff80210cee:	66 89 93 42 0f 00 00 	mov    %dx,0xf42(%rbx)
ffffffff80210cf5:	48 89 c2             	mov    %rax,%rdx
ffffffff80210cf8:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210cfc:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80210d00:	66 89 ab 32 0f 00 00 	mov    %bp,0xf32(%rbx)
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80210d07:	89 83 48 0f 00 00    	mov    %eax,0xf48(%rbx)
ffffffff80210d0d:	48 c7 c0 4a c5 20 80 	mov    $0xffffffff8020c54a,%rax
ffffffff80210d14:	66 89 93 46 0f 00 00 	mov    %dx,0xf46(%rbx)
ffffffff80210d1b:	66 89 83 50 0f 00 00 	mov    %ax,0xf50(%rbx)
ffffffff80210d22:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d25:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210d29:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210d2d:	89 83 58 0f 00 00    	mov    %eax,0xf58(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80210d33:	48 c7 c0 56 c5 20 80 	mov    $0xffffffff8020c556,%rax
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80210d3a:	66 89 93 56 0f 00 00 	mov    %dx,0xf56(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80210d41:	66 89 83 60 0f 00 00 	mov    %ax,0xf60(%rbx)
ffffffff80210d48:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d4b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210d4f:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80210d53:	66 89 8b 52 0f 00 00 	mov    %cx,0xf52(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80210d5a:	89 83 68 0f 00 00    	mov    %eax,0xf68(%rbx)
ffffffff80210d60:	48 c7 c0 62 c5 20 80 	mov    $0xffffffff8020c562,%rax
ffffffff80210d67:	66 89 93 66 0f 00 00 	mov    %dx,0xf66(%rbx)
ffffffff80210d6e:	48 89 c2             	mov    %rax,%rdx
ffffffff80210d71:	66 89 83 70 0f 00 00 	mov    %ax,0xf70(%rbx)
ffffffff80210d78:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210d7c:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210d80:	66 89 b3 62 0f 00 00 	mov    %si,0xf62(%rbx)
    RME_X64_USER_IDT(IDT_Table, 234); RME_X64_USER_IDT(IDT_Table, 235);
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
ffffffff80210d87:	c6 83 34 0f 00 00 00 	movb   $0x0,0xf34(%rbx)
ffffffff80210d8e:	c6 83 35 0f 00 00 8e 	movb   $0x8e,0xf35(%rbx)
ffffffff80210d95:	c7 83 3c 0f 00 00 00 	movl   $0x0,0xf3c(%rbx)
ffffffff80210d9c:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80210d9f:	bd 08 00 00 00       	mov    $0x8,%ebp
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80210da4:	c6 83 44 0f 00 00 00 	movb   $0x0,0xf44(%rbx)
ffffffff80210dab:	c6 83 45 0f 00 00 8e 	movb   $0x8e,0xf45(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80210db2:	b9 08 00 00 00       	mov    $0x8,%ecx
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80210db7:	c7 83 4c 0f 00 00 00 	movl   $0x0,0xf4c(%rbx)
ffffffff80210dbe:	00 00 00 
ffffffff80210dc1:	c6 83 54 0f 00 00 00 	movb   $0x0,0xf54(%rbx)
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80210dc8:	be 08 00 00 00       	mov    $0x8,%esi
    RME_X64_USER_IDT(IDT_Table, 236); RME_X64_USER_IDT(IDT_Table, 237);
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
ffffffff80210dcd:	c6 83 55 0f 00 00 8e 	movb   $0x8e,0xf55(%rbx)
ffffffff80210dd4:	c7 83 5c 0f 00 00 00 	movl   $0x0,0xf5c(%rbx)
ffffffff80210ddb:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80210dde:	c6 83 64 0f 00 00 00 	movb   $0x0,0xf64(%rbx)
ffffffff80210de5:	c6 83 65 0f 00 00 8e 	movb   $0x8e,0xf65(%rbx)
ffffffff80210dec:	c7 83 6c 0f 00 00 00 	movl   $0x0,0xf6c(%rbx)
ffffffff80210df3:	00 00 00 
ffffffff80210df6:	66 89 bb 72 0f 00 00 	mov    %di,0xf72(%rbx)
ffffffff80210dfd:	c6 83 74 0f 00 00 00 	movb   $0x0,0xf74(%rbx)
ffffffff80210e04:	c6 83 75 0f 00 00 8e 	movb   $0x8e,0xf75(%rbx)
ffffffff80210e0b:	66 89 93 76 0f 00 00 	mov    %dx,0xf76(%rbx)
ffffffff80210e12:	89 83 78 0f 00 00    	mov    %eax,0xf78(%rbx)
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80210e18:	48 c7 c0 6e c5 20 80 	mov    $0xffffffff8020c56e,%rax
ffffffff80210e1f:	66 89 83 80 0f 00 00 	mov    %ax,0xf80(%rbx)
ffffffff80210e26:	48 89 c2             	mov    %rax,%rdx
ffffffff80210e29:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210e2d:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210e31:	89 83 88 0f 00 00    	mov    %eax,0xf88(%rbx)
ffffffff80210e37:	48 c7 c0 7a c5 20 80 	mov    $0xffffffff8020c57a,%rax
ffffffff80210e3e:	66 89 93 86 0f 00 00 	mov    %dx,0xf86(%rbx)
ffffffff80210e45:	66 89 83 90 0f 00 00 	mov    %ax,0xf90(%rbx)
ffffffff80210e4c:	48 89 c2             	mov    %rax,%rdx
ffffffff80210e4f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210e53:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 238); RME_X64_USER_IDT(IDT_Table, 239);

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
ffffffff80210e57:	c7 83 7c 0f 00 00 00 	movl   $0x0,0xf7c(%rbx)
ffffffff80210e5e:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80210e61:	89 83 98 0f 00 00    	mov    %eax,0xf98(%rbx)

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80210e67:	48 c7 c0 86 c5 20 80 	mov    $0xffffffff8020c586,%rax

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80210e6e:	66 89 93 96 0f 00 00 	mov    %dx,0xf96(%rbx)

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80210e75:	66 89 83 a0 0f 00 00 	mov    %ax,0xfa0(%rbx)
ffffffff80210e7c:	48 89 c2             	mov    %rax,%rdx
ffffffff80210e7f:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210e83:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210e87:	89 83 a8 0f 00 00    	mov    %eax,0xfa8(%rbx)
ffffffff80210e8d:	48 c7 c0 92 c5 20 80 	mov    $0xffffffff8020c592,%rax
ffffffff80210e94:	66 89 93 a6 0f 00 00 	mov    %dx,0xfa6(%rbx)
ffffffff80210e9b:	66 89 83 b0 0f 00 00 	mov    %ax,0xfb0(%rbx)
ffffffff80210ea2:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ea5:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210ea9:	48 c1 ea 10          	shr    $0x10,%rdx

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80210ead:	66 44 89 83 82 0f 00 	mov    %r8w,0xf82(%rbx)
ffffffff80210eb4:	00 

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80210eb5:	89 83 b8 0f 00 00    	mov    %eax,0xfb8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80210ebb:	48 c7 c0 9e c5 20 80 	mov    $0xffffffff8020c59e,%rax
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80210ec2:	66 89 93 b6 0f 00 00 	mov    %dx,0xfb6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80210ec9:	48 89 c2             	mov    %rax,%rdx
ffffffff80210ecc:	66 89 83 c0 0f 00 00 	mov    %ax,0xfc0(%rbx)

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80210ed3:	c6 83 84 0f 00 00 00 	movb   $0x0,0xf84(%rbx)

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80210eda:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210ede:	48 c1 e8 20          	shr    $0x20,%rax

    RME_X64_USER_IDT(IDT_Table, 240); RME_X64_USER_IDT(IDT_Table, 241);
    RME_X64_USER_IDT(IDT_Table, 242); RME_X64_USER_IDT(IDT_Table, 243);
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);
ffffffff80210ee2:	c6 83 85 0f 00 00 8e 	movb   $0x8e,0xf85(%rbx)
ffffffff80210ee9:	c7 83 8c 0f 00 00 00 	movl   $0x0,0xf8c(%rbx)
ffffffff80210ef0:	00 00 00 
ffffffff80210ef3:	66 44 89 8b 92 0f 00 	mov    %r9w,0xf92(%rbx)
ffffffff80210efa:	00 
ffffffff80210efb:	c6 83 94 0f 00 00 00 	movb   $0x0,0xf94(%rbx)
ffffffff80210f02:	c6 83 95 0f 00 00 8e 	movb   $0x8e,0xf95(%rbx)
ffffffff80210f09:	c7 83 9c 0f 00 00 00 	movl   $0x0,0xf9c(%rbx)
ffffffff80210f10:	00 00 00 

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
ffffffff80210f13:	66 44 89 93 a2 0f 00 	mov    %r10w,0xfa2(%rbx)
ffffffff80210f1a:	00 
ffffffff80210f1b:	c6 83 a4 0f 00 00 00 	movb   $0x0,0xfa4(%rbx)
ffffffff80210f22:	c6 83 a5 0f 00 00 8e 	movb   $0x8e,0xfa5(%rbx)
ffffffff80210f29:	c7 83 ac 0f 00 00 00 	movl   $0x0,0xfac(%rbx)
ffffffff80210f30:	00 00 00 
ffffffff80210f33:	66 44 89 9b b2 0f 00 	mov    %r11w,0xfb2(%rbx)
ffffffff80210f3a:	00 
ffffffff80210f3b:	c6 83 b4 0f 00 00 00 	movb   $0x0,0xfb4(%rbx)
ffffffff80210f42:	c6 83 b5 0f 00 00 8e 	movb   $0x8e,0xfb5(%rbx)
ffffffff80210f49:	c7 83 bc 0f 00 00 00 	movl   $0x0,0xfbc(%rbx)
ffffffff80210f50:	00 00 00 
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80210f53:	66 89 ab c2 0f 00 00 	mov    %bp,0xfc2(%rbx)
ffffffff80210f5a:	c6 83 c4 0f 00 00 00 	movb   $0x0,0xfc4(%rbx)
ffffffff80210f61:	66 89 93 c6 0f 00 00 	mov    %dx,0xfc6(%rbx)
ffffffff80210f68:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80210f6d:	89 83 c8 0f 00 00    	mov    %eax,0xfc8(%rbx)
ffffffff80210f73:	48 c7 c0 aa c5 20 80 	mov    $0xffffffff8020c5aa,%rax
ffffffff80210f7a:	66 89 93 d2 0f 00 00 	mov    %dx,0xfd2(%rbx)
ffffffff80210f81:	66 89 83 d0 0f 00 00 	mov    %ax,0xfd0(%rbx)
ffffffff80210f88:	48 89 c2             	mov    %rax,%rdx
ffffffff80210f8b:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210f8f:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80210f93:	89 83 d8 0f 00 00    	mov    %eax,0xfd8(%rbx)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80210f99:	48 c7 c0 b6 c5 20 80 	mov    $0xffffffff8020c5b6,%rax
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80210fa0:	66 89 93 d6 0f 00 00 	mov    %dx,0xfd6(%rbx)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80210fa7:	66 89 83 e0 0f 00 00 	mov    %ax,0xfe0(%rbx)
ffffffff80210fae:	48 89 c2             	mov    %rax,%rdx
ffffffff80210fb1:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210fb5:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80210fb9:	c6 83 c5 0f 00 00 8e 	movb   $0x8e,0xfc5(%rbx)
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80210fc0:	89 83 e8 0f 00 00    	mov    %eax,0xfe8(%rbx)
ffffffff80210fc6:	48 c7 c0 c2 c5 20 80 	mov    $0xffffffff8020c5c2,%rax
ffffffff80210fcd:	66 89 93 e6 0f 00 00 	mov    %dx,0xfe6(%rbx)
ffffffff80210fd4:	66 89 83 f0 0f 00 00 	mov    %ax,0xff0(%rbx)
ffffffff80210fdb:	48 89 c2             	mov    %rax,%rdx
ffffffff80210fde:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80210fe2:	89 83 f8 0f 00 00    	mov    %eax,0xff8(%rbx)

    /* Replace systick handler with customized ones - spurious interrupts
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
ffffffff80210fe8:	48 8b 05 f1 bc 05 00 	mov    0x5bcf1(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80210fef:	48 c1 ea 10          	shr    $0x10,%rdx
    RME_X64_USER_IDT(IDT_Table, 244); RME_X64_USER_IDT(IDT_Table, 245);
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
ffffffff80210ff3:	c7 83 cc 0f 00 00 00 	movl   $0x0,0xfcc(%rbx)
ffffffff80210ffa:	00 00 00 
ffffffff80210ffd:	c6 83 d4 0f 00 00 00 	movb   $0x0,0xfd4(%rbx)
ffffffff80211004:	c6 83 d5 0f 00 00 8e 	movb   $0x8e,0xfd5(%rbx)
ffffffff8021100b:	c7 83 dc 0f 00 00 00 	movl   $0x0,0xfdc(%rbx)
ffffffff80211012:	00 00 00 

    /* Replace systick handler with customized ones - spurious interrupts
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
ffffffff80211015:	48 85 c0             	test   %rax,%rax
    RME_X64_USER_IDT(IDT_Table, 246); RME_X64_USER_IDT(IDT_Table, 247);
    RME_X64_USER_IDT(IDT_Table, 248); RME_X64_USER_IDT(IDT_Table, 249);

    RME_X64_USER_IDT(IDT_Table, 250); RME_X64_USER_IDT(IDT_Table, 251);
    RME_X64_USER_IDT(IDT_Table, 252); RME_X64_USER_IDT(IDT_Table, 253);
    RME_X64_USER_IDT(IDT_Table, 254); RME_X64_USER_IDT(IDT_Table, 255);
ffffffff80211018:	66 89 8b e2 0f 00 00 	mov    %cx,0xfe2(%rbx)
ffffffff8021101f:	c6 83 e4 0f 00 00 00 	movb   $0x0,0xfe4(%rbx)
ffffffff80211026:	c6 83 e5 0f 00 00 8e 	movb   $0x8e,0xfe5(%rbx)
ffffffff8021102d:	c7 83 ec 0f 00 00 00 	movl   $0x0,0xfec(%rbx)
ffffffff80211034:	00 00 00 
ffffffff80211037:	66 89 b3 f2 0f 00 00 	mov    %si,0xff2(%rbx)
ffffffff8021103e:	c6 83 f4 0f 00 00 00 	movb   $0x0,0xff4(%rbx)
ffffffff80211045:	c6 83 f5 0f 00 00 8e 	movb   $0x8e,0xff5(%rbx)
ffffffff8021104c:	66 89 93 f6 0f 00 00 	mov    %dx,0xff6(%rbx)
ffffffff80211053:	c7 83 fc 0f 00 00 00 	movl   $0x0,0xffc(%rbx)
ffffffff8021105a:	00 00 00 

    /* Replace systick handler with customized ones - spurious interrupts
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
ffffffff8021105d:	75 4a                	jne    ffffffff802110a9 <__RME_X64_CPU_Local_Init+0x4749>
    	RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
ffffffff8021105f:	48 c7 c0 91 c6 20 80 	mov    $0xffffffff8020c691,%rax
ffffffff80211066:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffff8021106b:	c6 83 24 02 00 00 00 	movb   $0x0,0x224(%rbx)
ffffffff80211072:	48 89 c2             	mov    %rax,%rdx
ffffffff80211075:	66 89 83 20 02 00 00 	mov    %ax,0x220(%rbx)
ffffffff8021107c:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211080:	48 c1 ea 10          	shr    $0x10,%rdx
ffffffff80211084:	66 89 8b 22 02 00 00 	mov    %cx,0x222(%rbx)
ffffffff8021108b:	c6 83 25 02 00 00 8e 	movb   $0x8e,0x225(%rbx)
ffffffff80211092:	66 89 93 26 02 00 00 	mov    %dx,0x226(%rbx)
ffffffff80211099:	89 83 28 02 00 00    	mov    %eax,0x228(%rbx)
ffffffff8021109f:	c7 83 2c 02 00 00 00 	movl   $0x0,0x22c(%rbx)
ffffffff802110a6:	00 00 00 
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff802110a9:	48 c7 c0 2d c6 20 80 	mov    $0xffffffff8020c62d,%rax
    Desc[0]=RME_POW2(RME_PGTBL_SIZE_4K)-1;
    Desc[1]=(ptr_t)IDT_Table;
    Desc[2]=((ptr_t)IDT_Table)>>16;
    Desc[3]=((ptr_t)IDT_Table)>>32;
    Desc[4]=((ptr_t)IDT_Table)>>48;
    __RME_X64_IDT_Load((ptr_t*)Desc);
ffffffff802110b0:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
    	RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff802110b5:	66 89 83 30 08 00 00 	mov    %ax,0x830(%rbx)
ffffffff802110bc:	48 89 c2             	mov    %rax,%rdx
ffffffff802110bf:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802110c3:	89 83 38 08 00 00    	mov    %eax,0x838(%rbx)

    /* Load the IDT */
    Desc[0]=RME_POW2(RME_PGTBL_SIZE_4K)-1;
ffffffff802110c9:	b8 ff 0f 00 00       	mov    $0xfff,%eax
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
    	RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff802110ce:	48 c1 ea 10          	shr    $0x10,%rdx

    /* Load the IDT */
    Desc[0]=RME_POW2(RME_PGTBL_SIZE_4K)-1;
ffffffff802110d2:	66 89 44 24 06       	mov    %ax,0x6(%rsp)
    Desc[1]=(ptr_t)IDT_Table;
    Desc[2]=((ptr_t)IDT_Table)>>16;
ffffffff802110d7:	48 89 d8             	mov    %rbx,%rax
    	RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);

    /* Load the IDT */
    Desc[0]=RME_POW2(RME_PGTBL_SIZE_4K)-1;
    Desc[1]=(ptr_t)IDT_Table;
ffffffff802110da:	66 89 5c 24 08       	mov    %bx,0x8(%rsp)
    Desc[2]=((ptr_t)IDT_Table)>>16;
ffffffff802110df:	48 c1 e8 10          	shr    $0x10,%rax
     * and IPIs are handled in the general interrupt path. SysTick handler
     * is only processed by the first processor, so we don't register it
     * for other auxiliary processors */
    if(RME_X64_CPU_Cnt==0)
    	RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SYSTICK, RME_X64_IDT_VECT, SysTick_Handler);
    RME_X64_SET_IDT(IDT_Table, RME_X64_INT_SMP_SYSTICK, RME_X64_IDT_VECT, SysTick_SMP_Handler);
ffffffff802110e3:	66 89 93 36 08 00 00 	mov    %dx,0x836(%rbx)

    /* Load the IDT */
    Desc[0]=RME_POW2(RME_PGTBL_SIZE_4K)-1;
    Desc[1]=(ptr_t)IDT_Table;
    Desc[2]=((ptr_t)IDT_Table)>>16;
ffffffff802110ea:	66 89 44 24 0a       	mov    %ax,0xa(%rsp)
    Desc[3]=((ptr_t)IDT_Table)>>32;
ffffffff802110ef:	48 89 d8             	mov    %rbx,%rax
ffffffff802110f2:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff802110f6:	66 89 44 24 0c       	mov    %ax,0xc(%rsp)
    Desc[4]=((ptr_t)IDT_Table)>>48;
ffffffff802110fb:	48 89 d8             	mov    %rbx,%rax
ffffffff802110fe:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80211102:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_IDT_Load((ptr_t*)Desc);
ffffffff80211107:	e8 6d a7 ff ff       	callq  ffffffff8020b879 <__RME_X64_IDT_Load>

    GDT_Table=(ptr_t*)(RME_X64_Layout.PerCPU_Start+(RME_X64_CPU_Cnt*2+1)*RME_POW2(RME_PGTBL_SIZE_4K));
ffffffff8021110c:	48 8b 15 0d bc 05 00 	mov    0x5bc0d(%rip),%rdx        # ffffffff8026cd20 <RME_X64_Layout+0x20>
ffffffff80211113:	48 8b 05 c6 bb 05 00 	mov    0x5bbc6(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
    /* Kernel data, DPL=0, W */
    GDT_Table[2]=0x0000920000000000ULL;
    /* Unused entry - this is for sysret instruction's requirement */
    GDT_Table[3]=0x0000000000000000ULL;
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
ffffffff8021111a:	48 be 00 00 00 00 00 	movabs $0xf20000000000,%rsi
ffffffff80211121:	f2 00 00 
    Desc[3]=((ptr_t)IDT_Table)>>32;
    Desc[4]=((ptr_t)IDT_Table)>>48;
    __RME_X64_IDT_Load((ptr_t*)Desc);

    GDT_Table=(ptr_t*)(RME_X64_Layout.PerCPU_Start+(RME_X64_CPU_Cnt*2+1)*RME_POW2(RME_PGTBL_SIZE_4K));
    TSS_Table=(ptr_t)(RME_X64_Layout.PerCPU_Start+(RME_X64_CPU_Cnt*2+1)*RME_POW2(RME_PGTBL_SIZE_4K)+16*sizeof(ptr_t));
ffffffff80211124:	48 8b 0d f5 bb 05 00 	mov    0x5bbf5(%rip),%rcx        # ffffffff8026cd20 <RME_X64_Layout+0x20>
ffffffff8021112b:	48 8b 2d ae bb 05 00 	mov    0x5bbae(%rip),%rbp        # ffffffff8026cce0 <RME_X64_CPU_Cnt>

    /* Dummy entry */
    GDT_Table[0]=0x0000000000000000ULL;
    /* Kernel code, DPL=0, R/X */
    GDT_Table[1]=0x0020980000000000ULL;
ffffffff80211132:	48 bf 00 00 00 00 00 	movabs $0x20980000000000,%rdi
ffffffff80211139:	98 20 00 
    Desc[2]=((ptr_t)IDT_Table)>>16;
    Desc[3]=((ptr_t)IDT_Table)>>32;
    Desc[4]=((ptr_t)IDT_Table)>>48;
    __RME_X64_IDT_Load((ptr_t*)Desc);

    GDT_Table=(ptr_t*)(RME_X64_Layout.PerCPU_Start+(RME_X64_CPU_Cnt*2+1)*RME_POW2(RME_PGTBL_SIZE_4K));
ffffffff8021113c:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80211140:	48 8d 84 02 00 10 00 	lea    0x1000(%rdx,%rax,1),%rax
ffffffff80211147:	00 
    TSS_Table=(ptr_t)(RME_X64_Layout.PerCPU_Start+(RME_X64_CPU_Cnt*2+1)*RME_POW2(RME_PGTBL_SIZE_4K)+16*sizeof(ptr_t));
ffffffff80211148:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021114b:	48 c1 e2 0d          	shl    $0xd,%rdx
ffffffff8021114f:	48 8d 2c 0a          	lea    (%rdx,%rcx,1),%rbp
    /* Kernel data, DPL=0, W */
    GDT_Table[2]=0x0000920000000000ULL;
    /* Unused entry - this is for sysret instruction's requirement */
    GDT_Table[3]=0x0000000000000000ULL;
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
ffffffff80211153:	48 89 70 20          	mov    %rsi,0x20(%rax)
    TSS_Table=(ptr_t)(RME_X64_Layout.PerCPU_Start+(RME_X64_CPU_Cnt*2+1)*RME_POW2(RME_PGTBL_SIZE_4K)+16*sizeof(ptr_t));

    /* Dummy entry */
    GDT_Table[0]=0x0000000000000000ULL;
    /* Kernel code, DPL=0, R/X */
    GDT_Table[1]=0x0020980000000000ULL;
ffffffff80211157:	48 89 78 08          	mov    %rdi,0x8(%rax)

    GDT_Table=(ptr_t*)(RME_X64_Layout.PerCPU_Start+(RME_X64_CPU_Cnt*2+1)*RME_POW2(RME_PGTBL_SIZE_4K));
    TSS_Table=(ptr_t)(RME_X64_Layout.PerCPU_Start+(RME_X64_CPU_Cnt*2+1)*RME_POW2(RME_PGTBL_SIZE_4K)+16*sizeof(ptr_t));

    /* Dummy entry */
    GDT_Table[0]=0x0000000000000000ULL;
ffffffff8021115b:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    /* Kernel code, DPL=0, R/X */
    GDT_Table[1]=0x0020980000000000ULL;
    /* Kernel data, DPL=0, W */
    GDT_Table[2]=0x0000920000000000ULL;
ffffffff80211162:	48 bf 00 00 00 00 00 	movabs $0x920000000000,%rdi
ffffffff80211169:	92 00 00 
    /* Unused entry - this is for sysret instruction's requirement */
    GDT_Table[3]=0x0000000000000000ULL;
ffffffff8021116c:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff80211173:	00 
    Desc[3]=((ptr_t)IDT_Table)>>32;
    Desc[4]=((ptr_t)IDT_Table)>>48;
    __RME_X64_IDT_Load((ptr_t*)Desc);

    GDT_Table=(ptr_t*)(RME_X64_Layout.PerCPU_Start+(RME_X64_CPU_Cnt*2+1)*RME_POW2(RME_PGTBL_SIZE_4K));
    TSS_Table=(ptr_t)(RME_X64_Layout.PerCPU_Start+(RME_X64_CPU_Cnt*2+1)*RME_POW2(RME_PGTBL_SIZE_4K)+16*sizeof(ptr_t));
ffffffff80211174:	48 8d 95 80 10 00 00 	lea    0x1080(%rbp),%rdx
    /* Dummy entry */
    GDT_Table[0]=0x0000000000000000ULL;
    /* Kernel code, DPL=0, R/X */
    GDT_Table[1]=0x0020980000000000ULL;
    /* Kernel data, DPL=0, W */
    GDT_Table[2]=0x0000920000000000ULL;
ffffffff8021117b:	48 89 78 10          	mov    %rdi,0x10(%rax)
    /* Unused entry - this is for sysret instruction's requirement */
    GDT_Table[3]=0x0000000000000000ULL;
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
ffffffff8021117f:	48 bf 00 00 00 00 00 	movabs $0x20f80000000000,%rdi
ffffffff80211186:	f8 20 00 
ffffffff80211189:	48 89 78 28          	mov    %rdi,0x28(%rax)
    Desc[0]=8*sizeof(ptr_t)-1;
    Desc[1]=(ptr_t)GDT_Table;
    Desc[2]=((ptr_t)GDT_Table)>>16;
    Desc[3]=((ptr_t)GDT_Table)>>32;
    Desc[4]=((ptr_t)GDT_Table)>>48;
    __RME_X64_GDT_Load((ptr_t*)Desc);
ffffffff8021118d:	48 8d 7c 24 06       	lea    0x6(%rsp),%rdi
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff80211192:	48 89 d1             	mov    %rdx,%rcx
ffffffff80211195:	81 e1 ff ff ff 00    	and    $0xffffff,%ecx
ffffffff8021119b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021119e:	48 89 d1             	mov    %rdx,%rcx
    GDT_Table[7]=(TSS_Table>>32);
ffffffff802111a1:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802111a5:	48 89 50 38          	mov    %rdx,0x38(%rax)
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802111a9:	48 c1 e9 18          	shr    $0x18,%rcx
    GDT_Table[7]=(TSS_Table>>32);

    /* Load the GDT */
    Desc[0]=8*sizeof(ptr_t)-1;
ffffffff802111ad:	ba 3f 00 00 00       	mov    $0x3f,%edx
ffffffff802111b2:	66 89 54 24 06       	mov    %dx,0x6(%rsp)
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802111b7:	48 c1 e6 10          	shl    $0x10,%rsi
ffffffff802111bb:	48 c1 e1 38          	shl    $0x38,%rcx
    GDT_Table[7]=(TSS_Table>>32);

    /* Load the GDT */
    Desc[0]=8*sizeof(ptr_t)-1;
    Desc[1]=(ptr_t)GDT_Table;
    Desc[2]=((ptr_t)GDT_Table)>>16;
ffffffff802111bf:	48 89 c2             	mov    %rax,%rdx
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802111c2:	48 09 f1             	or     %rsi,%rcx
ffffffff802111c5:	48 be 67 00 00 00 00 	movabs $0x890000000067,%rsi
ffffffff802111cc:	89 00 00 
    GDT_Table[7]=(TSS_Table>>32);

    /* Load the GDT */
    Desc[0]=8*sizeof(ptr_t)-1;
    Desc[1]=(ptr_t)GDT_Table;
    Desc[2]=((ptr_t)GDT_Table)>>16;
ffffffff802111cf:	48 c1 ea 10          	shr    $0x10,%rdx
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802111d3:	48 09 f1             	or     %rsi,%rcx
    GDT_Table[7]=(TSS_Table>>32);

    /* Load the GDT */
    Desc[0]=8*sizeof(ptr_t)-1;
    Desc[1]=(ptr_t)GDT_Table;
ffffffff802111d6:	66 89 44 24 08       	mov    %ax,0x8(%rsp)
    Desc[2]=((ptr_t)GDT_Table)>>16;
ffffffff802111db:	66 89 54 24 0a       	mov    %dx,0xa(%rsp)
    Desc[3]=((ptr_t)GDT_Table)>>32;
ffffffff802111e0:	48 89 c2             	mov    %rax,%rdx
    /* User data, DPL=3, W */
    GDT_Table[4]=0x0000F20000000000ULL;
    /* User code, DPL=3, R/X */
    GDT_Table[5]=0x0020F80000000000ULL;
    /* TSS */
    GDT_Table[6]=(0x0067)|((TSS_Table&0xFFFFFFULL)<<16)|(0x0089ULL<<40)|(((TSS_Table>>24)&0xFFULL)<<56);
ffffffff802111e3:	48 89 48 30          	mov    %rcx,0x30(%rax)

    /* Load the GDT */
    Desc[0]=8*sizeof(ptr_t)-1;
    Desc[1]=(ptr_t)GDT_Table;
    Desc[2]=((ptr_t)GDT_Table)>>16;
    Desc[3]=((ptr_t)GDT_Table)>>32;
ffffffff802111e7:	48 c1 ea 20          	shr    $0x20,%rdx
    Desc[4]=((ptr_t)GDT_Table)>>48;
ffffffff802111eb:	48 c1 e8 30          	shr    $0x30,%rax

    /* Load the GDT */
    Desc[0]=8*sizeof(ptr_t)-1;
    Desc[1]=(ptr_t)GDT_Table;
    Desc[2]=((ptr_t)GDT_Table)>>16;
    Desc[3]=((ptr_t)GDT_Table)>>32;
ffffffff802111ef:	66 89 54 24 0c       	mov    %dx,0xc(%rsp)
    Desc[4]=((ptr_t)GDT_Table)>>48;
ffffffff802111f4:	66 89 44 24 0e       	mov    %ax,0xe(%rsp)
    __RME_X64_GDT_Load((ptr_t*)Desc);
ffffffff802111f9:	e8 77 a6 ff ff       	callq  ffffffff8020b875 <__RME_X64_GDT_Load>
    /* Set the RSP to TSS */
    ((u32*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff802111fe:	48 8b 15 63 bd 05 00 	mov    0x5bd63(%rip),%rdx        # ffffffff8026cf68 <RME_X64_Layout+0x268>
ffffffff80211205:	48 8b 05 d4 ba 05 00 	mov    0x5bad4(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
    ((u32*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
    /* IO Map Base = End of TSS (What's this?) */
    ((u32*)TSS_Table)[16]=0x00680000;
    __RME_X64_TSS_Load(6*sizeof(ptr_t));
ffffffff8021120c:	bf 30 00 00 00       	mov    $0x30,%edi
    Desc[2]=((ptr_t)GDT_Table)>>16;
    Desc[3]=((ptr_t)GDT_Table)>>32;
    Desc[4]=((ptr_t)GDT_Table)>>48;
    __RME_X64_GDT_Load((ptr_t*)Desc);
    /* Set the RSP to TSS */
    ((u32*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80211211:	83 c0 01             	add    $0x1,%eax
ffffffff80211214:	c1 e0 14             	shl    $0x14,%eax
ffffffff80211217:	01 d0                	add    %edx,%eax
ffffffff80211219:	89 85 84 10 00 00    	mov    %eax,0x1084(%rbp)
    ((u32*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff8021121f:	48 8b 15 42 bd 05 00 	mov    0x5bd42(%rip),%rdx        # ffffffff8026cf68 <RME_X64_Layout+0x268>
ffffffff80211226:	48 8b 05 b3 ba 05 00 	mov    0x5bab3(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
    /* IO Map Base = End of TSS (What's this?) */
    ((u32*)TSS_Table)[16]=0x00680000;
ffffffff8021122d:	c7 85 c0 10 00 00 00 	movl   $0x680000,0x10c0(%rbp)
ffffffff80211234:	00 68 00 
    Desc[3]=((ptr_t)GDT_Table)>>32;
    Desc[4]=((ptr_t)GDT_Table)>>48;
    __RME_X64_GDT_Load((ptr_t*)Desc);
    /* Set the RSP to TSS */
    ((u32*)TSS_Table)[1]=RME_X64_KSTACK(RME_X64_CPU_Cnt);
    ((u32*)TSS_Table)[2]=RME_X64_KSTACK(RME_X64_CPU_Cnt)>>32;
ffffffff80211237:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021123b:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff8021123f:	48 01 d0             	add    %rdx,%rax
ffffffff80211242:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80211246:	89 85 88 10 00 00    	mov    %eax,0x1088(%rbp)
    /* IO Map Base = End of TSS (What's this?) */
    ((u32*)TSS_Table)[16]=0x00680000;
    __RME_X64_TSS_Load(6*sizeof(ptr_t));
ffffffff8021124c:	e8 2c a6 ff ff       	callq  ffffffff8020b87d <__RME_X64_TSS_Load>

    /* Place the extra per-cpu data there as well and load the GS register's base */
    CPUID_Entry=(struct RME_X64_CPUID_Entry*)(RME_X64_Layout.PerCPU_Start+
ffffffff80211251:	48 8b 15 c8 ba 05 00 	mov    0x5bac8(%rip),%rdx        # ffffffff8026cd20 <RME_X64_Layout+0x20>
    		                                (RME_X64_CPU_Cnt+1)*2*RME_POW2(RME_PGTBL_SIZE_4K)-sizeof(struct RME_X64_CPUID_Entry));
ffffffff80211258:	48 8b 05 81 ba 05 00 	mov    0x5ba81(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
    CPUID_Entry->CPUID=RME_X64_CPU_Cnt;
    CPUID_Entry->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
    CPUID_Entry->Temp_User_SP=0;
    /* Set the base of GS to this memory */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (ptr_t)IDT_Table);
ffffffff8021125f:	48 89 de             	mov    %rbx,%rsi
ffffffff80211262:	bf 02 01 00 c0       	mov    $0xc0000102,%edi
    /* IO Map Base = End of TSS (What's this?) */
    ((u32*)TSS_Table)[16]=0x00680000;
    __RME_X64_TSS_Load(6*sizeof(ptr_t));

    /* Place the extra per-cpu data there as well and load the GS register's base */
    CPUID_Entry=(struct RME_X64_CPUID_Entry*)(RME_X64_Layout.PerCPU_Start+
ffffffff80211267:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021126b:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff8021126f:	48 8d 54 02 e8       	lea    -0x18(%rdx,%rax,1),%rdx
    		                                (RME_X64_CPU_Cnt+1)*2*RME_POW2(RME_PGTBL_SIZE_4K)-sizeof(struct RME_X64_CPUID_Entry));
    CPUID_Entry->CPUID=RME_X64_CPU_Cnt;
ffffffff80211274:	48 8b 05 65 ba 05 00 	mov    0x5ba65(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
ffffffff8021127b:	48 89 02             	mov    %rax,(%rdx)
    CPUID_Entry->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff8021127e:	48 8b 0d e3 bc 05 00 	mov    0x5bce3(%rip),%rcx        # ffffffff8026cf68 <RME_X64_Layout+0x268>
ffffffff80211285:	48 8b 05 54 ba 05 00 	mov    0x5ba54(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
    CPUID_Entry->Temp_User_SP=0;
ffffffff8021128c:	48 c7 42 10 00 00 00 	movq   $0x0,0x10(%rdx)
ffffffff80211293:	00 

    /* Place the extra per-cpu data there as well and load the GS register's base */
    CPUID_Entry=(struct RME_X64_CPUID_Entry*)(RME_X64_Layout.PerCPU_Start+
    		                                (RME_X64_CPU_Cnt+1)*2*RME_POW2(RME_PGTBL_SIZE_4K)-sizeof(struct RME_X64_CPUID_Entry));
    CPUID_Entry->CPUID=RME_X64_CPU_Cnt;
    CPUID_Entry->Kernel_SP=RME_X64_KSTACK(RME_X64_CPU_Cnt);
ffffffff80211294:	48 83 c0 01          	add    $0x1,%rax
ffffffff80211298:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff8021129c:	48 01 c8             	add    %rcx,%rax
ffffffff8021129f:	48 89 42 08          	mov    %rax,0x8(%rdx)
    CPUID_Entry->Temp_User_SP=0;
    /* Set the base of GS to this memory */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_KERNEL_GS_BASE, (ptr_t)IDT_Table);
ffffffff802112a3:	e8 82 a5 ff ff       	callq  ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_GS_BASE, (ptr_t)IDT_Table);
ffffffff802112a8:	48 89 de             	mov    %rbx,%rsi
ffffffff802112ab:	bf 01 01 00 c0       	mov    $0xc0000101,%edi
ffffffff802112b0:	e8 75 a5 ff ff       	callq  ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Enable SYSCALL/SYSRET */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_EFER,__RME_X64_Read_MSR(RME_X64_MSR_IA32_EFER)|RME_X64_MSR_IA32_EFER_SCE);
ffffffff802112b5:	bf 80 00 00 c0       	mov    $0xc0000080,%edi
ffffffff802112ba:	e8 57 a5 ff ff       	callq  ffffffff8020b816 <__RME_X64_Read_MSR>
ffffffff802112bf:	48 83 c8 01          	or     $0x1,%rax
ffffffff802112c3:	bf 80 00 00 c0       	mov    $0xc0000080,%edi
ffffffff802112c8:	48 89 c6             	mov    %rax,%rsi
ffffffff802112cb:	e8 5a a5 ff ff       	callq  ffffffff8020b82a <__RME_X64_Write_MSR>
    /* Set up SYSCALL/SYSRET parameters */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_LSTAR, (ptr_t)SVC_Handler);
ffffffff802112d0:	48 c7 c6 fa c6 20 80 	mov    $0xffffffff8020c6fa,%rsi
ffffffff802112d7:	bf 82 00 00 c0       	mov    $0xc0000082,%edi
ffffffff802112dc:	e8 49 a5 ff ff       	callq  ffffffff8020b82a <__RME_X64_Write_MSR>
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_FMASK, ~RME_X64_RFLAGS_IF);
ffffffff802112e1:	48 c7 c6 ff fd ff ff 	mov    $0xfffffffffffffdff,%rsi
ffffffff802112e8:	bf 84 00 00 c0       	mov    $0xc0000084,%edi
ffffffff802112ed:	e8 38 a5 ff ff       	callq  ffffffff8020b82a <__RME_X64_Write_MSR>
    /* The SYSRET, when returning to user mode in 64-bit, will load the SS from +8, and CS from +16.
     * The original place for CS is reserved for 32-bit usages and is thus not usable by 64-bit */
    __RME_X64_Write_MSR(RME_X64_MSR_IA32_STAR, (((ptr_t)RME_X64_SEG_EMPTY)<<48)|(((ptr_t)RME_X64_SEG_KERNEL_CODE)<<32));
ffffffff802112f2:	48 be 00 00 00 00 08 	movabs $0x1b000800000000,%rsi
ffffffff802112f9:	00 1b 00 
ffffffff802112fc:	bf 81 00 00 c0       	mov    $0xc0000081,%edi
ffffffff80211301:	e8 24 a5 ff ff       	callq  ffffffff8020b82a <__RME_X64_Write_MSR>
}
ffffffff80211306:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021130a:	5b                   	pop    %rbx
ffffffff8021130b:	5d                   	pop    %rbp
ffffffff8021130c:	c3                   	retq   
ffffffff8021130d:	0f 1f 00             	nopl   (%rax)

ffffffff80211310 <__RME_Putchar>:
Output      : None.
Return      : ptr_t - Always 0.
******************************************************************************/
ptr_t __RME_Putchar(char Char)
{
    if(RME_X64_UART_Exist==0)
ffffffff80211310:	48 8b 05 69 bc 05 00 	mov    0x5bc69(%rip),%rax        # ffffffff8026cf80 <RME_X64_UART_Exist>
ffffffff80211317:	48 85 c0             	test   %rax,%rax
ffffffff8021131a:	74 24                	je     ffffffff80211340 <__RME_Putchar+0x30>
Input       : char Char - The character to print.
Output      : None.
Return      : ptr_t - Always 0.
******************************************************************************/
ptr_t __RME_Putchar(char Char)
{
ffffffff8021131c:	53                   	push   %rbx
ffffffff8021131d:	89 fb                	mov    %edi,%ebx
ffffffff8021131f:	90                   	nop
    if(RME_X64_UART_Exist==0)
        return 0;

    /* Wait until we have transmitted */
    while((__RME_X64_In(RME_X64_COM1+5)&0x20)==0);
ffffffff80211320:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff80211325:	e8 d6 a4 ff ff       	callq  ffffffff8020b800 <__RME_X64_In>
ffffffff8021132a:	a8 20                	test   $0x20,%al
ffffffff8021132c:	74 f2                	je     ffffffff80211320 <__RME_Putchar+0x10>

    __RME_X64_Out(RME_X64_COM1, Char);
ffffffff8021132e:	48 0f be f3          	movsbq %bl,%rsi
ffffffff80211332:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff80211337:	e8 ce a4 ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>

    return 0;
}
ffffffff8021133c:	31 c0                	xor    %eax,%eax
ffffffff8021133e:	5b                   	pop    %rbx
ffffffff8021133f:	c3                   	retq   
ffffffff80211340:	31 c0                	xor    %eax,%eax
ffffffff80211342:	c3                   	retq   
ffffffff80211343:	0f 1f 00             	nopl   (%rax)
ffffffff80211346:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021134d:	00 00 00 

ffffffff80211350 <__RME_X64_LAPIC_Ack>:
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_LAPIC_Ack(void)
{
    RME_X64_LAPIC_WRITE(RME_X64_LAPIC_EOI, 0);
ffffffff80211350:	48 8b 15 19 a9 05 00 	mov    0x5a919(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff80211357:	48 b8 b0 00 00 00 00 	movabs $0xffff8000000000b0,%rax
ffffffff8021135e:	80 ff ff 
ffffffff80211361:	c7 04 02 00 00 00 00 	movl   $0x0,(%rdx,%rax,1)
ffffffff80211368:	c3                   	retq   
ffffffff80211369:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80211370 <__RME_X64_SMP_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff80211370:	48 b8 00 70 00 00 00 	movabs $0xffff800000007000,%rax
ffffffff80211377:	80 ff ff 
    u16* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(u8*)RME_X64_PA2VA(0x7000);
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff8021137a:	48 be 00 90 ff ff ff 	movabs $0x7fffffff9000,%rsi
ffffffff80211381:	7f 00 00 
    cnt_t Count;
    u16* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(u8*)RME_X64_PA2VA(0x7000);
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff80211384:	48 b9 62 70 00 00 00 	movabs $0xffff800000007062,%rcx
ffffffff8021138b:	80 ff ff 
ffffffff8021138e:	66 90                	xchg   %ax,%ax
        Code[Count]=RME_X64_Boot_Code[Count];
ffffffff80211390:	0f b6 94 30 a0 eb 21 	movzbl -0x7fde1460(%rax,%rsi,1),%edx
ffffffff80211397:	80 
ffffffff80211398:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021139c:	88 50 ff             	mov    %dl,-0x1(%rax)
    cnt_t Count;
    u16* Warm_Reset;

    /* Write entry code to unused memory at 0x7000 */
    Code=(u8*)RME_X64_PA2VA(0x7000);
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
ffffffff8021139f:	48 39 c8             	cmp    %rcx,%rax
ffffffff802113a2:	75 ec                	jne    ffffffff80211390 <__RME_X64_SMP_Init+0x20>
        Code[Count]=RME_X64_Boot_Code[Count];

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
ffffffff802113a4:	48 c7 05 31 b9 05 00 	movq   $0x1,0x5b931(%rip)        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
ffffffff802113ab:	01 00 00 00 
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff802113af:	48 8b 05 32 b9 05 00 	mov    0x5b932(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff802113b6:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802113ba:	0f 86 84 01 00 00    	jbe    ffffffff80211544 <__RME_X64_SMP_Init+0x1d4>
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff802113c0:	41 56                	push   %r14
ffffffff802113c2:	41 55                	push   %r13
        Warm_Reset=(u16*)RME_X64_PA2VA((0x40<<4|0x67));
        Warm_Reset[0]=0;
        Warm_Reset[1]=0x7000>>4;

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802113c4:	49 bd 10 03 00 00 00 	movabs $0xffff800000000310,%r13
ffffffff802113cb:	80 ff ff 
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Init(void)
{
ffffffff802113ce:	41 54                	push   %r12
ffffffff802113d0:	55                   	push   %rbp
ffffffff802113d1:	48 c7 c5 89 80 10 80 	mov    $0xffffffff80108089,%rbp
ffffffff802113d8:	53                   	push   %rbx
ffffffff802113d9:	81 c5 00 00 00 80    	add    $0x80000000,%ebp
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
        Code[Count]=RME_X64_Boot_Code[Count];

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff802113df:	bb 01 00 00 00       	mov    $0x1,%ebx
        Warm_Reset[0]=0;
        Warm_Reset[1]=0x7000>>4;

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff802113e4:	49 bc 00 03 00 00 00 	movabs $0xffff800000000300,%r12
ffffffff802113eb:	80 ff ff 
ffffffff802113ee:	66 90                	xchg   %ax,%ax

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
    {
        RME_PRINTK_S("\n\rBooting CPU ");
ffffffff802113f0:	48 c7 c7 15 e4 21 80 	mov    $0xffffffff8021e415,%rdi
        RME_PRINTK_I(Count);
        /* Temporary stack */
        *(u32*)(Code-4)=0x8000;
        *(u32*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
        *(ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff802113f7:	4c 8d 73 01          	lea    0x1(%rbx),%r14

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
    {
        RME_PRINTK_S("\n\rBooting CPU ");
ffffffff802113fb:	e8 10 5b 00 00       	callq  ffffffff80216f10 <RME_Print_String>
        RME_PRINTK_I(Count);
ffffffff80211400:	48 89 df             	mov    %rbx,%rdi
        Warm_Reset=(u16*)RME_X64_PA2VA((0x40<<4|0x67));
        Warm_Reset[0]=0;
        Warm_Reset[1]=0x7000>>4;

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80211403:	48 c1 e3 04          	shl    $0x4,%rbx
    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
    {
        RME_PRINTK_S("\n\rBooting CPU ");
        RME_PRINTK_I(Count);
ffffffff80211407:	e8 c4 58 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
        /* Temporary stack */
        *(u32*)(Code-4)=0x8000;
ffffffff8021140c:	48 b8 fc 6f 00 00 00 	movabs $0xffff800000006ffc,%rax
ffffffff80211413:	80 ff ff 
        *(u32*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
        *(ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80211416:	4c 89 f2             	mov    %r14,%rdx

        /* Initialize CMOS shutdown code to 0AH */
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff80211419:	be 0f 00 00 00       	mov    $0xf,%esi
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
    {
        RME_PRINTK_S("\n\rBooting CPU ");
        RME_PRINTK_I(Count);
        /* Temporary stack */
        *(u32*)(Code-4)=0x8000;
ffffffff8021141e:	c7 00 00 80 00 00    	movl   $0x8000,(%rax)
        *(u32*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff80211424:	89 e8                	mov    %ebp,%eax
        *(ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80211426:	48 c1 e2 14          	shl    $0x14,%rdx
    {
        RME_PRINTK_S("\n\rBooting CPU ");
        RME_PRINTK_I(Count);
        /* Temporary stack */
        *(u32*)(Code-4)=0x8000;
        *(u32*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
ffffffff8021142a:	a3 f8 6f 00 00 00 80 	movabs %eax,0xffff800000006ff8
ffffffff80211431:	ff ff 
        *(ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff80211433:	48 8b 05 2e bb 05 00 	mov    0x5bb2e(%rip),%rax        # ffffffff8026cf68 <RME_X64_Layout+0x268>

        /* Initialize CMOS shutdown code to 0AH */
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff8021143a:	bf 70 00 00 00       	mov    $0x70,%edi
        RME_PRINTK_S("\n\rBooting CPU ");
        RME_PRINTK_I(Count);
        /* Temporary stack */
        *(u32*)(Code-4)=0x8000;
        *(u32*)(Code-8)=RME_X64_TEXT_VA2PA(__RME_X64_SMP_Boot_32);
        *(ptr_t*)(Code-16)=RME_X64_KSTACK(Count);
ffffffff8021143f:	48 01 d0             	add    %rdx,%rax
ffffffff80211442:	48 a3 f0 6f 00 00 00 	movabs %rax,0xffff800000006ff0
ffffffff80211449:	80 ff ff 

        /* Initialize CMOS shutdown code to 0AH */
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
ffffffff8021144c:	e8 b9 a3 ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
ffffffff80211451:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80211456:	bf 71 00 00 00       	mov    $0x71,%edi
ffffffff8021145b:	e8 aa a3 ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
        /* Warm reset vector point to AP code */
        Warm_Reset=(u16*)RME_X64_PA2VA((0x40<<4|0x67));
        Warm_Reset[0]=0;
ffffffff80211460:	48 b8 67 04 00 00 00 	movabs $0xffff800000000467,%rax
ffffffff80211467:	80 ff ff 
ffffffff8021146a:	31 d2                	xor    %edx,%edx
        Warm_Reset[1]=0x7000>>4;
ffffffff8021146c:	b9 00 07 00 00       	mov    $0x700,%ecx
        /* Initialize CMOS shutdown code to 0AH */
        __RME_X64_Out(RME_X64_RTC_CMD,0xF);
        __RME_X64_Out(RME_X64_RTC_DATA,0xA);
        /* Warm reset vector point to AP code */
        Warm_Reset=(u16*)RME_X64_PA2VA((0x40<<4|0x67));
        Warm_Reset[0]=0;
ffffffff80211471:	66 89 10             	mov    %dx,(%rax)
        Warm_Reset[1]=0x7000>>4;
ffffffff80211474:	48 b8 69 04 00 00 00 	movabs $0xffff800000000469,%rax
ffffffff8021147b:	80 ff ff 
ffffffff8021147e:	66 89 08             	mov    %cx,(%rax)

        /* Send INIT (level-triggered) interrupt to reset other CPU */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff80211481:	48 8b 15 e8 a7 05 00 	mov    0x5a7e8(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff80211488:	48 8b 83 e0 bc 26 80 	mov    -0x7fd94320(%rbx),%rax
ffffffff8021148f:	c1 e0 18             	shl    $0x18,%eax
ffffffff80211492:	42 89 04 2a          	mov    %eax,(%rdx,%r13,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff80211496:	48 8b 05 d3 a7 05 00 	mov    0x5a7d3(%rip),%rax        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8021149d:	42 c7 04 20 00 c5 00 	movl   $0xc500,(%rax,%r12,1)
ffffffff802114a4:	00 
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff802114a5:	48 8b 05 c4 a7 05 00 	mov    0x5a7c4(%rip),%rax        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802114ac:	48 8b 15 bd a7 05 00 	mov    0x5a7bd(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
                                                 RME_X64_LAPIC_ICRLO_LEVEL|
                                                 RME_X64_LAPIC_ICRLO_ASSERT);
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_INIT|
ffffffff802114b3:	42 c7 04 20 00 85 00 	movl   $0x8500,(%rax,%r12,1)
ffffffff802114ba:	00 
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802114bb:	48 8b 83 e0 bc 26 80 	mov    -0x7fd94320(%rbx),%rax
ffffffff802114c2:	c1 e0 18             	shl    $0x18,%eax
ffffffff802114c5:	42 89 04 2a          	mov    %eax,(%rdx,%r13,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802114c9:	48 8b 05 a0 a7 05 00 	mov    0x5a7a0(%rip),%rax        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802114d0:	48 8b 15 99 a7 05 00 	mov    0x5a799(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
                                                 RME_X64_LAPIC_ICRLO_LEVEL);
        RME_X64_UDELAY(10000);

        /* Send startup IPI twice according to Intel manuals */
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802114d7:	42 c7 04 20 07 06 00 	movl   $0x607,(%rax,%r12,1)
ffffffff802114de:	00 
        RME_X64_UDELAY(200);
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, RME_X64_CPU_Info[Count].LAPIC_ID<<24);
ffffffff802114df:	48 8b 83 e0 bc 26 80 	mov    -0x7fd94320(%rbx),%rax
ffffffff802114e6:	c1 e0 18             	shl    $0x18,%eax
ffffffff802114e9:	42 89 04 2a          	mov    %eax,(%rdx,%r13,1)
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
ffffffff802114ed:	48 8b 05 7c a7 05 00 	mov    0x5a77c(%rip),%rax        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff802114f4:	42 c7 04 20 07 06 00 	movl   $0x607,(%rax,%r12,1)
ffffffff802114fb:	00 
ffffffff802114fc:	0f 1f 40 00          	nopl   0x0(%rax)
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
ffffffff80211500:	48 8b 05 d9 b7 05 00 	mov    0x5b7d9(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
ffffffff80211507:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021150b:	48 8b 80 e8 bc 26 80 	mov    -0x7fd94318(%rax),%rax
ffffffff80211512:	48 85 c0             	test   %rax,%rax
ffffffff80211515:	74 e9                	je     ffffffff80211500 <__RME_X64_SMP_Init+0x190>
        RME_X64_CPU_Cnt++;
ffffffff80211517:	48 8b 05 c2 b7 05 00 	mov    0x5b7c2(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
        Code[Count]=RME_X64_Boot_Code[Count];

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff8021151e:	4c 89 f3             	mov    %r14,%rbx
        RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_STARTUP|(0x7000>>12));
        RME_X64_UDELAY(200);

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
        RME_X64_CPU_Cnt++;
ffffffff80211521:	48 83 c0 01          	add    $0x1,%rax
ffffffff80211525:	48 89 05 b4 b7 05 00 	mov    %rax,0x5b7b4(%rip)        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
    for(Count=0;Count<sizeof(RME_X64_Boot_Code);Count++)
        Code[Count]=RME_X64_Boot_Code[Count];

    /* Start the CPUs one by one - the first one is ourself */
    RME_X64_CPU_Cnt=1;
    for(Count=1;Count<RME_X64_Num_CPU;Count++)
ffffffff8021152c:	48 8b 05 b5 b7 05 00 	mov    0x5b7b5(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80211533:	49 39 c6             	cmp    %rax,%r14
ffffffff80211536:	0f 82 b4 fe ff ff    	jb     ffffffff802113f0 <__RME_X64_SMP_Init+0x80>

        /* Wait for CPU to finish its own initialization */
        while(RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done==0);
        RME_X64_CPU_Cnt++;
    }
}
ffffffff8021153c:	5b                   	pop    %rbx
ffffffff8021153d:	5d                   	pop    %rbp
ffffffff8021153e:	41 5c                	pop    %r12
ffffffff80211540:	41 5d                	pop    %r13
ffffffff80211542:	41 5e                	pop    %r14
ffffffff80211544:	c3                   	retq   
ffffffff80211545:	90                   	nop
ffffffff80211546:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021154d:	00 00 00 

ffffffff80211550 <__RME_X64_SMP_Tick>:
Return      : None.
******************************************************************************/
void __RME_X64_SMP_Tick(void)
{
	/* Is this a SMP? */
	if(RME_X64_Num_CPU>1)
ffffffff80211550:	48 8b 05 91 b7 05 00 	mov    0x5b791(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80211557:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021155b:	76 30                	jbe    ffffffff8021158d <__RME_X64_SMP_Tick+0x3d>
	{
		RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRHI, 0xFFULL<<24);
ffffffff8021155d:	48 8b 15 0c a7 05 00 	mov    0x5a70c(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff80211564:	48 b8 10 03 00 00 00 	movabs $0xffff800000000310,%rax
ffffffff8021156b:	80 ff ff 
ffffffff8021156e:	c7 04 02 00 00 00 ff 	movl   $0xff000000,(%rdx,%rax,1)
		RME_X64_LAPIC_WRITE(RME_X64_LAPIC_ICRLO, RME_X64_LAPIC_ICRLO_EXC_SELF|
ffffffff80211575:	48 8b 15 f4 a6 05 00 	mov    0x5a6f4(%rip),%rdx        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
ffffffff8021157c:	48 b8 00 03 00 00 00 	movabs $0xffff800000000300,%rax
ffffffff80211583:	80 ff ff 
ffffffff80211586:	c7 04 02 83 00 0c 00 	movl   $0xc0083,(%rdx,%rax,1)
ffffffff8021158d:	f3 c3                	repz retq 
ffffffff8021158f:	90                   	nop

ffffffff80211590 <__RME_Low_Level_Init>:
Input       : None.
Output      : None.
Return      : ptr_t - Always 0.
******************************************************************************/
ptr_t __RME_Low_Level_Init(void)
{
ffffffff80211590:	41 57                	push   %r15
ffffffff80211592:	41 56                	push   %r14
Return      : None.
******************************************************************************/
void __RME_X64_UART_Init(void)
{
    /* Disable interrupts */
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff80211594:	31 f6                	xor    %esi,%esi
Input       : None.
Output      : None.
Return      : ptr_t - Always 0.
******************************************************************************/
ptr_t __RME_Low_Level_Init(void)
{
ffffffff80211596:	41 55                	push   %r13
ffffffff80211598:	41 54                	push   %r12
Return      : None.
******************************************************************************/
void __RME_X64_UART_Init(void)
{
    /* Disable interrupts */
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff8021159a:	bf f9 03 00 00       	mov    $0x3f9,%edi
Input       : None.
Output      : None.
Return      : ptr_t - Always 0.
******************************************************************************/
ptr_t __RME_Low_Level_Init(void)
{
ffffffff8021159f:	55                   	push   %rbp
ffffffff802115a0:	53                   	push   %rbx
ffffffff802115a1:	48 83 ec 38          	sub    $0x38,%rsp
Return      : None.
******************************************************************************/
void __RME_X64_UART_Init(void)
{
    /* Disable interrupts */
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff802115a5:	e8 60 a2 ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    /* Unlock divisor */
    __RME_X64_Out(RME_X64_COM1+3, 0x80);
ffffffff802115aa:	be 80 00 00 00       	mov    $0x80,%esi
ffffffff802115af:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff802115b4:	e8 51 a2 ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    /* Set baudrate - on some computer, the hardware only support this reliably */
    __RME_X64_Out(RME_X64_COM1+0, 115200/9600);
ffffffff802115b9:	be 0c 00 00 00       	mov    $0xc,%esi
ffffffff802115be:	bf f8 03 00 00       	mov    $0x3f8,%edi
ffffffff802115c3:	e8 42 a2 ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_COM1+1, 0);
ffffffff802115c8:	31 f6                	xor    %esi,%esi
ffffffff802115ca:	bf f9 03 00 00       	mov    $0x3f9,%edi
ffffffff802115cf:	e8 36 a2 ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    /* Lock divisor, 8 data bits, 1 stop bit, parity off */
    __RME_X64_Out(RME_X64_COM1+3, 0x03);
ffffffff802115d4:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff802115d9:	bf fb 03 00 00       	mov    $0x3fb,%edi
ffffffff802115de:	e8 27 a2 ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    /* Turn on the FIFO */
    __RME_X64_Out(RME_X64_COM1+2, 0xC7);
ffffffff802115e3:	be c7 00 00 00       	mov    $0xc7,%esi
ffffffff802115e8:	bf fa 03 00 00       	mov    $0x3fa,%edi
ffffffff802115ed:	e8 18 a2 ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    /* Turn off all model control, fully asynchronous */
    __RME_X64_Out(RME_X64_COM1+4, 0);
ffffffff802115f2:	31 f6                	xor    %esi,%esi
ffffffff802115f4:	bf fc 03 00 00       	mov    $0x3fc,%edi
ffffffff802115f9:	e8 0c a2 ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>

    /* If status is 0xFF, no serial port */
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
ffffffff802115fe:	bf fd 03 00 00       	mov    $0x3fd,%edi
ffffffff80211603:	e8 f8 a1 ff ff       	callq  ffffffff8020b800 <__RME_X64_In>
ffffffff80211608:	48 3d ff 00 00 00    	cmp    $0xff,%rax
ffffffff8021160e:	0f 84 b5 08 00 00    	je     ffffffff80211ec9 <__RME_Low_Level_Init+0x939>
        RME_X64_UART_Exist=0;
    else
        RME_X64_UART_Exist=1;
ffffffff80211614:	48 c7 05 61 b9 05 00 	movq   $0x1,0x5b961(%rip)        # ffffffff8026cf80 <RME_X64_UART_Exist>
ffffffff8021161b:	01 00 00 00 
{
    struct RME_X64_ACPI_RDSP_Desc* RDSP;
    ptr_t Paddr;
    /* 0x40E contains the address of Extended BIOS Data Area (EBDA). Let's try
     * to find the RDSP there first */
    Paddr=*((u16*)RME_X64_PA2VA(0x40E))<<4;
ffffffff8021161f:	48 b8 0e 04 00 00 00 	movabs $0xffff80000000040e,%rax
ffffffff80211626:	80 ff ff 
ffffffff80211629:	0f b7 00             	movzwl (%rax),%eax
ffffffff8021162c:	c1 e0 04             	shl    $0x4,%eax

    if(Paddr!=0)
ffffffff8021162f:	85 c0                	test   %eax,%eax
ffffffff80211631:	74 65                	je     ffffffff80211698 <__RME_Low_Level_Init+0x108>
{
    struct RME_X64_ACPI_RDSP_Desc* RDSP;
    ptr_t Paddr;
    /* 0x40E contains the address of Extended BIOS Data Area (EBDA). Let's try
     * to find the RDSP there first */
    Paddr=*((u16*)RME_X64_PA2VA(0x40E))<<4;
ffffffff80211633:	48 98                	cltq   
    u8* Pos;
    cnt_t Count;
    ptr_t Checksum;
    cnt_t Check_Cnt;

    Pos=(u8*)RME_X64_PA2VA(Base);
ffffffff80211635:	48 ba 00 00 00 00 00 	movabs $0xffff800000000000,%rdx
ffffffff8021163c:	80 ff ff 
ffffffff8021163f:	49 bc e0 03 00 00 00 	movabs $0xffff8000000003e0,%r12
ffffffff80211646:	80 ff ff 
ffffffff80211649:	48 8d 2c 10          	lea    (%rax,%rdx,1),%rbp
ffffffff8021164d:	49 01 c4             	add    %rax,%r12

    /* Search a word at a time */
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
    {
        /* It seemed that we have found one. See if the checksum is good */
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff80211650:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80211655:	48 c7 c6 24 e4 21 80 	mov    $0xffffffff8021e424,%rsi
ffffffff8021165c:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021165f:	e8 3c 44 00 00       	callq  ffffffff80215aa0 <_RME_Memcmp>
ffffffff80211664:	48 85 c0             	test   %rax,%rax
ffffffff80211667:	75 26                	jne    ffffffff8021168f <__RME_Low_Level_Init+0xff>
ffffffff80211669:	48 8d 75 14          	lea    0x14(%rbp),%rsi
ffffffff8021166d:	48 89 e8             	mov    %rbp,%rax
ffffffff80211670:	31 d2                	xor    %edx,%edx
ffffffff80211672:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        {
            Checksum=0;
            /* 20 is the length of the first part of the table */
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
                Checksum+=Pos[Count+Check_Cnt];
ffffffff80211678:	0f b6 08             	movzbl (%rax),%ecx
ffffffff8021167b:	48 83 c0 01          	add    $0x1,%rax
ffffffff8021167f:	48 01 ca             	add    %rcx,%rdx
        /* It seemed that we have found one. See if the checksum is good */
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
        {
            Checksum=0;
            /* 20 is the length of the first part of the table */
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff80211682:	48 39 c6             	cmp    %rax,%rsi
ffffffff80211685:	75 f1                	jne    ffffffff80211678 <__RME_Low_Level_Init+0xe8>
                Checksum+=Pos[Count+Check_Cnt];
            /* Is the checksum good? */
            if((Checksum&0xFF)==0)
ffffffff80211687:	84 d2                	test   %dl,%dl
ffffffff80211689:	0f 84 81 00 00 00    	je     ffffffff80211710 <__RME_Low_Level_Init+0x180>
ffffffff8021168f:	48 83 c5 04          	add    $0x4,%rbp
    cnt_t Check_Cnt;

    Pos=(u8*)RME_X64_PA2VA(Base);

    /* Search a word at a time */
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff80211693:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80211696:	75 b8                	jne    ffffffff80211650 <__RME_Low_Level_Init+0xc0>
    {
        /* It seemed that we have found one. See if the checksum is good */
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff80211698:	48 bd 00 00 0e 00 00 	movabs $0xffff8000000e0000,%rbp
ffffffff8021169f:	80 ff ff 
    cnt_t Check_Cnt;

    Pos=(u8*)RME_X64_PA2VA(Base);

    /* Search a word at a time */
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff802116a2:	49 bc e0 ff 0f 00 00 	movabs $0xffff8000000fffe0,%r12
ffffffff802116a9:	80 ff ff 
ffffffff802116ac:	0f 1f 40 00          	nopl   0x0(%rax)
    {
        /* It seemed that we have found one. See if the checksum is good */
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
ffffffff802116b0:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff802116b5:	48 c7 c6 24 e4 21 80 	mov    $0xffffffff8021e424,%rsi
ffffffff802116bc:	48 89 ef             	mov    %rbp,%rdi
ffffffff802116bf:	e8 dc 43 00 00       	callq  ffffffff80215aa0 <_RME_Memcmp>
ffffffff802116c4:	48 85 c0             	test   %rax,%rax
ffffffff802116c7:	75 22                	jne    ffffffff802116eb <__RME_Low_Level_Init+0x15b>
ffffffff802116c9:	48 8d 75 14          	lea    0x14(%rbp),%rsi
ffffffff802116cd:	48 89 e8             	mov    %rbp,%rax
ffffffff802116d0:	31 d2                	xor    %edx,%edx
ffffffff802116d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        {
            Checksum=0;
            /* 20 is the length of the first part of the table */
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
                Checksum+=Pos[Count+Check_Cnt];
ffffffff802116d8:	0f b6 08             	movzbl (%rax),%ecx
ffffffff802116db:	48 83 c0 01          	add    $0x1,%rax
ffffffff802116df:	48 01 ca             	add    %rcx,%rdx
        /* It seemed that we have found one. See if the checksum is good */
        if(_RME_Memcmp(&(Pos[Count]),"RSD PTR ",8)==0)
        {
            Checksum=0;
            /* 20 is the length of the first part of the table */
            for(Check_Cnt=0;Check_Cnt<20;Check_Cnt++)
ffffffff802116e2:	48 39 c6             	cmp    %rax,%rsi
ffffffff802116e5:	75 f1                	jne    ffffffff802116d8 <__RME_Low_Level_Init+0x148>
                Checksum+=Pos[Count+Check_Cnt];
            /* Is the checksum good? */
            if((Checksum&0xFF)==0)
ffffffff802116e7:	84 d2                	test   %dl,%dl
ffffffff802116e9:	74 25                	je     ffffffff80211710 <__RME_Low_Level_Init+0x180>
ffffffff802116eb:	48 83 c5 04          	add    $0x4,%rbp
    cnt_t Check_Cnt;

    Pos=(u8*)RME_X64_PA2VA(Base);

    /* Search a word at a time */
    for(Count=0;Count<=Len-sizeof(struct RME_X64_ACPI_RDSP_Desc);Count+=4)
ffffffff802116ef:	4c 39 e5             	cmp    %r12,%rbp
ffffffff802116f2:	75 bc                	jne    ffffffff802116b0 <__RME_Low_Level_Init+0x120>
    struct RME_X64_ACPI_MADT_Hdr* MADT;
    struct RME_X64_ACPI_Desc_Hdr* Header;

    /* Try to find RDSP */
    RDSP=__RME_X64_RDSP_Find();
    RME_PRINTK_S("\r\nRDSP address: ");
ffffffff802116f4:	48 c7 c7 2d e4 21 80 	mov    $0xffffffff8021e42d,%rdi
ffffffff802116fb:	e8 10 58 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U((ptr_t)RDSP);
ffffffff80211700:	31 ff                	xor    %edi,%edi
ffffffff80211702:	e8 49 57 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    /* Find the RSDT */
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff80211707:	8b 04 25 10 00 00 00 	mov    0x10,%eax
ffffffff8021170e:	0f 0b                	ud2    
    struct RME_X64_ACPI_MADT_Hdr* MADT;
    struct RME_X64_ACPI_Desc_Hdr* Header;

    /* Try to find RDSP */
    RDSP=__RME_X64_RDSP_Find();
    RME_PRINTK_S("\r\nRDSP address: ");
ffffffff80211710:	48 c7 c7 2d e4 21 80 	mov    $0xffffffff8021e42d,%rdi
    RME_PRINTK_U((ptr_t)RDSP);
    /* Find the RSDT */
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff80211717:	49 bd 00 00 00 00 00 	movabs $0xffff800000000000,%r13
ffffffff8021171e:	80 ff ff 
    struct RME_X64_ACPI_MADT_Hdr* MADT;
    struct RME_X64_ACPI_Desc_Hdr* Header;

    /* Try to find RDSP */
    RDSP=__RME_X64_RDSP_Find();
    RME_PRINTK_S("\r\nRDSP address: ");
ffffffff80211721:	e8 ea 57 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U((ptr_t)RDSP);
ffffffff80211726:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211729:	e8 22 57 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    /* Find the RSDT */
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff8021172e:	44 8b 65 10          	mov    0x10(%rbp),%r12d
    RME_PRINTK_S("\r\nRSDT address: ");
ffffffff80211732:	48 c7 c7 3e e4 21 80 	mov    $0xffffffff8021e43e,%rdi
ffffffff80211739:	e8 d2 57 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    /* Try to find RDSP */
    RDSP=__RME_X64_RDSP_Find();
    RME_PRINTK_S("\r\nRDSP address: ");
    RME_PRINTK_U((ptr_t)RDSP);
    /* Find the RSDT */
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
ffffffff8021173e:	4d 01 ec             	add    %r13,%r12
    RME_PRINTK_S("\r\nRSDT address: ");
    RME_PRINTK_U((ptr_t)RSDT);
ffffffff80211741:	4c 89 e7             	mov    %r12,%rdi
ffffffff80211744:	e8 07 57 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff80211749:	41 8b 4c 24 04       	mov    0x4(%r12),%ecx
ffffffff8021174e:	48 83 e9 24          	sub    $0x24,%rcx
ffffffff80211752:	48 c1 e9 02          	shr    $0x2,%rcx

    for(Count=0;Count<Table_Num;Count++)
ffffffff80211756:	48 85 c9             	test   %rcx,%rcx
    RME_PRINTK_U((ptr_t)RDSP);
    /* Find the RSDT */
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
    RME_PRINTK_S("\r\nRSDT address: ");
    RME_PRINTK_U((ptr_t)RSDT);
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;
ffffffff80211759:	49 89 cf             	mov    %rcx,%r15

    for(Count=0;Count<Table_Num;Count++)
ffffffff8021175c:	0f 84 3f 01 00 00    	je     ffffffff802118a1 <__RME_Low_Level_Init+0x311>
ffffffff80211762:	45 31 f6             	xor    %r14d,%r14d
ffffffff80211765:	0f 1f 00             	nopl   (%rax)
    {
        /* See what did we find */
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff80211768:	43 8b 6c b4 24       	mov    0x24(%r12,%r14,4),%ebp
    u8 Creator[5];
    ptr_t OEM_Rev;
    ptr_t Creator_Rev;

    /* Copy everything into our buffer */
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff8021176d:	48 8d 7c 24 16       	lea    0x16(%rsp),%rdi
ffffffff80211772:	ba 04 00 00 00       	mov    $0x4,%edx
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;

    for(Count=0;Count<Table_Num;Count++)
    {
        /* See what did we find */
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
ffffffff80211777:	4c 01 ed             	add    %r13,%rbp
    u8 Creator[5];
    ptr_t OEM_Rev;
    ptr_t Creator_Rev;

    /* Copy everything into our buffer */
    _RME_Memcpy(Signature, Header->Signature, 4);
ffffffff8021177a:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021177d:	e8 6e 43 00 00       	callq  ffffffff80215af0 <_RME_Memcpy>
    Signature[4]='\0';
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff80211782:	48 8d 75 0a          	lea    0xa(%rbp),%rsi
ffffffff80211786:	48 8d 7c 24 20       	lea    0x20(%rsp),%rdi
ffffffff8021178b:	ba 06 00 00 00       	mov    $0x6,%edx
    ptr_t OEM_Rev;
    ptr_t Creator_Rev;

    /* Copy everything into our buffer */
    _RME_Memcpy(Signature, Header->Signature, 4);
    Signature[4]='\0';
ffffffff80211790:	c6 44 24 1a 00       	movb   $0x0,0x1a(%rsp)
    _RME_Memcpy(ID, Header->OEM_ID, 6);
ffffffff80211795:	e8 56 43 00 00       	callq  ffffffff80215af0 <_RME_Memcpy>
    ID[6]='\0';
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff8021179a:	48 8d 75 10          	lea    0x10(%rbp),%rsi
ffffffff8021179e:	48 8d 7c 24 27       	lea    0x27(%rsp),%rdi
ffffffff802117a3:	ba 08 00 00 00       	mov    $0x8,%edx

    /* Copy everything into our buffer */
    _RME_Memcpy(Signature, Header->Signature, 4);
    Signature[4]='\0';
    _RME_Memcpy(ID, Header->OEM_ID, 6);
    ID[6]='\0';
ffffffff802117a8:	c6 44 24 26 00       	movb   $0x0,0x26(%rsp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
ffffffff802117ad:	e8 3e 43 00 00       	callq  ffffffff80215af0 <_RME_Memcpy>
    Table_ID[8]='\0';
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff802117b2:	48 8d 75 1c          	lea    0x1c(%rbp),%rsi
ffffffff802117b6:	48 8d 7c 24 1b       	lea    0x1b(%rsp),%rdi
ffffffff802117bb:	ba 04 00 00 00       	mov    $0x4,%edx
    _RME_Memcpy(Signature, Header->Signature, 4);
    Signature[4]='\0';
    _RME_Memcpy(ID, Header->OEM_ID, 6);
    ID[6]='\0';
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
    Table_ID[8]='\0';
ffffffff802117c0:	c6 44 24 2f 00       	movb   $0x0,0x2f(%rsp)
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
ffffffff802117c5:	e8 26 43 00 00       	callq  ffffffff80215af0 <_RME_Memcpy>
    Creator[4]='\0';

    OEM_Rev=Header->OEM_Revision;
    Creator_Rev=Header->Creator_Revision;
ffffffff802117ca:	8b 75 20             	mov    0x20(%rbp),%esi
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
    Table_ID[8]='\0';
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
    Creator[4]='\0';

    OEM_Rev=Header->OEM_Revision;
ffffffff802117cd:	8b 45 18             	mov    0x18(%rbp),%eax
    Creator_Rev=Header->Creator_Revision;

    /* And print these entries */
    RME_PRINTK_S("\n\rACPI:");
ffffffff802117d0:	48 c7 c7 4f e4 21 80 	mov    $0xffffffff8021e44f,%rdi
    _RME_Memcpy(ID, Header->OEM_ID, 6);
    ID[6]='\0';
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
    Table_ID[8]='\0';
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
    Creator[4]='\0';
ffffffff802117d7:	c6 44 24 1f 00       	movb   $0x0,0x1f(%rsp)

    OEM_Rev=Header->OEM_Revision;
    Creator_Rev=Header->Creator_Revision;
ffffffff802117dc:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
    _RME_Memcpy(Table_ID, Header->OEM_Table_ID, 8); 
    Table_ID[8]='\0';
    _RME_Memcpy(Creator, Header->Creator_ID, 4);
    Creator[4]='\0';

    OEM_Rev=Header->OEM_Revision;
ffffffff802117e1:	48 89 04 24          	mov    %rax,(%rsp)
    Creator_Rev=Header->Creator_Revision;

    /* And print these entries */
    RME_PRINTK_S("\n\rACPI:");
ffffffff802117e5:	e8 26 57 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(Signature);
ffffffff802117ea:	48 8d 4c 24 16       	lea    0x16(%rsp),%rcx
ffffffff802117ef:	48 89 cf             	mov    %rcx,%rdi
ffffffff802117f2:	e8 19 57 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(", ");
ffffffff802117f7:	48 c7 c7 09 e4 21 80 	mov    $0xffffffff8021e409,%rdi
ffffffff802117fe:	e8 0d 57 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(ID);
ffffffff80211803:	48 8d 4c 24 20       	lea    0x20(%rsp),%rcx
ffffffff80211808:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021180b:	e8 00 57 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(", ");
ffffffff80211810:	48 c7 c7 09 e4 21 80 	mov    $0xffffffff8021e409,%rdi
ffffffff80211817:	e8 f4 56 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(Table_ID);
ffffffff8021181c:	48 8d 54 24 27       	lea    0x27(%rsp),%rdx
ffffffff80211821:	48 89 d7             	mov    %rdx,%rdi
ffffffff80211824:	e8 e7 56 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(", ");
ffffffff80211829:	48 c7 c7 09 e4 21 80 	mov    $0xffffffff8021e409,%rdi
ffffffff80211830:	e8 db 56 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(OEM_Rev);
ffffffff80211835:	48 8b 3c 24          	mov    (%rsp),%rdi
ffffffff80211839:	e8 d2 56 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(", ");
ffffffff8021183e:	48 c7 c7 09 e4 21 80 	mov    $0xffffffff8021e409,%rdi
ffffffff80211845:	e8 c6 56 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(Creator);
ffffffff8021184a:	48 8d 44 24 1b       	lea    0x1b(%rsp),%rax
ffffffff8021184f:	48 89 c7             	mov    %rax,%rdi
ffffffff80211852:	e8 b9 56 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(", ");
ffffffff80211857:	48 c7 c7 09 e4 21 80 	mov    $0xffffffff8021e409,%rdi
ffffffff8021185e:	e8 ad 56 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(Creator_Rev);
ffffffff80211863:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff80211868:	e8 a3 56 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_S(".");
ffffffff8021186d:	48 c7 c7 57 e4 21 80 	mov    $0xffffffff8021e457,%rdi
ffffffff80211874:	e8 97 56 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    {
        /* See what did we find */
        Header=(struct RME_X64_ACPI_Desc_Hdr*)RME_X64_PA2VA(RSDT->Entry[Count]);
        __RME_X64_ACPI_Debug(Header);
        /* See if this is the MADT */
        if(_RME_Memcmp(Header->Signature, "APIC", 4)==0)
ffffffff80211879:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff8021187e:	48 c7 c6 59 e4 21 80 	mov    $0xffffffff8021e459,%rsi
ffffffff80211885:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211888:	e8 13 42 00 00       	callq  ffffffff80215aa0 <_RME_Memcmp>
ffffffff8021188d:	48 85 c0             	test   %rax,%rax
ffffffff80211890:	48 0f 44 dd          	cmove  %rbp,%rbx
    RSDT=(struct RME_X64_ACPI_RSDT_Hdr*)RME_X64_PA2VA(RDSP->RSDT_Addr_Phys);
    RME_PRINTK_S("\r\nRSDT address: ");
    RME_PRINTK_U((ptr_t)RSDT);
    Table_Num=(RSDT->Header.Length-sizeof(struct RME_X64_ACPI_RSDT_Hdr))>>2;

    for(Count=0;Count<Table_Num;Count++)
ffffffff80211894:	49 83 c6 01          	add    $0x1,%r14
ffffffff80211898:	4d 39 f7             	cmp    %r14,%r15
ffffffff8021189b:	0f 85 c7 fe ff ff    	jne    ffffffff80211768 <__RME_Low_Level_Init+0x1d8>

    /* Is there a MADT? */
    if(MADT==0)
        return -1;
    /* Is the MADT valid? */
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
ffffffff802118a1:	8b 43 04             	mov    0x4(%rbx),%eax
ffffffff802118a4:	83 f8 2b             	cmp    $0x2b,%eax
ffffffff802118a7:	0f 86 4f 05 00 00    	jbe    ffffffff80211dfc <__RME_Low_Level_Init+0x86c>
        return -1;

    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;

    /* Where does the actual table contents start? */
    Ptr=MADT->Table;
ffffffff802118ad:	48 8d 6b 2c          	lea    0x2c(%rbx),%rbp
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff802118b1:	48 83 e8 2c          	sub    $0x2c,%rax
        return -1;
    /* Is the MADT valid? */
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
        return -1;

    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff802118b5:	8b 53 24             	mov    0x24(%rbx),%edx

    /* Where does the actual table contents start? */
    Ptr=MADT->Table;
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);
ffffffff802118b8:	4c 8d 64 05 00       	lea    0x0(%rbp,%rax,1),%r12

    RME_X64_Num_IOAPIC=0;
    RME_X64_Num_CPU=0;
    while(Ptr<End)
ffffffff802118bd:	4c 39 e5             	cmp    %r12,%rbp
        return -1;
    /* Is the MADT valid? */
    if(MADT->Header.Length<sizeof(struct RME_X64_ACPI_MADT_Hdr))
        return -1;

    RME_X64_LAPIC_Addr=MADT->LAPIC_Addr_Phys;
ffffffff802118c0:	48 89 15 a9 a3 05 00 	mov    %rdx,0x5a3a9(%rip)        # ffffffff8026bc70 <RME_X64_LAPIC_Addr>
    /* Where does the actual table contents start? */
    Ptr=MADT->Table;
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);

    RME_X64_Num_IOAPIC=0;
ffffffff802118c7:	48 c7 05 ee a3 05 00 	movq   $0x0,0x5a3ee(%rip)        # ffffffff8026bcc0 <RME_X64_Num_IOAPIC>
ffffffff802118ce:	00 00 00 00 
    RME_X64_Num_CPU=0;
ffffffff802118d2:	48 c7 05 0b b4 05 00 	movq   $0x0,0x5b40b(%rip)        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff802118d9:	00 00 00 00 
    while(Ptr<End)
ffffffff802118dd:	0f 83 fe 00 00 00    	jae    ffffffff802119e1 <__RME_Low_Level_Init+0x451>
    {
        /* See if we have finished scanning the table */
        if((End-Ptr)<2)
ffffffff802118e3:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802118e7:	0f 86 f4 00 00 00    	jbe    ffffffff802119e1 <__RME_Low_Level_Init+0x451>
            break;
        Length=Ptr[1];
ffffffff802118ed:	0f b6 5b 2d          	movzbl 0x2d(%rbx),%ebx
        if((End-Ptr)<Length)
ffffffff802118f1:	48 39 d8             	cmp    %rbx,%rax
ffffffff802118f4:	73 47                	jae    ffffffff8021193d <__RME_Low_Level_Init+0x3ad>
ffffffff802118f6:	e9 e6 00 00 00       	jmpq   ffffffff802119e1 <__RME_Low_Level_Init+0x451>
ffffffff802118fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            break;

        /* See what is in the table */
        switch(Ptr[0])
ffffffff80211900:	0f 82 72 04 00 00    	jb     ffffffff80211d78 <__RME_Low_Level_Init+0x7e8>
ffffffff80211906:	3c 02                	cmp    $0x2,%al
ffffffff80211908:	75 0a                	jne    ffffffff80211914 <__RME_Low_Level_Init+0x384>
            }
            /* This is interrupt override information */
            case RME_X64_MADT_INT_SRC_OVERRIDE:
            {
                OVERRIDE=(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record*)Ptr;
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
ffffffff8021190a:	48 83 fb 06          	cmp    $0x6,%rbx
ffffffff8021190e:	0f 87 5c 05 00 00    	ja     ffffffff80211e70 <__RME_Low_Level_Init+0x8e0>
            }
            /* All other types are ignored */
            default:break;
        }
        
        Ptr+=Length;
ffffffff80211914:	48 01 dd             	add    %rbx,%rbp
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);

    RME_X64_Num_IOAPIC=0;
    RME_X64_Num_CPU=0;
    while(Ptr<End)
ffffffff80211917:	49 39 ec             	cmp    %rbp,%r12
ffffffff8021191a:	0f 86 c1 00 00 00    	jbe    ffffffff802119e1 <__RME_Low_Level_Init+0x451>
    {
        /* See if we have finished scanning the table */
        if((End-Ptr)<2)
ffffffff80211920:	4c 89 e0             	mov    %r12,%rax
ffffffff80211923:	48 29 e8             	sub    %rbp,%rax
ffffffff80211926:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021192a:	0f 8e b1 00 00 00    	jle    ffffffff802119e1 <__RME_Low_Level_Init+0x451>
            break;
        Length=Ptr[1];
ffffffff80211930:	0f b6 5d 01          	movzbl 0x1(%rbp),%ebx
        if((End-Ptr)<Length)
ffffffff80211934:	48 39 c3             	cmp    %rax,%rbx
ffffffff80211937:	0f 87 a4 00 00 00    	ja     ffffffff802119e1 <__RME_Low_Level_Init+0x451>
            break;

        /* See what is in the table */
        switch(Ptr[0])
ffffffff8021193d:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80211941:	3c 01                	cmp    $0x1,%al
ffffffff80211943:	75 bb                	jne    ffffffff80211900 <__RME_Low_Level_Init+0x370>
            /* This is an IOAPIC */
            case RME_X64_MADT_IOAPIC:
            {
                IOAPIC=(struct RME_X64_ACPI_MADT_IOAPIC_Record*)Ptr;
                /* Is the length correct? */
                if(Length<sizeof(struct RME_X64_ACPI_MADT_IOAPIC_Record))
ffffffff80211945:	48 83 fb 0b          	cmp    $0xb,%rbx
ffffffff80211949:	76 c9                	jbe    ffffffff80211914 <__RME_Low_Level_Init+0x384>
                    break;

                RME_PRINTK_S("\n\rACPI: IOAPIC ");
ffffffff8021194b:	48 c7 c7 77 e4 21 80 	mov    $0xffffffff8021e477,%rdi
ffffffff80211952:	e8 b9 55 00 00       	callq  ffffffff80216f10 <RME_Print_String>
                RME_Print_Int(RME_X64_Num_IOAPIC);
ffffffff80211957:	48 8b 3d 62 a3 05 00 	mov    0x5a362(%rip),%rdi        # ffffffff8026bcc0 <RME_X64_Num_IOAPIC>
ffffffff8021195e:	e8 6d 53 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
                RME_PRINTK_S(" @ ");
ffffffff80211963:	48 c7 c7 87 e4 21 80 	mov    $0xffffffff8021e487,%rdi
ffffffff8021196a:	e8 a1 55 00 00       	callq  ffffffff80216f10 <RME_Print_String>
                RME_Print_Uint(IOAPIC->Addr);
ffffffff8021196f:	8b 7d 04             	mov    0x4(%rbp),%edi
ffffffff80211972:	e8 d9 54 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
                RME_PRINTK_S(", ID ");
ffffffff80211977:	48 c7 c7 8b e4 21 80 	mov    $0xffffffff8021e48b,%rdi
ffffffff8021197e:	e8 8d 55 00 00       	callq  ffffffff80216f10 <RME_Print_String>
                RME_Print_Int(IOAPIC->ID);
ffffffff80211983:	0f b6 7d 02          	movzbl 0x2(%rbp),%edi
ffffffff80211987:	e8 44 53 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
                RME_PRINTK_S(", IBASE ");
ffffffff8021198c:	48 c7 c7 91 e4 21 80 	mov    $0xffffffff8021e491,%rdi
ffffffff80211993:	e8 78 55 00 00       	callq  ffffffff80216f10 <RME_Print_String>
                RME_Print_Int(IOAPIC->Interrupt_Base);
ffffffff80211998:	8b 7d 08             	mov    0x8(%rbp),%edi
ffffffff8021199b:	e8 30 53 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>

                /* Support multiple APICS */
                if(RME_X64_Num_IOAPIC!=0)
ffffffff802119a0:	48 8b 05 19 a3 05 00 	mov    0x5a319(%rip),%rax        # ffffffff8026bcc0 <RME_X64_Num_IOAPIC>
ffffffff802119a7:	48 85 c0             	test   %rax,%rax
ffffffff802119aa:	0f 85 a8 05 00 00    	jne    ffffffff80211f58 <__RME_Low_Level_Init+0x9c8>
                {
                    RME_PRINTK_S("Warning: multiple ioapics are not supported - currently we will not initialize IOAPIC > 1\n");
                }
                else
                {
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
ffffffff802119b0:	0f b6 55 02          	movzbl 0x2(%rbp),%edx
ffffffff802119b4:	48 8b 05 05 a3 05 00 	mov    0x5a305(%rip),%rax        # ffffffff8026bcc0 <RME_X64_Num_IOAPIC>
ffffffff802119bb:	48 89 14 c5 80 bc 26 	mov    %rdx,-0x7fd94380(,%rax,8)
ffffffff802119c2:	80 
                }

                RME_X64_Num_IOAPIC++;
ffffffff802119c3:	48 8b 05 f6 a2 05 00 	mov    0x5a2f6(%rip),%rax        # ffffffff8026bcc0 <RME_X64_Num_IOAPIC>
            }
            /* All other types are ignored */
            default:break;
        }
        
        Ptr+=Length;
ffffffff802119ca:	48 01 dd             	add    %rbx,%rbp
                else
                {
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
                }

                RME_X64_Num_IOAPIC++;
ffffffff802119cd:	48 83 c0 01          	add    $0x1,%rax
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);

    RME_X64_Num_IOAPIC=0;
    RME_X64_Num_CPU=0;
    while(Ptr<End)
ffffffff802119d1:	49 39 ec             	cmp    %rbp,%r12
                else
                {
                    RME_X64_IOAPIC_Info[RME_X64_Num_IOAPIC].IOAPIC_ID=IOAPIC->ID;
                }

                RME_X64_Num_IOAPIC++;
ffffffff802119d4:	48 89 05 e5 a2 05 00 	mov    %rax,0x5a2e5(%rip)        # ffffffff8026bcc0 <RME_X64_Num_IOAPIC>
    /* Where does it end? */
    End=Ptr+MADT->Header.Length-sizeof(struct RME_X64_ACPI_MADT_Hdr);

    RME_X64_Num_IOAPIC=0;
    RME_X64_Num_CPU=0;
    while(Ptr<End)
ffffffff802119db:	0f 87 3f ff ff ff    	ja     ffffffff80211920 <__RME_Low_Level_Init+0x390>
void __RME_X64_Feature_Get(void)
{
    cnt_t Count;

    /* What's the maximum feature? */
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff802119e1:	31 ff                	xor    %edi,%edi
ffffffff802119e3:	48 c7 c1 88 b8 26 80 	mov    $0xffffffff8026b888,%rcx
ffffffff802119ea:	48 c7 c2 80 b8 26 80 	mov    $0xffffffff8026b880,%rdx
ffffffff802119f1:	48 c7 c6 78 b8 26 80 	mov    $0xffffffff8026b878,%rsi
ffffffff802119f8:	48 c7 c5 98 b8 26 80 	mov    $0xffffffff8026b898,%rbp
                                                 &(RME_X64_Feature.Func[0][2]),
                                                 &(RME_X64_Feature.Func[0][3]));
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;

    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff802119ff:	bb 01 00 00 00       	mov    $0x1,%ebx
void __RME_X64_Feature_Get(void)
{
    cnt_t Count;

    /* What's the maximum feature? */
    RME_X64_Feature.Max_Func=__RME_X64_CPUID_Get(RME_X64_CPUID_0_VENDOR_ID,
ffffffff80211a04:	e8 40 9e ff ff       	callq  ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80211a09:	48 89 05 50 9e 05 00 	mov    %rax,0x59e50(%rip)        # ffffffff8026b860 <RME_X64_Feature>
                                                 &(RME_X64_Feature.Func[0][1]),
                                                 &(RME_X64_Feature.Func[0][2]),
                                                 &(RME_X64_Feature.Func[0][3]));
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;
ffffffff80211a10:	48 8b 05 49 9e 05 00 	mov    0x59e49(%rip),%rax        # ffffffff8026b860 <RME_X64_Feature>
ffffffff80211a17:	48 89 05 52 9e 05 00 	mov    %rax,0x59e52(%rip)        # ffffffff8026b870 <RME_X64_Feature+0x10>

    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80211a1e:	48 8b 05 3b 9e 05 00 	mov    0x59e3b(%rip),%rax        # ffffffff8026b860 <RME_X64_Feature>
ffffffff80211a25:	48 85 c0             	test   %rax,%rax
ffffffff80211a28:	74 35                	je     ffffffff80211a5f <__RME_Low_Level_Init+0x4cf>
    {
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff80211a2a:	48 8d 55 08          	lea    0x8(%rbp),%rdx
ffffffff80211a2e:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
ffffffff80211a32:	48 89 ee             	mov    %rbp,%rsi
ffffffff80211a35:	48 89 df             	mov    %rbx,%rdi
ffffffff80211a38:	48 83 c5 20          	add    $0x20,%rbp
ffffffff80211a3c:	e8 08 9e ff ff       	callq  ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80211a41:	48 89 da             	mov    %rbx,%rdx
                                                 &(RME_X64_Feature.Func[0][2]),
                                                 &(RME_X64_Feature.Func[0][3]));
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;

    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80211a44:	48 83 c3 01          	add    $0x1,%rbx
    {
        RME_X64_Feature.Func[Count][0]=__RME_X64_CPUID_Get(Count,
ffffffff80211a48:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff80211a4c:	48 89 82 70 b8 26 80 	mov    %rax,-0x7fd94790(%rdx)
                                                 &(RME_X64_Feature.Func[0][2]),
                                                 &(RME_X64_Feature.Func[0][3]));
    RME_X64_Feature.Func[0][0]=RME_X64_Feature.Max_Func;

    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Func;Count++)
ffffffff80211a53:	48 8b 05 06 9e 05 00 	mov    0x59e06(%rip),%rax        # ffffffff8026b860 <RME_X64_Feature>
ffffffff80211a5a:	48 39 c3             	cmp    %rax,%rbx
ffffffff80211a5d:	76 cb                	jbe    ffffffff80211a2a <__RME_Low_Level_Init+0x49a>
                                                           &(RME_X64_Feature.Func[Count][2]),
                                                           &(RME_X64_Feature.Func[Count][3]));
    }

    /* What's the maximum extended feature? */
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff80211a5f:	48 c7 c2 80 ba 26 80 	mov    $0xffffffff8026ba80,%rdx
ffffffff80211a66:	48 c7 c1 88 ba 26 80 	mov    $0xffffffff8026ba88,%rcx
ffffffff80211a6d:	48 c7 c6 78 ba 26 80 	mov    $0xffffffff8026ba78,%rsi
ffffffff80211a74:	bf 00 00 00 80       	mov    $0x80000000,%edi
ffffffff80211a79:	48 c7 c5 98 ba 26 80 	mov    $0xffffffff8026ba98,%rbp
                                                &(RME_X64_Feature.Ext[0][3]));
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;


    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80211a80:	bb 01 00 00 00       	mov    $0x1,%ebx
                                                           &(RME_X64_Feature.Func[Count][2]),
                                                           &(RME_X64_Feature.Func[Count][3]));
    }

    /* What's the maximum extended feature? */
    RME_X64_Feature.Max_Ext=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX,
ffffffff80211a85:	e8 bf 9d ff ff       	callq  ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80211a8a:	48 89 05 d7 9d 05 00 	mov    %rax,0x59dd7(%rip)        # ffffffff8026b868 <RME_X64_Feature+0x8>
                                                &(RME_X64_Feature.Ext[0][1]),
                                                &(RME_X64_Feature.Ext[0][2]),
                                                &(RME_X64_Feature.Ext[0][3]));
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;
ffffffff80211a91:	48 8b 05 d0 9d 05 00 	mov    0x59dd0(%rip),%rax        # ffffffff8026b868 <RME_X64_Feature+0x8>
ffffffff80211a98:	48 89 05 d1 9f 05 00 	mov    %rax,0x59fd1(%rip)        # ffffffff8026ba70 <RME_X64_Feature+0x210>


    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80211a9f:	48 8b 15 c2 9d 05 00 	mov    0x59dc2(%rip),%rdx        # ffffffff8026b868 <RME_X64_Feature+0x8>
ffffffff80211aa6:	b8 00 00 00 80       	mov    $0x80000000,%eax
    {
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80211aab:	49 89 c4             	mov    %rax,%r12
                                                &(RME_X64_Feature.Ext[0][3]));
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;


    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80211aae:	48 39 c2             	cmp    %rax,%rdx
ffffffff80211ab1:	74 43                	je     ffffffff80211af6 <__RME_Low_Level_Init+0x566>
ffffffff80211ab3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    {
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80211ab8:	48 8d 55 08          	lea    0x8(%rbp),%rdx
ffffffff80211abc:	48 8d 4d 10          	lea    0x10(%rbp),%rcx
ffffffff80211ac0:	48 89 df             	mov    %rbx,%rdi
ffffffff80211ac3:	4c 09 e7             	or     %r12,%rdi
ffffffff80211ac6:	48 89 ee             	mov    %rbp,%rsi
ffffffff80211ac9:	48 83 c5 20          	add    $0x20,%rbp
ffffffff80211acd:	e8 77 9d ff ff       	callq  ffffffff8020b849 <__RME_X64_CPUID_Get>
ffffffff80211ad2:	48 89 da             	mov    %rbx,%rdx
                                                &(RME_X64_Feature.Ext[0][3]));
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;


    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80211ad5:	48 83 c3 01          	add    $0x1,%rbx
    {
        RME_X64_Feature.Ext[Count][0]=__RME_X64_CPUID_Get(RME_X64_CPUID_E0_EXT_MAX|Count,
ffffffff80211ad9:	48 c1 e2 05          	shl    $0x5,%rdx
ffffffff80211add:	48 89 82 70 ba 26 80 	mov    %rax,-0x7fd94590(%rdx)
                                                &(RME_X64_Feature.Ext[0][3]));
    RME_X64_Feature.Ext[0][0]=RME_X64_Feature.Max_Ext;


    /* Get all the feature bits */
    for(Count=1;Count<=RME_X64_Feature.Max_Ext-RME_X64_CPUID_E0_EXT_MAX;Count++)
ffffffff80211ae4:	48 8b 05 7d 9d 05 00 	mov    0x59d7d(%rip),%rax        # ffffffff8026b868 <RME_X64_Feature+0x8>
ffffffff80211aeb:	48 05 00 00 00 80    	add    $0xffffffff80000000,%rax
ffffffff80211af1:	48 39 d8             	cmp    %rbx,%rax
ffffffff80211af4:	73 c2                	jae    ffffffff80211ab8 <__RME_Low_Level_Init+0x528>
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
    /* Detect CPU features */
    __RME_X64_Feature_Get();
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80211af6:	48 8b 05 7b b4 05 00 	mov    0x5b47b(%rip),%rax        # ffffffff8026cf78 <RME_X64_MBInfo>
    ptr_t Info_Cnt;

    MMap_Cnt=0;
    Info_Cnt=0;

    __RME_List_Crt(&RME_X64_Phys_Mem);
ffffffff80211afd:	48 c7 c7 40 b8 26 80 	mov    $0xffffffff8026b840,%rdi

    while(MMap_Cnt<MMap_Length)
ffffffff80211b04:	45 31 f6             	xor    %r14d,%r14d
ffffffff80211b07:	45 31 e4             	xor    %r12d,%r12d
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
    /* Detect CPU features */
    __RME_X64_Feature_Get();
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);
ffffffff80211b0a:	8b 68 2c             	mov    0x2c(%rax),%ebp
ffffffff80211b0d:	44 8b 68 30          	mov    0x30(%rax),%r13d
    ptr_t Info_Cnt;

    MMap_Cnt=0;
    Info_Cnt=0;

    __RME_List_Crt(&RME_X64_Phys_Mem);
ffffffff80211b11:	e8 3a 6f 00 00       	callq  ffffffff80218a50 <__RME_List_Crt>

    while(MMap_Cnt<MMap_Length)
ffffffff80211b16:	48 85 ed             	test   %rbp,%rbp
ffffffff80211b19:	75 0e                	jne    ffffffff80211b29 <__RME_Low_Level_Init+0x599>
ffffffff80211b1b:	e9 be 00 00 00       	jmpq   ffffffff80211bde <__RME_Low_Level_Init+0x64e>
ffffffff80211b20:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80211b23:	0f 86 b5 00 00 00    	jbe    ffffffff80211bde <__RME_Low_Level_Init+0x64e>
    {
        MMap=(struct multiboot_mmap_entry*)(MMap_Addr+MMap_Cnt);
ffffffff80211b29:	4b 8d 5c 25 00       	lea    0x0(%r13,%r12,1),%rbx
        MMap_Cnt+=MMap->size+4;
ffffffff80211b2e:	8b 03                	mov    (%rbx),%eax
ffffffff80211b30:	83 c0 04             	add    $0x4,%eax
ffffffff80211b33:	49 01 c4             	add    %rax,%r12

        if(MMap->type!=1)
ffffffff80211b36:	83 7b 14 01          	cmpl   $0x1,0x14(%rbx)
ffffffff80211b3a:	75 e4                	jne    ffffffff80211b20 <__RME_Low_Level_Init+0x590>
            continue;

        Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff80211b3c:	48 8b 15 05 9d 05 00 	mov    0x59d05(%rip),%rdx        # ffffffff8026b848 <RME_X64_Phys_Mem+0x8>
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
        {
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
ffffffff80211b43:	48 8b 43 04          	mov    0x4(%rbx),%rax

        if(MMap->type!=1)
            continue;

        Trav_Ptr=RME_X64_Phys_Mem.Next;
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80211b47:	48 81 fa 40 b8 26 80 	cmp    $0xffffffff8026b840,%rdx
ffffffff80211b4e:	75 15                	jne    ffffffff80211b65 <__RME_Low_Level_Init+0x5d5>
ffffffff80211b50:	eb 19                	jmp    ffffffff80211b6b <__RME_Low_Level_Init+0x5db>
ffffffff80211b52:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        {
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
                break;
            Trav_Ptr=Trav_Ptr->Next;
ffffffff80211b58:	48 8b 52 08          	mov    0x8(%rdx),%rdx

        if(MMap->type!=1)
            continue;

        Trav_Ptr=RME_X64_Phys_Mem.Next;
        while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80211b5c:	48 81 fa 40 b8 26 80 	cmp    $0xffffffff8026b840,%rdx
ffffffff80211b63:	74 06                	je     ffffffff80211b6b <__RME_Low_Level_Init+0x5db>
        {
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
ffffffff80211b65:	48 39 42 10          	cmp    %rax,0x10(%rdx)
ffffffff80211b69:	76 ed                	jbe    ffffffff80211b58 <__RME_Low_Level_Init+0x5c8>
                break;
            Trav_Ptr=Trav_Ptr->Next;
        }
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff80211b6b:	4c 89 f1             	mov    %r14,%rcx
        RME_PRINTK_S(", 0x");
        RME_Print_Uint(MMap->len);
        RME_PRINTK_S(", ");
        RME_Print_Uint(MMap->type);

        Info_Cnt++;
ffffffff80211b6e:	49 83 c6 01          	add    $0x1,%r14
        {
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
                break;
            Trav_Ptr=Trav_Ptr->Next;
        }
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff80211b72:	48 c1 e1 05          	shl    $0x5,%rcx
ffffffff80211b76:	48 89 81 50 38 26 80 	mov    %rax,-0x7fd9c7b0(%rcx)
        RME_X64_Mem[Info_Cnt].Length=MMap->len;
ffffffff80211b7d:	48 8b 43 0c          	mov    0xc(%rbx),%rax
        {
            if(((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr>MMap->addr)
                break;
            Trav_Ptr=Trav_Ptr->Next;
        }
        RME_X64_Mem[Info_Cnt].Start_Addr=MMap->addr;
ffffffff80211b81:	48 8d b9 40 38 26 80 	lea    -0x7fd9c7c0(%rcx),%rdi
        RME_X64_Mem[Info_Cnt].Length=MMap->len;
ffffffff80211b88:	48 89 81 58 38 26 80 	mov    %rax,-0x7fd9c7a8(%rcx)
        __RME_List_Ins(&(RME_X64_Mem[Info_Cnt].Head),Trav_Ptr->Prev,Trav_Ptr);
ffffffff80211b8f:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80211b92:	e8 d9 6e 00 00       	callq  ffffffff80218a70 <__RME_List_Ins>

        /* Just print them then */
        RME_PRINTK_S("\n\rPhysical memory: 0x");
ffffffff80211b97:	48 c7 c7 ca e4 21 80 	mov    $0xffffffff8021e4ca,%rdi
ffffffff80211b9e:	e8 6d 53 00 00       	callq  ffffffff80216f10 <RME_Print_String>
        RME_Print_Uint(MMap->addr);
ffffffff80211ba3:	48 8b 7b 04          	mov    0x4(%rbx),%rdi
ffffffff80211ba7:	e8 a4 52 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
        RME_PRINTK_S(", 0x");
ffffffff80211bac:	48 c7 c7 f6 e6 21 80 	mov    $0xffffffff8021e6f6,%rdi
ffffffff80211bb3:	e8 58 53 00 00       	callq  ffffffff80216f10 <RME_Print_String>
        RME_Print_Uint(MMap->len);
ffffffff80211bb8:	48 8b 7b 0c          	mov    0xc(%rbx),%rdi
ffffffff80211bbc:	e8 8f 52 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
        RME_PRINTK_S(", ");
ffffffff80211bc1:	48 c7 c7 09 e4 21 80 	mov    $0xffffffff8021e409,%rdi
ffffffff80211bc8:	e8 43 53 00 00       	callq  ffffffff80216f10 <RME_Print_String>
        RME_Print_Uint(MMap->type);
ffffffff80211bcd:	8b 7b 14             	mov    0x14(%rbx),%edi
ffffffff80211bd0:	e8 7b 52 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    MMap_Cnt=0;
    Info_Cnt=0;

    __RME_List_Crt(&RME_X64_Phys_Mem);

    while(MMap_Cnt<MMap_Length)
ffffffff80211bd5:	4c 39 e5             	cmp    %r12,%rbp
ffffffff80211bd8:	0f 87 4b ff ff ff    	ja     ffffffff80211b29 <__RME_Low_Level_Init+0x599>
        Info_Cnt++;
    }

    /* Check if any memory segment overlaps. If yes, merge them into one,
     * until there is no overlapping segments */
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff80211bde:	48 8b 1d 63 9c 05 00 	mov    0x59c63(%rip),%rbx        # ffffffff8026b848 <RME_X64_Phys_Mem+0x8>
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff80211be5:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
ffffffff80211bec:	0f 84 e7 02 00 00    	je     ffffffff80211ed9 <__RME_Low_Level_Init+0x949>
ffffffff80211bf2:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffff80211bf6:	48 3d 40 b8 26 80    	cmp    $0xffffffff8026b840,%rax
ffffffff80211bfc:	75 1b                	jne    ffffffff80211c19 <__RME_Low_Level_Init+0x689>
ffffffff80211bfe:	eb 72                	jmp    ffffffff80211c72 <__RME_Low_Level_Init+0x6e2>
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr;
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
            continue;
        }
        Trav_Ptr=Trav_Ptr->Next;
ffffffff80211c00:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    }

    /* Check if any memory segment overlaps. If yes, merge them into one,
     * until there is no overlapping segments */
    Trav_Ptr=RME_X64_Phys_Mem.Next;
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff80211c04:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
ffffffff80211c0b:	74 51                	je     ffffffff80211c5e <__RME_Low_Level_Init+0x6ce>
ffffffff80211c0d:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffff80211c11:	48 3d 40 b8 26 80    	cmp    $0xffffffff8026b840,%rax
ffffffff80211c17:	74 45                	je     ffffffff80211c5e <__RME_Low_Level_Init+0x6ce>
    {
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff80211c19:	48 8b 53 10          	mov    0x10(%rbx),%rdx
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length)>
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
ffffffff80211c1d:	48 8b 43 08          	mov    0x8(%rbx),%rax
    /* Check if any memory segment overlaps. If yes, merge them into one,
     * until there is no overlapping segments */
    Trav_Ptr=RME_X64_Phys_Mem.Next;
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
    {
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
ffffffff80211c21:	48 89 d1             	mov    %rdx,%rcx
ffffffff80211c24:	48 03 4b 18          	add    0x18(%rbx),%rcx
ffffffff80211c28:	48 3b 48 10          	cmp    0x10(%rax),%rcx
ffffffff80211c2c:	76 d2                	jbe    ffffffff80211c00 <__RME_Low_Level_Init+0x670>
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length)>
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
        {
            /* Merge these two blocks */
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
ffffffff80211c2e:	48 8b 4b 08          	mov    0x8(%rbx),%rcx
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
ffffffff80211c32:	48 8b 43 08          	mov    0x8(%rbx),%rax
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr;
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff80211c36:	48 89 df             	mov    %rbx,%rdi
        if((((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr+
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length)>
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr)
        {
            /* Merge these two blocks */
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Length=
ffffffff80211c39:	48 8b 40 18          	mov    0x18(%rax),%rax
ffffffff80211c3d:	48 03 41 10          	add    0x10(%rcx),%rax
ffffffff80211c41:	48 29 d0             	sub    %rdx,%rax
ffffffff80211c44:	48 89 43 18          	mov    %rax,0x18(%rbx)
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Start_Addr+
            ((struct __RME_X64_Mem*)(Trav_Ptr->Next))->Length-
            ((struct __RME_X64_Mem*)(Trav_Ptr))->Start_Addr;
            __RME_List_Del(Trav_Ptr,Trav_Ptr->Next->Next);
ffffffff80211c48:	48 8b 43 08          	mov    0x8(%rbx),%rax
ffffffff80211c4c:	48 8b 70 08          	mov    0x8(%rax),%rsi
ffffffff80211c50:	e8 0b 6e 00 00       	callq  ffffffff80218a60 <__RME_List_Del>
    }

    /* Check if any memory segment overlaps. If yes, merge them into one,
     * until there is no overlapping segments */
    Trav_Ptr=RME_X64_Phys_Mem.Next;
    while((Trav_Ptr!=&RME_X64_Phys_Mem)&&((Trav_Ptr->Next)!=&RME_X64_Phys_Mem))
ffffffff80211c55:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
ffffffff80211c5c:	75 af                	jne    ffffffff80211c0d <__RME_Low_Level_Init+0x67d>
        Trav_Ptr=Trav_Ptr->Next;
    }

    /* Calculate total memory */
    MMap_Cnt=0;
    Trav_Ptr=RME_X64_Phys_Mem.Next;
ffffffff80211c5e:	48 8b 1d e3 9b 05 00 	mov    0x59be3(%rip),%rbx        # ffffffff8026b848 <RME_X64_Phys_Mem+0x8>
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80211c65:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
ffffffff80211c6c:	0f 84 67 02 00 00    	je     ffffffff80211ed9 <__RME_Low_Level_Init+0x949>
    MMap_Cnt=0;
    Info_Cnt=0;

    __RME_List_Crt(&RME_X64_Phys_Mem);

    while(MMap_Cnt<MMap_Length)
ffffffff80211c72:	31 ed                	xor    %ebp,%ebp
ffffffff80211c74:	0f 1f 40 00          	nopl   0x0(%rax)
    /* Calculate total memory */
    MMap_Cnt=0;
    Trav_Ptr=RME_X64_Phys_Mem.Next;
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
    {
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
ffffffff80211c78:	48 03 6b 18          	add    0x18(%rbx),%rbp
        Trav_Ptr=Trav_Ptr->Next;
ffffffff80211c7c:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    }

    /* Calculate total memory */
    MMap_Cnt=0;
    Trav_Ptr=RME_X64_Phys_Mem.Next;
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
ffffffff80211c80:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
ffffffff80211c87:	75 ef                	jne    ffffffff80211c78 <__RME_Low_Level_Init+0x6e8>
    {
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
        Trav_Ptr=Trav_Ptr->Next;
    }
    RME_PRINTK_S("\n\rTotal physical memory: 0x");
ffffffff80211c89:	48 c7 c7 e0 e4 21 80 	mov    $0xffffffff8021e4e0,%rdi
ffffffff80211c90:	e8 7b 52 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_Print_Uint(MMap_Cnt);
ffffffff80211c95:	48 89 ef             	mov    %rbp,%rdi
ffffffff80211c98:	e8 b3 51 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>

    /* At least 256MB memory required on x64 architecture */
    RME_ASSERT(MMap_Cnt>=RME_POW2(RME_PGTBL_SIZE_256M));
ffffffff80211c9d:	48 81 fd ff ff ff 0f 	cmp    $0xfffffff,%rbp
ffffffff80211ca4:	0f 86 42 02 00 00    	jbe    ffffffff80211eec <__RME_Low_Level_Init+0x95c>

    /* Kernel virtual memory layout */
    RME_X64_Layout.Kotbl_Start=(ptr_t)RME_KOTBL;
ffffffff80211caa:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80211cb1:	80 ff ff 
    /* +1G in cases where we have > 3GB memory for covering the memory hole */
    Info_Cnt=(MMap_Cnt>3*RME_POW2(RME_PGTBL_SIZE_1G))?(MMap_Cnt+RME_POW2(RME_PGTBL_SIZE_1G)):MMap_Cnt;
ffffffff80211cb4:	ba 00 00 00 c0       	mov    $0xc0000000,%edx

    /* At least 256MB memory required on x64 architecture */
    RME_ASSERT(MMap_Cnt>=RME_POW2(RME_PGTBL_SIZE_256M));

    /* Kernel virtual memory layout */
    RME_X64_Layout.Kotbl_Start=(ptr_t)RME_KOTBL;
ffffffff80211cb9:	48 89 05 40 b0 05 00 	mov    %rax,0x5b040(%rip)        # ffffffff8026cd00 <RME_X64_Layout>
    /* +1G in cases where we have > 3GB memory for covering the memory hole */
    Info_Cnt=(MMap_Cnt>3*RME_POW2(RME_PGTBL_SIZE_1G))?(MMap_Cnt+RME_POW2(RME_PGTBL_SIZE_1G)):MMap_Cnt;
ffffffff80211cc0:	48 8d 85 00 00 00 40 	lea    0x40000000(%rbp),%rax
ffffffff80211cc7:	48 39 d5             	cmp    %rdx,%rbp
ffffffff80211cca:	48 0f 46 c5          	cmovbe %rbp,%rax
    RME_X64_Layout.Kotbl_Size=((Info_Cnt>>RME_KMEM_SLOT_ORDER)>>RME_WORD_ORDER)+1;
ffffffff80211cce:	48 c1 e8 0a          	shr    $0xa,%rax
ffffffff80211cd2:	48 83 c0 01          	add    $0x1,%rax
ffffffff80211cd6:	48 89 05 2b b0 05 00 	mov    %rax,0x5b02b(%rip)        # ffffffff8026cd08 <RME_X64_Layout+0x8>

    /* Calculate the size of page table registration table size - we always assume 4GB range */
    Info_Cnt=(MMap_Cnt>RME_POW2(RME_PGTBL_SIZE_4G))?RME_POW2(RME_PGTBL_SIZE_4G):MMap_Cnt;
    RME_X64_Layout.Pgreg_Start=RME_X64_Layout.Kotbl_Start+RME_X64_Layout.Kotbl_Size;
ffffffff80211cdd:	48 8b 15 1c b0 05 00 	mov    0x5b01c(%rip),%rdx        # ffffffff8026cd00 <RME_X64_Layout>
ffffffff80211ce4:	48 8b 05 1d b0 05 00 	mov    0x5b01d(%rip),%rax        # ffffffff8026cd08 <RME_X64_Layout+0x8>
ffffffff80211ceb:	48 01 d0             	add    %rdx,%rax
ffffffff80211cee:	48 89 05 1b b0 05 00 	mov    %rax,0x5b01b(%rip)        # ffffffff8026cd10 <RME_X64_Layout+0x10>
    RME_X64_Layout.Pgreg_Size=((Info_Cnt>>RME_PGTBL_SIZE_4K)+1)*sizeof(struct __RME_X64_Pgreg);
ffffffff80211cf5:	48 b8 00 00 00 00 01 	movabs $0x100000000,%rax
ffffffff80211cfc:	00 00 00 
ffffffff80211cff:	48 39 c5             	cmp    %rax,%rbp
ffffffff80211d02:	48 0f 46 c5          	cmovbe %rbp,%rax
ffffffff80211d06:	48 c1 e8 0c          	shr    $0xc,%rax
ffffffff80211d0a:	48 83 c0 01          	add    $0x1,%rax
ffffffff80211d0e:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80211d12:	48 89 05 ff af 05 00 	mov    %rax,0x5afff(%rip)        # ffffffff8026cd18 <RME_X64_Layout+0x18>

    /* Calculate the per-CPU data structure size - each CPU have two 4k pages */
    RME_X64_Layout.PerCPU_Start=RME_ROUND_UP(RME_X64_Layout.Pgreg_Start+RME_X64_Layout.Pgreg_Size,RME_PGTBL_SIZE_4K);
ffffffff80211d19:	48 8b 15 f0 af 05 00 	mov    0x5aff0(%rip),%rdx        # ffffffff8026cd10 <RME_X64_Layout+0x10>
ffffffff80211d20:	48 8b 05 f1 af 05 00 	mov    0x5aff1(%rip),%rax        # ffffffff8026cd18 <RME_X64_Layout+0x18>
ffffffff80211d27:	48 8d 84 02 ff 0f 00 	lea    0xfff(%rdx,%rax,1),%rax
ffffffff80211d2e:	00 
ffffffff80211d2f:	48 25 00 f0 ff ff    	and    $0xfffffffffffff000,%rax
ffffffff80211d35:	48 89 05 e4 af 05 00 	mov    %rax,0x5afe4(%rip)        # ffffffff8026cd20 <RME_X64_Layout+0x20>
    RME_X64_Layout.PerCPU_Size=2*RME_POW2(RME_PGTBL_SIZE_4K)*RME_X64_Num_CPU;
ffffffff80211d3c:	48 8b 05 a5 af 05 00 	mov    0x5afa5(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80211d43:	48 c1 e0 0d          	shl    $0xd,%rax
ffffffff80211d47:	48 89 05 da af 05 00 	mov    %rax,0x5afda(%rip)        # ffffffff8026cd28 <RME_X64_Layout+0x28>

    /* Now decide the size of the stack */
    RME_X64_Layout.Stack_Size=RME_X64_Num_CPU<<RME_X64_KSTACK_ORDER;
ffffffff80211d4e:	48 8b 05 93 af 05 00 	mov    0x5af93(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80211d55:	48 c1 e0 14          	shl    $0x14,%rax
ffffffff80211d59:	48 89 05 10 b2 05 00 	mov    %rax,0x5b210(%rip)        # ffffffff8026cf70 <RME_X64_Layout+0x270>
    __RME_X64_Feature_Get();
    /* Extract memory specifications */
    __RME_X64_Mem_Init(RME_X64_MBInfo->mmap_addr,RME_X64_MBInfo->mmap_length);

    return 0;
}
ffffffff80211d60:	48 83 c4 38          	add    $0x38,%rsp
ffffffff80211d64:	31 c0                	xor    %eax,%eax
ffffffff80211d66:	5b                   	pop    %rbx
ffffffff80211d67:	5d                   	pop    %rbp
ffffffff80211d68:	41 5c                	pop    %r12
ffffffff80211d6a:	41 5d                	pop    %r13
ffffffff80211d6c:	41 5e                	pop    %r14
ffffffff80211d6e:	41 5f                	pop    %r15
ffffffff80211d70:	c3                   	retq   
ffffffff80211d71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            /* This is a LAPIC */
            case RME_X64_MADT_LAPIC:
            {
                LAPIC=(struct RME_X64_ACPI_MADT_LAPIC_Record*)Ptr;
                /* Is the length correct? */
                if(Length<sizeof(struct RME_X64_ACPI_MADT_LAPIC_Record))
ffffffff80211d78:	48 83 fb 07          	cmp    $0x7,%rbx
ffffffff80211d7c:	0f 86 92 fb ff ff    	jbe    ffffffff80211914 <__RME_Low_Level_Init+0x384>
                    break;
                /* Is this LAPIC enabled? */
                if((LAPIC->Flags&RME_X64_APIC_LAPIC_ENABLED)==0)
ffffffff80211d82:	f6 45 04 01          	testb  $0x1,0x4(%rbp)
ffffffff80211d86:	0f 84 88 fb ff ff    	je     ffffffff80211914 <__RME_Low_Level_Init+0x384>
                    break;

                RME_PRINTK_S("\n\rACPI: CPU ");
ffffffff80211d8c:	48 c7 c7 5e e4 21 80 	mov    $0xffffffff8021e45e,%rdi
ffffffff80211d93:	e8 78 51 00 00       	callq  ffffffff80216f10 <RME_Print_String>
                RME_Print_Int(RME_X64_Num_CPU);
ffffffff80211d98:	48 8b 3d 49 af 05 00 	mov    0x5af49(%rip),%rdi        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80211d9f:	e8 2c 4f 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
                RME_PRINTK_S(", LAPIC ID ");
ffffffff80211da4:	48 c7 c7 6b e4 21 80 	mov    $0xffffffff8021e46b,%rdi
ffffffff80211dab:	e8 60 51 00 00       	callq  ffffffff80216f10 <RME_Print_String>
                RME_Print_Int(LAPIC->APIC_ID);
ffffffff80211db0:	0f b6 7d 03          	movzbl 0x3(%rbp),%edi
ffffffff80211db4:	e8 17 4f 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>

                /* Log this CPU into our per-CPU data structure */
                RME_X64_CPU_Info[RME_X64_Num_CPU].LAPIC_ID=LAPIC->APIC_ID;
ffffffff80211db9:	48 8b 05 28 af 05 00 	mov    0x5af28(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80211dc0:	0f b6 55 03          	movzbl 0x3(%rbp),%edx
ffffffff80211dc4:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80211dc8:	48 89 90 e0 bc 26 80 	mov    %rdx,-0x7fd94320(%rax)
                RME_X64_CPU_Info[RME_X64_Num_CPU].Boot_Done=0;
ffffffff80211dcf:	48 8b 05 12 af 05 00 	mov    0x5af12(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80211dd6:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80211dda:	48 c7 80 e8 bc 26 80 	movq   $0x0,-0x7fd94318(%rax)
ffffffff80211de1:	00 00 00 00 
                RME_X64_Num_CPU++;
ffffffff80211de5:	48 8b 05 fc ae 05 00 	mov    0x5aefc(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80211dec:	48 83 c0 01          	add    $0x1,%rax
ffffffff80211df0:	48 89 05 f1 ae 05 00 	mov    %rax,0x5aef1(%rip)        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80211df7:	e9 18 fb ff ff       	jmpq   ffffffff80211914 <__RME_Low_Level_Init+0x384>
ptr_t __RME_Low_Level_Init(void)
{
    /* We are here now ! */
    __RME_X64_UART_Init();
    /* Read APIC tables and detect the configurations. Now we are not NUMA-aware */
    RME_ASSERT(__RME_X64_ACPI_Init()==0);
ffffffff80211dfc:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80211e03:	e8 08 51 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211e08:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80211e0f:	e8 fc 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211e14:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80211e1b:	e8 f0 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211e20:	bf 34 04 00 00       	mov    $0x434,%edi
ffffffff80211e25:	e8 a6 4e 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80211e2a:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80211e31:	e8 da 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211e36:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80211e3d:	e8 ce 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211e42:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80211e49:	e8 c2 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211e4e:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80211e55:	e8 b6 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211e5a:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80211e61:	e8 aa 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211e66:	eb fe                	jmp    ffffffff80211e66 <__RME_Low_Level_Init+0x8d6>
ffffffff80211e68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80211e6f:	00 
            case RME_X64_MADT_INT_SRC_OVERRIDE:
            {
                OVERRIDE=(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record*)Ptr;
                if(Length<sizeof(struct RME_X64_ACPI_MADT_SRC_OVERRIDE_Record))
                    break;
                RME_PRINTK_S("\n\rACPI: OVERRIDE Bus ");
ffffffff80211e70:	48 c7 c7 9a e4 21 80 	mov    $0xffffffff8021e49a,%rdi
ffffffff80211e77:	e8 94 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
                RME_Print_Int(OVERRIDE->Bus);
ffffffff80211e7c:	0f b6 7d 02          	movzbl 0x2(%rbp),%edi
ffffffff80211e80:	e8 4b 4e 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
                RME_PRINTK_S(", Source ");
ffffffff80211e85:	48 c7 c7 b0 e4 21 80 	mov    $0xffffffff8021e4b0,%rdi
ffffffff80211e8c:	e8 7f 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
                RME_Print_Uint(OVERRIDE->Source);
ffffffff80211e91:	0f b6 7d 03          	movzbl 0x3(%rbp),%edi
ffffffff80211e95:	e8 b6 4f 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
                RME_PRINTK_S(", GSI ");
ffffffff80211e9a:	48 c7 c7 ba e4 21 80 	mov    $0xffffffff8021e4ba,%rdi
ffffffff80211ea1:	e8 6a 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
                RME_Print_Int(OVERRIDE->GS_Interrupt);
ffffffff80211ea6:	0f b6 7d 04          	movzbl 0x4(%rbp),%edi
ffffffff80211eaa:	e8 21 4e 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
                RME_PRINTK_S(", Flags ");
ffffffff80211eaf:	48 c7 c7 c1 e4 21 80 	mov    $0xffffffff8021e4c1,%rdi
ffffffff80211eb6:	e8 55 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
                RME_Print_Int(OVERRIDE->MPS_Int_Flags);
ffffffff80211ebb:	0f b7 7d 05          	movzwl 0x5(%rbp),%edi
ffffffff80211ebf:	e8 0c 4e 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80211ec4:	e9 4b fa ff ff       	jmpq   ffffffff80211914 <__RME_Low_Level_Init+0x384>
    /* Turn off all model control, fully asynchronous */
    __RME_X64_Out(RME_X64_COM1+4, 0);

    /* If status is 0xFF, no serial port */
    if(__RME_X64_In(RME_X64_COM1+5)==0xFF)
        RME_X64_UART_Exist=0;
ffffffff80211ec9:	48 c7 05 ac b0 05 00 	movq   $0x0,0x5b0ac(%rip)        # ffffffff8026cf80 <RME_X64_UART_Exist>
ffffffff80211ed0:	00 00 00 00 
ffffffff80211ed4:	e9 46 f7 ff ff       	jmpq   ffffffff8021161f <__RME_Low_Level_Init+0x8f>
    while(Trav_Ptr!=&RME_X64_Phys_Mem)
    {
        MMap_Cnt+=((struct __RME_X64_Mem*)(Trav_Ptr))->Length;
        Trav_Ptr=Trav_Ptr->Next;
    }
    RME_PRINTK_S("\n\rTotal physical memory: 0x");
ffffffff80211ed9:	48 c7 c7 e0 e4 21 80 	mov    $0xffffffff8021e4e0,%rdi
ffffffff80211ee0:	e8 2b 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_Print_Uint(MMap_Cnt);
ffffffff80211ee5:	31 ff                	xor    %edi,%edi
ffffffff80211ee7:	e8 64 4f 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>

    /* At least 256MB memory required on x64 architecture */
    RME_ASSERT(MMap_Cnt>=RME_POW2(RME_PGTBL_SIZE_256M));
ffffffff80211eec:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80211ef3:	e8 18 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211ef8:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80211eff:	e8 0c 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211f04:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80211f0b:	e8 00 50 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211f10:	bf 21 02 00 00       	mov    $0x221,%edi
ffffffff80211f15:	e8 b6 4d 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80211f1a:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80211f21:	e8 ea 4f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211f26:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80211f2d:	e8 de 4f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211f32:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80211f39:	e8 d2 4f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211f3e:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80211f45:	e8 c6 4f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211f4a:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80211f51:	e8 ba 4f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211f56:	eb fe                	jmp    ffffffff80211f56 <__RME_Low_Level_Init+0x9c6>
                RME_Print_Int(IOAPIC->Interrupt_Base);

                /* Support multiple APICS */
                if(RME_X64_Num_IOAPIC!=0)
                {
                    RME_PRINTK_S("Warning: multiple ioapics are not supported - currently we will not initialize IOAPIC > 1\n");
ffffffff80211f58:	48 c7 c7 08 e2 21 80 	mov    $0xffffffff8021e208,%rdi
ffffffff80211f5f:	e8 ac 4f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80211f64:	e9 5a fa ff ff       	jmpq   ffffffff802119c3 <__RME_Low_Level_Init+0x433>
ffffffff80211f69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80211f70 <__RME_Pgtbl_Kmem_Init>:
Input       : None.
Output      : None.
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Kmem_Init(void)
{
ffffffff80211f70:	41 57                	push   %r15
ffffffff80211f72:	41 56                	push   %r14
ffffffff80211f74:	41 55                	push   %r13
ffffffff80211f76:	41 54                	push   %r12
ffffffff80211f78:	55                   	push   %rbp
ffffffff80211f79:	53                   	push   %rbx
ffffffff80211f7a:	48 83 ec 08          	sub    $0x8,%rsp
    cnt_t Addr_Cnt;
    struct __RME_X64_Pgreg* Pgreg;
    struct __RME_X64_Mem* Mem;

    /* Now initialize the kernel object allocation table */
    _RME_Kotbl_Init(RME_X64_Layout.Kotbl_Size/sizeof(ptr_t));
ffffffff80211f7e:	48 8b 3d 83 ad 05 00 	mov    0x5ad83(%rip),%rdi        # ffffffff8026cd08 <RME_X64_Layout+0x8>
ffffffff80211f85:	48 c1 ef 03          	shr    $0x3,%rdi
ffffffff80211f89:	e8 c2 4f 00 00       	callq  ffffffff80216f50 <_RME_Kotbl_Init>

    /* And the page table registration table as well */
    Pgreg=(struct __RME_X64_Pgreg*)RME_X64_Layout.Pgreg_Start;
ffffffff80211f8e:	48 8b 05 7b ad 05 00 	mov    0x5ad7b(%rip),%rax        # ffffffff8026cd10 <RME_X64_Layout+0x10>
    for(PML4_Cnt=0;PML4_Cnt<RME_X64_Layout.Pgreg_Size/sizeof(struct __RME_X64_Pgreg);PML4_Cnt++)
ffffffff80211f95:	48 8b 15 7c ad 05 00 	mov    0x5ad7c(%rip),%rdx        # ffffffff8026cd18 <RME_X64_Layout+0x18>
ffffffff80211f9c:	31 c9                	xor    %ecx,%ecx
ffffffff80211f9e:	48 c1 ea 04          	shr    $0x4,%rdx
ffffffff80211fa2:	48 85 d2             	test   %rdx,%rdx
ffffffff80211fa5:	74 27                	je     ffffffff80211fce <__RME_Pgtbl_Kmem_Init+0x5e>
    {
        Pgreg[PML4_Cnt].Child_Cnt=0;
ffffffff80211fa7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
        Pgreg[PML4_Cnt].Parent_Cnt=0;
ffffffff80211fae:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
ffffffff80211fb5:	00 
    /* Now initialize the kernel object allocation table */
    _RME_Kotbl_Init(RME_X64_Layout.Kotbl_Size/sizeof(ptr_t));

    /* And the page table registration table as well */
    Pgreg=(struct __RME_X64_Pgreg*)RME_X64_Layout.Pgreg_Start;
    for(PML4_Cnt=0;PML4_Cnt<RME_X64_Layout.Pgreg_Size/sizeof(struct __RME_X64_Pgreg);PML4_Cnt++)
ffffffff80211fb6:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80211fba:	48 8b 15 57 ad 05 00 	mov    0x5ad57(%rip),%rdx        # ffffffff8026cd18 <RME_X64_Layout+0x18>
ffffffff80211fc1:	48 83 c0 10          	add    $0x10,%rax
ffffffff80211fc5:	48 c1 ea 04          	shr    $0x4,%rdx
ffffffff80211fc9:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80211fcc:	77 d9                	ja     ffffffff80211fa7 <__RME_Pgtbl_Kmem_Init+0x37>
ffffffff80211fce:	48 b9 00 a0 10 00 00 	movabs $0x10a000,%rcx
ffffffff80211fd5:	00 00 00 
ffffffff80211fd8:	48 c7 c6 00 98 10 80 	mov    $0xffffffff80109800,%rsi
ffffffff80211fdf:	49 b8 00 a0 20 00 00 	movabs $0x20a000,%r8
ffffffff80211fe6:	00 00 00 
    }

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|RME_X64_MMU_KERN_PML4;
ffffffff80211fe9:	48 bf 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdi
ffffffff80211ff0:	ff 0f 00 
ffffffff80211ff3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80211ff8:	48 89 c8             	mov    %rcx,%rax
ffffffff80211ffb:	48 8d 91 00 10 00 80 	lea    -0x7ffff000(%rcx),%rdx
ffffffff80212002:	48 21 f8             	and    %rdi,%rax
ffffffff80212005:	48 0d 03 01 00 00    	or     $0x103,%rax
ffffffff8021200b:	48 89 06             	mov    %rax,(%rsi)
ffffffff8021200e:	48 8d 81 00 00 00 80 	lea    -0x80000000(%rcx),%rax
ffffffff80212015:	0f 1f 00             	nopl   (%rax)

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
            RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]=RME_X64_MMU_KERN_PDP;
ffffffff80212018:	48 c7 00 02 01 00 00 	movq   $0x102,(%rax)
ffffffff8021201f:	48 83 c0 08          	add    $0x8,%rax
    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
    {
        RME_X64_Kpgt.PML4[PML4_Cnt]=RME_X64_MMU_ADDR(RME_X64_TEXT_VA2PA(&(RME_X64_Kpgt.PDP[PML4_Cnt][0])))|RME_X64_MMU_KERN_PML4;

        for(PDP_Cnt=0;PDP_Cnt<512;PDP_Cnt++)
ffffffff80212023:	48 39 c2             	cmp    %rax,%rdx
ffffffff80212026:	75 f0                	jne    ffffffff80212018 <__RME_Pgtbl_Kmem_Init+0xa8>
ffffffff80212028:	48 81 c1 00 10 00 00 	add    $0x1000,%rcx
ffffffff8021202f:	48 83 c6 08          	add    $0x8,%rsi
        Pgreg[PML4_Cnt].Child_Cnt=0;
        Pgreg[PML4_Cnt].Parent_Cnt=0;
    }

    /* Create the frame for kernel page tables */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff80212033:	49 39 c8             	cmp    %rcx,%r8
ffffffff80212036:	75 c0                	jne    ffffffff80211ff8 <__RME_Pgtbl_Kmem_Init+0x88>
    }

    /* Map in the first 4GB as linear mappings as always, 4 super pages, including the device hole.
     * We need to detect whether the 1GB page is supported. If not, we just map the initial tables
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
ffffffff80212038:	48 8b 05 69 9a 05 00 	mov    0x59a69(%rip),%rax        # ffffffff8026baa8 <RME_X64_Feature+0x248>
ffffffff8021203f:	a9 00 00 00 04       	test   $0x4000000,%eax
ffffffff80212044:	0f 84 a6 01 00 00    	je     ffffffff802121f0 <__RME_Pgtbl_Kmem_Init+0x280>
    {
        /* Can use 1GB pages */
        RME_PRINTK_S("\n\rThis CPU have 1GB superpage support");
ffffffff8021204a:	48 c7 c7 68 e2 21 80 	mov    $0xffffffff8021e268,%rdi
ffffffff80212051:	e8 ba 4e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGTBL_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGTBL_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80212056:	b8 81 00 00 80       	mov    $0x80000081,%eax
     * in, and we know where they are hard-coded in the assembly file */
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
    {
        /* Can use 1GB pages */
        RME_PRINTK_S("\n\rThis CPU have 1GB superpage support");
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021205b:	48 81 0d 9a 7f ef ff 	orq    $0x81,-0x108066(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80212062:	81 00 00 00 
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGTBL_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGTBL_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80212066:	48 09 05 a3 7f ef ff 	or     %rax,-0x10805d(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
        /* We need to mark the device hole as unbufferable */
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGTBL_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff8021206d:	b8 99 00 00 c0       	mov    $0xc0000099,%eax
    if((RME_X64_EXT(RME_X64_CPUID_E1_INFO_FEATURE,3)&RME_X64_E1_EDX_PDPE1GB)!=0)
    {
        /* Can use 1GB pages */
        RME_PRINTK_S("\n\rThis CPU have 1GB superpage support");
        RME_X64_Kpgt.PDP[0][0]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[0][1]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGTBL_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80212072:	48 81 0d 8b 7f ef ff 	orq    $0x40000081,-0x108075(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff80212079:	81 00 00 40 
        RME_X64_Kpgt.PDP[0][2]|=RME_X64_MMU_ADDR(2*RME_POW2(RME_PGTBL_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        /* We need to mark the device hole as unbufferable */
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_ADDR(3*RME_POW2(RME_PGTBL_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[0][3]|=RME_X64_MMU_PWT|RME_X64_MMU_PCD;
ffffffff8021207d:	48 09 05 94 7f ef ff 	or     %rax,-0x10806c(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff80212084:	48 81 0d 61 7f ff ff 	orq    $0x81,-0x809f(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff8021208b:	81 00 00 00 
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGTBL_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
ffffffff8021208f:	48 81 0d 5e 7f ff ff 	orq    $0x40000081,-0x80a2(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff80212096:	81 00 00 40 
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
ffffffff8021209a:	48 8b 1d a7 97 05 00 	mov    0x597a7(%rip),%rbx        # ffffffff8026b848 <RME_X64_Phys_Mem+0x8>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802120a1:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
ffffffff802120a8:	75 17                	jne    ffffffff802120c1 <__RME_Pgtbl_Kmem_Init+0x151>
ffffffff802120aa:	e9 ef 06 00 00       	jmpq   ffffffff8021279e <__RME_Pgtbl_Kmem_Init+0x82e>
ffffffff802120af:	90                   	nop
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGTBL_SIZE_16M))
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff802120b0:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
    }

    /* Ignore all memory below 4G, but we need to get the size of such memory above 16MB */
    Mem=(struct __RME_X64_Mem*)RME_X64_Phys_Mem.Next;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802120b4:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
ffffffff802120bb:	0f 84 dd 06 00 00    	je     ffffffff8021279e <__RME_Pgtbl_Kmem_Init+0x82e>
    {
        /* See if this memory segment passes 16MB limit */
        if((Mem->Start_Addr+Mem->Length)<=RME_POW2(RME_PGTBL_SIZE_16M))
ffffffff802120c1:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff802120c5:	48 89 c2             	mov    %rax,%rdx
ffffffff802120c8:	48 03 53 18          	add    0x18(%rbx),%rdx
ffffffff802120cc:	48 81 fa 00 00 00 01 	cmp    $0x1000000,%rdx
ffffffff802120d3:	76 db                	jbe    ffffffff802120b0 <__RME_Pgtbl_Kmem_Init+0x140>
        else
        	break;
    }

    /* The first Kmem1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGTBL_SIZE_16M));
ffffffff802120d5:	48 3d 00 00 00 01    	cmp    $0x1000000,%rax
ffffffff802120db:	0f 87 51 06 00 00    	ja     ffffffff80212732 <__RME_Pgtbl_Kmem_Init+0x7c2>
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kmem1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
ffffffff802120e1:	48 8b 15 38 ac 05 00 	mov    0x5ac38(%rip),%rdx        # ffffffff8026cd20 <RME_X64_Layout+0x20>
ffffffff802120e8:	48 8b 05 39 ac 05 00 	mov    0x5ac39(%rip),%rax        # ffffffff8026cd28 <RME_X64_Layout+0x28>
ffffffff802120ef:	48 01 d0             	add    %rdx,%rax
ffffffff802120f2:	48 89 05 4f ac 05 00 	mov    %rax,0x5ac4f(%rip)        # ffffffff8026cd48 <RME_X64_Layout+0x48>
    RME_X64_Layout.Kmem1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGTBL_SIZE_16M)-RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[0]);
ffffffff802120f9:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff802120fd:	48 03 43 10          	add    0x10(%rbx),%rax
ffffffff80212101:	48 8b 0d 40 ac 05 00 	mov    0x5ac40(%rip),%rcx        # ffffffff8026cd48 <RME_X64_Layout+0x48>
ffffffff80212108:	48 89 c2             	mov    %rax,%rdx
ffffffff8021210b:	48 b8 00 00 00 ff ff 	movabs $0xffff7fffff000000,%rax
ffffffff80212112:	7f ff ff 
ffffffff80212115:	48 01 d0             	add    %rdx,%rax
ffffffff80212118:	48 29 c8             	sub    %rcx,%rax

    /* Add the rest of Kmem1 into the array */
    Addr_Cnt=1;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021211b:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx

    /* The first Kmem1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGTBL_SIZE_16M));
    /* The raw sizes of kernel memory segment 1 - per CPU area is already aligned so no need to align again */
    RME_X64_Layout.Kmem1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
    RME_X64_Layout.Kmem1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGTBL_SIZE_16M)-RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[0]);
ffffffff80212122:	48 89 05 1f ad 05 00 	mov    %rax,0x5ad1f(%rip)        # ffffffff8026ce48 <RME_X64_Layout+0x148>

    /* Add the rest of Kmem1 into the array */
    Addr_Cnt=1;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80212129:	0f 84 14 01 00 00    	je     ffffffff80212243 <__RME_Pgtbl_Kmem_Init+0x2d3>
    {
    	/* Add all segments under 4GB to Kmem1 */
    	Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff8021212f:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    	/* If detected anything above 4GB, then this is not Kmem1, exiting */
    	if(Mem->Start_Addr>=RME_POW2(RME_PGTBL_SIZE_4G))
ffffffff80212133:	41 bc ff ff ff ff    	mov    $0xffffffff,%r12d
ffffffff80212139:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8021213d:	4c 39 e0             	cmp    %r12,%rax
ffffffff80212140:	0f 87 fd 00 00 00    	ja     ffffffff80212243 <__RME_Pgtbl_Kmem_Init+0x2d3>
ffffffff80212146:	bd 01 00 00 00       	mov    $0x1,%ebp
    	if(Addr_Cnt>=RME_X64_KMEM1_MAXSEGS)
    	{
    		RME_PRINTK_S("\r\nThe memory under 4G is too fragmented. Aborting.");
            RME_ASSERT(0);
    	}
    	RME_X64_Layout.Kmem1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGTBL_SIZE_2M));
ffffffff8021214b:	49 bd 00 00 00 00 00 	movabs $0xffff800000000000,%r13
ffffffff80212152:	80 ff ff 
ffffffff80212155:	eb 55                	jmp    ffffffff802121ac <__RME_Pgtbl_Kmem_Init+0x23c>
    		RME_PRINTK_U(Mem->Start_Addr);
    		RME_PRINTK_S(", length 0x");
    		RME_PRINTK_U(Mem->Length);
    		continue;
    	}
    	if(Addr_Cnt>=RME_X64_KMEM1_MAXSEGS)
ffffffff80212157:	48 83 fd 1f          	cmp    $0x1f,%rbp
ffffffff8021215b:	0f 8f 50 06 00 00    	jg     ffffffff802127b1 <__RME_Pgtbl_Kmem_Init+0x841>
    	{
    		RME_PRINTK_S("\r\nThe memory under 4G is too fragmented. Aborting.");
            RME_ASSERT(0);
    	}
    	RME_X64_Layout.Kmem1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGTBL_SIZE_2M));
ffffffff80212161:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80212167:	48 8d 55 08          	lea    0x8(%rbp),%rdx
ffffffff8021216b:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80212171:	4c 01 e8             	add    %r13,%rax
ffffffff80212174:	48 89 04 d5 08 cd 26 	mov    %rax,-0x7fd932f8(,%rdx,8)
ffffffff8021217b:	80 
    	RME_X64_Layout.Kmem1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGTBL_SIZE_2M);
ffffffff8021217c:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff80212180:	48 8d 55 28          	lea    0x28(%rbp),%rdx
    	Addr_Cnt++;
ffffffff80212184:	48 83 c5 01          	add    $0x1,%rbp
    	{
    		RME_PRINTK_S("\r\nThe memory under 4G is too fragmented. Aborting.");
            RME_ASSERT(0);
    	}
    	RME_X64_Layout.Kmem1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGTBL_SIZE_2M));
    	RME_X64_Layout.Kmem1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGTBL_SIZE_2M);
ffffffff80212188:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
    RME_X64_Layout.Kmem1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
    RME_X64_Layout.Kmem1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGTBL_SIZE_16M)-RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[0]);

    /* Add the rest of Kmem1 into the array */
    Addr_Cnt=1;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021218e:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
    	{
    		RME_PRINTK_S("\r\nThe memory under 4G is too fragmented. Aborting.");
            RME_ASSERT(0);
    	}
    	RME_X64_Layout.Kmem1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGTBL_SIZE_2M));
    	RME_X64_Layout.Kmem1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGTBL_SIZE_2M);
ffffffff80212195:	48 89 04 d5 08 cd 26 	mov    %rax,-0x7fd932f8(,%rdx,8)
ffffffff8021219c:	80 
    RME_X64_Layout.Kmem1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
    RME_X64_Layout.Kmem1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGTBL_SIZE_16M)-RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[0]);

    /* Add the rest of Kmem1 into the array */
    Addr_Cnt=1;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff8021219d:	74 4a                	je     ffffffff802121e9 <__RME_Pgtbl_Kmem_Init+0x279>
    {
    	/* Add all segments under 4GB to Kmem1 */
    	Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff8021219f:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
    	/* If detected anything above 4GB, then this is not Kmem1, exiting */
    	if(Mem->Start_Addr>=RME_POW2(RME_PGTBL_SIZE_4G))
ffffffff802121a3:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff802121a7:	4c 39 e0             	cmp    %r12,%rax
ffffffff802121aa:	77 3d                	ja     ffffffff802121e9 <__RME_Pgtbl_Kmem_Init+0x279>
    		break;
    	/* If this memory trunk have less than 4MB, drop it */
    	if(Mem->Length<RME_POW2(RME_PGTBL_SIZE_4M))
ffffffff802121ac:	48 81 7b 18 ff ff 3f 	cmpq   $0x3fffff,0x18(%rbx)
ffffffff802121b3:	00 
ffffffff802121b4:	77 a1                	ja     ffffffff80212157 <__RME_Pgtbl_Kmem_Init+0x1e7>
    	{
    		RME_PRINTK_S("\n\rAbandoning physical memory below 4G: addr 0x");
ffffffff802121b6:	48 c7 c7 c0 e2 21 80 	mov    $0xffffffff8021e2c0,%rdi
ffffffff802121bd:	e8 4e 4d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    		RME_PRINTK_U(Mem->Start_Addr);
ffffffff802121c2:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff802121c6:	e8 85 4c 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    		RME_PRINTK_S(", length 0x");
ffffffff802121cb:	48 c7 c7 fc e4 21 80 	mov    $0xffffffff8021e4fc,%rdi
ffffffff802121d2:	e8 39 4d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    		RME_PRINTK_U(Mem->Length);
ffffffff802121d7:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff802121db:	e8 70 4c 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_X64_Layout.Kmem1_Start[0]=RME_X64_Layout.PerCPU_Start+RME_X64_Layout.PerCPU_Size;
    RME_X64_Layout.Kmem1_Size[0]=Mem->Start_Addr+Mem->Length-RME_POW2(RME_PGTBL_SIZE_16M)-RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[0]);

    /* Add the rest of Kmem1 into the array */
    Addr_Cnt=1;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802121e0:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
ffffffff802121e7:	75 b6                	jne    ffffffff8021219f <__RME_Pgtbl_Kmem_Init+0x22f>
ffffffff802121e9:	48 8d 45 ff          	lea    -0x1(%rbp),%rax
ffffffff802121ed:	eb 5b                	jmp    ffffffff8021224a <__RME_Pgtbl_Kmem_Init+0x2da>
ffffffff802121ef:	90                   	nop
        RME_X64_Kpgt.PDP[255][510]|=RME_X64_MMU_ADDR(0)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
        RME_X64_Kpgt.PDP[255][511]|=RME_X64_MMU_ADDR(RME_POW2(RME_PGTBL_SIZE_1G))|RME_X64_MMU_PDE_SUP|RME_X64_MMU_P;
    }
    else
    {
        RME_PRINTK_S("\n\rThis CPU do not have 1GB superpage support");
ffffffff802121f0:	48 c7 c7 90 e2 21 80 	mov    $0xffffffff8021e290,%rdi
ffffffff802121f7:	e8 14 4d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
        /* Cannot use 1GB pages, we revert to 2MB pages used during kernel startup */
        RME_X64_Kpgt.PDP[0][0]|=0x104000|RME_X64_MMU_P;
ffffffff802121fc:	48 81 0d f9 7d ef ff 	orq    $0x104001,-0x108207(%rip)        # ffffffff8010a000 <RME_X64_Kpgt+0x1000>
ffffffff80212203:	01 40 10 00 
        RME_X64_Kpgt.PDP[0][1]|=0x105000|RME_X64_MMU_P;
ffffffff80212207:	48 81 0d f6 7d ef ff 	orq    $0x105001,-0x10820a(%rip)        # ffffffff8010a008 <RME_X64_Kpgt+0x1008>
ffffffff8021220e:	01 50 10 00 
        RME_X64_Kpgt.PDP[0][2]|=0x106000|RME_X64_MMU_P;
ffffffff80212212:	48 81 0d f3 7d ef ff 	orq    $0x106001,-0x10820d(%rip)        # ffffffff8010a010 <RME_X64_Kpgt+0x1010>
ffffffff80212219:	01 60 10 00 
        RME_X64_Kpgt.PDP[0][3]|=0x107000|RME_X64_MMU_PCD|RME_X64_MMU_PWT|RME_X64_MMU_P;
ffffffff8021221d:	48 81 0d f0 7d ef ff 	orq    $0x107019,-0x108210(%rip)        # ffffffff8010a018 <RME_X64_Kpgt+0x1018>
ffffffff80212224:	19 70 10 00 

        /* Map the first 2GB to the last position too, where the kernel text segment is at */
        RME_X64_Kpgt.PDP[255][510]|=0x104000|RME_X64_MMU_P;
ffffffff80212228:	48 81 0d bd 7d ff ff 	orq    $0x104001,-0x8243(%rip)        # ffffffff80209ff0 <RME_X64_Kpgt+0x100ff0>
ffffffff8021222f:	01 40 10 00 
        RME_X64_Kpgt.PDP[255][511]|=0x105000|RME_X64_MMU_P;
ffffffff80212233:	48 81 0d ba 7d ff ff 	orq    $0x105001,-0x8246(%rip)        # ffffffff80209ff8 <RME_X64_Kpgt+0x100ff8>
ffffffff8021223a:	01 50 10 00 
ffffffff8021223e:	e9 57 fe ff ff       	jmpq   ffffffff8021209a <__RME_Pgtbl_Kmem_Init+0x12a>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
    {
    	/* Add all segments under 4GB to Kmem1 */
    	Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
    	/* If detected anything above 4GB, then this is not Kmem1, exiting */
    	if(Mem->Start_Addr>=RME_POW2(RME_PGTBL_SIZE_4G))
ffffffff80212243:	31 c0                	xor    %eax,%eax
ffffffff80212245:	bd 01 00 00 00       	mov    $0x1,%ebp
    	Addr_Cnt++;
    }
    RME_X64_Layout.Kmem1_Trunks=Addr_Cnt;

	/* This is the hole */
	RME_X64_Layout.Hole_Start=RME_X64_Layout.Kmem1_Start[Addr_Cnt-1]+RME_X64_Layout.Kmem1_Size[Addr_Cnt-1];
ffffffff8021224a:	48 8d 50 08          	lea    0x8(%rax),%rdx
ffffffff8021224e:	48 83 c0 28          	add    $0x28,%rax
    	}
    	RME_X64_Layout.Kmem1_Start[Addr_Cnt]=RME_X64_PA2VA(RME_ROUND_UP(Mem->Start_Addr,RME_PGTBL_SIZE_2M));
    	RME_X64_Layout.Kmem1_Size[Addr_Cnt]=RME_ROUND_DOWN(Mem->Length,RME_PGTBL_SIZE_2M);
    	Addr_Cnt++;
    }
    RME_X64_Layout.Kmem1_Trunks=Addr_Cnt;
ffffffff80212252:	48 89 2d e7 aa 05 00 	mov    %rbp,0x5aae7(%rip)        # ffffffff8026cd40 <RME_X64_Layout+0x40>

    /* We have filled the first 4 1GB superpages */
    PML4_Cnt=0;
    PDP_Cnt=3;
    PDE_Cnt=511;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff80212259:	41 bc ff 01 00 00    	mov    $0x1ff,%r12d
ffffffff8021225f:	41 bd 03 00 00 00    	mov    $0x3,%r13d
ffffffff80212265:	45 31 ff             	xor    %r15d,%r15d
    	Addr_Cnt++;
    }
    RME_X64_Layout.Kmem1_Trunks=Addr_Cnt;

	/* This is the hole */
	RME_X64_Layout.Hole_Start=RME_X64_Layout.Kmem1_Start[Addr_Cnt-1]+RME_X64_Layout.Kmem1_Size[Addr_Cnt-1];
ffffffff80212268:	48 8b 14 d5 08 cd 26 	mov    -0x7fd932f8(,%rdx,8),%rdx
ffffffff8021226f:	80 
ffffffff80212270:	48 8b 04 c5 08 cd 26 	mov    -0x7fd932f8(,%rax,8),%rax
ffffffff80212277:	80 
                {
                    PDP_Cnt=0;
                    PML4_Cnt++;
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[0]))|RME_X64_MMU_P;
ffffffff80212278:	48 bd 00 00 00 00 00 	movabs $0x800000000000,%rbp
ffffffff8021227f:	80 00 00 
ffffffff80212282:	49 be 00 f0 ff ff ff 	movabs $0xffffffffff000,%r14
ffffffff80212289:	ff 0f 00 
    	Addr_Cnt++;
    }
    RME_X64_Layout.Kmem1_Trunks=Addr_Cnt;

	/* This is the hole */
	RME_X64_Layout.Hole_Start=RME_X64_Layout.Kmem1_Start[Addr_Cnt-1]+RME_X64_Layout.Kmem1_Size[Addr_Cnt-1];
ffffffff8021228c:	48 01 d0             	add    %rdx,%rax
ffffffff8021228f:	48 89 05 b2 ac 05 00 	mov    %rax,0x5acb2(%rip)        # ffffffff8026cf48 <RME_X64_Layout+0x248>
	RME_X64_Layout.Hole_Size=RME_POW2(RME_PGTBL_SIZE_4G)-RME_X64_VA2PA(RME_X64_Layout.Hole_Start);
ffffffff80212296:	48 8b 15 ab ac 05 00 	mov    0x5acab(%rip),%rdx        # ffffffff8026cf48 <RME_X64_Layout+0x248>
ffffffff8021229d:	48 b8 00 00 00 00 01 	movabs $0xffff800100000000,%rax
ffffffff802122a4:	80 ff ff 
ffffffff802122a7:	48 89 c6             	mov    %rax,%rsi
ffffffff802122aa:	48 29 d6             	sub    %rdx,%rsi
ffffffff802122ad:	48 89 35 9c ac 05 00 	mov    %rsi,0x5ac9c(%rip)        # ffffffff8026cf50 <RME_X64_Layout+0x250>

    /* Create kernel page mappings for memory above 4GB - we assume only one segment below 4GB */
    RME_X64_Layout.Kpgtbl_Start=RME_X64_Layout.Kmem1_Start[0];
ffffffff802122b4:	48 8b 15 8d aa 05 00 	mov    0x5aa8d(%rip),%rdx        # ffffffff8026cd48 <RME_X64_Layout+0x48>
ffffffff802122bb:	48 89 15 6e aa 05 00 	mov    %rdx,0x5aa6e(%rip)        # ffffffff8026cd30 <RME_X64_Layout+0x30>
    RME_X64_Layout.Kmem2_Start=RME_X64_PA2VA(RME_POW2(RME_PGTBL_SIZE_4G));
ffffffff802122c2:	48 89 05 8f ac 05 00 	mov    %rax,0x5ac8f(%rip)        # ffffffff8026cf58 <RME_X64_Layout+0x258>
    RME_X64_Layout.Kmem2_Size=0;
ffffffff802122c9:	48 c7 05 8c ac 05 00 	movq   $0x0,0x5ac8c(%rip)        # ffffffff8026cf60 <RME_X64_Layout+0x260>
ffffffff802122d0:	00 00 00 00 

    /* We have filled the first 4 1GB superpages */
    PML4_Cnt=0;
    PDP_Cnt=3;
    PDE_Cnt=511;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802122d4:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
ffffffff802122db:	0f 84 ff 00 00 00    	je     ffffffff802123e0 <__RME_Pgtbl_Kmem_Init+0x470>
    {
    	/* Throw away small segments */
    	if(Mem->Length<2*RME_POW2(RME_PGTBL_SIZE_2M))
ffffffff802122e1:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff802122e5:	48 3d ff ff 3f 00    	cmp    $0x3fffff,%rax
ffffffff802122eb:	0f 86 b9 03 00 00    	jbe    ffffffff802126aa <__RME_Pgtbl_Kmem_Init+0x73a>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
            continue;
    	}

        /* Align the memory segment to 2MB */
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGTBL_SIZE_2M);
ffffffff802122f1:	48 8b 73 10          	mov    0x10(%rbx),%rsi
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGTBL_SIZE_2M);
ffffffff802122f5:	48 83 e8 01          	sub    $0x1,%rax
ffffffff802122f9:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff802122ff:	48 89 43 18          	mov    %rax,0x18(%rbx)
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
            continue;
    	}

        /* Align the memory segment to 2MB */
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGTBL_SIZE_2M);
ffffffff80212303:	48 8d 96 ff ff 1f 00 	lea    0x1fffff(%rsi),%rdx
ffffffff8021230a:	48 81 e2 00 00 e0 ff 	and    $0xffffffffffe00000,%rdx
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGTBL_SIZE_2M);

        /* Add these pages into the kernel at addresses above 4GB offset as 2MB pages */
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGTBL_SIZE_2M))
ffffffff80212311:	48 85 c0             	test   %rax,%rax
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
            continue;
    	}

        /* Align the memory segment to 2MB */
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGTBL_SIZE_2M);
ffffffff80212314:	48 89 53 10          	mov    %rdx,0x10(%rbx)
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGTBL_SIZE_2M);

        /* Add these pages into the kernel at addresses above 4GB offset as 2MB pages */
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGTBL_SIZE_2M))
ffffffff80212318:	0f 84 b1 00 00 00    	je     ffffffff802123cf <__RME_Pgtbl_Kmem_Init+0x45f>
ffffffff8021231e:	31 d2                	xor    %edx,%edx
ffffffff80212320:	eb 5f                	jmp    ffffffff80212381 <__RME_Pgtbl_Kmem_Init+0x411>
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[0]))|RME_X64_MMU_P;
            }

            ((ptr_t*)(RME_X64_Layout.Kmem1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80212322:	48 89 d0             	mov    %rdx,%rax
ffffffff80212325:	48 03 43 10          	add    0x10(%rbx),%rax
ffffffff80212329:	48 8b 0d 18 aa 05 00 	mov    0x5aa18(%rip),%rcx        # ffffffff8026cd48 <RME_X64_Layout+0x48>
        /* Align the memory segment to 2MB */
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGTBL_SIZE_2M);
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGTBL_SIZE_2M);

        /* Add these pages into the kernel at addresses above 4GB offset as 2MB pages */
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGTBL_SIZE_2M))
ffffffff80212330:	48 81 c2 00 00 20 00 	add    $0x200000,%rdx
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[0]))|RME_X64_MMU_P;
            }

            ((ptr_t*)(RME_X64_Layout.Kmem1_Start[0]))[0]=RME_X64_MMU_ADDR(Mem->Start_Addr+Addr_Cnt)|RME_X64_MMU_KERN_PDE;
ffffffff80212337:	4c 21 f0             	and    %r14,%rax
ffffffff8021233a:	48 0d 83 01 00 00    	or     $0x183,%rax
ffffffff80212340:	48 89 01             	mov    %rax,(%rcx)
            RME_X64_Layout.Kmem1_Start[0]+=sizeof(ptr_t);
ffffffff80212343:	48 8b 05 fe a9 05 00 	mov    0x5a9fe(%rip),%rax        # ffffffff8026cd48 <RME_X64_Layout+0x48>
ffffffff8021234a:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021234e:	48 89 05 f3 a9 05 00 	mov    %rax,0x5a9f3(%rip)        # ffffffff8026cd48 <RME_X64_Layout+0x48>
            RME_X64_Layout.Kmem1_Size[0]-=sizeof(ptr_t);
ffffffff80212355:	48 8b 05 ec aa 05 00 	mov    0x5aaec(%rip),%rax        # ffffffff8026ce48 <RME_X64_Layout+0x148>
ffffffff8021235c:	48 83 e8 08          	sub    $0x8,%rax
ffffffff80212360:	48 89 05 e1 aa 05 00 	mov    %rax,0x5aae1(%rip)        # ffffffff8026ce48 <RME_X64_Layout+0x148>
            RME_X64_Layout.Kmem2_Size+=RME_POW2(RME_PGTBL_SIZE_2M);
ffffffff80212367:	48 8b 05 f2 ab 05 00 	mov    0x5abf2(%rip),%rax        # ffffffff8026cf60 <RME_X64_Layout+0x260>
ffffffff8021236e:	48 05 00 00 20 00    	add    $0x200000,%rax
ffffffff80212374:	48 89 05 e5 ab 05 00 	mov    %rax,0x5abe5(%rip)        # ffffffff8026cf60 <RME_X64_Layout+0x260>
        /* Align the memory segment to 2MB */
        Mem->Start_Addr=RME_ROUND_UP(Mem->Start_Addr,RME_PGTBL_SIZE_2M);
        Mem->Length=RME_ROUND_DOWN(Mem->Length-1,RME_PGTBL_SIZE_2M);

        /* Add these pages into the kernel at addresses above 4GB offset as 2MB pages */
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGTBL_SIZE_2M))
ffffffff8021237b:	48 39 53 18          	cmp    %rdx,0x18(%rbx)
ffffffff8021237f:	76 4e                	jbe    ffffffff802123cf <__RME_Pgtbl_Kmem_Init+0x45f>
        {
            PDE_Cnt++;
ffffffff80212381:	49 83 c4 01          	add    $0x1,%r12
            if(PDE_Cnt==512)
ffffffff80212385:	49 81 fc 00 02 00 00 	cmp    $0x200,%r12
ffffffff8021238c:	75 94                	jne    ffffffff80212322 <__RME_Pgtbl_Kmem_Init+0x3b2>
            {
                PDE_Cnt=0;
                PDP_Cnt++;
ffffffff8021238e:	49 83 c5 01          	add    $0x1,%r13
                if(PDP_Cnt==512)
ffffffff80212392:	49 81 fd 00 02 00 00 	cmp    $0x200,%r13
ffffffff80212399:	0f 84 ff 02 00 00    	je     ffffffff8021269e <__RME_Pgtbl_Kmem_Init+0x72e>
                {
                    PDP_Cnt=0;
                    PML4_Cnt++;
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[0]))|RME_X64_MMU_P;
ffffffff8021239f:	48 8b 05 a2 a9 05 00 	mov    0x5a9a2(%rip),%rax        # ffffffff8026cd48 <RME_X64_Layout+0x48>
ffffffff802123a6:	4c 89 f9             	mov    %r15,%rcx
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGTBL_SIZE_2M))
        {
            PDE_Cnt++;
            if(PDE_Cnt==512)
            {
                PDE_Cnt=0;
ffffffff802123a9:	45 31 e4             	xor    %r12d,%r12d
                {
                    PDP_Cnt=0;
                    PML4_Cnt++;
                }
                /* Map this PDE into the PDP */
                RME_X64_Kpgt.PDP[PML4_Cnt][PDP_Cnt]|=RME_X64_MMU_ADDR(RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[0]))|RME_X64_MMU_P;
ffffffff802123ac:	48 c1 e1 09          	shl    $0x9,%rcx
ffffffff802123b0:	49 8d 8c 0d 00 02 00 	lea    0x200(%r13,%rcx,1),%rcx
ffffffff802123b7:	00 
ffffffff802123b8:	48 01 e8             	add    %rbp,%rax
ffffffff802123bb:	4c 21 f0             	and    %r14,%rax
ffffffff802123be:	48 83 c8 01          	or     $0x1,%rax
ffffffff802123c2:	48 09 04 cd 00 90 10 	or     %rax,-0x7fef7000(,%rcx,8)
ffffffff802123c9:	80 
ffffffff802123ca:	e9 53 ff ff ff       	jmpq   ffffffff80212322 <__RME_Pgtbl_Kmem_Init+0x3b2>
            RME_X64_Layout.Kmem1_Start[0]+=sizeof(ptr_t);
            RME_X64_Layout.Kmem1_Size[0]-=sizeof(ptr_t);
            RME_X64_Layout.Kmem2_Size+=RME_POW2(RME_PGTBL_SIZE_2M);
        }

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff802123cf:	48 8b 5b 08          	mov    0x8(%rbx),%rbx

    /* We have filled the first 4 1GB superpages */
    PML4_Cnt=0;
    PDP_Cnt=3;
    PDE_Cnt=511;
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
ffffffff802123d3:	48 81 fb 40 b8 26 80 	cmp    $0xffffffff8026b840,%rbx
ffffffff802123da:	0f 85 01 ff ff ff    	jne    ffffffff802122e1 <__RME_Pgtbl_Kmem_Init+0x371>
        for(Addr_Cnt=0;Addr_Cnt<Mem->Length;Addr_Cnt+=RME_POW2(RME_PGTBL_SIZE_2M))
        {
            PDE_Cnt++;
            if(PDE_Cnt==512)
            {
                PDE_Cnt=0;
ffffffff802123e0:	48 b8 00 18 10 00 00 	movabs $0xffff800000101800,%rax
ffffffff802123e7:	80 ff ff 
        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
        ((ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff802123ea:	48 be 00 f0 ef ff ff 	movabs $0x7fffffeff000,%rsi
ffffffff802123f1:	7f 00 00 

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff802123f4:	48 b9 00 20 10 00 00 	movabs $0xffff800000102000,%rcx
ffffffff802123fb:	80 ff ff 
        ((ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];
ffffffff802123fe:	48 8b 94 30 00 90 10 	mov    -0x7fef7000(%rax,%rsi,1),%rdx
ffffffff80212405:	80 
ffffffff80212406:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021240a:	48 89 50 f8          	mov    %rdx,-0x8(%rax)

        Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
    }

    /* Copy the new page tables to the temporary entries, so that we can boot SMP */
    for(PML4_Cnt=0;PML4_Cnt<256;PML4_Cnt++)
ffffffff8021240e:	48 39 c8             	cmp    %rcx,%rax
ffffffff80212411:	75 eb                	jne    ffffffff802123fe <__RME_Pgtbl_Kmem_Init+0x48e>
        ((ptr_t*)RME_X64_PA2VA(0x101000))[PML4_Cnt+256]=RME_X64_Kpgt.PML4[PML4_Cnt];

    /* Page table allocation finished. Now need to align Kmem1 to 2MB page boundary */
    RME_X64_Layout.Kmem1_Start[0]=RME_ROUND_UP(RME_X64_Layout.Kmem1_Start[0],RME_PGTBL_SIZE_2M);
ffffffff80212413:	48 8b 05 2e a9 05 00 	mov    0x5a92e(%rip),%rax        # ffffffff8026cd48 <RME_X64_Layout+0x48>
ffffffff8021241a:	48 05 ff ff 1f 00    	add    $0x1fffff,%rax
ffffffff80212420:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff80212426:	48 89 05 1b a9 05 00 	mov    %rax,0x5a91b(%rip)        # ffffffff8026cd48 <RME_X64_Layout+0x48>
    RME_X64_Layout.Kmem1_Size[0]=RME_ROUND_DOWN(RME_X64_Layout.Kmem1_Size[0]-1,RME_PGTBL_SIZE_2M);
ffffffff8021242d:	48 8b 05 14 aa 05 00 	mov    0x5aa14(%rip),%rax        # ffffffff8026ce48 <RME_X64_Layout+0x148>
ffffffff80212434:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80212438:	48 25 00 00 e0 ff    	and    $0xffffffffffe00000,%rax
ffffffff8021243e:	48 89 05 03 aa 05 00 	mov    %rax,0x5aa03(%rip)        # ffffffff8026ce48 <RME_X64_Layout+0x148>

    /* All memory is mapped. Now figure out the size of kernel stacks */
    RME_X64_Layout.Kpgtbl_Size=RME_X64_Layout.Kmem1_Start[0]-RME_X64_Layout.Kpgtbl_Start;
ffffffff80212445:	48 8b 05 fc a8 05 00 	mov    0x5a8fc(%rip),%rax        # ffffffff8026cd48 <RME_X64_Layout+0x48>
ffffffff8021244c:	48 8b 15 dd a8 05 00 	mov    0x5a8dd(%rip),%rdx        # ffffffff8026cd30 <RME_X64_Layout+0x30>
ffffffff80212453:	48 29 d0             	sub    %rdx,%rax
ffffffff80212456:	48 89 05 db a8 05 00 	mov    %rax,0x5a8db(%rip)        # ffffffff8026cd38 <RME_X64_Layout+0x38>

    /* See if we are allocating the stack from Kmem2 or Kmem1 */
    if(RME_X64_Layout.Kmem2_Size==0)
ffffffff8021245d:	48 8b 05 fc aa 05 00 	mov    0x5aafc(%rip),%rax        # ffffffff8026cf60 <RME_X64_Layout+0x260>
ffffffff80212464:	48 85 c0             	test   %rax,%rax
ffffffff80212467:	0f 85 70 02 00 00    	jne    ffffffff802126dd <__RME_Pgtbl_Kmem_Init+0x76d>
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kmem1_Start[0]+RME_X64_Layout.Kmem1_Size[0]-1,RME_X64_KSTACK_ORDER);
ffffffff8021246d:	48 8b 15 d4 a8 05 00 	mov    0x5a8d4(%rip),%rdx        # ffffffff8026cd48 <RME_X64_Layout+0x48>
ffffffff80212474:	48 8b 05 cd a9 05 00 	mov    0x5a9cd(%rip),%rax        # ffffffff8026ce48 <RME_X64_Layout+0x148>
ffffffff8021247b:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff80212480:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff80212486:	48 89 05 db aa 05 00 	mov    %rax,0x5aadb(%rip)        # ffffffff8026cf68 <RME_X64_Layout+0x268>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff8021248d:	48 8b 15 dc aa 05 00 	mov    0x5aadc(%rip),%rdx        # ffffffff8026cf70 <RME_X64_Layout+0x270>
ffffffff80212494:	48 8b 05 cd aa 05 00 	mov    0x5aacd(%rip),%rax        # ffffffff8026cf68 <RME_X64_Layout+0x268>
ffffffff8021249b:	48 29 d0             	sub    %rdx,%rax
ffffffff8021249e:	48 89 05 c3 aa 05 00 	mov    %rax,0x5aac3(%rip)        # ffffffff8026cf68 <RME_X64_Layout+0x268>
        RME_X64_Layout.Kmem1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kmem1_Start[0];
ffffffff802124a5:	48 8b 05 bc aa 05 00 	mov    0x5aabc(%rip),%rax        # ffffffff8026cf68 <RME_X64_Layout+0x268>
ffffffff802124ac:	48 8b 15 95 a8 05 00 	mov    0x5a895(%rip),%rdx        # ffffffff8026cd48 <RME_X64_Layout+0x48>
ffffffff802124b3:	48 29 d0             	sub    %rdx,%rax
ffffffff802124b6:	48 89 05 8b a9 05 00 	mov    %rax,0x5a98b(%rip)        # ffffffff8026ce48 <RME_X64_Layout+0x148>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
        RME_X64_Layout.Kmem2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kmem2_Start;
    }

    /* Now report all mapping info */
    RME_PRINTK_S("\n\r\n\rKotbl_Start:     0x");
ffffffff802124bd:	48 c7 c7 08 e5 21 80 	mov    $0xffffffff8021e508,%rdi
    RME_PRINTK_U(RME_X64_Layout.PerCPU_Size);
    RME_PRINTK_S("\n\rKpgtbl_Start:    0x");
    RME_PRINTK_U(RME_X64_Layout.Kpgtbl_Start);
    RME_PRINTK_S("\n\rKpgtbl_Size:     0x");
    RME_PRINTK_U(RME_X64_Layout.Kpgtbl_Size);
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kmem1_Trunks;Addr_Cnt++)
ffffffff802124c4:	31 db                	xor    %ebx,%ebx
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
        RME_X64_Layout.Kmem2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kmem2_Start;
    }

    /* Now report all mapping info */
    RME_PRINTK_S("\n\r\n\rKotbl_Start:     0x");
ffffffff802124c6:	e8 45 4a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Kotbl_Start);
ffffffff802124cb:	48 8b 3d 2e a8 05 00 	mov    0x5a82e(%rip),%rdi        # ffffffff8026cd00 <RME_X64_Layout>
ffffffff802124d2:	e8 79 49 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rKotbl_Size:      0x");
ffffffff802124d7:	48 c7 c7 20 e5 21 80 	mov    $0xffffffff8021e520,%rdi
ffffffff802124de:	e8 2d 4a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Kotbl_Size);
ffffffff802124e3:	48 8b 3d 1e a8 05 00 	mov    0x5a81e(%rip),%rdi        # ffffffff8026cd08 <RME_X64_Layout+0x8>
ffffffff802124ea:	e8 61 49 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rPgreg_Start:     0x");
ffffffff802124ef:	48 c7 c7 36 e5 21 80 	mov    $0xffffffff8021e536,%rdi
ffffffff802124f6:	e8 15 4a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Pgreg_Start);
ffffffff802124fb:	48 8b 3d 0e a8 05 00 	mov    0x5a80e(%rip),%rdi        # ffffffff8026cd10 <RME_X64_Layout+0x10>
ffffffff80212502:	e8 49 49 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rPgreg_Size:      0x");
ffffffff80212507:	48 c7 c7 4c e5 21 80 	mov    $0xffffffff8021e54c,%rdi
ffffffff8021250e:	e8 fd 49 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Pgreg_Size);
ffffffff80212513:	48 8b 3d fe a7 05 00 	mov    0x5a7fe(%rip),%rdi        # ffffffff8026cd18 <RME_X64_Layout+0x18>
ffffffff8021251a:	e8 31 49 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rPerCPU_Start:    0x");
ffffffff8021251f:	48 c7 c7 62 e5 21 80 	mov    $0xffffffff8021e562,%rdi
ffffffff80212526:	e8 e5 49 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.PerCPU_Start);
ffffffff8021252b:	48 8b 3d ee a7 05 00 	mov    0x5a7ee(%rip),%rdi        # ffffffff8026cd20 <RME_X64_Layout+0x20>
ffffffff80212532:	e8 19 49 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rPerCPU_Size:     0x");
ffffffff80212537:	48 c7 c7 78 e5 21 80 	mov    $0xffffffff8021e578,%rdi
ffffffff8021253e:	e8 cd 49 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.PerCPU_Size);
ffffffff80212543:	48 8b 3d de a7 05 00 	mov    0x5a7de(%rip),%rdi        # ffffffff8026cd28 <RME_X64_Layout+0x28>
ffffffff8021254a:	e8 01 49 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rKpgtbl_Start:    0x");
ffffffff8021254f:	48 c7 c7 8e e5 21 80 	mov    $0xffffffff8021e58e,%rdi
ffffffff80212556:	e8 b5 49 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Kpgtbl_Start);
ffffffff8021255b:	48 8b 3d ce a7 05 00 	mov    0x5a7ce(%rip),%rdi        # ffffffff8026cd30 <RME_X64_Layout+0x30>
ffffffff80212562:	e8 e9 48 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rKpgtbl_Size:     0x");
ffffffff80212567:	48 c7 c7 a4 e5 21 80 	mov    $0xffffffff8021e5a4,%rdi
ffffffff8021256e:	e8 9d 49 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Kpgtbl_Size);
ffffffff80212573:	48 8b 3d be a7 05 00 	mov    0x5a7be(%rip),%rdi        # ffffffff8026cd38 <RME_X64_Layout+0x38>
ffffffff8021257a:	e8 d1 48 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kmem1_Trunks;Addr_Cnt++)
ffffffff8021257f:	48 8b 05 ba a7 05 00 	mov    0x5a7ba(%rip),%rax        # ffffffff8026cd40 <RME_X64_Layout+0x40>
ffffffff80212586:	48 85 c0             	test   %rax,%rax
ffffffff80212589:	74 72                	je     ffffffff802125fd <__RME_Pgtbl_Kmem_Init+0x68d>
    {
		RME_PRINTK_S("\n\rKmem1_Start[");
ffffffff8021258b:	48 c7 c7 3e e6 21 80 	mov    $0xffffffff8021e63e,%rdi
ffffffff80212592:	e8 79 49 00 00       	callq  ffffffff80216f10 <RME_Print_String>
		RME_PRINTK_I(Addr_Cnt);
ffffffff80212597:	48 89 df             	mov    %rbx,%rdi
ffffffff8021259a:	e8 31 47 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
		RME_PRINTK_S("]:  0x");
ffffffff8021259f:	48 c7 c7 4d e6 21 80 	mov    $0xffffffff8021e64d,%rdi
ffffffff802125a6:	e8 65 49 00 00       	callq  ffffffff80216f10 <RME_Print_String>
		RME_PRINTK_U(RME_X64_Layout.Kmem1_Start[Addr_Cnt]);
ffffffff802125ab:	48 8d 43 08          	lea    0x8(%rbx),%rax
ffffffff802125af:	48 8b 3c c5 08 cd 26 	mov    -0x7fd932f8(,%rax,8),%rdi
ffffffff802125b6:	80 
ffffffff802125b7:	e8 94 48 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
		RME_PRINTK_S("\n\rKmem1_Size[");
ffffffff802125bc:	48 c7 c7 54 e6 21 80 	mov    $0xffffffff8021e654,%rdi
ffffffff802125c3:	e8 48 49 00 00       	callq  ffffffff80216f10 <RME_Print_String>
		RME_PRINTK_I(Addr_Cnt);
ffffffff802125c8:	48 89 df             	mov    %rbx,%rdi
ffffffff802125cb:	e8 00 47 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
		RME_PRINTK_S("]:   0x");
ffffffff802125d0:	48 c7 c7 62 e6 21 80 	mov    $0xffffffff8021e662,%rdi
ffffffff802125d7:	e8 34 49 00 00       	callq  ffffffff80216f10 <RME_Print_String>
		RME_PRINTK_U(RME_X64_Layout.Kmem1_Size[Addr_Cnt]);
ffffffff802125dc:	48 8d 43 28          	lea    0x28(%rbx),%rax
    RME_PRINTK_U(RME_X64_Layout.PerCPU_Size);
    RME_PRINTK_S("\n\rKpgtbl_Start:    0x");
    RME_PRINTK_U(RME_X64_Layout.Kpgtbl_Start);
    RME_PRINTK_S("\n\rKpgtbl_Size:     0x");
    RME_PRINTK_U(RME_X64_Layout.Kpgtbl_Size);
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kmem1_Trunks;Addr_Cnt++)
ffffffff802125e0:	48 83 c3 01          	add    $0x1,%rbx
		RME_PRINTK_S("]:  0x");
		RME_PRINTK_U(RME_X64_Layout.Kmem1_Start[Addr_Cnt]);
		RME_PRINTK_S("\n\rKmem1_Size[");
		RME_PRINTK_I(Addr_Cnt);
		RME_PRINTK_S("]:   0x");
		RME_PRINTK_U(RME_X64_Layout.Kmem1_Size[Addr_Cnt]);
ffffffff802125e4:	48 8b 3c c5 08 cd 26 	mov    -0x7fd932f8(,%rax,8),%rdi
ffffffff802125eb:	80 
ffffffff802125ec:	e8 5f 48 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_U(RME_X64_Layout.PerCPU_Size);
    RME_PRINTK_S("\n\rKpgtbl_Start:    0x");
    RME_PRINTK_U(RME_X64_Layout.Kpgtbl_Start);
    RME_PRINTK_S("\n\rKpgtbl_Size:     0x");
    RME_PRINTK_U(RME_X64_Layout.Kpgtbl_Size);
    for(Addr_Cnt=0;Addr_Cnt<RME_X64_Layout.Kmem1_Trunks;Addr_Cnt++)
ffffffff802125f1:	48 8b 05 48 a7 05 00 	mov    0x5a748(%rip),%rax        # ffffffff8026cd40 <RME_X64_Layout+0x40>
ffffffff802125f8:	48 39 d8             	cmp    %rbx,%rax
ffffffff802125fb:	77 8e                	ja     ffffffff8021258b <__RME_Pgtbl_Kmem_Init+0x61b>
		RME_PRINTK_S("\n\rKmem1_Size[");
		RME_PRINTK_I(Addr_Cnt);
		RME_PRINTK_S("]:   0x");
		RME_PRINTK_U(RME_X64_Layout.Kmem1_Size[Addr_Cnt]);
    }
    RME_PRINTK_S("\n\rHole_Start:      0x");
ffffffff802125fd:	48 c7 c7 ba e5 21 80 	mov    $0xffffffff8021e5ba,%rdi
ffffffff80212604:	e8 07 49 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Hole_Start);
ffffffff80212609:	48 8b 3d 38 a9 05 00 	mov    0x5a938(%rip),%rdi        # ffffffff8026cf48 <RME_X64_Layout+0x248>
ffffffff80212610:	e8 3b 48 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rHole_Size:       0x");
ffffffff80212615:	48 c7 c7 d0 e5 21 80 	mov    $0xffffffff8021e5d0,%rdi
ffffffff8021261c:	e8 ef 48 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Hole_Size);
ffffffff80212621:	48 8b 3d 28 a9 05 00 	mov    0x5a928(%rip),%rdi        # ffffffff8026cf50 <RME_X64_Layout+0x250>
ffffffff80212628:	e8 23 48 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rKmem2_Start:     0x");
ffffffff8021262d:	48 c7 c7 e6 e5 21 80 	mov    $0xffffffff8021e5e6,%rdi
ffffffff80212634:	e8 d7 48 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Kmem2_Start);
ffffffff80212639:	48 8b 3d 18 a9 05 00 	mov    0x5a918(%rip),%rdi        # ffffffff8026cf58 <RME_X64_Layout+0x258>
ffffffff80212640:	e8 0b 48 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rKmem2_Size:      0x");
ffffffff80212645:	48 c7 c7 fc e5 21 80 	mov    $0xffffffff8021e5fc,%rdi
ffffffff8021264c:	e8 bf 48 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Kmem2_Size);
ffffffff80212651:	48 8b 3d 08 a9 05 00 	mov    0x5a908(%rip),%rdi        # ffffffff8026cf60 <RME_X64_Layout+0x260>
ffffffff80212658:	e8 f3 47 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rStack_Start:     0x");
ffffffff8021265d:	48 c7 c7 12 e6 21 80 	mov    $0xffffffff8021e612,%rdi
ffffffff80212664:	e8 a7 48 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Stack_Start);
ffffffff80212669:	48 8b 3d f8 a8 05 00 	mov    0x5a8f8(%rip),%rdi        # ffffffff8026cf68 <RME_X64_Layout+0x268>
ffffffff80212670:	e8 db 47 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\n\rStack_Size:      0x");
ffffffff80212675:	48 c7 c7 28 e6 21 80 	mov    $0xffffffff8021e628,%rdi
ffffffff8021267c:	e8 8f 48 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Stack_Size);
ffffffff80212681:	48 8b 3d e8 a8 05 00 	mov    0x5a8e8(%rip),%rdi        # ffffffff8026cf70 <RME_X64_Layout+0x270>
ffffffff80212688:	e8 c3 47 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>

    return 0;
}
ffffffff8021268d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80212691:	31 c0                	xor    %eax,%eax
ffffffff80212693:	5b                   	pop    %rbx
ffffffff80212694:	5d                   	pop    %rbp
ffffffff80212695:	41 5c                	pop    %r12
ffffffff80212697:	41 5d                	pop    %r13
ffffffff80212699:	41 5e                	pop    %r14
ffffffff8021269b:	41 5f                	pop    %r15
ffffffff8021269d:	c3                   	retq   
                PDE_Cnt=0;
                PDP_Cnt++;
                if(PDP_Cnt==512)
                {
                    PDP_Cnt=0;
                    PML4_Cnt++;
ffffffff8021269e:	49 83 c7 01          	add    $0x1,%r15
            {
                PDE_Cnt=0;
                PDP_Cnt++;
                if(PDP_Cnt==512)
                {
                    PDP_Cnt=0;
ffffffff802126a2:	45 31 ed             	xor    %r13d,%r13d
ffffffff802126a5:	e9 f5 fc ff ff       	jmpq   ffffffff8021239f <__RME_Pgtbl_Kmem_Init+0x42f>
    while(Mem!=(struct __RME_X64_Mem*)(&RME_X64_Phys_Mem))
    {
    	/* Throw away small segments */
    	if(Mem->Length<2*RME_POW2(RME_PGTBL_SIZE_2M))
    	{
            RME_PRINTK_S("\n\rAbandoning physical memory above 4G: addr 0x");
ffffffff802126aa:	48 c7 c7 28 e3 21 80 	mov    $0xffffffff8021e328,%rdi
ffffffff802126b1:	e8 5a 48 00 00       	callq  ffffffff80216f10 <RME_Print_String>
            RME_PRINTK_U(Mem->Start_Addr);
ffffffff802126b6:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff802126ba:	e8 91 47 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
            RME_PRINTK_S(", length 0x");
ffffffff802126bf:	48 c7 c7 fc e4 21 80 	mov    $0xffffffff8021e4fc,%rdi
ffffffff802126c6:	e8 45 48 00 00       	callq  ffffffff80216f10 <RME_Print_String>
            RME_PRINTK_U(Mem->Length);
ffffffff802126cb:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff802126cf:	e8 7c 47 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
            Mem=(struct __RME_X64_Mem*)(Mem->Head.Next);
ffffffff802126d4:	48 8b 5b 08          	mov    0x8(%rbx),%rbx
            continue;
ffffffff802126d8:	e9 f7 fb ff ff       	jmpq   ffffffff802122d4 <__RME_Pgtbl_Kmem_Init+0x364>
        RME_X64_Layout.Kmem1_Size[0]=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kmem1_Start[0];
    }

    else
    {
        RME_X64_Layout.Stack_Start=RME_ROUND_DOWN(RME_X64_Layout.Kmem2_Start+RME_X64_Layout.Kmem2_Size-1,RME_X64_KSTACK_ORDER);
ffffffff802126dd:	48 8b 15 74 a8 05 00 	mov    0x5a874(%rip),%rdx        # ffffffff8026cf58 <RME_X64_Layout+0x258>
ffffffff802126e4:	48 8b 05 75 a8 05 00 	mov    0x5a875(%rip),%rax        # ffffffff8026cf60 <RME_X64_Layout+0x260>
ffffffff802126eb:	48 8d 44 02 ff       	lea    -0x1(%rdx,%rax,1),%rax
ffffffff802126f0:	48 25 00 00 f0 ff    	and    $0xfffffffffff00000,%rax
ffffffff802126f6:	48 89 05 6b a8 05 00 	mov    %rax,0x5a86b(%rip)        # ffffffff8026cf68 <RME_X64_Layout+0x268>
        RME_X64_Layout.Stack_Start-=RME_X64_Layout.Stack_Size;
ffffffff802126fd:	48 8b 15 6c a8 05 00 	mov    0x5a86c(%rip),%rdx        # ffffffff8026cf70 <RME_X64_Layout+0x270>
ffffffff80212704:	48 8b 05 5d a8 05 00 	mov    0x5a85d(%rip),%rax        # ffffffff8026cf68 <RME_X64_Layout+0x268>
ffffffff8021270b:	48 29 d0             	sub    %rdx,%rax
ffffffff8021270e:	48 89 05 53 a8 05 00 	mov    %rax,0x5a853(%rip)        # ffffffff8026cf68 <RME_X64_Layout+0x268>
        RME_X64_Layout.Kmem2_Size=RME_X64_Layout.Stack_Start-RME_X64_Layout.Kmem2_Start;
ffffffff80212715:	48 8b 05 4c a8 05 00 	mov    0x5a84c(%rip),%rax        # ffffffff8026cf68 <RME_X64_Layout+0x268>
ffffffff8021271c:	48 8b 15 35 a8 05 00 	mov    0x5a835(%rip),%rdx        # ffffffff8026cf58 <RME_X64_Layout+0x258>
ffffffff80212723:	48 29 d0             	sub    %rdx,%rax
ffffffff80212726:	48 89 05 33 a8 05 00 	mov    %rax,0x5a833(%rip)        # ffffffff8026cf60 <RME_X64_Layout+0x260>
ffffffff8021272d:	e9 8b fd ff ff       	jmpq   ffffffff802124bd <__RME_Pgtbl_Kmem_Init+0x54d>
        else
        	break;
    }

    /* The first Kmem1 trunk must start at smaller or equal to 16MB */
    RME_ASSERT(Mem->Start_Addr<=RME_POW2(RME_PGTBL_SIZE_16M));
ffffffff80212732:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80212739:	e8 d2 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021273e:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80212745:	e8 c6 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021274a:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80212751:	e8 ba 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212756:	bf 8f 04 00 00       	mov    $0x48f,%edi
ffffffff8021275b:	e8 70 45 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80212760:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212767:	e8 a4 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021276c:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80212773:	e8 98 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212778:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021277f:	e8 8c 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212784:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff8021278b:	e8 80 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212790:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212797:	e8 74 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021279c:	eb fe                	jmp    ffffffff8021279c <__RME_Pgtbl_Kmem_Init+0x82c>
ffffffff8021279e:	48 8b 05 ab 90 05 00 	mov    0x590ab(%rip),%rax        # ffffffff8026b850 <RME_X64_Phys_Mem+0x10>
    /* Now initialize the kernel object allocation table */
    _RME_Kotbl_Init(RME_X64_Layout.Kotbl_Size/sizeof(ptr_t));

    /* And the page table registration table as well */
    Pgreg=(struct __RME_X64_Pgreg*)RME_X64_Layout.Pgreg_Start;
    for(PML4_Cnt=0;PML4_Cnt<RME_X64_Layout.Pgreg_Size/sizeof(struct __RME_X64_Pgreg);PML4_Cnt++)
ffffffff802127a5:	48 c7 c3 40 b8 26 80 	mov    $0xffffffff8026b840,%rbx
ffffffff802127ac:	e9 24 f9 ff ff       	jmpq   ffffffff802120d5 <__RME_Pgtbl_Kmem_Init+0x165>
    		RME_PRINTK_U(Mem->Length);
    		continue;
    	}
    	if(Addr_Cnt>=RME_X64_KMEM1_MAXSEGS)
    	{
    		RME_PRINTK_S("\r\nThe memory under 4G is too fragmented. Aborting.");
ffffffff802127b1:	48 c7 c7 f0 e2 21 80 	mov    $0xffffffff8021e2f0,%rdi
ffffffff802127b8:	e8 53 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
            RME_ASSERT(0);
ffffffff802127bd:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff802127c4:	e8 47 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802127c9:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff802127d0:	e8 3b 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802127d5:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff802127dc:	e8 2f 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802127e1:	bf a9 04 00 00       	mov    $0x4a9,%edi
ffffffff802127e6:	e8 e5 44 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff802127eb:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802127f2:	e8 19 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802127f7:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff802127fe:	e8 0d 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212803:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021280a:	e8 01 47 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021280f:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80212816:	e8 f5 46 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021281b:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212822:	e8 e9 46 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212827:	eb fe                	jmp    ffffffff80212827 <__RME_Pgtbl_Kmem_Init+0x8b7>
ffffffff80212829:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80212830 <__RME_SMP_Low_Level_Init>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
ptr_t __RME_SMP_Low_Level_Init(void)
{
ffffffff80212830:	53                   	push   %rbx
	ptr_t CPUID;

    /* Initialize all vector tables */
    __RME_X64_CPU_Local_Init();
ffffffff80212831:	e8 2a a1 ff ff       	callq  ffffffff8020c960 <__RME_X64_CPU_Local_Init>
    /* Initialize LAPIC */
    __RME_X64_LAPIC_Init();
ffffffff80212836:	e8 75 9f ff ff       	callq  ffffffff8020c7b0 <__RME_X64_LAPIC_Init>
    CPUID=RME_CPUID();
ffffffff8021283b:	e8 ff 8f ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
ffffffff80212840:	48 89 c3             	mov    %rax,%rbx
    RME_ASSERT(CPUID==RME_X64_CPU_Cnt);
ffffffff80212843:	48 8b 05 96 a4 05 00 	mov    0x5a496(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
ffffffff8021284a:	48 39 c3             	cmp    %rax,%rbx
ffffffff8021284d:	74 71                	je     ffffffff802128c0 <__RME_SMP_Low_Level_Init+0x90>
ffffffff8021284f:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80212856:	e8 b5 46 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021285b:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80212862:	e8 a9 46 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212867:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021286e:	e8 9d 46 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212873:	bf 3f 05 00 00       	mov    $0x53f,%edi
ffffffff80212878:	e8 53 44 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021287d:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212884:	e8 87 46 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212889:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80212890:	e8 7b 46 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212895:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021289c:	e8 6f 46 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802128a1:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff802128a8:	e8 63 46 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802128ad:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802128b4:	e8 57 46 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802128b9:	eb fe                	jmp    ffffffff802128b9 <__RME_SMP_Low_Level_Init+0x89>
ffffffff802128bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    /* Spin until the global CPU counter is zero again, which means all the
     * booing processor initialization is done */
    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
ffffffff802128c0:	48 8b 05 19 a4 05 00 	mov    0x5a419(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
ffffffff802128c7:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff802128cb:	48 c7 80 e8 bc 26 80 	movq   $0x1,-0x7fd94318(%rax)
ffffffff802128d2:	01 00 00 00 
ffffffff802128d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff802128dd:	00 00 00 
    while(RME_X64_CPU_Cnt!=0);
ffffffff802128e0:	48 8b 05 f9 a3 05 00 	mov    0x5a3f9(%rip),%rax        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
ffffffff802128e7:	48 85 c0             	test   %rax,%rax
ffffffff802128ea:	75 f4                	jne    ffffffff802128e0 <__RME_SMP_Low_Level_Init+0xb0>
    /* Change page tables */
    __RME_Pgtbl_Set(RME_CAP_GETOBJ(RME_Cur_Thd[RME_CPUID()]->Sched.Proc->Pgtbl,ptr_t));
ffffffff802128ec:	e8 4e 8f ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
ffffffff802128f1:	48 8b 04 c5 00 28 22 	mov    -0x7fddd800(,%rax,8),%rax
ffffffff802128f8:	80 
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgtbl_Set(ptr_t Pgtbl)
{
	__RME_X64_Pgtbl_Set(RME_X64_VA2PA(Pgtbl));
ffffffff802128f9:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80212900:	80 00 00 
    /* Spin until the global CPU counter is zero again, which means all the
     * booing processor initialization is done */
    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
    while(RME_X64_CPU_Cnt!=0);
    /* Change page tables */
    __RME_Pgtbl_Set(RME_CAP_GETOBJ(RME_Cur_Thd[RME_CPUID()]->Sched.Proc->Pgtbl,ptr_t));
ffffffff80212903:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80212907:	48 8b 40 10          	mov    0x10(%rax),%rax
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgtbl_Set(ptr_t Pgtbl)
{
	__RME_X64_Pgtbl_Set(RME_X64_VA2PA(Pgtbl));
ffffffff8021290b:	48 03 78 18          	add    0x18(%rax),%rdi
ffffffff8021290f:	e8 9a 8f ff ff       	callq  ffffffff8020b8ae <__RME_X64_Pgtbl_Set>
    RME_X64_CPU_Info[RME_X64_CPU_Cnt].Boot_Done=1;
    while(RME_X64_CPU_Cnt!=0);
    /* Change page tables */
    __RME_Pgtbl_Set(RME_CAP_GETOBJ(RME_Cur_Thd[RME_CPUID()]->Sched.Proc->Pgtbl,ptr_t));
    /* Boot into the init thread - never returns */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(CPUID), CPUID);
ffffffff80212914:	48 8d b3 01 04 00 00 	lea    0x401(%rbx),%rsi
ffffffff8021291b:	48 89 da             	mov    %rbx,%rdx
ffffffff8021291e:	31 ff                	xor    %edi,%edi
ffffffff80212920:	48 c1 e6 0b          	shl    $0xb,%rsi
ffffffff80212924:	e8 a7 8f ff ff       	callq  ffffffff8020b8d0 <__RME_Enter_User_Mode>
    return 0;
}
ffffffff80212929:	31 c0                	xor    %eax,%eax
ffffffff8021292b:	5b                   	pop    %rbx
ffffffff8021292c:	c3                   	retq   
ffffffff8021292d:	0f 1f 00             	nopl   (%rax)

ffffffff80212930 <__RME_Boot>:
Input       : None.
Output      : None.
Return      : ptr_t - Always 0.
******************************************************************************/
ptr_t __RME_Boot(void)
{
ffffffff80212930:	41 57                	push   %r15
ffffffff80212932:	41 56                	push   %r14
    ptr_t Page_Ptr;
    struct RME_Cap_Captbl* Captbl;

    /* Initialize our own CPU-local data structures */
    RME_X64_CPU_Cnt=0;
    RME_PRINTK_S("\r\nCPU 0 local IDT/GDT init");
ffffffff80212934:	48 c7 c7 6a e6 21 80 	mov    $0xffffffff8021e66a,%rdi
Input       : None.
Output      : None.
Return      : ptr_t - Always 0.
******************************************************************************/
ptr_t __RME_Boot(void)
{
ffffffff8021293b:	41 55                	push   %r13
ffffffff8021293d:	41 54                	push   %r12
ffffffff8021293f:	55                   	push   %rbp
ffffffff80212940:	53                   	push   %rbx
{
    ptr_t Max_Int;
    ptr_t IOAPIC_ID;
    cnt_t Count;
    /* IOAPIC initialization */
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff80212941:	48 bb 00 00 c0 fe 00 	movabs $0xffff8000fec00000,%rbx
ffffffff80212948:	80 ff ff 
Input       : None.
Output      : None.
Return      : ptr_t - Always 0.
******************************************************************************/
ptr_t __RME_Boot(void)
{
ffffffff8021294b:	48 83 ec 18          	sub    $0x18,%rsp
    ptr_t Phys_Addr;
    ptr_t Page_Ptr;
    struct RME_Cap_Captbl* Captbl;

    /* Initialize our own CPU-local data structures */
    RME_X64_CPU_Cnt=0;
ffffffff8021294f:	48 c7 05 86 a3 05 00 	movq   $0x0,0x5a386(%rip)        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
ffffffff80212956:	00 00 00 00 
    RME_PRINTK_S("\r\nCPU 0 local IDT/GDT init");
ffffffff8021295a:	e8 b1 45 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    __RME_X64_CPU_Local_Init();
ffffffff8021295f:	e8 fc 9f ff ff       	callq  ffffffff8020c960 <__RME_X64_CPU_Local_Init>
    /* Initialize interrupt controllers (PIC, LAPIC, IOAPIC) */
    RME_PRINTK_S("\r\nCPU 0 LAPIC init");
ffffffff80212964:	48 c7 c7 85 e6 21 80 	mov    $0xffffffff8021e685,%rdi
ffffffff8021296b:	e8 a0 45 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    __RME_X64_LAPIC_Init();
ffffffff80212970:	e8 3b 9e ff ff       	callq  ffffffff8020c7b0 <__RME_X64_LAPIC_Init>
    RME_PRINTK_S("\r\nPIC init");
ffffffff80212975:	48 c7 c7 98 e6 21 80 	mov    $0xffffffff8021e698,%rdi
ffffffff8021297c:	e8 8f 45 00 00       	callq  ffffffff80216f10 <RME_Print_String>
Return      : None.
******************************************************************************/
void __RME_X64_PIC_Init(void)
{
    /* Mask all interrupts */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80212981:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80212986:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff8021298b:	e8 7a 8e ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80212990:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80212995:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff8021299a:	e8 6b 8e ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>

    /* Set up master (8259A-1) */
    __RME_X64_Out(RME_X64_PIC1, 0x11);
ffffffff8021299f:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff802129a4:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff802129a9:	e8 5c 8e ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, RME_X64_INT_USER(0));
ffffffff802129ae:	be 20 00 00 00       	mov    $0x20,%esi
ffffffff802129b3:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802129b8:	e8 4d 8e ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 1<<2);
ffffffff802129bd:	be 04 00 00 00       	mov    $0x4,%esi
ffffffff802129c2:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802129c7:	e8 3e 8e ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1+1, 0x3);
ffffffff802129cc:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff802129d1:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff802129d6:	e8 2f 8e ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>

    /* Set up slave (8259A-2) */
    __RME_X64_Out(RME_X64_PIC2, 0x11);
ffffffff802129db:	be 11 00 00 00       	mov    $0x11,%esi
ffffffff802129e0:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff802129e5:	e8 20 8e ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, RME_X64_INT_USER(8));
ffffffff802129ea:	be 28 00 00 00       	mov    $0x28,%esi
ffffffff802129ef:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff802129f4:	e8 11 8e ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 2);
ffffffff802129f9:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff802129fe:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80212a03:	e8 02 8e ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0x3);
ffffffff80212a08:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80212a0d:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80212a12:	e8 f3 8d ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC1, 0x68);
ffffffff80212a17:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80212a1c:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80212a21:	e8 e4 8d ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC1, 0x0A);
ffffffff80212a26:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80212a2b:	bf 20 00 00 00       	mov    $0x20,%edi
ffffffff80212a30:	e8 d5 8d ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>

    __RME_X64_Out(RME_X64_PIC2, 0x68);
ffffffff80212a35:	be 68 00 00 00       	mov    $0x68,%esi
ffffffff80212a3a:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80212a3f:	e8 c6 8d ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2, 0x0A);
ffffffff80212a44:	be 0a 00 00 00       	mov    $0xa,%esi
ffffffff80212a49:	bf a0 00 00 00       	mov    $0xa0,%edi
ffffffff80212a4e:	e8 b7 8d ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>

    /* Mask all interrupts - we do not use the PIC at all */
    __RME_X64_Out(RME_X64_PIC1+1, 0xFF);
ffffffff80212a53:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80212a58:	bf 21 00 00 00       	mov    $0x21,%edi
ffffffff80212a5d:	e8 a8 8d ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIC2+1, 0xFF);
ffffffff80212a62:	be ff 00 00 00       	mov    $0xff,%esi
ffffffff80212a67:	bf a1 00 00 00       	mov    $0xa1,%edi
ffffffff80212a6c:	e8 99 8d ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    /* Initialize interrupt controllers (PIC, LAPIC, IOAPIC) */
    RME_PRINTK_S("\r\nCPU 0 LAPIC init");
    __RME_X64_LAPIC_Init();
    RME_PRINTK_S("\r\nPIC init");
    __RME_X64_PIC_Init();
    RME_PRINTK_S("\r\nIOAPIC init");
ffffffff80212a71:	48 c7 c7 a3 e6 21 80 	mov    $0xffffffff8021e6a3,%rdi
ffffffff80212a78:	e8 93 44 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    ptr_t Max_Int;
    ptr_t IOAPIC_ID;
    cnt_t Count;
    /* IOAPIC initialization */
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
    Max_Int=((Max_Int>>16)&0xFF);
ffffffff80212a7d:	0f b6 6b 12          	movzbl 0x12(%rbx),%ebp
{
    ptr_t Max_Int;
    ptr_t IOAPIC_ID;
    cnt_t Count;
    /* IOAPIC initialization */
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_VER,Max_Int);
ffffffff80212a81:	c7 03 01 00 00 00    	movl   $0x1,(%rbx)
    Max_Int=((Max_Int>>16)&0xFF);
    RME_PRINTK_S("\n\rMax int is: ");
ffffffff80212a87:	48 c7 c7 b1 e6 21 80 	mov    $0xffffffff8021e6b1,%rdi
ffffffff80212a8e:	e8 7d 44 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_I(Max_Int);
ffffffff80212a93:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212a96:	e8 35 42 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
    RME_X64_IOAPIC_READ(RME_X64_IOAPIC_REG_ID,IOAPIC_ID);
ffffffff80212a9b:	c7 03 00 00 00 00    	movl   $0x0,(%rbx)
ffffffff80212aa1:	8b 5b 10             	mov    0x10(%rbx),%ebx
    IOAPIC_ID>>=24;
    ///this is not necessarily true! RME_ASSERT(IOAPIC_ID==RME_X64_IOAPIC_Info[0].IOAPIC_ID);
    RME_PRINTK_S("\n\rIOAPIC ID is: ");
ffffffff80212aa4:	48 c7 c7 c0 e6 21 80 	mov    $0xffffffff8021e6c0,%rdi
ffffffff80212aab:	e8 60 44 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_I(IOAPIC_ID);
ffffffff80212ab0:	48 c1 eb 18          	shr    $0x18,%rbx
ffffffff80212ab4:	48 89 df             	mov    %rbx,%rdi
ffffffff80212ab7:	e8 14 42 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80212abc:	31 c0                	xor    %eax,%eax
ffffffff80212abe:	66 90                	xchg   %ax,%ax
void __RME_X64_IOAPIC_Int_Disable(ptr_t IRQ)
{
    /* Mark interrupt edge-triggered, active high, enabled, and routed to the
     * given cpunum, which happens to be that cpu's APIC ID. */
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1),RME_X64_IOAPIC_INT_DISABLED|RME_X64_INT_USER(IRQ));
    RME_X64_IOAPIC_WRITE(RME_X64_IOAPIC_REG_TABLE+(IRQ<<1)+1,0);
ffffffff80212ac0:	8d 54 00 11          	lea    0x11(%rax,%rax,1),%edx
    ///this is not necessarily true! RME_ASSERT(IOAPIC_ID==RME_X64_IOAPIC_Info[0].IOAPIC_ID);
    RME_PRINTK_S("\n\rIOAPIC ID is: ");
    RME_PRINTK_I(IOAPIC_ID);

    /* Disable all interrupts */
    for(Count=0;Count<=Max_Int;Count++)
ffffffff80212ac4:	48 83 c0 01          	add    $0x1,%rax
ffffffff80212ac8:	48 39 c5             	cmp    %rax,%rbp
ffffffff80212acb:	73 f3                	jae    ffffffff80212ac0 <__RME_Boot+0x190>
ffffffff80212acd:	89 d0                	mov    %edx,%eax
    RME_PRINTK_S("\r\nPIC init");
    __RME_X64_PIC_Init();
    RME_PRINTK_S("\r\nIOAPIC init");
    __RME_X64_IOAPIC_Init();
    /* Initialize the timer and start its interrupt routing */
    RME_PRINTK_S("\r\nTimer init");
ffffffff80212acf:	48 c7 c7 d1 e6 21 80 	mov    $0xffffffff8021e6d1,%rdi
ffffffff80212ad6:	a3 00 00 c0 fe 00 80 	movabs %eax,0xffff8000fec00000
ffffffff80212add:	ff ff 
ffffffff80212adf:	48 b8 10 00 c0 fe 00 	movabs $0xffff8000fec00010,%rax
ffffffff80212ae6:	80 ff ff 
ffffffff80212ae9:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
ffffffff80212aef:	e8 1c 44 00 00       	callq  ffffffff80216f10 <RME_Print_String>
void __RME_X64_Timer_Init(void)
{
    /* For timer interrupts, they will always be handled by core 1, and all the other
     * cores should receive a IPI for that, so their scheduler can look after their
     * threads. We are using square wave mode. */
    __RME_X64_Out(RME_X64_PIT_CMD,0x34);
ffffffff80212af4:	be 34 00 00 00       	mov    $0x34,%esi
ffffffff80212af9:	bf 43 00 00 00       	mov    $0x43,%edi
ffffffff80212afe:	e8 07 8d ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,(1193182/2/RME_X64_TIMER_FREQ)&0xFF);
ffffffff80212b03:	be 54 00 00 00       	mov    $0x54,%esi
ffffffff80212b08:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80212b0d:	e8 f8 8c ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    __RME_X64_Out(RME_X64_PIT_CH0,((1193182/2/RME_X64_TIMER_FREQ)>>8)&0xFF);
ffffffff80212b12:	be 02 00 00 00       	mov    $0x2,%esi
ffffffff80212b17:	bf 40 00 00 00       	mov    $0x40,%edi
ffffffff80212b1c:	e8 e9 8c ff ff       	callq  ffffffff8020b80a <__RME_X64_Out>
    RME_PRINTK_S("\r\nTimer init");
    __RME_X64_Timer_Init();

    /* Create all initial tables in Kmem1, which is sure to be present. We reserve 16
     * pages at the start to load the init process */
    Cur_Addr=RME_X64_Layout.Kmem1_Start[0]+16*RME_POW2(RME_PGTBL_SIZE_2M);
ffffffff80212b21:	48 8b 1d 20 a2 05 00 	mov    0x5a220(%rip),%rbx        # ffffffff8026cd48 <RME_X64_Layout+0x48>
    RME_PRINTK_S("\r\nKotbl registration start offset: 0x");
ffffffff80212b28:	48 c7 c7 58 e3 21 80 	mov    $0xffffffff8021e358,%rdi
ffffffff80212b2f:	e8 dc 43 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(((Cur_Addr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER)/8);
ffffffff80212b34:	48 bf 00 00 00 02 00 	movabs $0x800002000000,%rdi
ffffffff80212b3b:	80 00 00 
ffffffff80212b3e:	48 01 df             	add    %rbx,%rdi
    RME_PRINTK_S("\r\nTimer init");
    __RME_X64_Timer_Init();

    /* Create all initial tables in Kmem1, which is sure to be present. We reserve 16
     * pages at the start to load the init process */
    Cur_Addr=RME_X64_Layout.Kmem1_Start[0]+16*RME_POW2(RME_PGTBL_SIZE_2M);
ffffffff80212b41:	48 8d ab 00 00 00 02 	lea    0x2000000(%rbx),%rbp
    RME_PRINTK_S("\r\nKotbl registration start offset: 0x");
    RME_PRINTK_U(((Cur_Addr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER)/8);
ffffffff80212b48:	48 c1 ef 07          	shr    $0x7,%rdi
ffffffff80212b4c:	e8 ff 42 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>

    /* Create the capability table for the init process - always 16 */
    Captbl=(struct RME_Cap_Captbl*)Cur_Addr;
    RME_ASSERT(_RME_Captbl_Boot_Init(RME_BOOT_CAPTBL,Cur_Addr,16)==RME_BOOT_CAPTBL);
ffffffff80212b51:	31 ff                	xor    %edi,%edi
ffffffff80212b53:	ba 10 00 00 00       	mov    $0x10,%edx
ffffffff80212b58:	48 89 ee             	mov    %rbp,%rsi
ffffffff80212b5b:	e8 60 1d 00 00       	callq  ffffffff802148c0 <_RME_Captbl_Boot_Init>
ffffffff80212b60:	48 85 c0             	test   %rax,%rax
ffffffff80212b63:	74 73                	je     ffffffff80212bd8 <__RME_Boot+0x2a8>
ffffffff80212b65:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80212b6c:	e8 9f 43 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212b71:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80212b78:	e8 93 43 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212b7d:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80212b84:	e8 87 43 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212b89:	bf 72 05 00 00       	mov    $0x572,%edi
ffffffff80212b8e:	e8 3d 41 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80212b93:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212b9a:	e8 71 43 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212b9f:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80212ba6:	e8 65 43 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212bab:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80212bb2:	e8 59 43 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212bb7:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80212bbe:	e8 4d 43 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212bc3:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212bca:	e8 41 43 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212bcf:	eb fe                	jmp    ffffffff80212bcf <__RME_Boot+0x29f>
ffffffff80212bd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    /* Create the capability table for initial page tables - now we are only
     * adding 2MB pages. There will be 1 PML4, 16 PDP, and 16*512=8192 PGD.
     * This should provide support for up to 4TB of memory, which will be sufficient
     * for at least a decade. These data structures will eat 32MB of memory, which
     * is fine */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_PGTBL, Cur_Addr, 1+16+8192)==0);
ffffffff80212bd8:	48 8d 8b 00 04 00 02 	lea    0x2000400(%rbx),%rcx
ffffffff80212bdf:	31 f6                	xor    %esi,%esi
ffffffff80212be1:	41 b8 11 20 00 00    	mov    $0x2011,%r8d
ffffffff80212be7:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80212bec:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212bef:	e8 7c 1d 00 00       	callq  ffffffff80214970 <_RME_Captbl_Boot_Crt>
ffffffff80212bf4:	48 85 c0             	test   %rax,%rax
ffffffff80212bf7:	74 6f                	je     ffffffff80212c68 <__RME_Boot+0x338>
ffffffff80212bf9:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80212c00:	e8 0b 43 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212c05:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80212c0c:	e8 ff 42 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212c11:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80212c18:	e8 f3 42 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212c1d:	bf 7a 05 00 00       	mov    $0x57a,%edi
ffffffff80212c22:	e8 a9 40 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80212c27:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212c2e:	e8 dd 42 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212c33:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80212c3a:	e8 d1 42 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212c3f:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80212c46:	e8 c5 42 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212c4b:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80212c52:	e8 b9 42 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212c57:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212c5e:	e8 ad 42 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212c63:	eb fe                	jmp    ffffffff80212c63 <__RME_Boot+0x333>
ffffffff80212c65:	0f 1f 00             	nopl   (%rax)
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(1+16+8192));

    /* Align the address to 4096 to prepare for page table creation */
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80212c68:	48 81 c3 3f 18 08 02 	add    $0x208183f,%rbx
    /* Create PML4 */
    RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PML4,
ffffffff80212c6f:	6a 09                	pushq  $0x9
ffffffff80212c71:	6a 27                	pushq  $0x27
     * is fine */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_PGTBL, Cur_Addr, 1+16+8192)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(1+16+8192));

    /* Align the address to 4096 to prepare for page table creation */
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
ffffffff80212c73:	48 81 e3 00 f0 ff ff 	and    $0xfffffffffffff000,%rbx
    /* Create PML4 */
    RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PML4,
ffffffff80212c7a:	45 31 c0             	xor    %r8d,%r8d
ffffffff80212c7d:	31 d2                	xor    %edx,%edx
ffffffff80212c7f:	41 b9 01 00 00 00    	mov    $0x1,%r9d
ffffffff80212c85:	48 89 d9             	mov    %rbx,%rcx
ffffffff80212c88:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80212c8d:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212c90:	e8 fb 46 00 00       	callq  ffffffff80217390 <_RME_Pgtbl_Boot_Crt>
ffffffff80212c95:	48 85 c0             	test   %rax,%rax
ffffffff80212c98:	41 5a                	pop    %r10
ffffffff80212c9a:	41 5b                	pop    %r11
ffffffff80212c9c:	0f 85 e7 00 00 00    	jne    ffffffff80212d89 <__RME_Boot+0x459>
                                   Cur_Addr, 0, RME_PGTBL_TOP, RME_PGTBL_SIZE_512G, RME_PGTBL_NUM_512)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_PGTBL_SIZE_TOP(RME_PGTBL_NUM_512));
ffffffff80212ca2:	4c 8d ab 00 10 00 00 	lea    0x1000(%rbx),%r13
    /* Create all our 16 PDPs, and cons them into the PML4 */
    for(Count=0;Count<16;Count++)
ffffffff80212ca9:	45 31 e4             	xor    %r12d,%r12d
ffffffff80212cac:	48 81 c3 00 10 01 00 	add    $0x11000,%rbx
ffffffff80212cb3:	eb 3e                	jmp    ffffffff80212cf3 <__RME_Boot+0x3c3>
ffffffff80212cb5:	0f 1f 00             	nopl   (%rax)
    {
        RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PDP(Count),
                                       Cur_Addr, 0, RME_PGTBL_NOM, RME_PGTBL_SIZE_1G, RME_PGTBL_NUM_512)==0);
        Cur_Addr+=RME_KOTBL_ROUND(RME_PGTBL_SIZE_NOM(RME_PGTBL_NUM_512));
        RME_ASSERT(_RME_Pgtbl_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PML4), Count,
ffffffff80212cb8:	4c 89 e1             	mov    %r12,%rcx
ffffffff80212cbb:	49 8d 54 24 ff       	lea    -0x1(%r12),%rdx
ffffffff80212cc0:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80212cc6:	48 81 c9 00 80 01 00 	or     $0x18000,%rcx
ffffffff80212ccd:	be 00 80 01 00       	mov    $0x18000,%esi
ffffffff80212cd2:	48 89 ef             	mov    %rbp,%rdi
    /* Create all our 16 PDPs, and cons them into the PML4 */
    for(Count=0;Count<16;Count++)
    {
        RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PDP(Count),
                                       Cur_Addr, 0, RME_PGTBL_NOM, RME_PGTBL_SIZE_1G, RME_PGTBL_NUM_512)==0);
        Cur_Addr+=RME_KOTBL_ROUND(RME_PGTBL_SIZE_NOM(RME_PGTBL_NUM_512));
ffffffff80212cd5:	49 81 c5 00 10 00 00 	add    $0x1000,%r13
        RME_ASSERT(_RME_Pgtbl_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PML4), Count,
ffffffff80212cdc:	e8 8f 4a 00 00       	callq  ffffffff80217770 <_RME_Pgtbl_Boot_Con>
ffffffff80212ce1:	48 85 c0             	test   %rax,%rax
ffffffff80212ce4:	0f 85 02 02 00 00    	jne    ffffffff80212eec <__RME_Boot+0x5bc>
    /* Create PML4 */
    RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PML4,
                                   Cur_Addr, 0, RME_PGTBL_TOP, RME_PGTBL_SIZE_512G, RME_PGTBL_NUM_512)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_PGTBL_SIZE_TOP(RME_PGTBL_NUM_512));
    /* Create all our 16 PDPs, and cons them into the PML4 */
    for(Count=0;Count<16;Count++)
ffffffff80212cea:	49 39 dd             	cmp    %rbx,%r13
ffffffff80212ced:	0f 84 02 01 00 00    	je     ffffffff80212df5 <__RME_Boot+0x4c5>
    {
        RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PDP(Count),
ffffffff80212cf3:	6a 09                	pushq  $0x9
ffffffff80212cf5:	49 83 c4 01          	add    $0x1,%r12
ffffffff80212cf9:	6a 1e                	pushq  $0x1e
ffffffff80212cfb:	45 31 c9             	xor    %r9d,%r9d
ffffffff80212cfe:	45 31 c0             	xor    %r8d,%r8d
ffffffff80212d01:	4c 89 e9             	mov    %r13,%rcx
ffffffff80212d04:	4c 89 e2             	mov    %r12,%rdx
ffffffff80212d07:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80212d0c:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212d0f:	e8 7c 46 00 00       	callq  ffffffff80217390 <_RME_Pgtbl_Boot_Crt>
ffffffff80212d14:	48 85 c0             	test   %rax,%rax
ffffffff80212d17:	41 58                	pop    %r8
ffffffff80212d19:	41 59                	pop    %r9
ffffffff80212d1b:	74 9b                	je     ffffffff80212cb8 <__RME_Boot+0x388>
ffffffff80212d1d:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80212d24:	e8 e7 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212d29:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80212d30:	e8 db 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212d35:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80212d3c:	e8 cf 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212d41:	bf 87 05 00 00       	mov    $0x587,%edi
ffffffff80212d46:	e8 85 3f 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80212d4b:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212d52:	e8 b9 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212d57:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80212d5e:	e8 ad 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212d63:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80212d6a:	e8 a1 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212d6f:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80212d76:	e8 95 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212d7b:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212d82:	e8 89 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212d87:	eb fe                	jmp    ffffffff80212d87 <__RME_Boot+0x457>
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(1+16+8192));

    /* Align the address to 4096 to prepare for page table creation */
    Cur_Addr=RME_ROUND_UP(Cur_Addr,12);
    /* Create PML4 */
    RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PML4,
ffffffff80212d89:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80212d90:	e8 7b 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212d95:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80212d9c:	e8 6f 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212da1:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80212da8:	e8 63 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212dad:	bf 81 05 00 00       	mov    $0x581,%edi
ffffffff80212db2:	e8 19 3f 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80212db7:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212dbe:	e8 4d 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212dc3:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80212dca:	e8 41 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212dcf:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80212dd6:	e8 35 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212ddb:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80212de2:	e8 29 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212de7:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212dee:	e8 1d 41 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212df3:	eb fe                	jmp    ffffffff80212df3 <__RME_Boot+0x4c3>
ffffffff80212df5:	45 31 e4             	xor    %r12d,%r12d
ffffffff80212df8:	eb 5d                	jmp    ffffffff80212e57 <__RME_Boot+0x527>
ffffffff80212dfa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    for(Count=0;Count<8192;Count++)
	{
		RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PDE(Count),
									   Cur_Addr, 0, RME_PGTBL_NOM, RME_PGTBL_SIZE_2M, RME_PGTBL_NUM_512)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_PGTBL_SIZE_NOM(RME_PGTBL_NUM_512));
		RME_ASSERT(_RME_Pgtbl_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff80212e00:	4c 89 e6             	mov    %r12,%rsi
ffffffff80212e03:	4c 89 e9             	mov    %r13,%rcx
ffffffff80212e06:	4c 89 e2             	mov    %r12,%rdx
ffffffff80212e09:	48 c1 fe 09          	sar    $0x9,%rsi
ffffffff80212e0d:	48 81 c9 00 80 01 00 	or     $0x18000,%rcx
ffffffff80212e14:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff80212e1a:	48 83 c6 01          	add    $0x1,%rsi
ffffffff80212e1e:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80212e24:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212e27:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
    /* Create 8192 PDEs, and cons them into their respective PDPs */
    for(Count=0;Count<8192;Count++)
	{
		RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PDE(Count),
									   Cur_Addr, 0, RME_PGTBL_NOM, RME_PGTBL_SIZE_2M, RME_PGTBL_NUM_512)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_PGTBL_SIZE_NOM(RME_PGTBL_NUM_512));
ffffffff80212e2e:	4c 8d b3 00 10 00 00 	lea    0x1000(%rbx),%r14
		RME_ASSERT(_RME_Pgtbl_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff80212e35:	e8 36 49 00 00       	callq  ffffffff80217770 <_RME_Pgtbl_Boot_Con>
ffffffff80212e3a:	48 85 c0             	test   %rax,%rax
ffffffff80212e3d:	0f 85 2d 02 00 00    	jne    ffffffff80213070 <__RME_Boot+0x740>
        RME_ASSERT(_RME_Pgtbl_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PML4), Count,
        		                       RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDP(Count)), RME_PGTBL_ALL_PERM)==0);
    }

    /* Create 8192 PDEs, and cons them into their respective PDPs */
    for(Count=0;Count<8192;Count++)
ffffffff80212e43:	49 83 c4 01          	add    $0x1,%r12
ffffffff80212e47:	49 81 fc 00 20 00 00 	cmp    $0x2000,%r12
ffffffff80212e4e:	0f 84 04 01 00 00    	je     ffffffff80212f58 <__RME_Boot+0x628>
	{
		RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PDE(Count),
									   Cur_Addr, 0, RME_PGTBL_NOM, RME_PGTBL_SIZE_2M, RME_PGTBL_NUM_512)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_PGTBL_SIZE_NOM(RME_PGTBL_NUM_512));
ffffffff80212e54:	4c 89 f3             	mov    %r14,%rbx
ffffffff80212e57:	4d 8d 6c 24 11       	lea    0x11(%r12),%r13
    }

    /* Create 8192 PDEs, and cons them into their respective PDPs */
    for(Count=0;Count<8192;Count++)
	{
		RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PDE(Count),
ffffffff80212e5c:	6a 09                	pushq  $0x9
ffffffff80212e5e:	6a 15                	pushq  $0x15
ffffffff80212e60:	45 31 c9             	xor    %r9d,%r9d
ffffffff80212e63:	45 31 c0             	xor    %r8d,%r8d
ffffffff80212e66:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80212e6b:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212e6e:	48 89 d9             	mov    %rbx,%rcx
ffffffff80212e71:	4c 89 ea             	mov    %r13,%rdx
ffffffff80212e74:	e8 17 45 00 00       	callq  ffffffff80217390 <_RME_Pgtbl_Boot_Crt>
ffffffff80212e79:	48 85 c0             	test   %rax,%rax
ffffffff80212e7c:	5e                   	pop    %rsi
ffffffff80212e7d:	5f                   	pop    %rdi
ffffffff80212e7e:	74 80                	je     ffffffff80212e00 <__RME_Boot+0x4d0>
ffffffff80212e80:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80212e87:	e8 84 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212e8c:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80212e93:	e8 78 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212e98:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80212e9f:	e8 6c 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212ea4:	bf 91 05 00 00       	mov    $0x591,%edi
ffffffff80212ea9:	e8 22 3e 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80212eae:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212eb5:	e8 56 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212eba:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80212ec1:	e8 4a 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212ec6:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80212ecd:	e8 3e 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212ed2:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80212ed9:	e8 32 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212ede:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212ee5:	e8 26 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212eea:	eb fe                	jmp    ffffffff80212eea <__RME_Boot+0x5ba>
    for(Count=0;Count<16;Count++)
    {
        RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PDP(Count),
                                       Cur_Addr, 0, RME_PGTBL_NOM, RME_PGTBL_SIZE_1G, RME_PGTBL_NUM_512)==0);
        Cur_Addr+=RME_KOTBL_ROUND(RME_PGTBL_SIZE_NOM(RME_PGTBL_NUM_512));
        RME_ASSERT(_RME_Pgtbl_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PML4), Count,
ffffffff80212eec:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80212ef3:	e8 18 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212ef8:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80212eff:	e8 0c 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212f04:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80212f0b:	e8 00 40 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212f10:	bf 8a 05 00 00       	mov    $0x58a,%edi
ffffffff80212f15:	e8 b6 3d 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80212f1a:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212f21:	e8 ea 3f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212f26:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80212f2d:	e8 de 3f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212f32:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80212f39:	e8 d2 3f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212f3e:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80212f45:	e8 c6 3f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212f4a:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80212f51:	e8 ba 3f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80212f56:	eb fe                	jmp    ffffffff80212f56 <__RME_Boot+0x626>
									   RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Count)), RME_PGTBL_ALL_PERM)==0);
	}

    /* Map all the Kmem1 that we have into it */
    Page_Ptr=0;
    for(Kmem1_Cnt=0;Kmem1_Cnt<RME_X64_Layout.Kmem1_Trunks;Kmem1_Cnt++)
ffffffff80212f58:	48 8b 05 e1 9d 05 00 	mov    0x59de1(%rip),%rax        # ffffffff8026cd40 <RME_X64_Layout+0x40>
ffffffff80212f5f:	45 31 ed             	xor    %r13d,%r13d
ffffffff80212f62:	45 31 e4             	xor    %r12d,%r12d
ffffffff80212f65:	48 85 c0             	test   %rax,%rax
ffffffff80212f68:	0f 84 91 01 00 00    	je     ffffffff802130ff <__RME_Boot+0x7cf>
    {
		for(Count=0;Count<RME_X64_Layout.Kmem1_Size[Kmem1_Cnt];Count+=RME_POW2(RME_PGTBL_SIZE_2M))
ffffffff80212f6e:	4d 8d 55 28          	lea    0x28(%r13),%r10
ffffffff80212f72:	45 31 c9             	xor    %r9d,%r9d
ffffffff80212f75:	4d 8d 7d 08          	lea    0x8(%r13),%r15
ffffffff80212f79:	4a 8b 04 d5 08 cd 26 	mov    -0x7fd932f8(,%r10,8),%rax
ffffffff80212f80:	80 
ffffffff80212f81:	48 85 c0             	test   %rax,%rax
ffffffff80212f84:	75 26                	jne    ffffffff80212fac <__RME_Boot+0x67c>
ffffffff80212f86:	e9 51 01 00 00       	jmpq   ffffffff802130dc <__RME_Boot+0x7ac>
ffffffff80212f8b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80212f90:	4a 8b 04 d5 08 cd 26 	mov    -0x7fd932f8(,%r10,8),%rax
ffffffff80212f97:	80 
ffffffff80212f98:	49 81 c1 00 00 20 00 	add    $0x200000,%r9
		{
			Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[Kmem1_Cnt])+Count;
			RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
										   Phys_Addr, Page_Ptr&0x1FF, RME_PGTBL_ALL_PERM)==0);
			Page_Ptr++;
ffffffff80212f9f:	49 83 c4 01          	add    $0x1,%r12

    /* Map all the Kmem1 that we have into it */
    Page_Ptr=0;
    for(Kmem1_Cnt=0;Kmem1_Cnt<RME_X64_Layout.Kmem1_Trunks;Kmem1_Cnt++)
    {
		for(Count=0;Count<RME_X64_Layout.Kmem1_Size[Kmem1_Cnt];Count+=RME_POW2(RME_PGTBL_SIZE_2M))
ffffffff80212fa3:	4c 39 c8             	cmp    %r9,%rax
ffffffff80212fa6:	0f 86 30 01 00 00    	jbe    ffffffff802130dc <__RME_Boot+0x7ac>
		{
			Phys_Addr=RME_X64_VA2PA(RME_X64_Layout.Kmem1_Start[Kmem1_Cnt])+Count;
ffffffff80212fac:	4a 8b 14 fd 08 cd 26 	mov    -0x7fd932f8(,%r15,8),%rdx
ffffffff80212fb3:	80 
			RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff80212fb4:	4c 89 e6             	mov    %r12,%rsi
ffffffff80212fb7:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80212fbe:	80 00 00 
ffffffff80212fc1:	48 c1 ee 09          	shr    $0x9,%rsi
ffffffff80212fc5:	4c 89 e1             	mov    %r12,%rcx
ffffffff80212fc8:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
ffffffff80212fce:	48 83 c6 11          	add    $0x11,%rsi
ffffffff80212fd2:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
ffffffff80212fd8:	48 89 ef             	mov    %rbp,%rdi
ffffffff80212fdb:	48 01 c2             	add    %rax,%rdx
ffffffff80212fde:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
ffffffff80212fe5:	4c 89 54 24 08       	mov    %r10,0x8(%rsp)
ffffffff80212fea:	4c 01 ca             	add    %r9,%rdx
ffffffff80212fed:	4c 89 0c 24          	mov    %r9,(%rsp)
ffffffff80212ff1:	e8 7a 49 00 00       	callq  ffffffff80217970 <_RME_Pgtbl_Boot_Add>
ffffffff80212ff6:	48 85 c0             	test   %rax,%rax
ffffffff80212ff9:	4c 8b 0c 24          	mov    (%rsp),%r9
ffffffff80212ffd:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
ffffffff80213002:	74 8c                	je     ffffffff80212f90 <__RME_Boot+0x660>
ffffffff80213004:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021300b:	e8 00 3f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213010:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213017:	e8 f4 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021301c:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213023:	e8 e8 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213028:	bf 9f 05 00 00       	mov    $0x59f,%edi
ffffffff8021302d:	e8 9e 3c 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213032:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213039:	e8 d2 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021303e:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213045:	e8 c6 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021304a:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213051:	e8 ba 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213056:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff8021305d:	e8 ae 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213062:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213069:	e8 a2 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021306e:	eb fe                	jmp    ffffffff8021306e <__RME_Boot+0x73e>
    for(Count=0;Count<8192;Count++)
	{
		RME_ASSERT(_RME_Pgtbl_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_PGTBL, RME_BOOT_PDE(Count),
									   Cur_Addr, 0, RME_PGTBL_NOM, RME_PGTBL_SIZE_2M, RME_PGTBL_NUM_512)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_PGTBL_SIZE_NOM(RME_PGTBL_NUM_512));
		RME_ASSERT(_RME_Pgtbl_Boot_Con(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDP(Count>>9)), Count&0x1FF,
ffffffff80213070:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213077:	e8 94 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021307c:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213083:	e8 88 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213088:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021308f:	e8 7c 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213094:	bf 94 05 00 00       	mov    $0x594,%edi
ffffffff80213099:	e8 32 3c 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021309e:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802130a5:	e8 66 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802130aa:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff802130b1:	e8 5a 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802130b6:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff802130bd:	e8 4e 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802130c2:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff802130c9:	e8 42 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802130ce:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802130d5:	e8 36 3e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802130da:	eb fe                	jmp    ffffffff802130da <__RME_Boot+0x7aa>
									   RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Count)), RME_PGTBL_ALL_PERM)==0);
	}

    /* Map all the Kmem1 that we have into it */
    Page_Ptr=0;
    for(Kmem1_Cnt=0;Kmem1_Cnt<RME_X64_Layout.Kmem1_Trunks;Kmem1_Cnt++)
ffffffff802130dc:	48 8b 05 5d 9c 05 00 	mov    0x59c5d(%rip),%rax        # ffffffff8026cd40 <RME_X64_Layout+0x40>
ffffffff802130e3:	49 83 c5 01          	add    $0x1,%r13
ffffffff802130e7:	4c 39 e8             	cmp    %r13,%rax
ffffffff802130ea:	0f 87 7e fe ff ff    	ja     ffffffff80212f6e <__RME_Boot+0x63e>
ffffffff802130f0:	4d 8d 6c 24 01       	lea    0x1(%r12),%r13
ffffffff802130f5:	49 c1 e5 15          	shl    $0x15,%r13
ffffffff802130f9:	4d 8d 7d ff          	lea    -0x1(%r13),%r15
ffffffff802130fd:	eb 0c                	jmp    ffffffff8021310b <__RME_Boot+0x7db>
ffffffff802130ff:	41 bf ff ff 1f 00    	mov    $0x1fffff,%r15d
ffffffff80213105:	41 bd 00 00 20 00    	mov    $0x200000,%r13d
			RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
										   Phys_Addr, Page_Ptr&0x1FF, RME_PGTBL_ALL_PERM)==0);
			Page_Ptr++;
		}
    }
    RME_PRINTK_S("\r\nKmem1 pages: 0x");
ffffffff8021310b:	48 c7 c7 de e6 21 80 	mov    $0xffffffff8021e6de,%rdi
ffffffff80213112:	e8 f9 3d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(Page_Ptr);
ffffffff80213117:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021311a:	e8 31 3d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S(", [0x0, 0x");
ffffffff8021311f:	48 c7 c7 f0 e6 21 80 	mov    $0xffffffff8021e6f0,%rdi
ffffffff80213126:	e8 e5 3d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M)-1);
ffffffff8021312b:	4c 89 ff             	mov    %r15,%rdi
ffffffff8021312e:	e8 1d 3d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("]");
ffffffff80213133:	48 c7 c7 fb e6 21 80 	mov    $0xffffffff8021e6fb,%rdi
ffffffff8021313a:	e8 d1 3d 00 00       	callq  ffffffff80216f10 <RME_Print_String>

    /* Map the Kmem2 in - don't want lookups, we know where they are. Offset by 2048 because they are mapped above 4G */
    RME_PRINTK_S("\r\nKmem2 pages: 0x");
ffffffff8021313f:	48 c7 c7 fd e6 21 80 	mov    $0xffffffff8021e6fd,%rdi
ffffffff80213146:	e8 c5 3d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M));
ffffffff8021314b:	48 8b 3d 0e 9e 05 00 	mov    0x59e0e(%rip),%rdi        # ffffffff8026cf60 <RME_X64_Layout+0x260>
ffffffff80213152:	48 c1 ef 15          	shr    $0x15,%rdi
ffffffff80213156:	e8 f5 3c 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S(", [0x");
ffffffff8021315b:	48 c7 c7 0f e7 21 80 	mov    $0xffffffff8021e70f,%rdi
ffffffff80213162:	e8 a9 3d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M));
ffffffff80213167:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021316a:	e8 e1 3c 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S(", 0x");
ffffffff8021316f:	48 c7 c7 f6 e6 21 80 	mov    $0xffffffff8021e6f6,%rdi
ffffffff80213176:	e8 95 3d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    for(Count=2048;Count<(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M)+2048);Count++)
ffffffff8021317b:	48 8b 05 de 9d 05 00 	mov    0x59dde(%rip),%rax        # ffffffff8026cf60 <RME_X64_Layout+0x260>
ffffffff80213182:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff80213186:	48 85 c0             	test   %rax,%rax
ffffffff80213189:	0f 84 cb 00 00 00    	je     ffffffff8021325a <__RME_Boot+0x92a>
ffffffff8021318f:	41 bd 00 08 00 00    	mov    $0x800,%r13d
    {
    	Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
		Phys_Addr=RME_X64_MMU_ADDR(((ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff80213195:	49 bf 00 f0 ff ff ff 	movabs $0xffffffffff000,%r15
ffffffff8021319c:	ff 0f 00 
ffffffff8021319f:	49 b9 00 00 00 00 00 	movabs $0xffff800000000000,%r9
ffffffff802131a6:	80 ff ff 
    RME_PRINTK_S(", [0x");
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M));
    RME_PRINTK_S(", 0x");
    for(Count=2048;Count<(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M)+2048);Count++)
    {
    	Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff802131a9:	4c 89 e8             	mov    %r13,%rax
ffffffff802131ac:	4c 89 ea             	mov    %r13,%rdx
		Phys_Addr=RME_X64_MMU_ADDR(((ptr_t*)Phys_Addr)[Count&0x1FF]);
    	RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802131af:	4c 89 e6             	mov    %r12,%rsi
    RME_PRINTK_S(", [0x");
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M));
    RME_PRINTK_S(", 0x");
    for(Count=2048;Count<(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M)+2048);Count++)
    {
    	Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff802131b2:	48 c1 f8 12          	sar    $0x12,%rax
ffffffff802131b6:	48 c1 fa 09          	sar    $0x9,%rdx
		Phys_Addr=RME_X64_MMU_ADDR(((ptr_t*)Phys_Addr)[Count&0x1FF]);
    	RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802131ba:	48 c1 ee 09          	shr    $0x9,%rsi
    RME_PRINTK_S(", [0x");
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M));
    RME_PRINTK_S(", 0x");
    for(Count=2048;Count<(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M)+2048);Count++)
    {
    	Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff802131be:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff802131c4:	48 c1 e0 09          	shl    $0x9,%rax
		Phys_Addr=RME_X64_MMU_ADDR(((ptr_t*)Phys_Addr)[Count&0x1FF]);
    	RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802131c8:	48 83 c6 11          	add    $0x11,%rsi
    RME_PRINTK_S(", [0x");
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M));
    RME_PRINTK_S(", 0x");
    for(Count=2048;Count<(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M)+2048);Count++)
    {
    	Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
ffffffff802131cc:	48 8d 84 02 00 02 00 	lea    0x200(%rdx,%rax,1),%rax
ffffffff802131d3:	00 
		Phys_Addr=RME_X64_MMU_ADDR(((ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff802131d4:	4c 89 fa             	mov    %r15,%rdx
    	RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802131d7:	4c 89 e1             	mov    %r12,%rcx
ffffffff802131da:	81 e1 ff 01 00 00    	and    $0x1ff,%ecx
ffffffff802131e0:	48 81 ce 00 80 01 00 	or     $0x18000,%rsi
ffffffff802131e7:	41 b8 3f 00 00 00    	mov    $0x3f,%r8d
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M));
    RME_PRINTK_S(", 0x");
    for(Count=2048;Count<(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M)+2048);Count++)
    {
    	Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
		Phys_Addr=RME_X64_MMU_ADDR(((ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff802131ed:	48 23 14 c5 00 90 10 	and    -0x7fef7000(,%rax,8),%rdx
ffffffff802131f4:	80 
    	RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802131f5:	48 89 ef             	mov    %rbp,%rdi
ffffffff802131f8:	4c 89 0c 24          	mov    %r9,(%rsp)
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M));
    RME_PRINTK_S(", 0x");
    for(Count=2048;Count<(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M)+2048);Count++)
    {
    	Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
		Phys_Addr=RME_X64_MMU_ADDR(((ptr_t*)Phys_Addr)[Count&0x1FF]);
ffffffff802131fc:	48 89 d0             	mov    %rdx,%rax
ffffffff802131ff:	4c 89 ea             	mov    %r13,%rdx
ffffffff80213202:	81 e2 ff 01 00 00    	and    $0x1ff,%edx
ffffffff80213208:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
    	RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff8021320c:	4c 89 fa             	mov    %r15,%rdx
ffffffff8021320f:	4a 23 14 08          	and    (%rax,%r9,1),%rdx
ffffffff80213213:	e8 58 47 00 00       	callq  ffffffff80217970 <_RME_Pgtbl_Boot_Add>
ffffffff80213218:	48 85 c0             	test   %rax,%rax
ffffffff8021321b:	4c 8b 0c 24          	mov    (%rsp),%r9
ffffffff8021321f:	0f 85 8d 02 00 00    	jne    ffffffff802134b2 <__RME_Boot+0xb82>
    RME_PRINTK_S("\r\nKmem2 pages: 0x");
    RME_PRINTK_U(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M));
    RME_PRINTK_S(", [0x");
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M));
    RME_PRINTK_S(", 0x");
    for(Count=2048;Count<(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M)+2048);Count++)
ffffffff80213225:	48 8b 05 34 9d 05 00 	mov    0x59d34(%rip),%rax        # ffffffff8026cf60 <RME_X64_Layout+0x260>
ffffffff8021322c:	49 83 c5 01          	add    $0x1,%r13
    {
    	Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
		Phys_Addr=RME_X64_MMU_ADDR(((ptr_t*)Phys_Addr)[Count&0x1FF]);
    	RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
    			                       Phys_Addr, Page_Ptr&0x1FF, RME_PGTBL_ALL_PERM)==0);
		Page_Ptr++;
ffffffff80213230:	49 8d 54 24 01       	lea    0x1(%r12),%rdx
    RME_PRINTK_S("\r\nKmem2 pages: 0x");
    RME_PRINTK_U(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M));
    RME_PRINTK_S(", [0x");
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M));
    RME_PRINTK_S(", 0x");
    for(Count=2048;Count<(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M)+2048);Count++)
ffffffff80213235:	48 c1 e8 15          	shr    $0x15,%rax
ffffffff80213239:	48 05 00 08 00 00    	add    $0x800,%rax
ffffffff8021323f:	4c 39 e8             	cmp    %r13,%rax
ffffffff80213242:	76 08                	jbe    ffffffff8021324c <__RME_Boot+0x91c>
    {
    	Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
		Phys_Addr=RME_X64_MMU_ADDR(((ptr_t*)Phys_Addr)[Count&0x1FF]);
    	RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
    			                       Phys_Addr, Page_Ptr&0x1FF, RME_PGTBL_ALL_PERM)==0);
		Page_Ptr++;
ffffffff80213244:	49 89 d4             	mov    %rdx,%r12
ffffffff80213247:	e9 5d ff ff ff       	jmpq   ffffffff802131a9 <__RME_Boot+0x879>
ffffffff8021324c:	4c 89 e0             	mov    %r12,%rax
ffffffff8021324f:	48 c1 e0 15          	shl    $0x15,%rax
ffffffff80213253:	4c 8d b8 ff ff 3f 00 	lea    0x3fffff(%rax),%r15
    }
    RME_PRINTK_U(Page_Ptr*RME_POW2(RME_PGTBL_SIZE_2M)+RME_POW2(RME_PGTBL_SIZE_2M)-1);
ffffffff8021325a:	4c 89 ff             	mov    %r15,%rdi
ffffffff8021325d:	e8 ee 3b 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("]");
ffffffff80213262:	48 c7 c7 fb e6 21 80 	mov    $0xffffffff8021e6fb,%rdi
ffffffff80213269:	e8 a2 3c 00 00       	callq  ffffffff80216f10 <RME_Print_String>

    /* Activate the first process - This process cannot be deleted */
    RME_ASSERT(_RME_Proc_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_INIT_PROC,
ffffffff8021326e:	31 c9                	xor    %ecx,%ecx
ffffffff80213270:	31 f6                	xor    %esi,%esi
ffffffff80213272:	4d 89 f1             	mov    %r14,%r9
ffffffff80213275:	41 b8 00 80 01 00    	mov    $0x18000,%r8d
ffffffff8021327b:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff80213280:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213283:	e8 f8 5d 00 00       	callq  ffffffff80219080 <_RME_Proc_Boot_Crt>
ffffffff80213288:	48 85 c0             	test   %rax,%rax
ffffffff8021328b:	74 6c                	je     ffffffff802132f9 <__RME_Boot+0x9c9>
ffffffff8021328d:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213294:	e8 77 3c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213299:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff802132a0:	e8 6b 3c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802132a5:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff802132ac:	e8 5f 3c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802132b1:	bf bc 05 00 00       	mov    $0x5bc,%edi
ffffffff802132b6:	e8 15 3a 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff802132bb:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802132c2:	e8 49 3c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802132c7:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff802132ce:	e8 3d 3c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802132d3:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff802132da:	e8 31 3c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802132df:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff802132e6:	e8 25 3c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802132eb:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802132f2:	e8 19 3c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802132f7:	eb fe                	jmp    ffffffff802132f7 <__RME_Boot+0x9c7>
                                  RME_BOOT_CAPTBL, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PML4), Cur_Addr)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_PROC_SIZE);

    /* Create the initial kernel function capability */
    RME_ASSERT(_RME_Kern_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_INIT_KERN)==0);
ffffffff802132f9:	31 f6                	xor    %esi,%esi
ffffffff802132fb:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80213300:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213303:	e8 08 2c 00 00       	callq  ffffffff80215f10 <_RME_Kern_Boot_Crt>
ffffffff80213308:	48 85 c0             	test   %rax,%rax
    RME_PRINTK_S("]");

    /* Activate the first process - This process cannot be deleted */
    RME_ASSERT(_RME_Proc_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_INIT_PROC,
                                  RME_BOOT_CAPTBL, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PML4), Cur_Addr)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_PROC_SIZE);
ffffffff8021330b:	4c 8d a3 20 10 00 00 	lea    0x1020(%rbx),%r12

    /* Create the initial kernel function capability */
    RME_ASSERT(_RME_Kern_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_INIT_KERN)==0);
ffffffff80213312:	74 6c                	je     ffffffff80213380 <__RME_Boot+0xa50>
ffffffff80213314:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021331b:	e8 f0 3b 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213320:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213327:	e8 e4 3b 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021332c:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213333:	e8 d8 3b 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213338:	bf c0 05 00 00       	mov    $0x5c0,%edi
ffffffff8021333d:	e8 8e 39 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213342:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213349:	e8 c2 3b 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021334e:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213355:	e8 b6 3b 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021335a:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213361:	e8 aa 3b 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213366:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff8021336d:	e8 9e 3b 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213372:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213379:	e8 92 3b 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021337e:	eb fe                	jmp    ffffffff8021337e <__RME_Boot+0xa4e>

    /* Create a capability table for initial kernel memory capabilities. We need a few for Kmem1, and another one for Kmem2 */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_KMEM, Cur_Addr, RME_X64_KMEM1_MAXSEGS+1)==0);
ffffffff80213380:	31 f6                	xor    %esi,%esi
ffffffff80213382:	41 b8 21 00 00 00    	mov    $0x21,%r8d
ffffffff80213388:	4c 89 e1             	mov    %r12,%rcx
ffffffff8021338b:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff80213390:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213393:	e8 d8 15 00 00       	callq  ffffffff80214970 <_RME_Captbl_Boot_Crt>
ffffffff80213398:	48 85 c0             	test   %rax,%rax
ffffffff8021339b:	0f 85 c2 04 00 00    	jne    ffffffff80213863 <__RME_Boot+0xf33>
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_KMEM1_MAXSEGS+1));
    /* Create Kmem1 capabilities - can create page tables here */
    for(Count=0;Count<RME_X64_Layout.Kmem1_Trunks;Count++)
ffffffff802133a1:	48 8b 05 98 99 05 00 	mov    0x59998(%rip),%rax        # ffffffff8026cd40 <RME_X64_Layout+0x40>
    /* Create the initial kernel function capability */
    RME_ASSERT(_RME_Kern_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_INIT_KERN)==0);

    /* Create a capability table for initial kernel memory capabilities. We need a few for Kmem1, and another one for Kmem2 */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_KMEM, Cur_Addr, RME_X64_KMEM1_MAXSEGS+1)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_KMEM1_MAXSEGS+1));
ffffffff802133a8:	48 81 c3 60 18 00 00 	add    $0x1860,%rbx
    /* Create Kmem1 capabilities - can create page tables here */
    for(Count=0;Count<RME_X64_Layout.Kmem1_Trunks;Count++)
ffffffff802133af:	45 31 e4             	xor    %r12d,%r12d
ffffffff802133b2:	48 85 c0             	test   %rax,%rax
ffffffff802133b5:	74 55                	je     ffffffff8021340c <__RME_Boot+0xadc>
    {
		RME_ASSERT(_RME_Kmem_Boot_Crt(RME_X64_CPT,
ffffffff802133b7:	49 8d 44 24 08       	lea    0x8(%r12),%rax
ffffffff802133bc:	49 8d 54 24 28       	lea    0x28(%r12),%rdx
ffffffff802133c1:	41 b9 3f 00 00 00    	mov    $0x3f,%r9d
ffffffff802133c7:	48 89 ef             	mov    %rbp,%rdi
ffffffff802133ca:	48 8b 34 c5 08 cd 26 	mov    -0x7fd932f8(,%rax,8),%rsi
ffffffff802133d1:	80 
ffffffff802133d2:	48 8b 14 d5 08 cd 26 	mov    -0x7fd932f8(,%rdx,8),%rdx
ffffffff802133d9:	80 
ffffffff802133da:	48 8b 0c c5 08 cd 26 	mov    -0x7fd932f8(,%rax,8),%rcx
ffffffff802133e1:	80 
ffffffff802133e2:	4c 8d 04 16          	lea    (%rsi,%rdx,1),%r8
ffffffff802133e6:	4c 89 e2             	mov    %r12,%rdx
ffffffff802133e9:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff802133ee:	e8 8d 2d 00 00       	callq  ffffffff80216180 <_RME_Kmem_Boot_Crt>
ffffffff802133f3:	48 85 c0             	test   %rax,%rax
ffffffff802133f6:	0f 85 22 01 00 00    	jne    ffffffff8021351e <__RME_Boot+0xbee>

    /* Create a capability table for initial kernel memory capabilities. We need a few for Kmem1, and another one for Kmem2 */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_KMEM, Cur_Addr, RME_X64_KMEM1_MAXSEGS+1)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_KMEM1_MAXSEGS+1));
    /* Create Kmem1 capabilities - can create page tables here */
    for(Count=0;Count<RME_X64_Layout.Kmem1_Trunks;Count++)
ffffffff802133fc:	48 8b 05 3d 99 05 00 	mov    0x5993d(%rip),%rax        # ffffffff8026cd40 <RME_X64_Layout+0x40>
ffffffff80213403:	49 83 c4 01          	add    $0x1,%r12
ffffffff80213407:	4c 39 e0             	cmp    %r12,%rax
ffffffff8021340a:	77 ab                	ja     ffffffff802133b7 <__RME_Boot+0xa87>
									  RME_X64_Layout.Kmem1_Start[Count]+RME_X64_Layout.Kmem1_Size[Count],
									  RME_KMEM_FLAG_CAPTBL|RME_KMEM_FLAG_PGTBL|RME_KMEM_FLAG_PROC|
									  RME_KMEM_FLAG_THD|RME_KMEM_FLAG_SIG|RME_KMEM_FLAG_INV)==0);
    }
    /* Create Kmem2 capability - cannot create page tables here */
    RME_ASSERT(_RME_Kmem_Boot_Crt(RME_X64_CPT,
ffffffff8021340c:	48 8b 15 45 9b 05 00 	mov    0x59b45(%rip),%rdx        # ffffffff8026cf58 <RME_X64_Layout+0x258>
ffffffff80213413:	48 8b 05 46 9b 05 00 	mov    0x59b46(%rip),%rax        # ffffffff8026cf60 <RME_X64_Layout+0x260>
ffffffff8021341a:	41 b9 3d 00 00 00    	mov    $0x3d,%r9d
ffffffff80213420:	48 8b 0d 31 9b 05 00 	mov    0x59b31(%rip),%rcx        # ffffffff8026cf58 <RME_X64_Layout+0x258>
ffffffff80213427:	be 05 00 00 00       	mov    $0x5,%esi
ffffffff8021342c:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021342f:	4c 8d 04 02          	lea    (%rdx,%rax,1),%r8
ffffffff80213433:	ba 20 00 00 00       	mov    $0x20,%edx
ffffffff80213438:	e8 43 2d 00 00       	callq  ffffffff80216180 <_RME_Kmem_Boot_Crt>
ffffffff8021343d:	48 85 c0             	test   %rax,%rax
ffffffff80213440:	0f 84 44 01 00 00    	je     ffffffff8021358a <__RME_Boot+0xc5a>
ffffffff80213446:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021344d:	e8 be 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213452:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213459:	e8 b2 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021345e:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213465:	e8 a6 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021346a:	bf d5 05 00 00       	mov    $0x5d5,%edi
ffffffff8021346f:	e8 5c 38 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213474:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021347b:	e8 90 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213480:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213487:	e8 84 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021348c:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213493:	e8 78 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213498:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff8021349f:	e8 6c 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802134a4:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802134ab:	e8 60 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802134b0:	eb fe                	jmp    ffffffff802134b0 <__RME_Boot+0xb80>
    RME_PRINTK_S(", 0x");
    for(Count=2048;Count<(RME_X64_Layout.Kmem2_Size/RME_POW2(RME_PGTBL_SIZE_2M)+2048);Count++)
    {
    	Phys_Addr=RME_X64_PA2VA(RME_X64_MMU_ADDR(RME_X64_Kpgt.PDP[Count>>18][(Count>>9)&0x1FF]));
		Phys_Addr=RME_X64_MMU_ADDR(((ptr_t*)Phys_Addr)[Count&0x1FF]);
    	RME_ASSERT(_RME_Pgtbl_Boot_Add(RME_X64_CPT, RME_CAPID(RME_BOOT_TBL_PGTBL,RME_BOOT_PDE(Page_Ptr>>9)),
ffffffff802134b2:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff802134b9:	e8 52 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802134be:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff802134c5:	e8 46 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802134ca:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff802134d1:	e8 3a 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802134d6:	bf b4 05 00 00       	mov    $0x5b4,%edi
ffffffff802134db:	e8 f0 37 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff802134e0:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802134e7:	e8 24 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802134ec:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff802134f3:	e8 18 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802134f8:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff802134ff:	e8 0c 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213504:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff8021350b:	e8 00 3a 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213510:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213517:	e8 f4 39 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021351c:	eb fe                	jmp    ffffffff8021351c <__RME_Boot+0xbec>
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_KMEM, Cur_Addr, RME_X64_KMEM1_MAXSEGS+1)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_KMEM1_MAXSEGS+1));
    /* Create Kmem1 capabilities - can create page tables here */
    for(Count=0;Count<RME_X64_Layout.Kmem1_Trunks;Count++)
    {
		RME_ASSERT(_RME_Kmem_Boot_Crt(RME_X64_CPT,
ffffffff8021351e:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213525:	e8 e6 39 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021352a:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213531:	e8 da 39 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213536:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021353d:	e8 ce 39 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213542:	bf cd 05 00 00       	mov    $0x5cd,%edi
ffffffff80213547:	e8 84 37 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021354c:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213553:	e8 b8 39 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213558:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8021355f:	e8 ac 39 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213564:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021356b:	e8 a0 39 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213570:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213577:	e8 94 39 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021357c:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213583:	e8 88 39 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213588:	eb fe                	jmp    ffffffff80213588 <__RME_Boot+0xc58>
    		                      RME_X64_Layout.Kmem2_Start+RME_X64_Layout.Kmem2_Size,
								  RME_KMEM_FLAG_CAPTBL|RME_KMEM_FLAG_PROC|
								  RME_KMEM_FLAG_THD|RME_KMEM_FLAG_SIG|RME_KMEM_FLAG_INV)==0);

    /* Create the initial kernel endpoints for timer ticks */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021358a:	4c 8b 05 57 97 05 00 	mov    0x59757(%rip),%r8        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80213591:	31 f6                	xor    %esi,%esi
ffffffff80213593:	48 89 d9             	mov    %rbx,%rcx
ffffffff80213596:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff8021359b:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021359e:	e8 cd 13 00 00       	callq  ffffffff80214970 <_RME_Captbl_Boot_Crt>
ffffffff802135a3:	48 85 c0             	test   %rax,%rax
ffffffff802135a6:	0f 85 8f 03 00 00    	jne    ffffffff8021393b <__RME_Boot+0x100b>
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
ffffffff802135ac:	48 8b 05 35 97 05 00 	mov    0x59735(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff802135b3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802135b7:	48 01 c3             	add    %rax,%rbx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff802135ba:	48 8b 05 27 97 05 00 	mov    0x59727(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff802135c1:	48 85 c0             	test   %rax,%rax
ffffffff802135c4:	74 3b                	je     ffffffff80213601 <__RME_Boot+0xcd1>
ffffffff802135c6:	45 31 e4             	xor    %r12d,%r12d
    {
		RME_Tick_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count, Cur_Addr)==0);
ffffffff802135c9:	48 89 d9             	mov    %rbx,%rcx
ffffffff802135cc:	4c 89 e2             	mov    %r12,%rdx
ffffffff802135cf:	be 06 00 00 00       	mov    $0x6,%esi
ffffffff802135d4:	48 89 ef             	mov    %rbp,%rdi
    /* Create the initial kernel endpoints for timer ticks */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
    {
		RME_Tick_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
ffffffff802135d7:	4a 89 1c e5 00 20 22 	mov    %rbx,-0x7fdde000(,%r12,8)
ffffffff802135de:	80 
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count, Cur_Addr)==0);
ffffffff802135df:	e8 1c 95 00 00       	callq  ffffffff8021cb00 <_RME_Sig_Boot_Crt>
ffffffff802135e4:	48 85 c0             	test   %rax,%rax
ffffffff802135e7:	0f 85 e2 02 00 00    	jne    ffffffff802138cf <__RME_Boot+0xf9f>
								  RME_KMEM_FLAG_THD|RME_KMEM_FLAG_SIG|RME_KMEM_FLAG_INV)==0);

    /* Create the initial kernel endpoints for timer ticks */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff802135ed:	48 8b 05 f4 96 05 00 	mov    0x596f4(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff802135f4:	49 83 c4 01          	add    $0x1,%r12
    {
		RME_Tick_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count, Cur_Addr)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_SIG_SIZE);
ffffffff802135f8:	48 83 c3 20          	add    $0x20,%rbx
								  RME_KMEM_FLAG_THD|RME_KMEM_FLAG_SIG|RME_KMEM_FLAG_INV)==0);

    /* Create the initial kernel endpoints for timer ticks */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff802135fc:	49 39 c4             	cmp    %rax,%r12
ffffffff802135ff:	72 c8                	jb     ffffffff802135c9 <__RME_Boot+0xc99>
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count, Cur_Addr)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_SIG_SIZE);
    }

    /* Create the initial kernel endpoints for thread faults */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_FAULT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80213601:	4c 8b 05 e0 96 05 00 	mov    0x596e0(%rip),%r8        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80213608:	31 f6                	xor    %esi,%esi
ffffffff8021360a:	48 89 d9             	mov    %rbx,%rcx
ffffffff8021360d:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80213612:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213615:	e8 56 13 00 00       	callq  ffffffff80214970 <_RME_Captbl_Boot_Crt>
ffffffff8021361a:	48 85 c0             	test   %rax,%rax
ffffffff8021361d:	0f 85 f0 03 00 00    	jne    ffffffff80213a13 <__RME_Boot+0x10e3>
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
ffffffff80213623:	48 8b 05 be 96 05 00 	mov    0x596be(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff8021362a:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021362e:	48 01 c3             	add    %rax,%rbx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80213631:	48 8b 05 b0 96 05 00 	mov    0x596b0(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80213638:	48 85 c0             	test   %rax,%rax
ffffffff8021363b:	74 3b                	je     ffffffff80213678 <__RME_Boot+0xd48>
ffffffff8021363d:	45 31 e4             	xor    %r12d,%r12d
    {
		RME_Fault_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_FAULT, Count, Cur_Addr)==0);
ffffffff80213640:	48 89 d9             	mov    %rbx,%rcx
ffffffff80213643:	4c 89 e2             	mov    %r12,%rdx
ffffffff80213646:	be 07 00 00 00       	mov    $0x7,%esi
ffffffff8021364b:	48 89 ef             	mov    %rbp,%rdi
    /* Create the initial kernel endpoints for thread faults */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_FAULT, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
    {
		RME_Fault_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
ffffffff8021364e:	4a 89 1c e5 00 18 22 	mov    %rbx,-0x7fdde800(,%r12,8)
ffffffff80213655:	80 
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_FAULT, Count, Cur_Addr)==0);
ffffffff80213656:	e8 a5 94 00 00       	callq  ffffffff8021cb00 <_RME_Sig_Boot_Crt>
ffffffff8021365b:	48 85 c0             	test   %rax,%rax
ffffffff8021365e:	0f 85 43 03 00 00    	jne    ffffffff802139a7 <__RME_Boot+0x1077>
    }

    /* Create the initial kernel endpoints for thread faults */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_FAULT, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80213664:	48 8b 05 7d 96 05 00 	mov    0x5967d(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff8021366b:	49 83 c4 01          	add    $0x1,%r12
    {
		RME_Fault_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_FAULT, Count, Cur_Addr)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_SIG_SIZE);
ffffffff8021366f:	48 83 c3 20          	add    $0x20,%rbx
    }

    /* Create the initial kernel endpoints for thread faults */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_FAULT, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff80213673:	49 39 c4             	cmp    %rax,%r12
ffffffff80213676:	72 c8                	jb     ffffffff80213640 <__RME_Boot+0xd10>
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_FAULT, Count, Cur_Addr)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_SIG_SIZE);
    }

    /* Create the initial kernel endpoints for all other interrupts */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80213678:	4c 8b 05 69 96 05 00 	mov    0x59669(%rip),%r8        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff8021367f:	31 f6                	xor    %esi,%esi
ffffffff80213681:	48 89 d9             	mov    %rbx,%rcx
ffffffff80213684:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80213689:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021368c:	e8 df 12 00 00       	callq  ffffffff80214970 <_RME_Captbl_Boot_Crt>
ffffffff80213691:	48 85 c0             	test   %rax,%rax
ffffffff80213694:	0f 85 51 04 00 00    	jne    ffffffff80213aeb <__RME_Boot+0x11bb>
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
ffffffff8021369a:	48 8b 05 47 96 05 00 	mov    0x59647(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff802136a1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802136a5:	48 01 c3             	add    %rax,%rbx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff802136a8:	48 8b 05 39 96 05 00 	mov    0x59639(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff802136af:	48 85 c0             	test   %rax,%rax
ffffffff802136b2:	74 3b                	je     ffffffff802136ef <__RME_Boot+0xdbf>
ffffffff802136b4:	45 31 e4             	xor    %r12d,%r12d
    {
		RME_Int_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count, Cur_Addr)==0);
ffffffff802136b7:	48 89 d9             	mov    %rbx,%rcx
ffffffff802136ba:	4c 89 e2             	mov    %r12,%rdx
ffffffff802136bd:	be 08 00 00 00       	mov    $0x8,%esi
ffffffff802136c2:	48 89 ef             	mov    %rbp,%rdi
    /* Create the initial kernel endpoints for all other interrupts */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
    {
		RME_Int_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
ffffffff802136c5:	4a 89 1c e5 00 10 22 	mov    %rbx,-0x7fddf000(,%r12,8)
ffffffff802136cc:	80 
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count, Cur_Addr)==0);
ffffffff802136cd:	e8 2e 94 00 00       	callq  ffffffff8021cb00 <_RME_Sig_Boot_Crt>
ffffffff802136d2:	48 85 c0             	test   %rax,%rax
ffffffff802136d5:	0f 85 a4 03 00 00    	jne    ffffffff80213a7f <__RME_Boot+0x114f>
    }

    /* Create the initial kernel endpoints for all other interrupts */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff802136db:	48 8b 05 06 96 05 00 	mov    0x59606(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff802136e2:	49 83 c4 01          	add    $0x1,%r12
    {
		RME_Int_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count, Cur_Addr)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_SIG_SIZE);
ffffffff802136e6:	48 83 c3 20          	add    $0x20,%rbx
    }

    /* Create the initial kernel endpoints for all other interrupts */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff802136ea:	49 39 c4             	cmp    %rax,%r12
ffffffff802136ed:	72 c8                	jb     ffffffff802136b7 <__RME_Boot+0xd87>
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count, Cur_Addr)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_SIG_SIZE);
    }

    /* Activate the first thread, and set its priority */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff802136ef:	4c 8b 05 f2 95 05 00 	mov    0x595f2(%rip),%r8        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff802136f6:	31 f6                	xor    %esi,%esi
ffffffff802136f8:	48 89 d9             	mov    %rbx,%rcx
ffffffff802136fb:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80213700:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213703:	e8 68 12 00 00       	callq  ffffffff80214970 <_RME_Captbl_Boot_Crt>
ffffffff80213708:	48 85 c0             	test   %rax,%rax
ffffffff8021370b:	0f 85 b2 04 00 00    	jne    ffffffff80213bc3 <__RME_Boot+0x1293>
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
ffffffff80213711:	48 8b 05 d0 95 05 00 	mov    0x595d0(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80213718:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021371c:	48 01 c3             	add    %rax,%rbx
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021371f:	48 8b 05 c2 95 05 00 	mov    0x595c2(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80213726:	48 85 c0             	test   %rax,%rax
ffffffff80213729:	74 46                	je     ffffffff80213771 <__RME_Boot+0xe41>
ffffffff8021372b:	45 31 e4             	xor    %r12d,%r12d
    {
    	RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PROC, Cur_Addr, 0, Count)>=0);
ffffffff8021372e:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80213732:	45 31 c9             	xor    %r9d,%r9d
ffffffff80213735:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff8021373a:	41 54                	push   %r12
ffffffff8021373c:	4c 89 e2             	mov    %r12,%rdx
ffffffff8021373f:	49 89 d8             	mov    %rbx,%r8
ffffffff80213742:	be 03 00 00 00       	mov    $0x3,%esi
ffffffff80213747:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021374a:	e8 81 6b 00 00       	callq  ffffffff8021a2d0 <_RME_Thd_Boot_Crt>
ffffffff8021374f:	48 85 c0             	test   %rax,%rax
ffffffff80213752:	5a                   	pop    %rdx
ffffffff80213753:	59                   	pop    %rcx
ffffffff80213754:	0f 88 fd 03 00 00    	js     ffffffff80213b57 <__RME_Boot+0x1227>
    }

    /* Activate the first thread, and set its priority */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021375a:	48 8b 05 87 95 05 00 	mov    0x59587(%rip),%rax        # ffffffff8026cce8 <RME_X64_Num_CPU>
ffffffff80213761:	49 83 c4 01          	add    $0x1,%r12
    {
    	RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PROC, Cur_Addr, 0, Count)>=0);
    	Cur_Addr+=RME_KOTBL_ROUND(RME_THD_SIZE);
ffffffff80213765:	48 81 c3 d0 09 00 00 	add    $0x9d0,%rbx
    }

    /* Activate the first thread, and set its priority */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
ffffffff8021376c:	49 39 c4             	cmp    %rax,%r12
ffffffff8021376f:	72 bd                	jb     ffffffff8021372e <__RME_Boot+0xdfe>
    	RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PROC, Cur_Addr, 0, Count)>=0);
    	Cur_Addr+=RME_KOTBL_ROUND(RME_THD_SIZE);
    }

    RME_PRINTK_S("\r\nKotbl registration end offset: 0x");
    RME_PRINTK_U(((Cur_Addr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER)/8);
ffffffff80213771:	48 bd 00 00 00 00 00 	movabs $0x800000000000,%rbp
ffffffff80213778:	80 00 00 
    {
    	RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PROC, Cur_Addr, 0, Count)>=0);
    	Cur_Addr+=RME_KOTBL_ROUND(RME_THD_SIZE);
    }

    RME_PRINTK_S("\r\nKotbl registration end offset: 0x");
ffffffff8021377b:	48 c7 c7 80 e3 21 80 	mov    $0xffffffff8021e380,%rdi
ffffffff80213782:	e8 89 37 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(((Cur_Addr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER)/8);
ffffffff80213787:	48 8d 3c 2b          	lea    (%rbx,%rbp,1),%rdi
ffffffff8021378b:	48 c1 ef 07          	shr    $0x7,%rdi
ffffffff8021378f:	e8 bc 36 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
    RME_PRINTK_S("\r\nKmem1 frontier: 0x");
ffffffff80213794:	48 c7 c7 15 e7 21 80 	mov    $0xffffffff8021e715,%rdi
ffffffff8021379b:	e8 70 37 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_U(Cur_Addr);
ffffffff802137a0:	48 89 df             	mov    %rbx,%rdi
ffffffff802137a3:	e8 a8 36 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>

    /* Print sizes and halt */
    RME_PRINTK_S("\r\nThread object size: ");
ffffffff802137a8:	48 c7 c7 2a e7 21 80 	mov    $0xffffffff8021e72a,%rdi
ffffffff802137af:	e8 5c 37 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_I(sizeof(struct RME_Thd_Struct)/sizeof(ptr_t));
ffffffff802137b4:	bf 39 01 00 00       	mov    $0x139,%edi
ffffffff802137b9:	e8 12 35 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
    RME_PRINTK_S("\r\nProcess object size: ");
ffffffff802137be:	48 c7 c7 41 e7 21 80 	mov    $0xffffffff8021e741,%rdi
ffffffff802137c5:	e8 46 37 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_I(sizeof(struct RME_Proc_Struct)/sizeof(ptr_t));
ffffffff802137ca:	bf 03 00 00 00       	mov    $0x3,%edi
ffffffff802137cf:	e8 fc 34 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
    RME_PRINTK_S("\r\nInvocation object size: ");
ffffffff802137d4:	48 c7 c7 59 e7 21 80 	mov    $0xffffffff8021e759,%rdi
ffffffff802137db:	e8 30 37 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_I(sizeof(struct RME_Inv_Struct)/sizeof(ptr_t));
ffffffff802137e0:	bf 09 00 00 00       	mov    $0x9,%edi
ffffffff802137e5:	e8 e6 34 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
    RME_PRINTK_S("\r\nEndpoint object size: ");
ffffffff802137ea:	48 c7 c7 74 e7 21 80 	mov    $0xffffffff8021e774,%rdi
ffffffff802137f1:	e8 1a 37 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    RME_PRINTK_I(sizeof(struct RME_Sig_Struct)/sizeof(ptr_t));
ffffffff802137f6:	bf 03 00 00 00       	mov    $0x3,%edi
ffffffff802137fb:	e8 d0 34 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>

    /* Start other processors, if there are any */
    __RME_X64_SMP_Init();
ffffffff80213800:	e8 6b db ff ff       	callq  ffffffff80211370 <__RME_X64_SMP_Init>
    /* Enable timer interrupts */
    //__RME_X64_IOAPIC_Int_Enable(2,0);
    /* Change page tables */
    __RME_Pgtbl_Set(RME_CAP_GETOBJ(RME_Cur_Thd[RME_CPUID()]->Sched.Proc->Pgtbl,ptr_t));
ffffffff80213805:	e8 35 80 ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
ffffffff8021380a:	48 8b 04 c5 00 28 22 	mov    -0x7fddd800(,%rax,8),%rax
ffffffff80213811:	80 
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgtbl_Set(ptr_t Pgtbl)
{
	__RME_X64_Pgtbl_Set(RME_X64_VA2PA(Pgtbl));
ffffffff80213812:	48 89 ef             	mov    %rbp,%rdi
    /* Start other processors, if there are any */
    __RME_X64_SMP_Init();
    /* Enable timer interrupts */
    //__RME_X64_IOAPIC_Int_Enable(2,0);
    /* Change page tables */
    __RME_Pgtbl_Set(RME_CAP_GETOBJ(RME_Cur_Thd[RME_CPUID()]->Sched.Proc->Pgtbl,ptr_t));
ffffffff80213815:	48 8b 40 60          	mov    0x60(%rax),%rax
ffffffff80213819:	48 8b 40 10          	mov    0x10(%rax),%rax
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgtbl_Set(ptr_t Pgtbl)
{
	__RME_X64_Pgtbl_Set(RME_X64_VA2PA(Pgtbl));
ffffffff8021381d:	48 03 78 18          	add    0x18(%rax),%rdi
ffffffff80213821:	e8 88 80 ff ff       	callq  ffffffff8020b8ae <__RME_X64_Pgtbl_Set>
    //__RME_X64_IOAPIC_Int_Enable(2,0);
    /* Change page tables */
    __RME_Pgtbl_Set(RME_CAP_GETOBJ(RME_Cur_Thd[RME_CPUID()]->Sched.Proc->Pgtbl,ptr_t));
    /* Load the init process to address 0x00 - It should be smaller than 2MB */
    extern const unsigned char UVM_Init[];
    _RME_Memcpy(0,(void*)UVM_Init,RME_POW2(RME_PGTBL_SIZE_2M));
ffffffff80213826:	ba 00 00 20 00       	mov    $0x200000,%edx
ffffffff8021382b:	48 c7 c6 80 f0 21 80 	mov    $0xffffffff8021f080,%rsi
ffffffff80213832:	31 ff                	xor    %edi,%edi
ffffffff80213834:	e8 b7 22 00 00       	callq  ffffffff80215af0 <_RME_Memcpy>
    /* Write nothing into the KIP now */
    /* Now other processors may proceed */
    RME_X64_CPU_Cnt=0;

    /* Boot into the init thread */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff80213839:	31 d2                	xor    %edx,%edx
ffffffff8021383b:	be 00 08 20 00       	mov    $0x200800,%esi
ffffffff80213840:	31 ff                	xor    %edi,%edi
    /* Load the init process to address 0x00 - It should be smaller than 2MB */
    extern const unsigned char UVM_Init[];
    _RME_Memcpy(0,(void*)UVM_Init,RME_POW2(RME_PGTBL_SIZE_2M));
    /* Write nothing into the KIP now */
    /* Now other processors may proceed */
    RME_X64_CPU_Cnt=0;
ffffffff80213842:	48 c7 05 93 94 05 00 	movq   $0x0,0x59493(%rip)        # ffffffff8026cce0 <RME_X64_CPU_Cnt>
ffffffff80213849:	00 00 00 00 

    /* Boot into the init thread */
    __RME_Enter_User_Mode(0, RME_X64_USTACK(0), 0);
ffffffff8021384d:	e8 7e 80 ff ff       	callq  ffffffff8020b8d0 <__RME_Enter_User_Mode>
    return 0;
}
ffffffff80213852:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80213856:	31 c0                	xor    %eax,%eax
ffffffff80213858:	5b                   	pop    %rbx
ffffffff80213859:	5d                   	pop    %rbp
ffffffff8021385a:	41 5c                	pop    %r12
ffffffff8021385c:	41 5d                	pop    %r13
ffffffff8021385e:	41 5e                	pop    %r14
ffffffff80213860:	41 5f                	pop    %r15
ffffffff80213862:	c3                   	retq   

    /* Create the initial kernel function capability */
    RME_ASSERT(_RME_Kern_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_INIT_KERN)==0);

    /* Create a capability table for initial kernel memory capabilities. We need a few for Kmem1, and another one for Kmem2 */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_KMEM, Cur_Addr, RME_X64_KMEM1_MAXSEGS+1)==0);
ffffffff80213863:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021386a:	e8 a1 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021386f:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213876:	e8 95 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021387b:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213882:	e8 89 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213887:	bf c3 05 00 00       	mov    $0x5c3,%edi
ffffffff8021388c:	e8 3f 34 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213891:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213898:	e8 73 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021389d:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff802138a4:	e8 67 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802138a9:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff802138b0:	e8 5b 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802138b5:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff802138bc:	e8 4f 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802138c1:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802138c8:	e8 43 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802138cd:	eb fe                	jmp    ffffffff802138cd <__RME_Boot+0xf9d>
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
    {
		RME_Tick_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count, Cur_Addr)==0);
ffffffff802138cf:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff802138d6:	e8 35 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802138db:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff802138e2:	e8 29 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802138e7:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff802138ee:	e8 1d 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802138f3:	bf dd 05 00 00       	mov    $0x5dd,%edi
ffffffff802138f8:	e8 d3 33 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff802138fd:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213904:	e8 07 36 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213909:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213910:	e8 fb 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213915:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021391c:	e8 ef 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213921:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213928:	e8 e3 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021392d:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213934:	e8 d7 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213939:	eb fe                	jmp    ffffffff80213939 <__RME_Boot+0x1009>
    		                      RME_X64_Layout.Kmem2_Start+RME_X64_Layout.Kmem2_Size,
								  RME_KMEM_FLAG_CAPTBL|RME_KMEM_FLAG_PROC|
								  RME_KMEM_FLAG_THD|RME_KMEM_FLAG_SIG|RME_KMEM_FLAG_INV)==0);

    /* Create the initial kernel endpoints for timer ticks */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_TIMER, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff8021393b:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213942:	e8 c9 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213947:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff8021394e:	e8 bd 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213953:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021395a:	e8 b1 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021395f:	bf d8 05 00 00       	mov    $0x5d8,%edi
ffffffff80213964:	e8 67 33 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213969:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213970:	e8 9b 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213975:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8021397c:	e8 8f 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213981:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213988:	e8 83 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021398d:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213994:	e8 77 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213999:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802139a0:	e8 6b 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802139a5:	eb fe                	jmp    ffffffff802139a5 <__RME_Boot+0x1075>
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_FAULT, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
    {
		RME_Fault_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_FAULT, Count, Cur_Addr)==0);
ffffffff802139a7:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff802139ae:	e8 5d 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802139b3:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff802139ba:	e8 51 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802139bf:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff802139c6:	e8 45 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802139cb:	bf e7 05 00 00       	mov    $0x5e7,%edi
ffffffff802139d0:	e8 fb 32 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff802139d5:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802139dc:	e8 2f 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802139e1:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff802139e8:	e8 23 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802139ed:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff802139f4:	e8 17 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802139f9:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213a00:	e8 0b 35 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a05:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213a0c:	e8 ff 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a11:	eb fe                	jmp    ffffffff80213a11 <__RME_Boot+0x10e1>
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_TIMER, Count, Cur_Addr)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_SIG_SIZE);
    }

    /* Create the initial kernel endpoints for thread faults */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_FAULT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80213a13:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213a1a:	e8 f1 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a1f:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213a26:	e8 e5 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a2b:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213a32:	e8 d9 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a37:	bf e2 05 00 00       	mov    $0x5e2,%edi
ffffffff80213a3c:	e8 8f 32 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213a41:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213a48:	e8 c3 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a4d:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213a54:	e8 b7 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a59:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213a60:	e8 ab 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a65:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213a6c:	e8 9f 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a71:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213a78:	e8 93 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a7d:	eb fe                	jmp    ffffffff80213a7d <__RME_Boot+0x114d>
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
    {
		RME_Int_Sig[Count]=(struct RME_Sig_Struct*)Cur_Addr;
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count, Cur_Addr)==0);
ffffffff80213a7f:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213a86:	e8 85 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a8b:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213a92:	e8 79 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213a97:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213a9e:	e8 6d 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213aa3:	bf f1 05 00 00       	mov    $0x5f1,%edi
ffffffff80213aa8:	e8 23 32 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213aad:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213ab4:	e8 57 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213ab9:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213ac0:	e8 4b 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213ac5:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213acc:	e8 3f 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213ad1:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213ad8:	e8 33 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213add:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213ae4:	e8 27 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213ae9:	eb fe                	jmp    ffffffff80213ae9 <__RME_Boot+0x11b9>
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_FAULT, Count, Cur_Addr)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_SIG_SIZE);
    }

    /* Create the initial kernel endpoints for all other interrupts */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_INT, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80213aeb:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213af2:	e8 19 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213af7:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213afe:	e8 0d 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b03:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213b0a:	e8 01 34 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b0f:	bf ec 05 00 00       	mov    $0x5ec,%edi
ffffffff80213b14:	e8 b7 31 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213b19:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213b20:	e8 eb 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b25:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213b2c:	e8 df 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b31:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213b38:	e8 d3 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b3d:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213b44:	e8 c7 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b49:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213b50:	e8 bb 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b55:	eb fe                	jmp    ffffffff80213b55 <__RME_Boot+0x1225>
    /* Activate the first thread, and set its priority */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
    Cur_Addr+=RME_KOTBL_ROUND(RME_CAPTBL_SIZE(RME_X64_Num_CPU));
    for(Count=0;Count<RME_X64_Num_CPU;Count++)
    {
    	RME_ASSERT(_RME_Thd_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_THD, Count, RME_BOOT_INIT_PROC, Cur_Addr, 0, Count)>=0);
ffffffff80213b57:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213b5e:	e8 ad 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b63:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213b6a:	e8 a1 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b6f:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213b76:	e8 95 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b7b:	bf fa 05 00 00       	mov    $0x5fa,%edi
ffffffff80213b80:	e8 4b 31 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213b85:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213b8c:	e8 7f 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b91:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213b98:	e8 73 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213b9d:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213ba4:	e8 67 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213ba9:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213bb0:	e8 5b 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213bb5:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213bbc:	e8 4f 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213bc1:	eb fe                	jmp    ffffffff80213bc1 <__RME_Boot+0x1291>
		RME_ASSERT(_RME_Sig_Boot_Crt(RME_X64_CPT, RME_BOOT_TBL_INT, Count, Cur_Addr)==0);
		Cur_Addr+=RME_KOTBL_ROUND(RME_SIG_SIZE);
    }

    /* Activate the first thread, and set its priority */
    RME_ASSERT(_RME_Captbl_Boot_Crt(RME_X64_CPT, RME_BOOT_CAPTBL, RME_BOOT_TBL_THD, Cur_Addr, RME_X64_Num_CPU)==0);
ffffffff80213bc3:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213bca:	e8 41 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213bcf:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213bd6:	e8 35 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213bdb:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213be2:	e8 29 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213be7:	bf f6 05 00 00       	mov    $0x5f6,%edi
ffffffff80213bec:	e8 df 30 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213bf1:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213bf8:	e8 13 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213bfd:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213c04:	e8 07 33 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c09:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213c10:	e8 fb 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c15:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213c1c:	e8 ef 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c21:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213c28:	e8 e3 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c2d:	eb fe                	jmp    ffffffff80213c2d <__RME_Boot+0x12fd>
ffffffff80213c2f:	90                   	nop

ffffffff80213c30 <__RME_Reboot>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Reboot(void)
{
ffffffff80213c30:	48 83 ec 08          	sub    $0x8,%rsp
    /* Currently we cannot parse th FADT yet. We need these info to shutdown the machine */
	/* outportb(FADT->ResetReg.Address, FADT->ResetValue); */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
ffffffff80213c34:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213c3b:	e8 d0 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c40:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213c47:	e8 c4 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c4c:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213c53:	e8 b8 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c58:	bf 2a 06 00 00       	mov    $0x62a,%edi
ffffffff80213c5d:	e8 6e 30 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213c62:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213c69:	e8 a2 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c6e:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213c75:	e8 96 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c7a:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213c81:	e8 8a 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c86:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213c8d:	e8 7e 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c92:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213c99:	e8 72 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213c9e:	eb fe                	jmp    ffffffff80213c9e <__RME_Reboot+0x6e>

ffffffff80213ca0 <__RME_Shutdown>:
Input       : None.
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Shutdown(void)
{
ffffffff80213ca0:	48 83 ec 08          	sub    $0x8,%rsp
    /* Currently we cannot parse th DSDT yet. We need these info to shutdown the machine */
	/* outw(PM1a_CNT,SLP_TYPa|SLP_EN) */
    RME_ASSERT(RME_WORD_BITS!=RME_POW2(RME_WORD_ORDER));
ffffffff80213ca4:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80213cab:	e8 60 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213cb0:	48 c7 c7 a8 e1 21 80 	mov    $0xffffffff8021e1a8,%rdi
ffffffff80213cb7:	e8 54 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213cbc:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80213cc3:	e8 48 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213cc8:	bf 38 06 00 00       	mov    $0x638,%edi
ffffffff80213ccd:	e8 fe 2f 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213cd2:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213cd9:	e8 32 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213cde:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80213ce5:	e8 26 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213cea:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80213cf1:	e8 1a 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213cf6:	48 c7 c7 0c e4 21 80 	mov    $0xffffffff8021e40c,%rdi
ffffffff80213cfd:	e8 0e 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213d02:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80213d09:	e8 02 32 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213d0e:	eb fe                	jmp    ffffffff80213d0e <__RME_Shutdown+0x6e>

ffffffff80213d10 <__RME_Get_Syscall_Param>:
              ptr_t* Param - The parameters.
Return      : None.
******************************************************************************/
void __RME_Get_Syscall_Param(struct RME_Reg_Struct* Reg, ptr_t* Svc, ptr_t* Capid, ptr_t* Param)
{
    *Svc=(Reg->RDI)>>32;
ffffffff80213d10:	8b 47 2c             	mov    0x2c(%rdi),%eax
ffffffff80213d13:	48 89 06             	mov    %rax,(%rsi)
    *Capid=(Reg->RDI)&0xFFFFFFFF;
ffffffff80213d16:	8b 47 28             	mov    0x28(%rdi),%eax
ffffffff80213d19:	48 89 02             	mov    %rax,(%rdx)
    Param[0]=Reg->RSI;
ffffffff80213d1c:	48 8b 47 20          	mov    0x20(%rdi),%rax
ffffffff80213d20:	48 89 01             	mov    %rax,(%rcx)
    Param[1]=Reg->RDX;
ffffffff80213d23:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff80213d27:	48 89 41 08          	mov    %rax,0x8(%rcx)
    Param[2]=Reg->R8;
ffffffff80213d2b:	48 8b 47 38          	mov    0x38(%rdi),%rax
ffffffff80213d2f:	48 89 41 10          	mov    %rax,0x10(%rcx)
ffffffff80213d33:	c3                   	retq   
ffffffff80213d34:	66 90                	xchg   %ax,%ax
ffffffff80213d36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213d3d:	00 00 00 

ffffffff80213d40 <__RME_Set_Syscall_Retval>:
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Syscall_Retval(struct RME_Reg_Struct* Reg, ret_t Retval)
{
    Reg->RAX=(ptr_t)Retval;
ffffffff80213d40:	48 89 37             	mov    %rsi,(%rdi)
ffffffff80213d43:	c3                   	retq   
ffffffff80213d44:	66 90                	xchg   %ax,%ax
ffffffff80213d46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213d4d:	00 00 00 

ffffffff80213d50 <__RME_Get_Inv_Retval>:
Output      : None.
Return      : ptr_t - The return value.
******************************************************************************/
ptr_t __RME_Get_Inv_Retval(struct RME_Reg_Struct* Reg)
{
    return Reg->RSI;
ffffffff80213d50:	48 8b 47 20          	mov    0x20(%rdi),%rax
}
ffffffff80213d54:	c3                   	retq   
ffffffff80213d55:	90                   	nop
ffffffff80213d56:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213d5d:	00 00 00 

ffffffff80213d60 <__RME_Set_Inv_Retval>:
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Set_Inv_Retval(struct RME_Reg_Struct* Reg, ret_t Retval)
{
    Reg->RSI=(ptr_t)Retval;
ffffffff80213d60:	48 89 77 20          	mov    %rsi,0x20(%rdi)
ffffffff80213d64:	c3                   	retq   
ffffffff80213d65:	90                   	nop
ffffffff80213d66:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213d6d:	00 00 00 

ffffffff80213d70 <__RME_Thd_Reg_Init>:
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Init(ptr_t Entry, ptr_t Stack, struct RME_Reg_Struct* Reg)
{
	/* We use the SYSRET path on creation if possible */
	Reg->INT_NUM=0x10000;
ffffffff80213d70:	48 c7 42 78 00 00 01 	movq   $0x10000,0x78(%rdx)
ffffffff80213d77:	00 
	Reg->ERROR_CODE=0;
ffffffff80213d78:	48 c7 82 80 00 00 00 	movq   $0x0,0x80(%rdx)
ffffffff80213d7f:	00 00 00 00 
	Reg->RIP=Entry;
ffffffff80213d83:	48 89 ba 88 00 00 00 	mov    %rdi,0x88(%rdx)
	Reg->CS=RME_X64_SEG_USER_CODE;
ffffffff80213d8a:	48 c7 82 90 00 00 00 	movq   $0x2b,0x90(%rdx)
ffffffff80213d91:	2b 00 00 00 
	/* IOPL 3, IF */
	Reg->RFLAGS=0x3200;
ffffffff80213d95:	48 c7 82 98 00 00 00 	movq   $0x3200,0x98(%rdx)
ffffffff80213d9c:	00 32 00 00 
	Reg->RSP=Stack;
ffffffff80213da0:	48 89 b2 a0 00 00 00 	mov    %rsi,0xa0(%rdx)
	Reg->SS=RME_X64_SEG_USER_DATA;
ffffffff80213da7:	48 c7 82 a8 00 00 00 	movq   $0x23,0xa8(%rdx)
ffffffff80213dae:	23 00 00 00 
ffffffff80213db2:	c3                   	retq   
ffffffff80213db3:	0f 1f 00             	nopl   (%rax)
ffffffff80213db6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213dbd:	00 00 00 

ffffffff80213dc0 <__RME_Thd_Reg_Copy>:
Return      : None.
******************************************************************************/
void __RME_Thd_Reg_Copy(struct RME_Reg_Struct* Dst, struct RME_Reg_Struct* Src)
{
    /* Make sure that the ordering is the same so the compiler can optimize */
    Dst->RAX=Src->RAX;
ffffffff80213dc0:	48 8b 06             	mov    (%rsi),%rax
ffffffff80213dc3:	48 89 07             	mov    %rax,(%rdi)
    Dst->RBX=Src->RBX;
ffffffff80213dc6:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80213dca:	48 89 47 08          	mov    %rax,0x8(%rdi)
    Dst->RCX=Src->RCX;
ffffffff80213dce:	48 8b 46 10          	mov    0x10(%rsi),%rax
ffffffff80213dd2:	48 89 47 10          	mov    %rax,0x10(%rdi)
    Dst->RDX=Src->RDX;
ffffffff80213dd6:	48 8b 46 18          	mov    0x18(%rsi),%rax
ffffffff80213dda:	48 89 47 18          	mov    %rax,0x18(%rdi)
    Dst->RSI=Src->RSI;
ffffffff80213dde:	48 8b 46 20          	mov    0x20(%rsi),%rax
ffffffff80213de2:	48 89 47 20          	mov    %rax,0x20(%rdi)
    Dst->RDI=Src->RDI;
ffffffff80213de6:	48 8b 46 28          	mov    0x28(%rsi),%rax
ffffffff80213dea:	48 89 47 28          	mov    %rax,0x28(%rdi)
    Dst->RBP=Src->RBP;
ffffffff80213dee:	48 8b 46 30          	mov    0x30(%rsi),%rax
ffffffff80213df2:	48 89 47 30          	mov    %rax,0x30(%rdi)
    Dst->R8=Src->R8;
ffffffff80213df6:	48 8b 46 38          	mov    0x38(%rsi),%rax
ffffffff80213dfa:	48 89 47 38          	mov    %rax,0x38(%rdi)
    Dst->R9=Src->R9;
ffffffff80213dfe:	48 8b 46 40          	mov    0x40(%rsi),%rax
ffffffff80213e02:	48 89 47 40          	mov    %rax,0x40(%rdi)
    Dst->R10=Src->R10;
ffffffff80213e06:	48 8b 46 48          	mov    0x48(%rsi),%rax
ffffffff80213e0a:	48 89 47 48          	mov    %rax,0x48(%rdi)
    Dst->R11=Src->R11;
ffffffff80213e0e:	48 8b 46 50          	mov    0x50(%rsi),%rax
ffffffff80213e12:	48 89 47 50          	mov    %rax,0x50(%rdi)
    Dst->R12=Src->R12;
ffffffff80213e16:	48 8b 46 58          	mov    0x58(%rsi),%rax
ffffffff80213e1a:	48 89 47 58          	mov    %rax,0x58(%rdi)
    Dst->R13=Src->R13;
ffffffff80213e1e:	48 8b 46 60          	mov    0x60(%rsi),%rax
ffffffff80213e22:	48 89 47 60          	mov    %rax,0x60(%rdi)
    Dst->R14=Src->R14;
ffffffff80213e26:	48 8b 46 68          	mov    0x68(%rsi),%rax
ffffffff80213e2a:	48 89 47 68          	mov    %rax,0x68(%rdi)
    Dst->R15=Src->R15;
ffffffff80213e2e:	48 8b 46 70          	mov    0x70(%rsi),%rax
ffffffff80213e32:	48 89 47 70          	mov    %rax,0x70(%rdi)
    /* Don't worry about user modifying INTNUM. If he or she did that it will corrupt userspace */
    Dst->INT_NUM=Src->INT_NUM;
ffffffff80213e36:	48 8b 46 78          	mov    0x78(%rsi),%rax
ffffffff80213e3a:	48 89 47 78          	mov    %rax,0x78(%rdi)
    Dst->ERROR_CODE=Src->ERROR_CODE;
ffffffff80213e3e:	48 8b 86 80 00 00 00 	mov    0x80(%rsi),%rax
ffffffff80213e45:	48 89 87 80 00 00 00 	mov    %rax,0x80(%rdi)
    /* This will always be canonical upon SYSRET, because we will truncate in on return */
    Dst->RIP=Src->RIP;
ffffffff80213e4c:	48 8b 86 88 00 00 00 	mov    0x88(%rsi),%rax
ffffffff80213e53:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
    Dst->CS=Src->CS;
ffffffff80213e5a:	48 8b 86 90 00 00 00 	mov    0x90(%rsi),%rax
ffffffff80213e61:	48 89 87 90 00 00 00 	mov    %rax,0x90(%rdi)
    Dst->RFLAGS=Src->RFLAGS;
ffffffff80213e68:	48 8b 86 98 00 00 00 	mov    0x98(%rsi),%rax
ffffffff80213e6f:	48 89 87 98 00 00 00 	mov    %rax,0x98(%rdi)
    Dst->RSP=Src->RSP;
ffffffff80213e76:	48 8b 86 a0 00 00 00 	mov    0xa0(%rsi),%rax
ffffffff80213e7d:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
    Dst->SS=Src->SS;
ffffffff80213e84:	48 8b 86 a8 00 00 00 	mov    0xa8(%rsi),%rax
ffffffff80213e8b:	48 89 87 a8 00 00 00 	mov    %rax,0xa8(%rdi)
ffffffff80213e92:	c3                   	retq   
ffffffff80213e93:	0f 1f 00             	nopl   (%rax)
ffffffff80213e96:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213e9d:	00 00 00 

ffffffff80213ea0 <__RME_Thd_Cop_Init>:
              ptr_t Stack - The thread stack address.
Output      : struct RME_Reg_Cop_Struct* Cop_Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Init(ptr_t Entry, ptr_t Stack, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80213ea0:	f3 c3                	repz retq 
ffffffff80213ea2:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80213ea6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213ead:	00 00 00 

ffffffff80213eb0 <__RME_Thd_Cop_Save>:
ffffffff80213eb0:	f3 c3                	repz retq 
ffffffff80213eb2:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80213eb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213ebd:	00 00 00 

ffffffff80213ec0 <__RME_Thd_Cop_Restore>:
                                           to save the context of the coprocessor.
Output      : struct RME_Cop_Struct* Cop_Reg - The pointer to the coprocessor contents.
Return      : None.
******************************************************************************/
void __RME_Thd_Cop_Restore(struct RME_Reg_Struct* Reg, struct RME_Cop_Struct* Cop_Reg)
{
ffffffff80213ec0:	f3 c3                	repz retq 
ffffffff80213ec2:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80213ec6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213ecd:	00 00 00 

ffffffff80213ed0 <__RME_Inv_Reg_Init>:
Output      : struct RME_Reg_Struct* Reg - The register set content generated.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Init(ptr_t Param, struct RME_Reg_Struct* Reg)
{
    Reg->RSI=Param;
ffffffff80213ed0:	48 89 7e 20          	mov    %rdi,0x20(%rsi)
ffffffff80213ed4:	c3                   	retq   
ffffffff80213ed5:	90                   	nop
ffffffff80213ed6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213edd:	00 00 00 

ffffffff80213ee0 <__RME_Inv_Reg_Save>:
Output      : struct RME_Iret_Struct* Ret - The invocation return register context.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Save(struct RME_Iret_Struct* Ret, struct RME_Reg_Struct* Reg)
{
    Ret->RIP=Reg->RIP;
ffffffff80213ee0:	48 8b 86 88 00 00 00 	mov    0x88(%rsi),%rax
ffffffff80213ee7:	48 89 07             	mov    %rax,(%rdi)
    Ret->RSP=Reg->RSP;
ffffffff80213eea:	48 8b 86 a0 00 00 00 	mov    0xa0(%rsi),%rax
ffffffff80213ef1:	48 89 47 08          	mov    %rax,0x8(%rdi)
ffffffff80213ef5:	c3                   	retq   
ffffffff80213ef6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213efd:	00 00 00 

ffffffff80213f00 <__RME_Inv_Reg_Restore>:
Output      : struct RME_Reg_Struct* Reg - The register set.
Return      : None.
******************************************************************************/
void __RME_Inv_Reg_Restore(struct RME_Reg_Struct* Reg, struct RME_Iret_Struct* Ret)
{
    Reg->RIP=Ret->RIP;
ffffffff80213f00:	48 8b 06             	mov    (%rsi),%rax
ffffffff80213f03:	48 89 87 88 00 00 00 	mov    %rax,0x88(%rdi)
    Reg->RSP=Ret->RSP;
ffffffff80213f0a:	48 8b 46 08          	mov    0x8(%rsi),%rax
ffffffff80213f0e:	48 89 87 a0 00 00 00 	mov    %rax,0xa0(%rdi)
ffffffff80213f15:	c3                   	retq   
ffffffff80213f16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80213f1d:	00 00 00 

ffffffff80213f20 <__RME_Kern_Func_Handler>:
Output      : None.
Return      : ptr_t - The value that the function returned.
******************************************************************************/
ptr_t __RME_Kern_Func_Handler(struct RME_Reg_Struct* Reg, ptr_t Func_ID,
                              ptr_t Param1, ptr_t Param2)
{
ffffffff80213f20:	48 83 ec 08          	sub    $0x8,%rsp
	/* Now always call the HALT */
	__RME_X64_Halt();
ffffffff80213f24:	e8 8d 79 ff ff       	callq  ffffffff8020b8b6 <__RME_X64_Halt>
    return 0;
}
ffffffff80213f29:	31 c0                	xor    %eax,%eax
ffffffff80213f2b:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80213f2f:	c3                   	retq   

ffffffff80213f30 <__RME_X64_Fault_Handler>:
              ptr_t Reason - The fault source.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Fault_Handler(struct RME_Reg_Struct* Reg, ptr_t Reason)
{
ffffffff80213f30:	55                   	push   %rbp
ffffffff80213f31:	53                   	push   %rbx
ffffffff80213f32:	48 89 f5             	mov    %rsi,%rbp
ffffffff80213f35:	48 89 fb             	mov    %rdi,%rbx
    /* Not handling faults */
	RME_PRINTK_S("\n\r\n\r*** Fault: ");RME_PRINTK_I(Reason);RME_PRINTK_S(" - ");
ffffffff80213f38:	48 c7 c7 8d e7 21 80 	mov    $0xffffffff8021e78d,%rdi
              ptr_t Reason - The fault source.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Fault_Handler(struct RME_Reg_Struct* Reg, ptr_t Reason)
{
ffffffff80213f3f:	48 83 ec 08          	sub    $0x8,%rsp
    /* Not handling faults */
	RME_PRINTK_S("\n\r\n\r*** Fault: ");RME_PRINTK_I(Reason);RME_PRINTK_S(" - ");
ffffffff80213f43:	e8 c8 2f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213f48:	48 89 ef             	mov    %rbp,%rdi
ffffffff80213f4b:	e8 80 2d 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80213f50:	48 c7 c7 9d e7 21 80 	mov    $0xffffffff8021e79d,%rdi
ffffffff80213f57:	e8 b4 2f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
    /* When handling debug exceptions, note CVE 2018-8897, we may get something at
     * kernel level - If this is what we have, the user must have touched SS + INT */
	/* Print reason */
	switch(Reason)
ffffffff80213f5c:	48 83 fd 14          	cmp    $0x14,%rbp
ffffffff80213f60:	77 07                	ja     ffffffff80213f69 <__RME_X64_Fault_Handler+0x39>
ffffffff80213f62:	ff 24 ed e0 ea 21 80 	jmpq   *-0x7fde1520(,%rbp,8)
		case RME_X64_FAULT_MF:RME_PRINTK_S("X87 FPU floating-point error:");break;
		case RME_X64_FAULT_AC:RME_PRINTK_S("Alignment check exception");break;
		case RME_X64_ABORT_MC:RME_PRINTK_S("Machine check exception");break;
		case RME_X64_FAULT_XM:RME_PRINTK_S("SIMD floating-point exception");break;
		case RME_X64_FAULT_VE:RME_PRINTK_S("Virtualization exception");break;
		default:RME_PRINTK_S("Unknown exception");break;
ffffffff80213f69:	48 c7 c7 26 e9 21 80 	mov    $0xffffffff8021e926,%rdi
ffffffff80213f70:	e8 9b 2f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
	}
	/* Print all registers */
	RME_PRINTK_S("\n\rRAX:        0x");RME_PRINTK_U(Reg->RAX);
ffffffff80213f75:	48 c7 c7 38 e9 21 80 	mov    $0xffffffff8021e938,%rdi
ffffffff80213f7c:	e8 8f 2f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213f81:	48 8b 3b             	mov    (%rbx),%rdi
ffffffff80213f84:	e8 c7 2e 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rRBX:        0x");RME_PRINTK_U(Reg->RBX);
ffffffff80213f89:	48 c7 c7 49 e9 21 80 	mov    $0xffffffff8021e949,%rdi
ffffffff80213f90:	e8 7b 2f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213f95:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
ffffffff80213f99:	e8 b2 2e 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rRCX:        0x");RME_PRINTK_U(Reg->RCX);
ffffffff80213f9e:	48 c7 c7 5a e9 21 80 	mov    $0xffffffff8021e95a,%rdi
ffffffff80213fa5:	e8 66 2f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213faa:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff80213fae:	e8 9d 2e 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rRDX:        0x");RME_PRINTK_U(Reg->RDX);
ffffffff80213fb3:	48 c7 c7 6b e9 21 80 	mov    $0xffffffff8021e96b,%rdi
ffffffff80213fba:	e8 51 2f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213fbf:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff80213fc3:	e8 88 2e 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rRSI:        0x");RME_PRINTK_U(Reg->RSI);
ffffffff80213fc8:	48 c7 c7 7c e9 21 80 	mov    $0xffffffff8021e97c,%rdi
ffffffff80213fcf:	e8 3c 2f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213fd4:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
ffffffff80213fd8:	e8 73 2e 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rRDI:        0x");RME_PRINTK_U(Reg->RDI);
ffffffff80213fdd:	48 c7 c7 8d e9 21 80 	mov    $0xffffffff8021e98d,%rdi
ffffffff80213fe4:	e8 27 2f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213fe9:	48 8b 7b 28          	mov    0x28(%rbx),%rdi
ffffffff80213fed:	e8 5e 2e 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rRBP:        0x");RME_PRINTK_U(Reg->RBP);
ffffffff80213ff2:	48 c7 c7 9e e9 21 80 	mov    $0xffffffff8021e99e,%rdi
ffffffff80213ff9:	e8 12 2f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80213ffe:	48 8b 7b 30          	mov    0x30(%rbx),%rdi
ffffffff80214002:	e8 49 2e 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rR8:         0x");RME_PRINTK_U(Reg->R8);
ffffffff80214007:	48 c7 c7 af e9 21 80 	mov    $0xffffffff8021e9af,%rdi
ffffffff8021400e:	e8 fd 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214013:	48 8b 7b 38          	mov    0x38(%rbx),%rdi
ffffffff80214017:	e8 34 2e 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rR9:         0x");RME_PRINTK_U(Reg->R9);
ffffffff8021401c:	48 c7 c7 c0 e9 21 80 	mov    $0xffffffff8021e9c0,%rdi
ffffffff80214023:	e8 e8 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214028:	48 8b 7b 40          	mov    0x40(%rbx),%rdi
ffffffff8021402c:	e8 1f 2e 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rR10:        0x");RME_PRINTK_U(Reg->R10);
ffffffff80214031:	48 c7 c7 d1 e9 21 80 	mov    $0xffffffff8021e9d1,%rdi
ffffffff80214038:	e8 d3 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021403d:	48 8b 7b 48          	mov    0x48(%rbx),%rdi
ffffffff80214041:	e8 0a 2e 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rR11:        0x");RME_PRINTK_U(Reg->R11);
ffffffff80214046:	48 c7 c7 e2 e9 21 80 	mov    $0xffffffff8021e9e2,%rdi
ffffffff8021404d:	e8 be 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214052:	48 8b 7b 50          	mov    0x50(%rbx),%rdi
ffffffff80214056:	e8 f5 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rR12:        0x");RME_PRINTK_U(Reg->R12);
ffffffff8021405b:	48 c7 c7 f3 e9 21 80 	mov    $0xffffffff8021e9f3,%rdi
ffffffff80214062:	e8 a9 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214067:	48 8b 7b 58          	mov    0x58(%rbx),%rdi
ffffffff8021406b:	e8 e0 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rR13:        0x");RME_PRINTK_U(Reg->R13);
ffffffff80214070:	48 c7 c7 04 ea 21 80 	mov    $0xffffffff8021ea04,%rdi
ffffffff80214077:	e8 94 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021407c:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
ffffffff80214080:	e8 cb 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rR14:        0x");RME_PRINTK_U(Reg->R14);
ffffffff80214085:	48 c7 c7 15 ea 21 80 	mov    $0xffffffff8021ea15,%rdi
ffffffff8021408c:	e8 7f 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214091:	48 8b 7b 68          	mov    0x68(%rbx),%rdi
ffffffff80214095:	e8 b6 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rR15:        0x");RME_PRINTK_U(Reg->R15);
ffffffff8021409a:	48 c7 c7 26 ea 21 80 	mov    $0xffffffff8021ea26,%rdi
ffffffff802140a1:	e8 6a 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802140a6:	48 8b 7b 70          	mov    0x70(%rbx),%rdi
ffffffff802140aa:	e8 a1 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rINT_NUM:    0x");RME_PRINTK_U(Reg->INT_NUM);
ffffffff802140af:	48 c7 c7 37 ea 21 80 	mov    $0xffffffff8021ea37,%rdi
ffffffff802140b6:	e8 55 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802140bb:	48 8b 7b 78          	mov    0x78(%rbx),%rdi
ffffffff802140bf:	e8 8c 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rERROR_CODE: 0x");RME_PRINTK_U(Reg->ERROR_CODE);
ffffffff802140c4:	48 c7 c7 48 ea 21 80 	mov    $0xffffffff8021ea48,%rdi
ffffffff802140cb:	e8 40 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802140d0:	48 8b bb 80 00 00 00 	mov    0x80(%rbx),%rdi
ffffffff802140d7:	e8 74 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rRIP:        0x");RME_PRINTK_U(Reg->RIP);
ffffffff802140dc:	48 c7 c7 59 ea 21 80 	mov    $0xffffffff8021ea59,%rdi
ffffffff802140e3:	e8 28 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802140e8:	48 8b bb 88 00 00 00 	mov    0x88(%rbx),%rdi
ffffffff802140ef:	e8 5c 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rCS:         0x");RME_PRINTK_U(Reg->CS);
ffffffff802140f4:	48 c7 c7 6a ea 21 80 	mov    $0xffffffff8021ea6a,%rdi
ffffffff802140fb:	e8 10 2e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214100:	48 8b bb 90 00 00 00 	mov    0x90(%rbx),%rdi
ffffffff80214107:	e8 44 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rRFLAGS:     0x");RME_PRINTK_U(Reg->RFLAGS);
ffffffff8021410c:	48 c7 c7 7b ea 21 80 	mov    $0xffffffff8021ea7b,%rdi
ffffffff80214113:	e8 f8 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214118:	48 8b bb 98 00 00 00 	mov    0x98(%rbx),%rdi
ffffffff8021411f:	e8 2c 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rRSP:        0x");RME_PRINTK_U(Reg->RSP);
ffffffff80214124:	48 c7 c7 8c ea 21 80 	mov    $0xffffffff8021ea8c,%rdi
ffffffff8021412b:	e8 e0 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214130:	48 8b bb a0 00 00 00 	mov    0xa0(%rbx),%rdi
ffffffff80214137:	e8 14 2d 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rSS:         0x");RME_PRINTK_U(Reg->SS);
ffffffff8021413c:	48 c7 c7 9d ea 21 80 	mov    $0xffffffff8021ea9d,%rdi
ffffffff80214143:	e8 c8 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214148:	48 8b bb a8 00 00 00 	mov    0xa8(%rbx),%rdi
ffffffff8021414f:	e8 fc 2c 00 00       	callq  ffffffff80216e50 <RME_Print_Uint>
	RME_PRINTK_S("\n\rHang");
ffffffff80214154:	48 c7 c7 ae ea 21 80 	mov    $0xffffffff8021eaae,%rdi
ffffffff8021415b:	e8 b0 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214160:	eb fe                	jmp    ffffffff80214160 <__RME_X64_Fault_Handler+0x230>
		case RME_X64_FAULT_PF:RME_PRINTK_S("Page fault exception");break;
		case RME_X64_FAULT_MF:RME_PRINTK_S("X87 FPU floating-point error:");break;
		case RME_X64_FAULT_AC:RME_PRINTK_S("Alignment check exception");break;
		case RME_X64_ABORT_MC:RME_PRINTK_S("Machine check exception");break;
		case RME_X64_FAULT_XM:RME_PRINTK_S("SIMD floating-point exception");break;
		case RME_X64_FAULT_VE:RME_PRINTK_S("Virtualization exception");break;
ffffffff80214162:	48 c7 c7 0d e9 21 80 	mov    $0xffffffff8021e90d,%rdi
ffffffff80214169:	e8 a2 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021416e:	e9 02 fe ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_FAULT_GP:RME_PRINTK_S("General protection exception");break;
		case RME_X64_FAULT_PF:RME_PRINTK_S("Page fault exception");break;
		case RME_X64_FAULT_MF:RME_PRINTK_S("X87 FPU floating-point error:");break;
		case RME_X64_FAULT_AC:RME_PRINTK_S("Alignment check exception");break;
		case RME_X64_ABORT_MC:RME_PRINTK_S("Machine check exception");break;
		case RME_X64_FAULT_XM:RME_PRINTK_S("SIMD floating-point exception");break;
ffffffff80214173:	48 c7 c7 ef e8 21 80 	mov    $0xffffffff8021e8ef,%rdi
ffffffff8021417a:	e8 91 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021417f:	e9 f1 fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_FAULT_SS:RME_PRINTK_S("Stack fault exception");break;
		case RME_X64_FAULT_GP:RME_PRINTK_S("General protection exception");break;
		case RME_X64_FAULT_PF:RME_PRINTK_S("Page fault exception");break;
		case RME_X64_FAULT_MF:RME_PRINTK_S("X87 FPU floating-point error:");break;
		case RME_X64_FAULT_AC:RME_PRINTK_S("Alignment check exception");break;
		case RME_X64_ABORT_MC:RME_PRINTK_S("Machine check exception");break;
ffffffff80214184:	48 c7 c7 d7 e8 21 80 	mov    $0xffffffff8021e8d7,%rdi
ffffffff8021418b:	e8 80 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214190:	e9 e0 fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_FAULT_NP:RME_PRINTK_S("Segment not present");break;
		case RME_X64_FAULT_SS:RME_PRINTK_S("Stack fault exception");break;
		case RME_X64_FAULT_GP:RME_PRINTK_S("General protection exception");break;
		case RME_X64_FAULT_PF:RME_PRINTK_S("Page fault exception");break;
		case RME_X64_FAULT_MF:RME_PRINTK_S("X87 FPU floating-point error:");break;
		case RME_X64_FAULT_AC:RME_PRINTK_S("Alignment check exception");break;
ffffffff80214195:	48 c7 c7 bd e8 21 80 	mov    $0xffffffff8021e8bd,%rdi
ffffffff8021419c:	e8 6f 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802141a1:	e9 cf fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_FAULT_TS:RME_PRINTK_S("Invalid TSS exception");break;
		case RME_X64_FAULT_NP:RME_PRINTK_S("Segment not present");break;
		case RME_X64_FAULT_SS:RME_PRINTK_S("Stack fault exception");break;
		case RME_X64_FAULT_GP:RME_PRINTK_S("General protection exception");break;
		case RME_X64_FAULT_PF:RME_PRINTK_S("Page fault exception");break;
		case RME_X64_FAULT_MF:RME_PRINTK_S("X87 FPU floating-point error:");break;
ffffffff802141a6:	48 c7 c7 9f e8 21 80 	mov    $0xffffffff8021e89f,%rdi
ffffffff802141ad:	e8 5e 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802141b2:	e9 be fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_ABORT_OLD_MF:RME_PRINTK_S("Coprocessor overrun - not used later on");break;
		case RME_X64_FAULT_TS:RME_PRINTK_S("Invalid TSS exception");break;
		case RME_X64_FAULT_NP:RME_PRINTK_S("Segment not present");break;
		case RME_X64_FAULT_SS:RME_PRINTK_S("Stack fault exception");break;
		case RME_X64_FAULT_GP:RME_PRINTK_S("General protection exception");break;
		case RME_X64_FAULT_PF:RME_PRINTK_S("Page fault exception");break;
ffffffff802141b7:	48 c7 c7 8a e8 21 80 	mov    $0xffffffff8021e88a,%rdi
ffffffff802141be:	e8 4d 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802141c3:	e9 ad fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_ABORT_DF:RME_PRINTK_S("Double(nested) fault exception");break;
		case RME_X64_ABORT_OLD_MF:RME_PRINTK_S("Coprocessor overrun - not used later on");break;
		case RME_X64_FAULT_TS:RME_PRINTK_S("Invalid TSS exception");break;
		case RME_X64_FAULT_NP:RME_PRINTK_S("Segment not present");break;
		case RME_X64_FAULT_SS:RME_PRINTK_S("Stack fault exception");break;
		case RME_X64_FAULT_GP:RME_PRINTK_S("General protection exception");break;
ffffffff802141c8:	48 c7 c7 6d e8 21 80 	mov    $0xffffffff8021e86d,%rdi
ffffffff802141cf:	e8 3c 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802141d4:	e9 9c fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_FAULT_NM:RME_PRINTK_S("Device not available");break;
		case RME_X64_ABORT_DF:RME_PRINTK_S("Double(nested) fault exception");break;
		case RME_X64_ABORT_OLD_MF:RME_PRINTK_S("Coprocessor overrun - not used later on");break;
		case RME_X64_FAULT_TS:RME_PRINTK_S("Invalid TSS exception");break;
		case RME_X64_FAULT_NP:RME_PRINTK_S("Segment not present");break;
		case RME_X64_FAULT_SS:RME_PRINTK_S("Stack fault exception");break;
ffffffff802141d9:	48 c7 c7 57 e8 21 80 	mov    $0xffffffff8021e857,%rdi
ffffffff802141e0:	e8 2b 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802141e5:	e9 8b fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_FAULT_UD:RME_PRINTK_S("Undefined instruction");break;
		case RME_X64_FAULT_NM:RME_PRINTK_S("Device not available");break;
		case RME_X64_ABORT_DF:RME_PRINTK_S("Double(nested) fault exception");break;
		case RME_X64_ABORT_OLD_MF:RME_PRINTK_S("Coprocessor overrun - not used later on");break;
		case RME_X64_FAULT_TS:RME_PRINTK_S("Invalid TSS exception");break;
		case RME_X64_FAULT_NP:RME_PRINTK_S("Segment not present");break;
ffffffff802141ea:	48 c7 c7 43 e8 21 80 	mov    $0xffffffff8021e843,%rdi
ffffffff802141f1:	e8 1a 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802141f6:	e9 7a fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_FAULT_BR:RME_PRINTK_S("Bound range exception");break;
		case RME_X64_FAULT_UD:RME_PRINTK_S("Undefined instruction");break;
		case RME_X64_FAULT_NM:RME_PRINTK_S("Device not available");break;
		case RME_X64_ABORT_DF:RME_PRINTK_S("Double(nested) fault exception");break;
		case RME_X64_ABORT_OLD_MF:RME_PRINTK_S("Coprocessor overrun - not used later on");break;
		case RME_X64_FAULT_TS:RME_PRINTK_S("Invalid TSS exception");break;
ffffffff802141fb:	48 c7 c7 2d e8 21 80 	mov    $0xffffffff8021e82d,%rdi
ffffffff80214202:	e8 09 2d 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214207:	e9 69 fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_TRAP_OF:RME_PRINTK_S("Overflow exception");break;
		case RME_X64_FAULT_BR:RME_PRINTK_S("Bound range exception");break;
		case RME_X64_FAULT_UD:RME_PRINTK_S("Undefined instruction");break;
		case RME_X64_FAULT_NM:RME_PRINTK_S("Device not available");break;
		case RME_X64_ABORT_DF:RME_PRINTK_S("Double(nested) fault exception");break;
		case RME_X64_ABORT_OLD_MF:RME_PRINTK_S("Coprocessor overrun - not used later on");break;
ffffffff8021420c:	48 c7 c7 c8 e3 21 80 	mov    $0xffffffff8021e3c8,%rdi
ffffffff80214213:	e8 f8 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214218:	e9 58 fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_TRAP_BP:RME_PRINTK_S("Debug breakpoint");break;
		case RME_X64_TRAP_OF:RME_PRINTK_S("Overflow exception");break;
		case RME_X64_FAULT_BR:RME_PRINTK_S("Bound range exception");break;
		case RME_X64_FAULT_UD:RME_PRINTK_S("Undefined instruction");break;
		case RME_X64_FAULT_NM:RME_PRINTK_S("Device not available");break;
		case RME_X64_ABORT_DF:RME_PRINTK_S("Double(nested) fault exception");break;
ffffffff8021421d:	48 c7 c7 a8 e3 21 80 	mov    $0xffffffff8021e3a8,%rdi
ffffffff80214224:	e8 e7 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214229:	e9 47 fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_INT_NMI:RME_PRINTK_S("NMI error");break;
		case RME_X64_TRAP_BP:RME_PRINTK_S("Debug breakpoint");break;
		case RME_X64_TRAP_OF:RME_PRINTK_S("Overflow exception");break;
		case RME_X64_FAULT_BR:RME_PRINTK_S("Bound range exception");break;
		case RME_X64_FAULT_UD:RME_PRINTK_S("Undefined instruction");break;
		case RME_X64_FAULT_NM:RME_PRINTK_S("Device not available");break;
ffffffff8021422e:	48 c7 c7 18 e8 21 80 	mov    $0xffffffff8021e818,%rdi
ffffffff80214235:	e8 d6 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021423a:	e9 36 fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_TRAP_DB:RME_PRINTK_S("Debug exception");break;
		case RME_X64_INT_NMI:RME_PRINTK_S("NMI error");break;
		case RME_X64_TRAP_BP:RME_PRINTK_S("Debug breakpoint");break;
		case RME_X64_TRAP_OF:RME_PRINTK_S("Overflow exception");break;
		case RME_X64_FAULT_BR:RME_PRINTK_S("Bound range exception");break;
		case RME_X64_FAULT_UD:RME_PRINTK_S("Undefined instruction");break;
ffffffff8021423f:	48 c7 c7 02 e8 21 80 	mov    $0xffffffff8021e802,%rdi
ffffffff80214246:	e8 c5 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021424b:	e9 25 fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
		case RME_X64_FAULT_DE:RME_PRINTK_S("Divide error");break;
		case RME_X64_TRAP_DB:RME_PRINTK_S("Debug exception");break;
		case RME_X64_INT_NMI:RME_PRINTK_S("NMI error");break;
		case RME_X64_TRAP_BP:RME_PRINTK_S("Debug breakpoint");break;
		case RME_X64_TRAP_OF:RME_PRINTK_S("Overflow exception");break;
		case RME_X64_FAULT_BR:RME_PRINTK_S("Bound range exception");break;
ffffffff80214250:	48 c7 c7 ec e7 21 80 	mov    $0xffffffff8021e7ec,%rdi
ffffffff80214257:	e8 b4 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021425c:	e9 14 fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
	{
		case RME_X64_FAULT_DE:RME_PRINTK_S("Divide error");break;
		case RME_X64_TRAP_DB:RME_PRINTK_S("Debug exception");break;
		case RME_X64_INT_NMI:RME_PRINTK_S("NMI error");break;
		case RME_X64_TRAP_BP:RME_PRINTK_S("Debug breakpoint");break;
		case RME_X64_TRAP_OF:RME_PRINTK_S("Overflow exception");break;
ffffffff80214261:	48 c7 c7 d9 e7 21 80 	mov    $0xffffffff8021e7d9,%rdi
ffffffff80214268:	e8 a3 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021426d:	e9 03 fd ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
	switch(Reason)
	{
		case RME_X64_FAULT_DE:RME_PRINTK_S("Divide error");break;
		case RME_X64_TRAP_DB:RME_PRINTK_S("Debug exception");break;
		case RME_X64_INT_NMI:RME_PRINTK_S("NMI error");break;
		case RME_X64_TRAP_BP:RME_PRINTK_S("Debug breakpoint");break;
ffffffff80214272:	48 c7 c7 c8 e7 21 80 	mov    $0xffffffff8021e7c8,%rdi
ffffffff80214279:	e8 92 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021427e:	e9 f2 fc ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
	/* Print reason */
	switch(Reason)
	{
		case RME_X64_FAULT_DE:RME_PRINTK_S("Divide error");break;
		case RME_X64_TRAP_DB:RME_PRINTK_S("Debug exception");break;
		case RME_X64_INT_NMI:RME_PRINTK_S("NMI error");break;
ffffffff80214283:	48 c7 c7 be e7 21 80 	mov    $0xffffffff8021e7be,%rdi
ffffffff8021428a:	e8 81 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021428f:	e9 e1 fc ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
     * kernel level - If this is what we have, the user must have touched SS + INT */
	/* Print reason */
	switch(Reason)
	{
		case RME_X64_FAULT_DE:RME_PRINTK_S("Divide error");break;
		case RME_X64_TRAP_DB:RME_PRINTK_S("Debug exception");break;
ffffffff80214294:	48 c7 c7 ae e7 21 80 	mov    $0xffffffff8021e7ae,%rdi
ffffffff8021429b:	e8 70 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802142a0:	e9 d0 fc ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
    /* When handling debug exceptions, note CVE 2018-8897, we may get something at
     * kernel level - If this is what we have, the user must have touched SS + INT */
	/* Print reason */
	switch(Reason)
	{
		case RME_X64_FAULT_DE:RME_PRINTK_S("Divide error");break;
ffffffff802142a5:	48 c7 c7 a1 e7 21 80 	mov    $0xffffffff8021e7a1,%rdi
ffffffff802142ac:	e8 5f 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802142b1:	e9 bf fc ff ff       	jmpq   ffffffff80213f75 <__RME_X64_Fault_Handler+0x45>
ffffffff802142b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff802142bd:	00 00 00 

ffffffff802142c0 <__RME_X64_Generic_Handler>:
              ptr_t Int_Num - The interrupt number.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Generic_Handler(struct RME_Reg_Struct* Reg, ptr_t Int_Num)
{
ffffffff802142c0:	53                   	push   %rbx
    /* Not handling interrupts */
	RME_PRINTK_S("\r\nGeneral int:");
ffffffff802142c1:	48 c7 c7 b5 ea 21 80 	mov    $0xffffffff8021eab5,%rdi
              ptr_t Int_Num - The interrupt number.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void __RME_X64_Generic_Handler(struct RME_Reg_Struct* Reg, ptr_t Int_Num)
{
ffffffff802142c8:	48 89 f3             	mov    %rsi,%rbx
    /* Not handling interrupts */
	RME_PRINTK_S("\r\nGeneral int:");
ffffffff802142cb:	e8 40 2c 00 00       	callq  ffffffff80216f10 <RME_Print_String>
	RME_PRINTK_I(Int_Num);
ffffffff802142d0:	48 89 df             	mov    %rbx,%rdi
	{
		/* Is this a generic IPI from other processors? */

		default:break;
	}
}
ffffffff802142d3:	5b                   	pop    %rbx
******************************************************************************/
void __RME_X64_Generic_Handler(struct RME_Reg_Struct* Reg, ptr_t Int_Num)
{
    /* Not handling interrupts */
	RME_PRINTK_S("\r\nGeneral int:");
	RME_PRINTK_I(Int_Num);
ffffffff802142d4:	e9 f7 29 00 00       	jmpq   ffffffff80216cd0 <RME_Print_Int>
ffffffff802142d9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff802142e0 <__RME_Pgtbl_Set>:
Output      : None.
Return      : None.
******************************************************************************/
void __RME_Pgtbl_Set(ptr_t Pgtbl)
{
	__RME_X64_Pgtbl_Set(RME_X64_VA2PA(Pgtbl));
ffffffff802142e0:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff802142e7:	80 00 00 
ffffffff802142ea:	48 01 c7             	add    %rax,%rdi
ffffffff802142ed:	e9 bc 75 ff ff       	jmpq   ffffffff8020b8ae <__RME_X64_Pgtbl_Set>
ffffffff802142f2:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff802142f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff802142fd:	00 00 00 

ffffffff80214300 <__RME_Pgtbl_Check>:
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Check(ptr_t Start_Addr, ptr_t Top_Flag, ptr_t Size_Order, ptr_t Num_Order)
{
    /* Is the start address aligned to 4kB? */
    if((Start_Addr&0xFFF)!=0)
ffffffff80214300:	f7 c7 ff 0f 00 00    	test   $0xfff,%edi
        return RME_ERR_PGT_OPFAIL;
ffffffff80214306:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Check(ptr_t Start_Addr, ptr_t Top_Flag, ptr_t Size_Order, ptr_t Num_Order)
{
    /* Is the start address aligned to 4kB? */
    if((Start_Addr&0xFFF)!=0)
ffffffff8021430d:	74 09                	je     ffffffff80214318 <__RME_Pgtbl_Check+0x18>
    /* Is the number order allowed? */
    if(Num_Order!=RME_PGTBL_NUM_512)
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021430f:	f3 c3                	repz retq 
ffffffff80214311:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if((Start_Addr&0xFFF)!=0)
        return RME_ERR_PGT_OPFAIL;

    /* Is the size order allowed? */
    if((Size_Order!=RME_PGTBL_SIZE_512G)&&(Size_Order!=RME_PGTBL_SIZE_1G)&&
       (Size_Order!=RME_PGTBL_SIZE_2M)&&(Size_Order!=RME_PGTBL_SIZE_4K))
ffffffff80214318:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff8021431c:	77 f1                	ja     ffffffff8021430f <__RME_Pgtbl_Check+0xf>
ffffffff8021431e:	48 bf 00 10 20 40 80 	movabs $0x8040201000,%rdi
ffffffff80214325:	00 00 00 
ffffffff80214328:	48 0f a3 d7          	bt     %rdx,%rdi
ffffffff8021432c:	73 e1                	jae    ffffffff8021430f <__RME_Pgtbl_Check+0xf>
    /* Is the top-level relationship correct? */
    if(((Size_Order==RME_PGTBL_SIZE_512G)^(Top_Flag!=0))!=0)
        return RME_ERR_PGT_OPFAIL;

    /* Is the number order allowed? */
    if(Num_Order!=RME_PGTBL_NUM_512)
ffffffff8021432e:	48 83 fa 27          	cmp    $0x27,%rdx
ffffffff80214332:	0f 94 c2             	sete   %dl
ffffffff80214335:	48 85 f6             	test   %rsi,%rsi
ffffffff80214338:	0f 95 c0             	setne  %al
ffffffff8021433b:	31 d0                	xor    %edx,%eax
ffffffff8021433d:	48 83 f9 09          	cmp    $0x9,%rcx
ffffffff80214341:	0f 95 c2             	setne  %dl
ffffffff80214344:	09 d0                	or     %edx,%eax
ffffffff80214346:	0f b6 c0             	movzbl %al,%eax
ffffffff80214349:	48 f7 d8             	neg    %rax
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff8021434c:	c3                   	retq   
ffffffff8021434d:	0f 1f 00             	nopl   (%rax)

ffffffff80214350 <__RME_Pgtbl_Init>:
{
    cnt_t Count;
    ptr_t* Ptr;
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);
ffffffff80214350:	48 8b 77 18          	mov    0x18(%rdi),%rsi
ffffffff80214354:	48 8d 96 00 08 00 00 	lea    0x800(%rsi),%rdx
ffffffff8021435b:	48 89 f0             	mov    %rsi,%rax
ffffffff8021435e:	66 90                	xchg   %ax,%ax

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
        Ptr[Count]=0;
ffffffff80214360:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff80214367:	48 83 c0 08          	add    $0x8,%rax
    
    /* Get the actual table */
    Ptr=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Hopefully the compiler optimize this to rep stos */
    for(Count=0;Count<256;Count++)
ffffffff8021436b:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021436e:	75 f0                	jne    ffffffff80214360 <__RME_Pgtbl_Init+0x10>
        Ptr[Count]=0;

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgtbl_Op->Start_Addr&RME_PGTBL_TOP)!=0)
ffffffff80214370:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff80214374:	74 2a                	je     ffffffff802143a0 <__RME_Pgtbl_Init+0x50>
ffffffff80214376:	48 c7 c0 00 98 10 80 	mov    $0xffffffff80109800,%rax
ffffffff8021437d:	0f 1f 00             	nopl   (%rax)
    {
        for(;Count<512;Count++)
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff80214380:	48 8b 08             	mov    (%rax),%rcx
ffffffff80214383:	48 89 c2             	mov    %rax,%rdx
ffffffff80214386:	48 83 c0 08          	add    $0x8,%rax
ffffffff8021438a:	48 81 ea 00 90 10 80 	sub    $0xffffffff80109000,%rdx
        Ptr[Count]=0;

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgtbl_Op->Start_Addr&RME_PGTBL_TOP)!=0)
    {
        for(;Count<512;Count++)
ffffffff80214391:	48 3d 00 a0 10 80    	cmp    $0xffffffff8010a000,%rax
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
ffffffff80214397:	48 89 0c 32          	mov    %rcx,(%rdx,%rsi,1)
        Ptr[Count]=0;

    /* Hopefully the compiler optimize this to rep movs */
    if((Pgtbl_Op->Start_Addr&RME_PGTBL_TOP)!=0)
    {
        for(;Count<512;Count++)
ffffffff8021439b:	75 e3                	jne    ffffffff80214380 <__RME_Pgtbl_Init+0x30>
        for(;Count<512;Count++)
            Ptr[Count]=0;
    }

    return 0;
}
ffffffff8021439d:	31 c0                	xor    %eax,%eax
ffffffff8021439f:	c3                   	retq   
ffffffff802143a0:	48 81 c6 00 10 00 00 	add    $0x1000,%rsi
ffffffff802143a7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff802143ae:	00 00 
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
    }
    else
    {
        for(;Count<512;Count++)
            Ptr[Count]=0;
ffffffff802143b0:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
ffffffff802143b7:	48 83 c2 08          	add    $0x8,%rdx
        for(;Count<512;Count++)
            Ptr[Count]=RME_X64_Kpgt.PML4[Count-256];
    }
    else
    {
        for(;Count<512;Count++)
ffffffff802143bb:	48 39 f2             	cmp    %rsi,%rdx
ffffffff802143be:	75 f0                	jne    ffffffff802143b0 <__RME_Pgtbl_Init+0x60>
            Ptr[Count]=0;
    }

    return 0;
}
ffffffff802143c0:	31 c0                	xor    %eax,%eax
ffffffff802143c2:	c3                   	retq   
ffffffff802143c3:	0f 1f 00             	nopl   (%rax)
ffffffff802143c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff802143cd:	00 00 00 

ffffffff802143d0 <__RME_Pgtbl_Del_Check>:

    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Check if it is mapped into other page tables. If yes, then it cannot be deleted.
     * also, it must not contain mappings of lower levels, or it is not deletable. */
    if((RME_X64_PGREG_POS(Table).Parent_Cnt==0)&&(RME_X64_PGREG_POS(Table).Child_Cnt==0))
ffffffff802143d0:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802143d7:	80 00 00 
ffffffff802143da:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff802143de:	48 8b 0d 2b 89 05 00 	mov    0x5892b(%rip),%rcx        # ffffffff8026cd10 <RME_X64_Layout+0x10>
        return 0;

    return RME_ERR_PGT_OPFAIL;
ffffffff802143e5:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax

    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Check if it is mapped into other page tables. If yes, then it cannot be deleted.
     * also, it must not contain mappings of lower levels, or it is not deletable. */
    if((RME_X64_PGREG_POS(Table).Parent_Cnt==0)&&(RME_X64_PGREG_POS(Table).Child_Cnt==0))
ffffffff802143ec:	48 c1 ea 0c          	shr    $0xc,%rdx
ffffffff802143f0:	48 c1 e2 04          	shl    $0x4,%rdx
ffffffff802143f4:	48 83 7c 0a 08 00    	cmpq   $0x0,0x8(%rdx,%rcx,1)
ffffffff802143fa:	74 04                	je     ffffffff80214400 <__RME_Pgtbl_Del_Check+0x30>
        return 0;

    return RME_ERR_PGT_OPFAIL;
}
ffffffff802143fc:	f3 c3                	repz retq 
ffffffff802143fe:	66 90                	xchg   %ax,%ax

    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Check if it is mapped into other page tables. If yes, then it cannot be deleted.
     * also, it must not contain mappings of lower levels, or it is not deletable. */
    if((RME_X64_PGREG_POS(Table).Parent_Cnt==0)&&(RME_X64_PGREG_POS(Table).Child_Cnt==0))
ffffffff80214400:	48 8b 05 09 89 05 00 	mov    0x58909(%rip),%rax        # ffffffff8026cd10 <RME_X64_Layout+0x10>
ffffffff80214407:	48 83 3c 02 00       	cmpq   $0x0,(%rdx,%rax,1)
ffffffff8021440c:	0f 95 c0             	setne  %al
ffffffff8021440f:	0f b6 c0             	movzbl %al,%eax
ffffffff80214412:	48 f7 d8             	neg    %rax
        return 0;

    return RME_ERR_PGT_OPFAIL;
}
ffffffff80214415:	c3                   	retq   
ffffffff80214416:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021441d:	00 00 00 

ffffffff80214420 <__RME_Pgtbl_Page_Map>:
    ptr_t* Table;
    ptr_t Temp;
    ptr_t X64_Flags;

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgtbl_Op->Start_Addr&RME_PGTBL_TOP)!=0)&&(Pos>=256))
ffffffff80214420:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff80214424:	74 1a                	je     ffffffff80214440 <__RME_Pgtbl_Page_Map+0x20>
ffffffff80214426:	48 81 fa ff 00 00 00 	cmp    $0xff,%rdx
        return RME_ERR_PGT_OPFAIL;
ffffffff8021442d:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    ptr_t* Table;
    ptr_t Temp;
    ptr_t X64_Flags;

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgtbl_Op->Start_Addr&RME_PGTBL_TOP)!=0)&&(Pos>=256))
ffffffff80214434:	76 0a                	jbe    ffffffff80214440 <__RME_Pgtbl_Page_Map+0x20>
    Temp=0;
    if(__RME_Comp_Swap(&(Table[Pos]),&Temp,X64_Flags)==0)
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff80214436:	c3                   	retq   
ffffffff80214437:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021443e:	00 00 
    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgtbl_Op->Start_Addr&RME_PGTBL_TOP)!=0)&&(Pos>=256))
        return RME_ERR_PGT_OPFAIL;

    /* It should at least be readable */
    if((Flags&RME_PGTBL_READ)==0)
ffffffff80214440:	f6 c1 01             	test   $0x1,%cl
    ptr_t Temp;
    ptr_t X64_Flags;

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgtbl_Op->Start_Addr&RME_PGTBL_TOP)!=0)&&(Pos>=256))
        return RME_ERR_PGT_OPFAIL;
ffffffff80214443:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax

    /* It should at least be readable */
    if((Flags&RME_PGTBL_READ)==0)
ffffffff8021444a:	74 ea                	je     ffffffff80214436 <__RME_Pgtbl_Page_Map+0x16>
    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Generate flags */
    if(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)==RME_PGTBL_SIZE_4K)
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021444c:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80214453:	ff 0f 00 
                            architecture specific page table's settings.
Output      : None.
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Page_Map(struct RME_Cap_Pgtbl* Pgtbl_Op, ptr_t Paddr, ptr_t Pos, ptr_t Flags)
{
ffffffff80214456:	48 83 ec 18          	sub    $0x18,%rsp
    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Generate flags */
    if(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)==RME_PGTBL_SIZE_4K)
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021445a:	48 83 e1 df          	and    $0xffffffffffffffdf,%rcx
ffffffff8021445e:	48 21 c6             	and    %rax,%rsi

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Generate flags */
    if(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)==RME_PGTBL_SIZE_4K)
ffffffff80214461:	83 7f 2c 0c          	cmpl   $0xc,0x2c(%rdi)
    /* It should at least be readable */
    if((Flags&RME_PGTBL_READ)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);
ffffffff80214465:	4c 8b 47 18          	mov    0x18(%rdi),%r8

    /* Generate flags */
    if(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)==RME_PGTBL_SIZE_4K)
ffffffff80214469:	74 3d                	je     ffffffff802144a8 <__RME_Pgtbl_Page_Map+0x88>
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;
ffffffff8021446b:	40 80 ce 84          	or     $0x84,%sil
ffffffff8021446f:	48 0b 34 cd a0 ec 21 	or     -0x7fde1360(,%rcx,8),%rsi
ffffffff80214476:	80 

    /* Try to map it in */
    Temp=0;
    if(__RME_Comp_Swap(&(Table[Pos]),&Temp,X64_Flags)==0)
ffffffff80214477:	49 8d 3c d0          	lea    (%r8,%rdx,8),%rdi
ffffffff8021447b:	48 89 f2             	mov    %rsi,%rdx
ffffffff8021447e:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;

    /* Try to map it in */
    Temp=0;
ffffffff80214483:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff8021448a:	00 00 
    if(__RME_Comp_Swap(&(Table[Pos]),&Temp,X64_Flags)==0)
ffffffff8021448c:	e8 f0 73 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80214491:	48 85 c0             	test   %rax,%rax
ffffffff80214494:	0f 94 c0             	sete   %al
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff80214497:	48 83 c4 18          	add    $0x18,%rsp
    else
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_PDE_SUP|RME_X64_MMU_US;

    /* Try to map it in */
    Temp=0;
    if(__RME_Comp_Swap(&(Table[Pos]),&Temp,X64_Flags)==0)
ffffffff8021449b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021449e:	48 f7 d8             	neg    %rax
ffffffff802144a1:	eb 93                	jmp    ffffffff80214436 <__RME_Pgtbl_Page_Map+0x16>
ffffffff802144a3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Generate flags */
    if(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)==RME_PGTBL_SIZE_4K)
        X64_Flags=RME_X64_MMU_ADDR(Paddr)|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff802144a8:	48 83 ce 04          	or     $0x4,%rsi
ffffffff802144ac:	48 0b 34 cd a0 ec 21 	or     -0x7fde1360(,%rcx,8),%rsi
ffffffff802144b3:	80 
ffffffff802144b4:	eb c1                	jmp    ffffffff80214477 <__RME_Pgtbl_Page_Map+0x57>
ffffffff802144b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff802144bd:	00 00 00 

ffffffff802144c0 <__RME_Pgtbl_Page_Unmap>:
              ptr_t Pos - The position in the page table.
Output      : None.
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Page_Unmap(struct RME_Cap_Pgtbl* Pgtbl_Op, ptr_t Pos)
{
ffffffff802144c0:	48 83 ec 18          	sub    $0x18,%rsp
    ptr_t* Table;
    ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgtbl_Op->Start_Addr&RME_PGTBL_TOP)!=0)&&(Pos>=256))
ffffffff802144c4:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff802144c8:	74 16                	je     ffffffff802144e0 <__RME_Pgtbl_Page_Unmap+0x20>
ffffffff802144ca:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff802144d1:	76 0d                	jbe    ffffffff802144e0 <__RME_Pgtbl_Page_Unmap+0x20>
        return RME_ERR_PGT_OPFAIL;
ffffffff802144d3:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax

    if(__RME_Comp_Swap(&(Table[Pos]),&Temp,0)==0)
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff802144da:	48 83 c4 18          	add    $0x18,%rsp
ffffffff802144de:	c3                   	retq   
ffffffff802144df:	90                   	nop

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Try to unmap it. Use CAS just in case */
    Temp=Table[Pos];
ffffffff802144e0:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff802144e4:	48 8d 3c f0          	lea    (%rax,%rsi,8),%rdi
ffffffff802144e8:	48 8b 07             	mov    (%rdi),%rax
    if(Temp==0)
ffffffff802144eb:	48 85 c0             	test   %rax,%rax

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Try to unmap it. Use CAS just in case */
    Temp=Table[Pos];
ffffffff802144ee:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    if(Temp==0)
ffffffff802144f3:	74 de                	je     ffffffff802144d3 <__RME_Pgtbl_Page_Unmap+0x13>
        return RME_ERR_PGT_OPFAIL;

    if(__RME_Comp_Swap(&(Table[Pos]),&Temp,0)==0)
ffffffff802144f5:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff802144fa:	31 d2                	xor    %edx,%edx
ffffffff802144fc:	e8 80 73 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80214501:	48 85 c0             	test   %rax,%rax
ffffffff80214504:	0f 94 c0             	sete   %al
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff80214507:	48 83 c4 18          	add    $0x18,%rsp
    /* Try to unmap it. Use CAS just in case */
    Temp=Table[Pos];
    if(Temp==0)
        return RME_ERR_PGT_OPFAIL;

    if(__RME_Comp_Swap(&(Table[Pos]),&Temp,0)==0)
ffffffff8021450b:	0f b6 c0             	movzbl %al,%eax
ffffffff8021450e:	48 f7 d8             	neg    %rax
        return RME_ERR_PGT_OPFAIL;

    return 0;
}
ffffffff80214511:	c3                   	retq   
ffffffff80214512:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80214516:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021451d:	00 00 00 

ffffffff80214520 <__RME_Pgtbl_Pgdir_Map>:
    ptr_t* Child_Table;
    ptr_t Temp;
    ptr_t X64_Flags;

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgtbl_Parent->Start_Addr&RME_PGTBL_TOP)!=0)&&(Pos>=256))
ffffffff80214520:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff80214524:	74 1a                	je     ffffffff80214540 <__RME_Pgtbl_Pgdir_Map+0x20>
ffffffff80214526:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff8021452d:	76 11                	jbe    ffffffff80214540 <__RME_Pgtbl_Pgdir_Map+0x20>
        return RME_ERR_PGT_OPFAIL;
ffffffff8021452f:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    /* Map complete, increase reference count for both page tables */
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Child_Table).Parent_Cnt),1);
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Parent_Table).Child_Cnt),1);

    return 0;
}
ffffffff80214536:	c3                   	retq   
ffffffff80214537:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021453e:	00 00 
    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgtbl_Parent->Start_Addr&RME_PGTBL_TOP)!=0)&&(Pos>=256))
        return RME_ERR_PGT_OPFAIL;

    /* It should at least be readable */
    if((Flags&RME_PGTBL_READ)==0)
ffffffff80214540:	f6 c1 01             	test   $0x1,%cl
ffffffff80214543:	74 ea                	je     ffffffff8021452f <__RME_Pgtbl_Pgdir_Map+0xf>
Output      : None.
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Pgdir_Map(struct RME_Cap_Pgtbl* Pgtbl_Parent, ptr_t Pos, 
                            struct RME_Cap_Pgtbl* Pgtbl_Child, ptr_t Flags)
{
ffffffff80214545:	41 54                	push   %r12
ffffffff80214547:	55                   	push   %rbp
    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgtbl_Parent,ptr_t*);
    Child_Table=RME_CAP_GETOBJ(Pgtbl_Child,ptr_t*);

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff80214548:	48 83 e1 df          	and    $0xffffffffffffffdf,%rcx
Output      : None.
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Pgdir_Map(struct RME_Cap_Pgtbl* Pgtbl_Parent, ptr_t Pos, 
                            struct RME_Cap_Pgtbl* Pgtbl_Child, ptr_t Flags)
{
ffffffff8021454c:	53                   	push   %rbx
    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgtbl_Parent,ptr_t*);
    Child_Table=RME_CAP_GETOBJ(Pgtbl_Child,ptr_t*);

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021454d:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff80214554:	80 00 00 
ffffffff80214557:	49 89 dc             	mov    %rbx,%r12
Output      : None.
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Pgdir_Map(struct RME_Cap_Pgtbl* Pgtbl_Parent, ptr_t Pos, 
                            struct RME_Cap_Pgtbl* Pgtbl_Child, ptr_t Flags)
{
ffffffff8021455a:	48 83 ec 10          	sub    $0x10,%rsp
    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgtbl_Parent,ptr_t*);
    Child_Table=RME_CAP_GETOBJ(Pgtbl_Child,ptr_t*);

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff8021455e:	4c 03 62 18          	add    0x18(%rdx),%r12
ffffffff80214562:	48 ba 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdx
ffffffff80214569:	ff 0f 00 
    /* It should at least be readable */
    if((Flags&RME_PGTBL_READ)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgtbl_Parent,ptr_t*);
ffffffff8021456c:	48 8b 6f 18          	mov    0x18(%rdi),%rbp

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;

    /* Try to map it in - may need to increase some count */
    Temp=0;
ffffffff80214570:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80214577:	00 00 
    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgtbl_Parent,ptr_t*);
    Child_Table=RME_CAP_GETOBJ(Pgtbl_Child,ptr_t*);

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff80214579:	4c 21 e2             	and    %r12,%rdx

    /* Try to map it in - may need to increase some count */
    Temp=0;
    if(__RME_Comp_Swap(&(Parent_Table[Pos]),&Temp,X64_Flags)==0)
ffffffff8021457c:	48 8d 7c f5 00       	lea    0x0(%rbp,%rsi,8),%rdi
ffffffff80214581:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgtbl_Parent,ptr_t*);
    Child_Table=RME_CAP_GETOBJ(Pgtbl_Child,ptr_t*);

    /* Generate the content */
    X64_Flags=RME_X64_MMU_ADDR(RME_X64_VA2PA(Child_Table))|RME_X64_PGFLG_RME2NAT(Flags)|RME_X64_MMU_US;
ffffffff80214586:	48 83 ca 04          	or     $0x4,%rdx
ffffffff8021458a:	48 0b 14 cd a0 ec 21 	or     -0x7fde1360(,%rcx,8),%rdx
ffffffff80214591:	80 

    /* Try to map it in - may need to increase some count */
    Temp=0;
    if(__RME_Comp_Swap(&(Parent_Table[Pos]),&Temp,X64_Flags)==0)
ffffffff80214592:	e8 ea 72 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80214597:	48 85 c0             	test   %rax,%rax
ffffffff8021459a:	75 14                	jne    ffffffff802145b0 <__RME_Pgtbl_Pgdir_Map+0x90>
    ptr_t Temp;
    ptr_t X64_Flags;

    /* Are we trying to map into the kernel space on the top level? */
    if(((Pgtbl_Parent->Start_Addr&RME_PGTBL_TOP)!=0)&&(Pos>=256))
        return RME_ERR_PGT_OPFAIL;
ffffffff8021459c:	48 83 c8 ff          	or     $0xffffffffffffffff,%rax
    /* Map complete, increase reference count for both page tables */
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Child_Table).Parent_Cnt),1);
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Parent_Table).Child_Cnt),1);

    return 0;
}
ffffffff802145a0:	48 83 c4 10          	add    $0x10,%rsp
ffffffff802145a4:	5b                   	pop    %rbx
ffffffff802145a5:	5d                   	pop    %rbp
ffffffff802145a6:	41 5c                	pop    %r12
ffffffff802145a8:	c3                   	retq   
ffffffff802145a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    Temp=0;
    if(__RME_Comp_Swap(&(Parent_Table[Pos]),&Temp,X64_Flags)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Map complete, increase reference count for both page tables */
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Child_Table).Parent_Cnt),1);
ffffffff802145b0:	48 8b 05 59 87 05 00 	mov    0x58759(%rip),%rax        # ffffffff8026cd10 <RME_X64_Layout+0x10>
ffffffff802145b7:	49 c1 ec 0c          	shr    $0xc,%r12
ffffffff802145bb:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802145c0:	49 c1 e4 04          	shl    $0x4,%r12
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Parent_Table).Child_Cnt),1);
ffffffff802145c4:	48 01 eb             	add    %rbp,%rbx
ffffffff802145c7:	48 c1 eb 0c          	shr    $0xc,%rbx
    Temp=0;
    if(__RME_Comp_Swap(&(Parent_Table[Pos]),&Temp,X64_Flags)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Map complete, increase reference count for both page tables */
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Child_Table).Parent_Cnt),1);
ffffffff802145cb:	4a 8d 7c 20 08       	lea    0x8(%rax,%r12,1),%rdi
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Parent_Table).Child_Cnt),1);
ffffffff802145d0:	48 c1 e3 04          	shl    $0x4,%rbx
    Temp=0;
    if(__RME_Comp_Swap(&(Parent_Table[Pos]),&Temp,X64_Flags)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Map complete, increase reference count for both page tables */
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Child_Table).Parent_Cnt),1);
ffffffff802145d4:	e8 c5 72 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Parent_Table).Child_Cnt),1);
ffffffff802145d9:	48 8b 3d 30 87 05 00 	mov    0x58730(%rip),%rdi        # ffffffff8026cd10 <RME_X64_Layout+0x10>
ffffffff802145e0:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802145e5:	48 01 df             	add    %rbx,%rdi
ffffffff802145e8:	e8 b1 72 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>

    return 0;
ffffffff802145ed:	31 c0                	xor    %eax,%eax
ffffffff802145ef:	eb af                	jmp    ffffffff802145a0 <__RME_Pgtbl_Pgdir_Map+0x80>
ffffffff802145f1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff802145f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff802145fd:	00 00 00 

ffffffff80214600 <__RME_Pgtbl_Pgdir_Unmap>:
              ptr_t Pos - The position in the page table.
Output      : None.
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Pgdir_Unmap(struct RME_Cap_Pgtbl* Pgtbl_Op, ptr_t Pos)
{
ffffffff80214600:	41 54                	push   %r12
ffffffff80214602:	55                   	push   %rbp
ffffffff80214603:	53                   	push   %rbx
ffffffff80214604:	48 83 ec 10          	sub    $0x10,%rsp
    ptr_t* Parent_Table;
    ptr_t* Child_Table;
    ptr_t Temp;

    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgtbl_Op->Start_Addr&RME_PGTBL_TOP)!=0)&&(Pos>=256))
ffffffff80214608:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
ffffffff8021460c:	74 22                	je     ffffffff80214630 <__RME_Pgtbl_Pgdir_Unmap+0x30>
ffffffff8021460e:	48 81 fe ff 00 00 00 	cmp    $0xff,%rsi
ffffffff80214615:	76 19                	jbe    ffffffff80214630 <__RME_Pgtbl_Pgdir_Unmap+0x30>
        return RME_ERR_PGT_OPFAIL;
ffffffff80214617:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    /* Decrease reference count */
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Child_Table).Parent_Cnt),-1);
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Parent_Table).Child_Cnt),-1);

    return 0;
}
ffffffff8021461e:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80214622:	5b                   	pop    %rbx
ffffffff80214623:	5d                   	pop    %rbp
ffffffff80214624:	41 5c                	pop    %r12
ffffffff80214626:	c3                   	retq   
ffffffff80214627:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021462e:	00 00 
    /* Are we trying to unmap the kernel space on the top level? */
    if(((Pgtbl_Op->Start_Addr&RME_PGTBL_TOP)!=0)&&(Pos>=256))
        return RME_ERR_PGT_OPFAIL;

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);
ffffffff80214630:	48 8b 6f 18          	mov    0x18(%rdi),%rbp

    /* Try to unmap it. Use CAS just in case */
    Temp=Parent_Table[Pos];
ffffffff80214634:	48 8d 7c f5 00       	lea    0x0(%rbp,%rsi,8),%rdi
ffffffff80214639:	48 8b 1f             	mov    (%rdi),%rbx
    if(Temp==0)
ffffffff8021463c:	48 85 db             	test   %rbx,%rbx

    /* Get the table */
    Parent_Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Try to unmap it. Use CAS just in case */
    Temp=Parent_Table[Pos];
ffffffff8021463f:	48 89 5c 24 08       	mov    %rbx,0x8(%rsp)
    if(Temp==0)
ffffffff80214644:	74 d1                	je     ffffffff80214617 <__RME_Pgtbl_Pgdir_Unmap+0x17>
        return RME_ERR_PGT_OPFAIL;

    Child_Table=(ptr_t*)Temp;

    if(__RME_Comp_Swap(&(Parent_Table[Pos]),&Temp,0)==0)
ffffffff80214646:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021464b:	31 d2                	xor    %edx,%edx
ffffffff8021464d:	e8 2f 72 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80214652:	48 85 c0             	test   %rax,%rax
ffffffff80214655:	74 c0                	je     ffffffff80214617 <__RME_Pgtbl_Pgdir_Unmap+0x17>
        return RME_ERR_PGT_OPFAIL;

    /* Decrease reference count */
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Child_Table).Parent_Cnt),-1);
ffffffff80214657:	49 bc 00 00 00 00 00 	movabs $0x800000000000,%r12
ffffffff8021465e:	80 00 00 
ffffffff80214661:	48 8b 05 a8 86 05 00 	mov    0x586a8(%rip),%rax        # ffffffff8026cd10 <RME_X64_Layout+0x10>
ffffffff80214668:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021466f:	4c 01 e3             	add    %r12,%rbx
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Parent_Table).Child_Cnt),-1);
ffffffff80214672:	4c 01 e5             	add    %r12,%rbp

    if(__RME_Comp_Swap(&(Parent_Table[Pos]),&Temp,0)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Decrease reference count */
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Child_Table).Parent_Cnt),-1);
ffffffff80214675:	48 c1 eb 0c          	shr    $0xc,%rbx
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Parent_Table).Child_Cnt),-1);
ffffffff80214679:	48 c1 ed 0c          	shr    $0xc,%rbp

    if(__RME_Comp_Swap(&(Parent_Table[Pos]),&Temp,0)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Decrease reference count */
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Child_Table).Parent_Cnt),-1);
ffffffff8021467d:	48 c1 e3 04          	shl    $0x4,%rbx
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Parent_Table).Child_Cnt),-1);
ffffffff80214681:	48 c1 e5 04          	shl    $0x4,%rbp

    if(__RME_Comp_Swap(&(Parent_Table[Pos]),&Temp,0)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Decrease reference count */
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Child_Table).Parent_Cnt),-1);
ffffffff80214685:	48 8d 7c 18 08       	lea    0x8(%rax,%rbx,1),%rdi
ffffffff8021468a:	e8 0f 72 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    __RME_Fetch_Add(&(RME_X64_PGREG_POS(Parent_Table).Child_Cnt),-1);
ffffffff8021468f:	48 8b 3d 7a 86 05 00 	mov    0x5867a(%rip),%rdi        # ffffffff8026cd10 <RME_X64_Layout+0x10>
ffffffff80214696:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021469d:	48 01 ef             	add    %rbp,%rdi
ffffffff802146a0:	e8 f9 71 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>

    return 0;
ffffffff802146a5:	31 c0                	xor    %eax,%eax
ffffffff802146a7:	e9 72 ff ff ff       	jmpq   ffffffff8021461e <__RME_Pgtbl_Pgdir_Unmap+0x1e>
ffffffff802146ac:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff802146b0 <__RME_Pgtbl_Lookup>:
Output      : ptr_t* Paddr - The physical address of the page.
              ptr_t* Flags - The RME standard flags of the page.
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Lookup(struct RME_Cap_Pgtbl* Pgtbl_Op, ptr_t Pos, ptr_t* Paddr, ptr_t* Flags)
{
ffffffff802146b0:	49 89 c8             	mov    %rcx,%r8
    ptr_t* Table;

    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Op->Size_Num_Order))!=0)
ffffffff802146b3:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff802146b7:	48 89 f0             	mov    %rsi,%rax
ffffffff802146ba:	48 d3 e8             	shr    %cl,%rax
ffffffff802146bd:	48 85 c0             	test   %rax,%rax
ffffffff802146c0:	74 0e                	je     ffffffff802146d0 <__RME_Pgtbl_Lookup+0x20>
        return RME_ERR_PGT_OPFAIL;
ffffffff802146c2:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax

    if(Flags!=0)
        *Flags=RME_X64_PGFLG_NAT2RME(Table[Pos]);

    return 0;
}
ffffffff802146c9:	f3 c3                	repz retq 
ffffffff802146cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    /* Check if the position is within the range of this page table */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Op->Size_Num_Order))!=0)
        return RME_ERR_PGT_OPFAIL;

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);
ffffffff802146d0:	48 8b 7f 18          	mov    0x18(%rdi),%rdi

    /* Start lookup - is this a terminal page, or? */
    if(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)==RME_PGTBL_SIZE_4K)
ffffffff802146d4:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff802146d8:	48 83 f9 0c          	cmp    $0xc,%rcx
    {
        if((Table[Pos]&RME_X64_MMU_P)==0)
ffffffff802146dc:	48 8d 0c f7          	lea    (%rdi,%rsi,8),%rcx
ffffffff802146e0:	48 8b 31             	mov    (%rcx),%rsi

    /* Get the table */
    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Start lookup - is this a terminal page, or? */
    if(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)==RME_PGTBL_SIZE_4K)
ffffffff802146e3:	74 63                	je     ffffffff80214748 <__RME_Pgtbl_Lookup+0x98>
        if((Table[Pos]&RME_X64_MMU_P)==0)
            return RME_ERR_PGT_OPFAIL;
    }
    else
    {
        if(((Table[Pos]&RME_X64_MMU_P)==0)||((Table[Pos]&RME_X64_MMU_PDE_SUP)==0))
ffffffff802146e5:	48 89 f7             	mov    %rsi,%rdi
ffffffff802146e8:	81 e7 81 00 00 00    	and    $0x81,%edi
ffffffff802146ee:	48 81 ff 81 00 00 00 	cmp    $0x81,%rdi
ffffffff802146f5:	75 cb                	jne    ffffffff802146c2 <__RME_Pgtbl_Lookup+0x12>
            return RME_ERR_PGT_OPFAIL;
    }

    /* This is a page. Return the physical address and flags */
    if(Paddr!=0)
ffffffff802146f7:	48 85 d2             	test   %rdx,%rdx
ffffffff802146fa:	74 10                	je     ffffffff8021470c <__RME_Pgtbl_Lookup+0x5c>
        *Paddr=RME_X64_MMU_ADDR(Table[Pos]);
ffffffff802146fc:	48 bf 00 f0 ff ff ff 	movabs $0xffffffffff000,%rdi
ffffffff80214703:	ff 0f 00 
ffffffff80214706:	48 21 fe             	and    %rdi,%rsi
ffffffff80214709:	48 89 32             	mov    %rsi,(%rdx)

    if(Flags!=0)
ffffffff8021470c:	4d 85 c0             	test   %r8,%r8
ffffffff8021470f:	74 b8                	je     ffffffff802146c9 <__RME_Pgtbl_Lookup+0x19>
        *Flags=RME_X64_PGFLG_NAT2RME(Table[Pos]);
ffffffff80214711:	48 8b 11             	mov    (%rcx),%rdx
ffffffff80214714:	48 89 d1             	mov    %rdx,%rcx
ffffffff80214717:	48 c1 e9 3f          	shr    $0x3f,%rcx
ffffffff8021471b:	48 8d 34 cd 00 00 00 	lea    0x0(,%rcx,8),%rsi
ffffffff80214722:	00 
ffffffff80214723:	48 89 d1             	mov    %rdx,%rcx
ffffffff80214726:	83 e2 02             	and    $0x2,%edx
ffffffff80214729:	83 e1 18             	and    $0x18,%ecx
ffffffff8021472c:	48 d1 ea             	shr    %rdx
ffffffff8021472f:	48 c1 e9 02          	shr    $0x2,%rcx
ffffffff80214733:	48 09 f1             	or     %rsi,%rcx
ffffffff80214736:	48 09 ca             	or     %rcx,%rdx
ffffffff80214739:	48 8b 14 d5 20 ec 21 	mov    -0x7fde13e0(,%rdx,8),%rdx
ffffffff80214740:	80 
ffffffff80214741:	49 89 10             	mov    %rdx,(%r8)
ffffffff80214744:	c3                   	retq   
ffffffff80214745:	0f 1f 00             	nopl   (%rax)
    Table=RME_CAP_GETOBJ(Pgtbl_Op,ptr_t*);

    /* Start lookup - is this a terminal page, or? */
    if(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)==RME_PGTBL_SIZE_4K)
    {
        if((Table[Pos]&RME_X64_MMU_P)==0)
ffffffff80214748:	40 f6 c6 01          	test   $0x1,%sil
ffffffff8021474c:	0f 84 70 ff ff ff    	je     ffffffff802146c2 <__RME_Pgtbl_Lookup+0x12>
ffffffff80214752:	eb a3                	jmp    ffffffff802146f7 <__RME_Pgtbl_Lookup+0x47>
ffffffff80214754:	66 90                	xchg   %ax,%ax
ffffffff80214756:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021475d:	00 00 00 

ffffffff80214760 <__RME_Pgtbl_Walk>:
    ptr_t* Table;
    ptr_t Pos;
    ptr_t Size_Cnt;

    /* Check if this is the top-level page table */
    if(((Pgtbl_Op->Start_Addr)&RME_PGTBL_TOP)==0)
ffffffff80214760:	f6 47 30 01          	testb  $0x1,0x30(%rdi)
        return RME_ERR_PGT_OPFAIL;
ffffffff80214764:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    ptr_t* Table;
    ptr_t Pos;
    ptr_t Size_Cnt;

    /* Check if this is the top-level page table */
    if(((Pgtbl_Op->Start_Addr)&RME_PGTBL_TOP)==0)
ffffffff8021476b:	75 03                	jne    ffffffff80214770 <__RME_Pgtbl_Walk+0x10>

        /* The size order always decreases by 512 */
        Size_Order-=RME_PGTBL_SIZE_512B;
    }
    return 0;
}
ffffffff8021476d:	c3                   	retq   
ffffffff8021476e:	66 90                	xchg   %ax,%ax
    /* Check if this is the top-level page table */
    if(((Pgtbl_Op->Start_Addr)&RME_PGTBL_TOP)==0)
        return RME_ERR_PGT_OPFAIL;

    /* Are we attempting a kernel lookup? If yes, stop immediately */
    if(Vaddr>=0x8000000000000000ULL)
ffffffff80214770:	48 85 f6             	test   %rsi,%rsi
ffffffff80214773:	78 f8                	js     ffffffff8021476d <__RME_Pgtbl_Walk+0xd>
              ptr_t* Flags - The RME standard flags of the page.
Return      : ptr_t - If successful, 0; else RME_ERR_PGT_OPFAIL.
******************************************************************************/
ptr_t __RME_Pgtbl_Walk(struct RME_Cap_Pgtbl* Pgtbl_Op, ptr_t Vaddr, ptr_t* Pgtbl,
                       ptr_t* Map_Vaddr, ptr_t* Paddr, ptr_t* Size_Order, ptr_t* Num_Order, ptr_t* Flags)
{
ffffffff80214775:	55                   	push   %rbp
ffffffff80214776:	53                   	push   %rbx
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Table[Pos]&RME_X64_MMU_P)==0)
ffffffff80214777:	48 89 f3             	mov    %rsi,%rbx
    /* Are we attempting a kernel lookup? If yes, stop immediately */
    if(Vaddr>=0x8000000000000000ULL)
        return RME_ERR_PGT_OPFAIL;

    /* Get the table and start lookup */
    Table=RME_CAP_GETOBJ(Pgtbl_Op, ptr_t*);
ffffffff8021477a:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Table[Pos]&RME_X64_MMU_P)==0)
ffffffff8021477e:	48 c1 eb 24          	shr    $0x24,%rbx
ffffffff80214782:	81 e3 f8 0f 00 00    	and    $0xff8,%ebx
ffffffff80214788:	4d 8d 14 1b          	lea    (%r11,%rbx,1),%r10
ffffffff8021478c:	49 8b 3a             	mov    (%r10),%rdi
ffffffff8021478f:	40 f6 c7 01          	test   $0x1,%dil
ffffffff80214793:	74 48                	je     ffffffff802147dd <__RME_Pgtbl_Walk+0x7d>
            return RME_ERR_PGT_OPFAIL;
        if(((Table[Pos]&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGTBL_SIZE_4K))
ffffffff80214795:	40 f6 c7 80          	test   $0x80,%dil
            break;
        }
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Table=(ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Table[Pos]));
ffffffff80214799:	48 bd 00 f0 ff ff ff 	movabs $0xffffffffff000,%rbp
ffffffff802147a0:	ff 0f 00 
ffffffff802147a3:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff802147aa:	80 ff ff 
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Table[Pos]&RME_X64_MMU_P)==0)
            return RME_ERR_PGT_OPFAIL;
        if(((Table[Pos]&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGTBL_SIZE_4K))
ffffffff802147ad:	74 0f                	je     ffffffff802147be <__RME_Pgtbl_Walk+0x5e>
ffffffff802147af:	eb 37                	jmp    ffffffff802147e8 <__RME_Pgtbl_Walk+0x88>
ffffffff802147b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff802147b8:	40 f6 c7 80          	test   $0x80,%dil
ffffffff802147bc:	75 2a                	jne    ffffffff802147e8 <__RME_Pgtbl_Walk+0x88>
            break;
        }
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Table=(ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Table[Pos]));
ffffffff802147be:	48 21 ef             	and    %rbp,%rdi
        }

        /* The size order always decreases by 512 */
        Size_Order-=RME_PGTBL_SIZE_512B;
ffffffff802147c1:	49 83 e9 48          	sub    $0x48,%r9
            break;
        }
        else
        {
            /* This is a directory, we goto that directory to continue walking */
            Table=(ptr_t*)RME_X64_PA2VA(RME_X64_MMU_ADDR(Table[Pos]));
ffffffff802147c5:	4c 8d 1c 07          	lea    (%rdi,%rax,1),%r11
    while(1)
    {
        /* Calculate where is the entry - always 0 to 512*/
        Pos=(Vaddr>>Size_Cnt)&0x1FF;
        /* Find the position of the entry - Is there a page, a directory, or nothing? */
        if((Table[Pos]&RME_X64_MMU_P)==0)
ffffffff802147c9:	4d 8d 14 1b          	lea    (%r11,%rbx,1),%r10
ffffffff802147cd:	49 8b 3a             	mov    (%r10),%rdi
ffffffff802147d0:	40 f6 c7 01          	test   $0x1,%dil
ffffffff802147d4:	75 e2                	jne    ffffffff802147b8 <__RME_Pgtbl_Walk+0x58>
    ptr_t Pos;
    ptr_t Size_Cnt;

    /* Check if this is the top-level page table */
    if(((Pgtbl_Op->Start_Addr)&RME_PGTBL_TOP)==0)
        return RME_ERR_PGT_OPFAIL;
ffffffff802147d6:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax

        /* The size order always decreases by 512 */
        Size_Order-=RME_PGTBL_SIZE_512B;
    }
    return 0;
}
ffffffff802147dd:	5b                   	pop    %rbx
ffffffff802147de:	5d                   	pop    %rbp
ffffffff802147df:	f3 c3                	repz retq 
ffffffff802147e1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        if((Table[Pos]&RME_X64_MMU_P)==0)
            return RME_ERR_PGT_OPFAIL;
        if(((Table[Pos]&RME_X64_MMU_PDE_SUP)!=0)||(Size_Cnt==RME_PGTBL_SIZE_4K))
        {
            /* This is a page - we found it */
            if(Pgtbl!=0)
ffffffff802147e8:	48 85 d2             	test   %rdx,%rdx
ffffffff802147eb:	74 03                	je     ffffffff802147f0 <__RME_Pgtbl_Walk+0x90>
                *Pgtbl=(ptr_t)Table;
ffffffff802147ed:	4c 89 1a             	mov    %r11,(%rdx)
            if(Map_Vaddr!=0)
ffffffff802147f0:	48 85 c9             	test   %rcx,%rcx
ffffffff802147f3:	74 10                	je     ffffffff80214805 <__RME_Pgtbl_Walk+0xa5>
                *Map_Vaddr=RME_ROUND_DOWN(Vaddr,Size_Cnt);
ffffffff802147f5:	48 b8 00 00 00 00 80 	movabs $0xffffff8000000000,%rax
ffffffff802147fc:	ff ff ff 
ffffffff802147ff:	48 21 c6             	and    %rax,%rsi
ffffffff80214802:	48 89 31             	mov    %rsi,(%rcx)
            if(Paddr!=0)
ffffffff80214805:	4d 85 c0             	test   %r8,%r8
ffffffff80214808:	74 10                	je     ffffffff8021481a <__RME_Pgtbl_Walk+0xba>
                *Paddr=RME_X64_MMU_ADDR(Table[Pos]);
ffffffff8021480a:	48 b8 00 f0 ff ff ff 	movabs $0xffffffffff000,%rax
ffffffff80214811:	ff 0f 00 
ffffffff80214814:	49 23 02             	and    (%r10),%rax
ffffffff80214817:	49 89 00             	mov    %rax,(%r8)
            if(Size_Order!=0)
ffffffff8021481a:	4d 85 c9             	test   %r9,%r9
ffffffff8021481d:	74 07                	je     ffffffff80214826 <__RME_Pgtbl_Walk+0xc6>
                *Size_Order=Size_Cnt;
ffffffff8021481f:	49 c7 01 27 00 00 00 	movq   $0x27,(%r9)
            if(Num_Order!=0)
ffffffff80214826:	48 83 7c 24 18 00    	cmpq   $0x0,0x18(%rsp)
ffffffff8021482c:	74 0c                	je     ffffffff8021483a <__RME_Pgtbl_Walk+0xda>
                *Num_Order=9;
ffffffff8021482e:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
ffffffff80214833:	48 c7 00 09 00 00 00 	movq   $0x9,(%rax)
            if(Flags!=0)
ffffffff8021483a:	48 83 7c 24 20 00    	cmpq   $0x0,0x20(%rsp)
ffffffff80214840:	74 41                	je     ffffffff80214883 <__RME_Pgtbl_Walk+0x123>
                *Flags=RME_X64_PGFLG_NAT2RME(Table[Pos]);
ffffffff80214842:	49 8b 02             	mov    (%r10),%rax
ffffffff80214845:	48 89 c2             	mov    %rax,%rdx
ffffffff80214848:	48 c1 ea 3f          	shr    $0x3f,%rdx
ffffffff8021484c:	48 8d 0c d5 00 00 00 	lea    0x0(,%rdx,8),%rcx
ffffffff80214853:	00 
ffffffff80214854:	48 89 c2             	mov    %rax,%rdx
ffffffff80214857:	83 e0 02             	and    $0x2,%eax
ffffffff8021485a:	83 e2 18             	and    $0x18,%edx
ffffffff8021485d:	48 d1 e8             	shr    %rax
ffffffff80214860:	48 c1 ea 02          	shr    $0x2,%rdx
ffffffff80214864:	48 09 ca             	or     %rcx,%rdx
ffffffff80214867:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff8021486c:	48 09 d0             	or     %rdx,%rax
ffffffff8021486f:	48 8b 04 c5 20 ec 21 	mov    -0x7fde13e0(,%rax,8),%rax
ffffffff80214876:	80 
ffffffff80214877:	48 89 01             	mov    %rax,(%rcx)
        }

        /* The size order always decreases by 512 */
        Size_Order-=RME_PGTBL_SIZE_512B;
    }
    return 0;
ffffffff8021487a:	31 c0                	xor    %eax,%eax
}
ffffffff8021487c:	5b                   	pop    %rbx
ffffffff8021487d:	5d                   	pop    %rbp
ffffffff8021487e:	e9 5c ff ff ff       	jmpq   ffffffff802147df <__RME_Pgtbl_Walk+0x7f>
        }

        /* The size order always decreases by 512 */
        Size_Order-=RME_PGTBL_SIZE_512B;
    }
    return 0;
ffffffff80214883:	31 c0                	xor    %eax,%eax
}
ffffffff80214885:	5b                   	pop    %rbx
ffffffff80214886:	5d                   	pop    %rbp
ffffffff80214887:	e9 53 ff ff ff       	jmpq   ffffffff802147df <__RME_Pgtbl_Walk+0x7f>
ffffffff8021488c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80214890 <main>:
Output      : None.
Return      : int - This function never returns.
******************************************************************************/
int main(ptr_t MBInfo)
{
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff80214890:	48 b8 00 00 00 00 00 	movabs $0xffff800000000000,%rax
ffffffff80214897:	80 ff ff 
Input       : ptr_t MBInfo - The multiboot information structure's physical address.
Output      : None.
Return      : int - This function never returns.
******************************************************************************/
int main(ptr_t MBInfo)
{
ffffffff8021489a:	48 83 ec 08          	sub    $0x8,%rsp
    RME_X64_MBInfo=(struct multiboot_info*)(MBInfo+RME_X64_VA_BASE);
ffffffff8021489e:	48 01 c7             	add    %rax,%rdi
ffffffff802148a1:	48 89 3d d0 86 05 00 	mov    %rdi,0x586d0(%rip)        # ffffffff8026cf78 <RME_X64_MBInfo>
    /* The main function of the kernel - we will start our kernel boot here */
    _RME_Kmain(RME_KMEM_STACK_ADDR);
ffffffff802148a8:	48 c7 c7 00 b8 20 80 	mov    $0xffffffff8020b800,%rdi
ffffffff802148af:	e8 04 70 ff ff       	callq  ffffffff8020b8b8 <_RME_Kmain>
    return 0;
}
ffffffff802148b4:	31 c0                	xor    %eax,%eax
ffffffff802148b6:	48 83 c4 08          	add    $0x8,%rsp
ffffffff802148ba:	c3                   	retq   
ffffffff802148bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff802148c0 <_RME_Captbl_Boot_Init>:
{
    cnt_t Count;
    struct RME_Cap_Captbl* Captbl;

    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
ffffffff802148c0:	48 8d 4a ff          	lea    -0x1(%rdx),%rcx
    	return RME_ERR_CAP_RANGE;
ffffffff802148c4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
{
    cnt_t Count;
    struct RME_Cap_Captbl* Captbl;

    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
ffffffff802148cb:	48 81 f9 ff 7f 00 00 	cmp    $0x7fff,%rcx
ffffffff802148d2:	0f 87 84 00 00 00    	ja     ffffffff8021495c <_RME_Captbl_Boot_Init+0x9c>
              ptr_t Vaddr - The virtual address to store the capability table.
              ptr_t Entry_Num - The number of capabilities in the capability table.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Captbl_Boot_Init(cid_t Cap_Captbl, ptr_t Vaddr, ptr_t Entry_Num)
{
ffffffff802148d8:	41 55                	push   %r13
ffffffff802148da:	41 54                	push   %r12
ffffffff802148dc:	49 89 fd             	mov    %rdi,%r13
ffffffff802148df:	55                   	push   %rbp
ffffffff802148e0:	53                   	push   %rbx
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
    	return RME_ERR_CAP_RANGE;
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_CAPTBL_SIZE(Entry_Num))!=0)
ffffffff802148e1:	48 89 d3             	mov    %rdx,%rbx
ffffffff802148e4:	48 89 f5             	mov    %rsi,%rbp
ffffffff802148e7:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff802148eb:	49 89 d4             	mov    %rdx,%r12
              ptr_t Vaddr - The virtual address to store the capability table.
              ptr_t Entry_Num - The number of capabilities in the capability table.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Captbl_Boot_Init(cid_t Cap_Captbl, ptr_t Vaddr, ptr_t Entry_Num)
{
ffffffff802148ee:	48 83 ec 08          	sub    $0x8,%rsp
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
    	return RME_ERR_CAP_RANGE;
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_CAPTBL_SIZE(Entry_Num))!=0)
ffffffff802148f2:	48 89 de             	mov    %rbx,%rsi
ffffffff802148f5:	48 89 ef             	mov    %rbp,%rdi
ffffffff802148f8:	e8 93 26 00 00       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff802148fd:	48 85 c0             	test   %rax,%rax
ffffffff80214900:	4c 8d 04 2b          	lea    (%rbx,%rbp,1),%r8
ffffffff80214904:	48 89 e9             	mov    %rbp,%rcx
ffffffff80214907:	75 55                	jne    ffffffff8021495e <_RME_Captbl_Boot_Init+0x9e>
ffffffff80214909:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        return RME_ERR_CAP_KOTBL;

    /* Done. We start creation of the capability table. Clear header as well */
    for(Count=0;Count<Entry_Num;Count++)
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff80214910:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
ffffffff80214917:	48 83 c1 40          	add    $0x40,%rcx
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_CAPTBL_SIZE(Entry_Num))!=0)
        return RME_ERR_CAP_KOTBL;

    /* Done. We start creation of the capability table. Clear header as well */
    for(Count=0;Count<Entry_Num;Count++)
ffffffff8021491b:	49 39 c8             	cmp    %rcx,%r8
ffffffff8021491e:	75 f0                	jne    ffffffff80214910 <_RME_Captbl_Boot_Init+0x50>
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));

    Captbl=&(((struct RME_Cap_Captbl*)Vaddr)[Cap_Captbl]);
ffffffff80214920:	4c 89 e9             	mov    %r13,%rcx
    /* Set the cap's parameters according to what we have just created */
    RME_CAP_CLEAR(Captbl);
    Captbl->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_CAPTBL,0);
ffffffff80214923:	48 b8 00 00 00 00 00 	movabs $0x3000000000000,%rax
ffffffff8021492a:	00 03 00 

    /* Done. We start creation of the capability table. Clear header as well */
    for(Count=0;Count<Entry_Num;Count++)
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));

    Captbl=&(((struct RME_Cap_Captbl*)Vaddr)[Cap_Captbl]);
ffffffff8021492d:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80214931:	48 01 e9             	add    %rbp,%rcx
    /* Set the cap's parameters according to what we have just created */
    RME_CAP_CLEAR(Captbl);
    Captbl->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_CAPTBL,0);
ffffffff80214934:	48 89 01             	mov    %rax,(%rcx)
    Captbl->Head.Parent=0;
ffffffff80214937:	48 c7 41 08 00 00 00 	movq   $0x0,0x8(%rcx)
ffffffff8021493e:	00 
    Captbl->Head.Flags=RME_CAPTBL_FLAG_CRT|RME_CAPTBL_FLAG_DEL|RME_CAPTBL_FLAG_FRZ|
                       RME_CAPTBL_FLAG_ADD_SRC|RME_CAPTBL_FLAG_ADD_DST|RME_CAPTBL_FLAG_REM|
                       RME_CAPTBL_FLAG_PROC_CRT|RME_CAPTBL_FLAG_PROC_CPT;
    Captbl->Entry_Num=Entry_Num;

    return Cap_Captbl;
ffffffff8021493f:	4c 89 e8             	mov    %r13,%rax
    Captbl=&(((struct RME_Cap_Captbl*)Vaddr)[Cap_Captbl]);
    /* Set the cap's parameters according to what we have just created */
    RME_CAP_CLEAR(Captbl);
    Captbl->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_CAPTBL,0);
    Captbl->Head.Parent=0;
    Captbl->Head.Object=Vaddr;
ffffffff80214942:	48 89 69 18          	mov    %rbp,0x18(%rcx)
    /* New cap allows all operations */
    Captbl->Head.Flags=RME_CAPTBL_FLAG_CRT|RME_CAPTBL_FLAG_DEL|RME_CAPTBL_FLAG_FRZ|
ffffffff80214946:	48 c7 41 10 ff 00 00 	movq   $0xff,0x10(%rcx)
ffffffff8021494d:	00 
                       RME_CAPTBL_FLAG_ADD_SRC|RME_CAPTBL_FLAG_ADD_DST|RME_CAPTBL_FLAG_REM|
                       RME_CAPTBL_FLAG_PROC_CRT|RME_CAPTBL_FLAG_PROC_CPT;
    Captbl->Entry_Num=Entry_Num;
ffffffff8021494e:	4c 89 61 28          	mov    %r12,0x28(%rcx)

    return Cap_Captbl;
}
ffffffff80214952:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80214956:	5b                   	pop    %rbx
ffffffff80214957:	5d                   	pop    %rbp
ffffffff80214958:	41 5c                	pop    %r12
ffffffff8021495a:	41 5d                	pop    %r13
ffffffff8021495c:	f3 c3                	repz retq 
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
    	return RME_ERR_CAP_RANGE;
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_CAPTBL_SIZE(Entry_Num))!=0)
        return RME_ERR_CAP_KOTBL;
ffffffff8021495e:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80214965:	eb eb                	jmp    ffffffff80214952 <_RME_Captbl_Boot_Init+0x92>
ffffffff80214967:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021496e:	00 00 

ffffffff80214970 <_RME_Captbl_Boot_Crt>:
    struct RME_Cap_Captbl* Captbl_Op;
    struct RME_Cap_Captbl* Captbl_Crt;
    ptr_t Type_Ref;
    
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
ffffffff80214970:	49 8d 40 ff          	lea    -0x1(%r8),%rax
ffffffff80214974:	48 3d ff 7f 00 00    	cmp    $0x7fff,%rax
ffffffff8021497a:	0f 87 9d 01 00 00    	ja     ffffffff80214b1d <_RME_Captbl_Boot_Crt+0x1ad>
              ptr_t Entry_Num - The number of capabilities in the capability table.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Captbl_Boot_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl_Crt,
                           cid_t Cap_Crt, ptr_t Vaddr, ptr_t Entry_Num)
{
ffffffff80214980:	41 56                	push   %r14
ffffffff80214982:	41 55                	push   %r13
ffffffff80214984:	41 54                	push   %r12
ffffffff80214986:	55                   	push   %rbp
ffffffff80214987:	53                   	push   %rbx
ffffffff80214988:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021498b:	48 83 ec 10          	sub    $0x10,%rsp
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;

    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021498f:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80214995:	0f 84 45 01 00 00    	je     ffffffff80214ae0 <_RME_Captbl_Boot_Crt+0x170>
ffffffff8021499b:	48 89 f2             	mov    %rsi,%rdx
ffffffff8021499e:	48 c1 fa 10          	sar    $0x10,%rdx
ffffffff802149a2:	48 3b 57 28          	cmp    0x28(%rdi),%rdx
ffffffff802149a6:	0f 83 5f 01 00 00    	jae    ffffffff80214b0b <_RME_Captbl_Boot_Crt+0x19b>
ffffffff802149ac:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802149b0:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff802149b4:	49 b9 00 00 00 00 00 	movabs $0x800000000000,%r9
ffffffff802149bb:	80 00 00 
ffffffff802149be:	48 8b 02             	mov    (%rdx),%rax
ffffffff802149c1:	4c 85 c8             	test   %r9,%rax
ffffffff802149c4:	0f 85 4a 01 00 00    	jne    ffffffff80214b14 <_RME_Captbl_Boot_Crt+0x1a4>
ffffffff802149ca:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802149ce:	49 89 c1             	mov    %rax,%r9
ffffffff802149d1:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802149d8:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff802149dc:	0f 85 eb 00 00 00    	jne    ffffffff80214acd <_RME_Captbl_Boot_Crt+0x15d>
ffffffff802149e2:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff802149e8:	48 3b 72 28          	cmp    0x28(%rdx),%rsi
ffffffff802149ec:	0f 83 19 01 00 00    	jae    ffffffff80214b0b <_RME_Captbl_Boot_Crt+0x19b>
ffffffff802149f2:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802149f6:	48 03 72 18          	add    0x18(%rdx),%rsi
ffffffff802149fa:	4c 8b 0e             	mov    (%rsi),%r9
ffffffff802149fd:	4c 89 ca             	mov    %r9,%rdx
ffffffff80214a00:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80214a04:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80214a08:	0f 85 bf 00 00 00    	jne    ffffffff80214acd <_RME_Captbl_Boot_Crt+0x15d>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff80214a0e:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80214a15:	80 00 00 
ffffffff80214a18:	49 85 d1             	test   %rdx,%r9
ffffffff80214a1b:	0f 85 f3 00 00 00    	jne    ffffffff80214b14 <_RME_Captbl_Boot_Crt+0x1a4>
ffffffff80214a21:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff80214a25:	0f 84 fa 00 00 00    	je     ffffffff80214b25 <_RME_Captbl_Boot_Crt+0x1b5>


    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Crt,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff80214a2b:	48 39 5e 28          	cmp    %rbx,0x28(%rsi)
    struct RME_Cap_Captbl* Captbl_Crt;
    ptr_t Type_Ref;
    
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;
ffffffff80214a2f:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);


    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Crt,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff80214a36:	0f 86 91 00 00 00    	jbe    ffffffff80214acd <_RME_Captbl_Boot_Crt+0x15d>
ffffffff80214a3c:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80214a40:	48 03 5e 18          	add    0x18(%rsi),%rbx
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Captbl_Crt,Type_Ref);
ffffffff80214a44:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80214a49:	49 89 fd             	mov    %rdi,%r13
ffffffff80214a4c:	4d 89 c4             	mov    %r8,%r12
ffffffff80214a4f:	48 89 cd             	mov    %rcx,%rbp
ffffffff80214a52:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80214a59:	00 00 
ffffffff80214a5b:	48 89 df             	mov    %rbx,%rdi
ffffffff80214a5e:	e8 1e 6e ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80214a63:	48 89 c2             	mov    %rax,%rdx
ffffffff80214a66:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80214a6d:	48 85 d2             	test   %rdx,%rdx
ffffffff80214a70:	74 5b                	je     ffffffff80214acd <_RME_Captbl_Boot_Crt+0x15d>
    /* Try to mark this area as populated */
    if(_RME_Kotbl_Mark(Vaddr, RME_CAPTBL_SIZE(Entry_Num))!=0)
ffffffff80214a72:	4d 89 e6             	mov    %r12,%r14
ffffffff80214a75:	48 89 ef             	mov    %rbp,%rdi
ffffffff80214a78:	49 c1 e6 06          	shl    $0x6,%r14
ffffffff80214a7c:	4c 89 f6             	mov    %r14,%rsi
ffffffff80214a7f:	e8 0c 25 00 00       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff80214a84:	48 85 c0             	test   %rax,%rax
ffffffff80214a87:	49 8d 34 2e          	lea    (%r14,%rbp,1),%rsi
ffffffff80214a8b:	48 89 ea             	mov    %rbp,%rdx
ffffffff80214a8e:	0f 85 9a 00 00 00    	jne    ffffffff80214b2e <_RME_Captbl_Boot_Crt+0x1be>
ffffffff80214a94:	0f 1f 40 00          	nopl   0x0(%rax)
        return RME_ERR_CAP_KOTBL;
    }

    /* Done. We start creation of the capability table. Clear header as well */
    for(Count=0;Count<Entry_Num;Count++)
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff80214a98:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
ffffffff80214a9f:	48 83 c2 40          	add    $0x40,%rdx
        Captbl->Head.Type_Ref=0;
        return RME_ERR_CAP_KOTBL;
    }

    /* Done. We start creation of the capability table. Clear header as well */
    for(Count=0;Count<Entry_Num;Count++)
ffffffff80214aa3:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80214aa6:	75 f0                	jne    ffffffff80214a98 <_RME_Captbl_Boot_Crt+0x128>
    Captbl_Crt->Head.Flags=RME_CAPTBL_FLAG_CRT|RME_CAPTBL_FLAG_DEL|RME_CAPTBL_FLAG_FRZ|
                           RME_CAPTBL_FLAG_ADD_SRC|RME_CAPTBL_FLAG_ADD_DST|RME_CAPTBL_FLAG_REM|
                           RME_CAPTBL_FLAG_PROC_CRT|RME_CAPTBL_FLAG_PROC_CPT;
    Captbl_Crt->Entry_Num=Entry_Num;
    /* At last, write into slot the correct information, and clear the frozen bit */
    Captbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_CAPTBL,0);
ffffffff80214aa8:	48 b9 00 00 00 00 00 	movabs $0x3000000000000,%rcx
ffffffff80214aaf:	00 03 00 
    /* Done. We start creation of the capability table. Clear header as well */
    for(Count=0;Count<Entry_Num;Count++)
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));

    /* Set the cap's parameters according to what we have just created */
    Captbl_Crt->Head.Parent=0;
ffffffff80214ab2:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff80214ab9:	00 
    Captbl_Crt->Head.Object=Vaddr;
ffffffff80214aba:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
    Captbl_Crt->Head.Flags=RME_CAPTBL_FLAG_CRT|RME_CAPTBL_FLAG_DEL|RME_CAPTBL_FLAG_FRZ|
ffffffff80214abe:	48 c7 43 10 ff 00 00 	movq   $0xff,0x10(%rbx)
ffffffff80214ac5:	00 
                           RME_CAPTBL_FLAG_ADD_SRC|RME_CAPTBL_FLAG_ADD_DST|RME_CAPTBL_FLAG_REM|
                           RME_CAPTBL_FLAG_PROC_CRT|RME_CAPTBL_FLAG_PROC_CPT;
    Captbl_Crt->Entry_Num=Entry_Num;
ffffffff80214ac6:	4c 89 63 28          	mov    %r12,0x28(%rbx)
    /* At last, write into slot the correct information, and clear the frozen bit */
    Captbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_CAPTBL,0);
ffffffff80214aca:	48 89 0b             	mov    %rcx,(%rbx)

    return 0;
}
ffffffff80214acd:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80214ad1:	5b                   	pop    %rbx
ffffffff80214ad2:	5d                   	pop    %rbp
ffffffff80214ad3:	41 5c                	pop    %r12
ffffffff80214ad5:	41 5d                	pop    %r13
ffffffff80214ad7:	41 5e                	pop    %r14
ffffffff80214ad9:	c3                   	retq   
ffffffff80214ada:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;

    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80214ae0:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff80214ae4:	76 25                	jbe    ffffffff80214b0b <_RME_Captbl_Boot_Crt+0x19b>
ffffffff80214ae6:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80214aea:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80214aee:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214af5:	4c 8b 0e             	mov    (%rsi),%r9
ffffffff80214af8:	4c 89 ca             	mov    %r9,%rdx
ffffffff80214afb:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80214aff:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80214b03:	0f 84 05 ff ff ff    	je     ffffffff80214a0e <_RME_Captbl_Boot_Crt+0x9e>
ffffffff80214b09:	eb c2                	jmp    ffffffff80214acd <_RME_Captbl_Boot_Crt+0x15d>
    struct RME_Cap_Captbl* Captbl_Crt;
    ptr_t Type_Ref;
    
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;
ffffffff80214b0b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214b12:	eb b9                	jmp    ffffffff80214acd <_RME_Captbl_Boot_Crt+0x15d>

    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80214b14:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214b1b:	eb b0                	jmp    ffffffff80214acd <_RME_Captbl_Boot_Crt+0x15d>
    struct RME_Cap_Captbl* Captbl_Crt;
    ptr_t Type_Ref;
    
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;
ffffffff80214b1d:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    Captbl_Crt->Entry_Num=Entry_Num;
    /* At last, write into slot the correct information, and clear the frozen bit */
    Captbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_CAPTBL,0);

    return 0;
}
ffffffff80214b24:	c3                   	retq   
        return RME_ERR_CAP_RANGE;

    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff80214b25:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214b2c:	eb 9f                	jmp    ffffffff80214acd <_RME_Captbl_Boot_Crt+0x15d>
    RME_CAPTBL_OCCUPY(Captbl_Crt,Type_Ref);
    /* Try to mark this area as populated */
    if(_RME_Kotbl_Mark(Vaddr, RME_CAPTBL_SIZE(Entry_Num))!=0)
    {
        /* Failure. Set the Type_Ref back to 0 and abort the creation process */
        Captbl->Head.Type_Ref=0;
ffffffff80214b2e:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
ffffffff80214b35:	00 
        return RME_ERR_CAP_KOTBL;
ffffffff80214b36:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80214b3d:	eb 8e                	jmp    ffffffff80214acd <_RME_Captbl_Boot_Crt+0x15d>
ffffffff80214b3f:	90                   	nop

ffffffff80214b40 <_RME_Captbl_Crt>:
    struct RME_Cap_Kmem* Kmem_Op;
    struct RME_Cap_Captbl* Captbl_Crt;
    ptr_t Type_Ref;

    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
ffffffff80214b40:	49 8d 41 ff          	lea    -0x1(%r9),%rax
ffffffff80214b44:	48 3d ff 7f 00 00    	cmp    $0x7fff,%rax
ffffffff80214b4a:	0f 87 90 02 00 00    	ja     ffffffff80214de0 <_RME_Captbl_Crt+0x2a0>
              ptr_t Entry_Num - The number of capabilities in the capability table.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Captbl_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl_Crt,
                      cid_t Cap_Kmem, cid_t Cap_Crt, ptr_t Vaddr, ptr_t Entry_Num)
{
ffffffff80214b50:	41 56                	push   %r14
ffffffff80214b52:	41 55                	push   %r13
ffffffff80214b54:	41 54                	push   %r12
ffffffff80214b56:	55                   	push   %rbp
ffffffff80214b57:	53                   	push   %rbx
ffffffff80214b58:	48 83 ec 10          	sub    $0x10,%rsp
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;

    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80214b5c:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80214b62:	0f 84 a8 01 00 00    	je     ffffffff80214d10 <_RME_Captbl_Crt+0x1d0>
ffffffff80214b68:	48 8b 5f 28          	mov    0x28(%rdi),%rbx
ffffffff80214b6c:	49 89 f2             	mov    %rsi,%r10
ffffffff80214b6f:	49 c1 fa 10          	sar    $0x10,%r10
ffffffff80214b73:	49 39 da             	cmp    %rbx,%r10
ffffffff80214b76:	0f 83 34 02 00 00    	jae    ffffffff80214db0 <_RME_Captbl_Crt+0x270>
ffffffff80214b7c:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
ffffffff80214b80:	49 c1 e2 06          	shl    $0x6,%r10
ffffffff80214b84:	48 bd 00 00 00 00 00 	movabs $0x800000000000,%rbp
ffffffff80214b8b:	80 00 00 
ffffffff80214b8e:	4d 01 da             	add    %r11,%r10
ffffffff80214b91:	49 8b 02             	mov    (%r10),%rax
ffffffff80214b94:	48 85 e8             	test   %rbp,%rax
ffffffff80214b97:	0f 85 33 02 00 00    	jne    ffffffff80214dd0 <_RME_Captbl_Crt+0x290>
ffffffff80214b9d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214ba1:	48 89 c5             	mov    %rax,%rbp
ffffffff80214ba4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214bab:	48 83 fd 03          	cmp    $0x3,%rbp
ffffffff80214baf:	0f 85 44 01 00 00    	jne    ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
ffffffff80214bb5:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80214bbb:	49 3b 72 28          	cmp    0x28(%r10),%rsi
ffffffff80214bbf:	0f 83 eb 01 00 00    	jae    ffffffff80214db0 <_RME_Captbl_Crt+0x270>
ffffffff80214bc5:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80214bc9:	49 03 72 18          	add    0x18(%r10),%rsi
ffffffff80214bcd:	48 8b 2e             	mov    (%rsi),%rbp
ffffffff80214bd0:	49 89 ea             	mov    %rbp,%r10
ffffffff80214bd3:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80214bd7:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80214bdb:	0f 85 18 01 00 00    	jne    ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff80214be1:	f6 c6 80             	test   $0x80,%dh
ffffffff80214be4:	0f 85 5e 01 00 00    	jne    ffffffff80214d48 <_RME_Captbl_Crt+0x208>
ffffffff80214bea:	48 39 da             	cmp    %rbx,%rdx
ffffffff80214bed:	0f 83 bd 01 00 00    	jae    ffffffff80214db0 <_RME_Captbl_Crt+0x270>
ffffffff80214bf3:	48 c1 e2 06          	shl    $0x6,%rdx
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;

    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80214bf7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff80214bfe:	4e 8d 14 1a          	lea    (%rdx,%r11,1),%r10
ffffffff80214c02:	66 41 83 7a 06 02    	cmpw   $0x2,0x6(%r10)
ffffffff80214c08:	0f 85 eb 00 00 00    	jne    ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff80214c0e:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80214c15:	80 00 00 
ffffffff80214c18:	48 85 d5             	test   %rdx,%rbp
ffffffff80214c1b:	0f 85 af 01 00 00    	jne    ffffffff80214dd0 <_RME_Captbl_Crt+0x290>
ffffffff80214c21:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff80214c25:	0f 84 95 01 00 00    	je     ffffffff80214dc0 <_RME_Captbl_Crt+0x280>
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_CAPTBL,Vaddr,RME_CAPTBL_SIZE(Entry_Num));
ffffffff80214c2b:	41 f6 42 10 01       	testb  $0x1,0x10(%r10)
ffffffff80214c30:	0f 84 8a 01 00 00    	je     ffffffff80214dc0 <_RME_Captbl_Crt+0x280>
ffffffff80214c36:	4d 39 42 28          	cmp    %r8,0x28(%r10)
ffffffff80214c3a:	0f 87 80 01 00 00    	ja     ffffffff80214dc0 <_RME_Captbl_Crt+0x280>
ffffffff80214c40:	4d 89 ce             	mov    %r9,%r14
ffffffff80214c43:	49 c1 e6 06          	shl    $0x6,%r14
ffffffff80214c47:	4b 8d 04 30          	lea    (%r8,%r14,1),%rax
ffffffff80214c4b:	49 39 42 30          	cmp    %rax,0x30(%r10)
ffffffff80214c4f:	0f 82 6b 01 00 00    	jb     ffffffff80214dc0 <_RME_Captbl_Crt+0x280>

    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Crt,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff80214c55:	48 39 4e 28          	cmp    %rcx,0x28(%rsi)
    struct RME_Cap_Captbl* Captbl_Crt;
    ptr_t Type_Ref;

    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;
ffffffff80214c59:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_CAPTBL,Vaddr,RME_CAPTBL_SIZE(Entry_Num));

    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Crt,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff80214c60:	0f 86 93 00 00 00    	jbe    ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
ffffffff80214c66:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80214c6a:	49 89 fc             	mov    %rdi,%r12
ffffffff80214c6d:	4d 89 cd             	mov    %r9,%r13
ffffffff80214c70:	48 89 cb             	mov    %rcx,%rbx
ffffffff80214c73:	48 03 5e 18          	add    0x18(%rsi),%rbx
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Captbl_Crt,Type_Ref);
ffffffff80214c77:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80214c7c:	4c 89 c5             	mov    %r8,%rbp
ffffffff80214c7f:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80214c86:	00 00 
ffffffff80214c88:	48 89 df             	mov    %rbx,%rdi
ffffffff80214c8b:	e8 f1 6b ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80214c90:	48 89 c2             	mov    %rax,%rdx
ffffffff80214c93:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80214c9a:	48 85 d2             	test   %rdx,%rdx
ffffffff80214c9d:	74 5a                	je     ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
    /* Try to mark this area as populated */
    if(_RME_Kotbl_Mark(Vaddr, RME_CAPTBL_SIZE(Entry_Num))!=0)
ffffffff80214c9f:	4c 89 f6             	mov    %r14,%rsi
ffffffff80214ca2:	48 89 ef             	mov    %rbp,%rdi
ffffffff80214ca5:	e8 e6 22 00 00       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff80214caa:	31 d2                	xor    %edx,%edx
ffffffff80214cac:	48 85 c0             	test   %rax,%rax
ffffffff80214caf:	48 89 e9             	mov    %rbp,%rcx
ffffffff80214cb2:	0f 85 30 01 00 00    	jne    ffffffff80214de8 <_RME_Captbl_Crt+0x2a8>
ffffffff80214cb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80214cbf:	00 
        Captbl->Head.Type_Ref=0;
        return RME_ERR_CAP_KOTBL;
    }

    /* Done. We start creation of the capability table. Clear header as well */
    for(Count=0;Count<Entry_Num;Count++)
ffffffff80214cc0:	48 83 c2 01          	add    $0x1,%rdx
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));
ffffffff80214cc4:	48 c7 01 00 00 00 00 	movq   $0x0,(%rcx)
ffffffff80214ccb:	48 83 c1 40          	add    $0x40,%rcx
        Captbl->Head.Type_Ref=0;
        return RME_ERR_CAP_KOTBL;
    }

    /* Done. We start creation of the capability table. Clear header as well */
    for(Count=0;Count<Entry_Num;Count++)
ffffffff80214ccf:	4c 39 ea             	cmp    %r13,%rdx
ffffffff80214cd2:	75 ec                	jne    ffffffff80214cc0 <_RME_Captbl_Crt+0x180>
    Captbl_Crt->Head.Flags=RME_CAPTBL_FLAG_CRT|RME_CAPTBL_FLAG_DEL|RME_CAPTBL_FLAG_FRZ|
                           RME_CAPTBL_FLAG_ADD_SRC|RME_CAPTBL_FLAG_ADD_DST|RME_CAPTBL_FLAG_REM|
                           RME_CAPTBL_FLAG_PROC_CRT|RME_CAPTBL_FLAG_PROC_CPT;
    Captbl_Crt->Entry_Num=Entry_Num;
    /* At last, write into slot the correct information, and clear the frozen bit */
    Captbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_CAPTBL,0);
ffffffff80214cd4:	48 bf 00 00 00 00 00 	movabs $0x3000000000000,%rdi
ffffffff80214cdb:	00 03 00 
    /* Done. We start creation of the capability table. Clear header as well */
    for(Count=0;Count<Entry_Num;Count++)
        RME_CAP_CLEAR(&(((struct RME_Cap_Struct*)Vaddr)[Count]));

    /* Set the cap's parameters according to what we have just created */
    Captbl_Crt->Head.Parent=0;
ffffffff80214cde:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff80214ce5:	00 
    Captbl_Crt->Head.Object=Vaddr;
ffffffff80214ce6:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
    Captbl_Crt->Head.Flags=RME_CAPTBL_FLAG_CRT|RME_CAPTBL_FLAG_DEL|RME_CAPTBL_FLAG_FRZ|
ffffffff80214cea:	48 c7 43 10 ff 00 00 	movq   $0xff,0x10(%rbx)
ffffffff80214cf1:	00 
                           RME_CAPTBL_FLAG_ADD_SRC|RME_CAPTBL_FLAG_ADD_DST|RME_CAPTBL_FLAG_REM|
                           RME_CAPTBL_FLAG_PROC_CRT|RME_CAPTBL_FLAG_PROC_CPT;
    Captbl_Crt->Entry_Num=Entry_Num;
ffffffff80214cf2:	48 89 53 28          	mov    %rdx,0x28(%rbx)
    /* At last, write into slot the correct information, and clear the frozen bit */
    Captbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_CAPTBL,0);
ffffffff80214cf6:	48 89 3b             	mov    %rdi,(%rbx)

    return 0;
}
ffffffff80214cf9:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80214cfd:	5b                   	pop    %rbx
ffffffff80214cfe:	5d                   	pop    %rbp
ffffffff80214cff:	41 5c                	pop    %r12
ffffffff80214d01:	41 5d                	pop    %r13
ffffffff80214d03:	41 5e                	pop    %r14
ffffffff80214d05:	c3                   	retq   
ffffffff80214d06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80214d0d:	00 00 00 
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;

    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80214d10:	48 8b 5f 28          	mov    0x28(%rdi),%rbx
ffffffff80214d14:	48 39 f3             	cmp    %rsi,%rbx
ffffffff80214d17:	0f 86 93 00 00 00    	jbe    ffffffff80214db0 <_RME_Captbl_Crt+0x270>
ffffffff80214d1d:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
ffffffff80214d21:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80214d25:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80214d2c:	4c 01 de             	add    %r11,%rsi
ffffffff80214d2f:	48 8b 2e             	mov    (%rsi),%rbp
ffffffff80214d32:	49 89 ea             	mov    %rbp,%r10
ffffffff80214d35:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80214d39:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80214d3d:	75 ba                	jne    ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff80214d3f:	f6 c6 80             	test   $0x80,%dh
ffffffff80214d42:	0f 84 a2 fe ff ff    	je     ffffffff80214bea <_RME_Captbl_Crt+0xaa>
ffffffff80214d48:	49 89 d2             	mov    %rdx,%r10
ffffffff80214d4b:	49 c1 fa 10          	sar    $0x10,%r10
ffffffff80214d4f:	49 39 da             	cmp    %rbx,%r10
ffffffff80214d52:	73 5c                	jae    ffffffff80214db0 <_RME_Captbl_Crt+0x270>
ffffffff80214d54:	49 c1 e2 06          	shl    $0x6,%r10
ffffffff80214d58:	4d 01 d3             	add    %r10,%r11
ffffffff80214d5b:	49 ba 00 00 00 00 00 	movabs $0x800000000000,%r10
ffffffff80214d62:	80 00 00 
ffffffff80214d65:	49 8b 03             	mov    (%r11),%rax
ffffffff80214d68:	4c 85 d0             	test   %r10,%rax
ffffffff80214d6b:	75 63                	jne    ffffffff80214dd0 <_RME_Captbl_Crt+0x290>
ffffffff80214d6d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214d71:	49 89 c2             	mov    %rax,%r10
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;

    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80214d74:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff80214d7b:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80214d7f:	0f 85 74 ff ff ff    	jne    ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
ffffffff80214d85:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80214d8b:	49 3b 53 28          	cmp    0x28(%r11),%rdx
ffffffff80214d8f:	73 1f                	jae    ffffffff80214db0 <_RME_Captbl_Crt+0x270>
ffffffff80214d91:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80214d95:	49 03 53 18          	add    0x18(%r11),%rdx
ffffffff80214d99:	66 83 7a 06 02       	cmpw   $0x2,0x6(%rdx)
ffffffff80214d9e:	49 89 d2             	mov    %rdx,%r10
ffffffff80214da1:	0f 84 67 fe ff ff    	je     ffffffff80214c0e <_RME_Captbl_Crt+0xce>
ffffffff80214da7:	e9 4d ff ff ff       	jmpq   ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
ffffffff80214dac:	0f 1f 40 00          	nopl   0x0(%rax)
    struct RME_Cap_Captbl* Captbl_Crt;
    ptr_t Type_Ref;

    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;
ffffffff80214db0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80214db7:	e9 3d ff ff ff       	jmpq   ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
ffffffff80214dbc:	0f 1f 40 00          	nopl   0x0(%rax)

    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff80214dc0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80214dc7:	e9 2d ff ff ff       	jmpq   ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
ffffffff80214dcc:	0f 1f 40 00          	nopl   0x0(%rax)
    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;

    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80214dd0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80214dd7:	e9 1d ff ff ff       	jmpq   ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
ffffffff80214ddc:	0f 1f 40 00          	nopl   0x0(%rax)
    struct RME_Cap_Captbl* Captbl_Crt;
    ptr_t Type_Ref;

    /* See if the entry number is too big */
    if((Entry_Num==0)||(Entry_Num>RME_CAPID_2L))
        return RME_ERR_CAP_RANGE;
ffffffff80214de0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    Captbl_Crt->Entry_Num=Entry_Num;
    /* At last, write into slot the correct information, and clear the frozen bit */
    Captbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_CAPTBL,0);

    return 0;
}
ffffffff80214de7:	c3                   	retq   
    RME_CAPTBL_OCCUPY(Captbl_Crt,Type_Ref);
    /* Try to mark this area as populated */
    if(_RME_Kotbl_Mark(Vaddr, RME_CAPTBL_SIZE(Entry_Num))!=0)
    {
        /* Failure. Set the Type_Ref back to 0 and abort the creation process */
        Captbl->Head.Type_Ref=0;
ffffffff80214de8:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffffff80214def:	00 
        return RME_ERR_CAP_KOTBL;
ffffffff80214df0:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80214df7:	e9 fd fe ff ff       	jmpq   ffffffff80214cf9 <_RME_Captbl_Crt+0x1b9>
ffffffff80214dfc:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80214e00 <_RME_Captbl_Del>:
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Del,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80214e00:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80214e06:	0f 85 44 01 00 00    	jne    ffffffff80214f50 <_RME_Captbl_Del+0x150>
ffffffff80214e0c:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff80214e10:	0f 86 5b 02 00 00    	jbe    ffffffff80215071 <_RME_Captbl_Del+0x271>
ffffffff80214e16:	48 89 f0             	mov    %rsi,%rax
ffffffff80214e19:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214e1d:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80214e21:	48 8b 08             	mov    (%rax),%rcx
ffffffff80214e24:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214e27:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80214e2b:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80214e2f:	0f 85 83 01 00 00    	jne    ffffffff80214fb8 <_RME_Captbl_Del+0x1b8>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff80214e35:	49 b8 00 00 00 00 00 	movabs $0x800000000000,%r8
ffffffff80214e3c:	80 00 00 
ffffffff80214e3f:	4c 85 c1             	test   %r8,%rcx
ffffffff80214e42:	0f 85 6f 02 00 00    	jne    ffffffff802150b7 <_RME_Captbl_Del+0x2b7>
ffffffff80214e48:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80214e4c:	0f 84 6e 02 00 00    	je     ffffffff802150c0 <_RME_Captbl_Del+0x2c0>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Del,struct RME_Cap_Captbl*,Captbl_Del);
ffffffff80214e52:	48 39 50 28          	cmp    %rdx,0x28(%rax)
ffffffff80214e56:	0f 86 15 02 00 00    	jbe    ffffffff80215071 <_RME_Captbl_Del+0x271>
              cid_t Cap_Del - The capability to the captbl being deleted. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Captbl_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl_Del, cid_t Cap_Del)
{
ffffffff80214e5c:	55                   	push   %rbp
ffffffff80214e5d:	53                   	push   %rbx
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Del,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Del,struct RME_Cap_Captbl*,Captbl_Del);
ffffffff80214e5e:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80214e62:	48 89 d7             	mov    %rdx,%rdi
              cid_t Cap_Del - The capability to the captbl being deleted. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Captbl_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl_Del, cid_t Cap_Del)
{
ffffffff80214e65:	48 83 ec 18          	sub    $0x18,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Del,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Del,struct RME_Cap_Captbl*,Captbl_Del);
ffffffff80214e69:	48 03 78 18          	add    0x18(%rax),%rdi
    /* Delete check */
    RME_CAP_DEL_CHECK(Captbl_Del,Type_Ref,RME_CAP_CAPTBL);
ffffffff80214e6d:	48 8b 37             	mov    (%rdi),%rsi
ffffffff80214e70:	4c 85 c6             	test   %r8,%rsi
ffffffff80214e73:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
ffffffff80214e78:	0f 85 4b 02 00 00    	jne    ffffffff802150c9 <_RME_Captbl_Del+0x2c9>
ffffffff80214e7e:	48 89 f0             	mov    %rsi,%rax
ffffffff80214e81:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214e85:	48 85 c0             	test   %rax,%rax
ffffffff80214e88:	0f 84 11 02 00 00    	je     ffffffff8021509f <_RME_Captbl_Del+0x29f>
ffffffff80214e8e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80214e92:	0f 85 c8 01 00 00    	jne    ffffffff80215060 <_RME_Captbl_Del+0x260>
ffffffff80214e98:	48 8b 05 61 e1 00 00 	mov    0xe161(%rip),%rax        # ffffffff80223000 <RME_Timestamp>
ffffffff80214e9f:	48 2b 47 20          	sub    0x20(%rdi),%rax
ffffffff80214ea3:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80214ea7:	0f 86 fe 01 00 00    	jbe    ffffffff802150ab <_RME_Captbl_Del+0x2ab>
ffffffff80214ead:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff80214eb4:	7f 00 00 
ffffffff80214eb7:	48 85 c6             	test   %rax,%rsi
ffffffff80214eba:	0f 85 bc 01 00 00    	jne    ffffffff8021507c <_RME_Captbl_Del+0x27c>
ffffffff80214ec0:	48 83 7f 08 00       	cmpq   $0x0,0x8(%rdi)
ffffffff80214ec5:	0f 85 b1 01 00 00    	jne    ffffffff8021507c <_RME_Captbl_Del+0x27c>
    
    /* Is there any capability in this capability table? If yes, we cannot destroy it.
     * We will check every slot to make sure nothing is there. This is surely,
     * predictable but not so perfect. So, if the time of such operations is to be 
     * bounded, the user must control the number of entries in the table */
    for(Count=0;Count<Captbl_Del->Entry_Num;Count++)
ffffffff80214ecb:	48 8b 5f 28          	mov    0x28(%rdi),%rbx
    {
        if(RME_CAP_TYPE(RME_CAP_GETOBJ(Captbl_Del,struct RME_Cap_Struct*)[Count].Head.Type_Ref)!=RME_CAP_NOP)
ffffffff80214ecf:	48 8b 6f 18          	mov    0x18(%rdi),%rbp
    
    /* Is there any capability in this capability table? If yes, we cannot destroy it.
     * We will check every slot to make sure nothing is there. This is surely,
     * predictable but not so perfect. So, if the time of such operations is to be 
     * bounded, the user must control the number of entries in the table */
    for(Count=0;Count<Captbl_Del->Entry_Num;Count++)
ffffffff80214ed3:	48 85 db             	test   %rbx,%rbx
ffffffff80214ed6:	74 39                	je     ffffffff80214f11 <_RME_Captbl_Del+0x111>
    {
        if(RME_CAP_TYPE(RME_CAP_GETOBJ(Captbl_Del,struct RME_Cap_Struct*)[Count].Head.Type_Ref)!=RME_CAP_NOP)
ffffffff80214ed8:	31 d2                	xor    %edx,%edx
ffffffff80214eda:	66 83 7d 06 00       	cmpw   $0x0,0x6(%rbp)
ffffffff80214edf:	48 8d 4d 40          	lea    0x40(%rbp),%rcx
ffffffff80214ee3:	74 1f                	je     ffffffff80214f04 <_RME_Captbl_Del+0x104>
ffffffff80214ee5:	e9 de 00 00 00       	jmpq   ffffffff80214fc8 <_RME_Captbl_Del+0x1c8>
ffffffff80214eea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80214ef0:	48 8b 01             	mov    (%rcx),%rax
ffffffff80214ef3:	48 83 c1 40          	add    $0x40,%rcx
ffffffff80214ef7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80214efb:	48 85 c0             	test   %rax,%rax
ffffffff80214efe:	0f 85 c4 00 00 00    	jne    ffffffff80214fc8 <_RME_Captbl_Del+0x1c8>
    
    /* Is there any capability in this capability table? If yes, we cannot destroy it.
     * We will check every slot to make sure nothing is there. This is surely,
     * predictable but not so perfect. So, if the time of such operations is to be 
     * bounded, the user must control the number of entries in the table */
    for(Count=0;Count<Captbl_Del->Entry_Num;Count++)
ffffffff80214f04:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80214f08:	48 39 da             	cmp    %rbx,%rdx
ffffffff80214f0b:	75 e3                	jne    ffffffff80214ef0 <_RME_Captbl_Del+0xf0>
ffffffff80214f0d:	48 c1 e3 06          	shl    $0x6,%rbx
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Captbl_Del,ptr_t);
    Size=RME_CAPTBL_SIZE(Captbl_Del->Entry_Num);
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Captbl_Del,Type_Ref);
ffffffff80214f11:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80214f16:	31 d2                	xor    %edx,%edx
ffffffff80214f18:	e8 64 69 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80214f1d:	48 85 c0             	test   %rax,%rax
ffffffff80214f20:	0f 84 79 01 00 00    	je     ffffffff8021509f <_RME_Captbl_Del+0x29f>
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object,Size)!=0);
ffffffff80214f26:	48 89 de             	mov    %rbx,%rsi
ffffffff80214f29:	48 89 ef             	mov    %rbp,%rdi
ffffffff80214f2c:	e8 8f 22 00 00       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
    
    return 0;
ffffffff80214f31:	31 d2                	xor    %edx,%edx
    Size=RME_CAPTBL_SIZE(Captbl_Del->Entry_Num);
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Captbl_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object,Size)!=0);
ffffffff80214f33:	48 85 c0             	test   %rax,%rax
ffffffff80214f36:	0f 84 b4 00 00 00    	je     ffffffff80214ff0 <_RME_Captbl_Del+0x1f0>
    
    return 0;
}
ffffffff80214f3c:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80214f40:	48 89 d0             	mov    %rdx,%rax
ffffffff80214f43:	5b                   	pop    %rbx
ffffffff80214f44:	5d                   	pop    %rbp
ffffffff80214f45:	c3                   	retq   
ffffffff80214f46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80214f4d:	00 00 00 
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Del,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80214f50:	48 89 f0             	mov    %rsi,%rax
ffffffff80214f53:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff80214f57:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff80214f5b:	0f 83 10 01 00 00    	jae    ffffffff80215071 <_RME_Captbl_Del+0x271>
ffffffff80214f61:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80214f65:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80214f69:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80214f70:	80 00 00 
ffffffff80214f73:	48 8b 08             	mov    (%rax),%rcx
ffffffff80214f76:	48 85 f9             	test   %rdi,%rcx
ffffffff80214f79:	0f 85 38 01 00 00    	jne    ffffffff802150b7 <_RME_Captbl_Del+0x2b7>
ffffffff80214f7f:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80214f83:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80214f87:	75 2f                	jne    ffffffff80214fb8 <_RME_Captbl_Del+0x1b8>
ffffffff80214f89:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80214f8f:	48 3b 70 28          	cmp    0x28(%rax),%rsi
ffffffff80214f93:	0f 83 d8 00 00 00    	jae    ffffffff80215071 <_RME_Captbl_Del+0x271>
ffffffff80214f99:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80214f9d:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff80214fa1:	48 89 f0             	mov    %rsi,%rax
ffffffff80214fa4:	48 8b 08             	mov    (%rax),%rcx
ffffffff80214fa7:	48 89 ce             	mov    %rcx,%rsi
ffffffff80214faa:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80214fae:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80214fb2:	0f 84 7d fe ff ff    	je     ffffffff80214e35 <_RME_Captbl_Del+0x35>
ffffffff80214fb8:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
ffffffff80214fbf:	e9 b4 00 00 00       	jmpq   ffffffff80215078 <_RME_Captbl_Del+0x278>
ffffffff80214fc4:	0f 1f 40 00          	nopl   0x0(%rax)
     * bounded, the user must control the number of entries in the table */
    for(Count=0;Count<Captbl_Del->Entry_Num;Count++)
    {
        if(RME_CAP_TYPE(RME_CAP_GETOBJ(Captbl_Del,struct RME_Cap_Struct*)[Count].Head.Type_Ref)!=RME_CAP_NOP)
        {
            RME_CAP_DEFROST(Captbl_Del,Type_Ref);
ffffffff80214fc8:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff80214fcf:	7f ff ff 
ffffffff80214fd2:	48 21 f2             	and    %rsi,%rdx
ffffffff80214fd5:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80214fda:	e8 a2 68 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
    RME_CAP_REMDEL(Captbl_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object,Size)!=0);
    
    return 0;
}
ffffffff80214fdf:	48 83 c4 18          	add    $0x18,%rsp
    for(Count=0;Count<Captbl_Del->Entry_Num;Count++)
    {
        if(RME_CAP_TYPE(RME_CAP_GETOBJ(Captbl_Del,struct RME_Cap_Struct*)[Count].Head.Type_Ref)!=RME_CAP_NOP)
        {
            RME_CAP_DEFROST(Captbl_Del,Type_Ref);
            return RME_ERR_CAP_EXIST;
ffffffff80214fe3:	48 c7 c2 fb ff ff ff 	mov    $0xfffffffffffffffb,%rdx
    RME_CAP_REMDEL(Captbl_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object,Size)!=0);
    
    return 0;
}
ffffffff80214fea:	48 89 d0             	mov    %rdx,%rax
ffffffff80214fed:	5b                   	pop    %rbx
ffffffff80214fee:	5d                   	pop    %rbp
ffffffff80214fef:	c3                   	retq   
    Size=RME_CAPTBL_SIZE(Captbl_Del->Entry_Num);
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Captbl_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object,Size)!=0);
ffffffff80214ff0:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80214ff7:	e8 14 1f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80214ffc:	48 c7 c7 a0 ed 21 80 	mov    $0xffffffff8021eda0,%rdi
ffffffff80215003:	e8 08 1f 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80215008:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021500f:	e8 fc 1e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80215014:	bf 38 01 00 00       	mov    $0x138,%edi
ffffffff80215019:	e8 b2 1c 00 00       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021501e:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80215025:	e8 e6 1e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021502a:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80215031:	e8 da 1e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80215036:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021503d:	e8 ce 1e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80215042:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff80215049:	e8 c2 1e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021504e:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80215055:	e8 b6 1e 00 00       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021505a:	eb fe                	jmp    ffffffff8021505a <_RME_Captbl_Del+0x25a>
ffffffff8021505c:	0f 1f 40 00          	nopl   0x0(%rax)
    
    return 0;
}
ffffffff80215060:	48 83 c4 18          	add    $0x18,%rsp
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Del,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80215064:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
    RME_CAP_REMDEL(Captbl_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object,Size)!=0);
    
    return 0;
}
ffffffff8021506b:	48 89 d0             	mov    %rdx,%rax
ffffffff8021506e:	5b                   	pop    %rbx
ffffffff8021506f:	5d                   	pop    %rbp
ffffffff80215070:	c3                   	retq   
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Del,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80215071:	48 c7 c2 fd ff ff ff 	mov    $0xfffffffffffffffd,%rdx
    RME_CAP_REMDEL(Captbl_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object,Size)!=0);
    
    return 0;
}
ffffffff80215078:	48 89 d0             	mov    %rdx,%rax
ffffffff8021507b:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Del,struct RME_Cap_Captbl*,Captbl_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Captbl_Del,Type_Ref,RME_CAP_CAPTBL);
ffffffff8021507c:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff80215083:	7f ff ff 
ffffffff80215086:	48 21 f2             	and    %rsi,%rdx
ffffffff80215089:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021508e:	e8 ee 67 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80215093:	48 c7 c2 fa ff ff ff 	mov    $0xfffffffffffffffa,%rdx
ffffffff8021509a:	e9 9d fe ff ff       	jmpq   ffffffff80214f3c <_RME_Captbl_Del+0x13c>
ffffffff8021509f:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802150a6:	e9 91 fe ff ff       	jmpq   ffffffff80214f3c <_RME_Captbl_Del+0x13c>
ffffffff802150ab:	48 c7 c2 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rdx
ffffffff802150b2:	e9 85 fe ff ff       	jmpq   ffffffff80214f3c <_RME_Captbl_Del+0x13c>
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Del,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff802150b7:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
ffffffff802150be:	eb b8                	jmp    ffffffff80215078 <_RME_Captbl_Del+0x278>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff802150c0:	48 c7 c2 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rdx
ffffffff802150c7:	eb af                	jmp    ffffffff80215078 <_RME_Captbl_Del+0x278>
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Del,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff802150c9:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
ffffffff802150d0:	e9 67 fe ff ff       	jmpq   ffffffff80214f3c <_RME_Captbl_Del+0x13c>
ffffffff802150d5:	90                   	nop
ffffffff802150d6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff802150dd:	00 00 00 

ffffffff802150e0 <_RME_Captbl_Frz>:
    struct RME_Cap_Captbl* Captbl_Op;
    struct RME_Cap_Struct* Captbl_Frz;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Frz,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff802150e0:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff802150e6:	75 30                	jne    ffffffff80215118 <_RME_Captbl_Frz+0x38>
ffffffff802150e8:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff802150ec:	0f 86 26 01 00 00    	jbe    ffffffff80215218 <_RME_Captbl_Frz+0x138>
ffffffff802150f2:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802150f6:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff802150fa:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215101:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff80215104:	48 89 cf             	mov    %rcx,%rdi
ffffffff80215107:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021510b:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021510f:	74 7a                	je     ffffffff8021518b <_RME_Captbl_Frz+0xab>
ffffffff80215111:	f3 c3                	repz retq 
ffffffff80215113:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80215118:	48 89 f1             	mov    %rsi,%rcx
ffffffff8021511b:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff8021511f:	48 3b 4f 28          	cmp    0x28(%rdi),%rcx
ffffffff80215123:	0f 83 ef 00 00 00    	jae    ffffffff80215218 <_RME_Captbl_Frz+0x138>
ffffffff80215129:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021512d:	48 03 4f 18          	add    0x18(%rdi),%rcx
ffffffff80215131:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80215138:	80 00 00 
ffffffff8021513b:	48 8b 01             	mov    (%rcx),%rax
ffffffff8021513e:	48 85 f8             	test   %rdi,%rax
ffffffff80215141:	0f 85 e9 00 00 00    	jne    ffffffff80215230 <_RME_Captbl_Frz+0x150>
ffffffff80215147:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021514b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021514e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215155:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80215159:	0f 85 b2 00 00 00    	jne    ffffffff80215211 <_RME_Captbl_Frz+0x131>
ffffffff8021515f:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80215165:	48 3b 71 28          	cmp    0x28(%rcx),%rsi
ffffffff80215169:	0f 83 a9 00 00 00    	jae    ffffffff80215218 <_RME_Captbl_Frz+0x138>
ffffffff8021516f:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80215173:	48 03 71 18          	add    0x18(%rcx),%rsi
ffffffff80215177:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff8021517a:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021517d:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80215181:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80215185:	0f 85 86 00 00 00    	jne    ffffffff80215211 <_RME_Captbl_Frz+0x131>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_FRZ);
ffffffff8021518b:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80215192:	80 00 00 
ffffffff80215195:	48 85 c1             	test   %rax,%rcx
ffffffff80215198:	0f 85 92 00 00 00    	jne    ffffffff80215230 <_RME_Captbl_Frz+0x150>
ffffffff8021519e:	f6 46 10 04          	testb  $0x4,0x10(%rsi)
ffffffff802151a2:	0f 84 98 00 00 00    	je     ffffffff80215240 <_RME_Captbl_Frz+0x160>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Frz,struct RME_Cap_Struct*,Captbl_Frz);
ffffffff802151a8:	48 39 56 28          	cmp    %rdx,0x28(%rsi)
ffffffff802151ac:	76 6a                	jbe    ffffffff80215218 <_RME_Captbl_Frz+0x138>
              cid_t Cap_Frz - The cap to the kernel object being freezed. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Captbl_Frz(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl_Frz, cid_t Cap_Frz)
{
ffffffff802151ae:	48 83 ec 18          	sub    $0x18,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Frz,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_FRZ);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Frz,struct RME_Cap_Struct*,Captbl_Frz);
ffffffff802151b2:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802151b6:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff802151ba:	48 89 d7             	mov    %rdx,%rdi
    /* Check if anything is there. If nothing there, the Type_Ref must be 0 */
    Type_Ref=Captbl_Frz->Head.Type_Ref;
ffffffff802151bd:	48 8b 12             	mov    (%rdx),%rdx
    /* See if there is a cap */
    if(RME_CAP_TYPE(Type_Ref)==RME_CAP_NOP)
ffffffff802151c0:	48 89 d1             	mov    %rdx,%rcx
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_FRZ);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Frz,struct RME_Cap_Struct*,Captbl_Frz);
    /* Check if anything is there. If nothing there, the Type_Ref must be 0 */
    Type_Ref=Captbl_Frz->Head.Type_Ref;
ffffffff802151c3:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    /* See if there is a cap */
    if(RME_CAP_TYPE(Type_Ref)==RME_CAP_NOP)
ffffffff802151c8:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802151cc:	48 85 c9             	test   %rcx,%rcx
ffffffff802151cf:	74 7f                	je     ffffffff80215250 <_RME_Captbl_Frz+0x170>
        return RME_ERR_CAP_NULL;
    /* The reference count does not allow freezing */
    if(RME_CAP_REF(Type_Ref)!=0)
ffffffff802151d1:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffff,%rcx
ffffffff802151d8:	7f 00 00 
ffffffff802151db:	48 85 ca             	test   %rcx,%rdx
ffffffff802151de:	0f 85 7c 00 00 00    	jne    ffffffff80215260 <_RME_Captbl_Frz+0x180>
        return RME_ERR_CAP_REFCNT;
    /* The capability is already frozen - why do it again? */
    if((Type_Ref&RME_CAP_FROZEN)!=0)
ffffffff802151e4:	48 85 c2             	test   %rax,%rdx
ffffffff802151e7:	75 37                	jne    ffffffff80215220 <_RME_Captbl_Frz+0x140>
        return RME_ERR_CAP_FROZEN;
    
    /* Update the timestamp */
    Captbl_Frz->Head.Timestamp=RME_Timestamp;
ffffffff802151e9:	48 8b 05 10 de 00 00 	mov    0xde10(%rip),%rax        # ffffffff80223000 <RME_Timestamp>
    
    /* Finally, freeze it */
    if(__RME_Comp_Swap(&(Captbl_Frz->Head.Type_Ref),&Type_Ref,Type_Ref|RME_CAPTBL_FLAG_FRZ)==0)
ffffffff802151f0:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff802151f5:	48 83 ca 04          	or     $0x4,%rdx
    /* The capability is already frozen - why do it again? */
    if((Type_Ref&RME_CAP_FROZEN)!=0)
        return RME_ERR_CAP_FROZEN;
    
    /* Update the timestamp */
    Captbl_Frz->Head.Timestamp=RME_Timestamp;
ffffffff802151f9:	48 89 47 20          	mov    %rax,0x20(%rdi)
    
    /* Finally, freeze it */
    if(__RME_Comp_Swap(&(Captbl_Frz->Head.Type_Ref),&Type_Ref,Type_Ref|RME_CAPTBL_FLAG_FRZ)==0)
ffffffff802151fd:	e8 7f 66 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
        return RME_ERR_CAP_EXIST;
ffffffff80215202:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80215206:	48 19 c0             	sbb    %rax,%rax
ffffffff80215209:	48 83 e0 fb          	and    $0xfffffffffffffffb,%rax
    
    return 0;
}
ffffffff8021520d:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80215211:	f3 c3                	repz retq 
ffffffff80215213:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    struct RME_Cap_Captbl* Captbl_Op;
    struct RME_Cap_Struct* Captbl_Frz;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Frz,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80215218:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021521f:	c3                   	retq   
ffffffff80215220:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215227:	eb e4                	jmp    ffffffff8021520d <_RME_Captbl_Frz+0x12d>
ffffffff80215229:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80215230:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
    /* Finally, freeze it */
    if(__RME_Comp_Swap(&(Captbl_Frz->Head.Type_Ref),&Type_Ref,Type_Ref|RME_CAPTBL_FLAG_FRZ)==0)
        return RME_ERR_CAP_EXIST;
    
    return 0;
}
ffffffff80215237:	c3                   	retq   
ffffffff80215238:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021523f:	00 
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Frz,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_FRZ);
ffffffff80215240:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215247:	c3                   	retq   
ffffffff80215248:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021524f:	00 
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Frz,struct RME_Cap_Struct*,Captbl_Frz);
    /* Check if anything is there. If nothing there, the Type_Ref must be 0 */
    Type_Ref=Captbl_Frz->Head.Type_Ref;
    /* See if there is a cap */
    if(RME_CAP_TYPE(Type_Ref)==RME_CAP_NOP)
        return RME_ERR_CAP_NULL;
ffffffff80215250:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80215257:	eb b4                	jmp    ffffffff8021520d <_RME_Captbl_Frz+0x12d>
ffffffff80215259:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    /* The reference count does not allow freezing */
    if(RME_CAP_REF(Type_Ref)!=0)
        return RME_ERR_CAP_REFCNT;
ffffffff80215260:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff80215267:	eb a4                	jmp    ffffffff8021520d <_RME_Captbl_Frz+0x12d>
ffffffff80215269:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80215270 <_RME_Captbl_Add>:
******************************************************************************/
ret_t _RME_Captbl_Add(struct RME_Cap_Captbl* Captbl,
                      cid_t Cap_Captbl_Dst, cid_t Cap_Dst, 
                      cid_t Cap_Captbl_Src, cid_t Cap_Src,
                      ptr_t Flags, ptr_t Ext_Flags)
{
ffffffff80215270:	41 54                	push   %r12
ffffffff80215272:	55                   	push   %rbp
ffffffff80215273:	53                   	push   %rbx
ffffffff80215274:	48 83 ec 10          	sub    $0x10,%rsp
    ptr_t Kmem_End;
    ptr_t Kmem_Start;
    ptr_t Kmem_Flags;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Dst,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Dst);
ffffffff80215278:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021527e:	75 40                	jne    ffffffff802152c0 <_RME_Captbl_Add+0x50>
ffffffff80215280:	4c 8b 5f 28          	mov    0x28(%rdi),%r11
ffffffff80215284:	49 39 f3             	cmp    %rsi,%r11
ffffffff80215287:	0f 86 e3 02 00 00    	jbe    ffffffff80215570 <_RME_Captbl_Add+0x300>
ffffffff8021528d:	4c 8b 57 18          	mov    0x18(%rdi),%r10
ffffffff80215291:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80215295:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021529c:	4c 01 d6             	add    %r10,%rsi
ffffffff8021529f:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff802152a2:	48 89 fb             	mov    %rdi,%rbx
ffffffff802152a5:	48 c1 eb 30          	shr    $0x30,%rbx
ffffffff802152a9:	48 83 fb 03          	cmp    $0x3,%rbx
ffffffff802152ad:	0f 84 83 00 00 00    	je     ffffffff80215336 <_RME_Captbl_Add+0xc6>
    }
    /* Write in the correct information */
    Cap_Dst_Struct->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref),0);
    
    return 0;
}
ffffffff802152b3:	48 83 c4 10          	add    $0x10,%rsp
ffffffff802152b7:	5b                   	pop    %rbx
ffffffff802152b8:	5d                   	pop    %rbp
ffffffff802152b9:	41 5c                	pop    %r12
ffffffff802152bb:	c3                   	retq   
ffffffff802152bc:	0f 1f 40 00          	nopl   0x0(%rax)
    ptr_t Kmem_End;
    ptr_t Kmem_Start;
    ptr_t Kmem_Flags;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Dst,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Dst);
ffffffff802152c0:	4c 8b 5f 28          	mov    0x28(%rdi),%r11
ffffffff802152c4:	48 89 f0             	mov    %rsi,%rax
ffffffff802152c7:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff802152cb:	4c 39 d8             	cmp    %r11,%rax
ffffffff802152ce:	0f 83 9c 02 00 00    	jae    ffffffff80215570 <_RME_Captbl_Add+0x300>
ffffffff802152d4:	4c 8b 57 18          	mov    0x18(%rdi),%r10
ffffffff802152d8:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802152dc:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff802152e3:	80 00 00 
ffffffff802152e6:	4a 8d 3c 10          	lea    (%rax,%r10,1),%rdi
ffffffff802152ea:	48 8b 07             	mov    (%rdi),%rax
ffffffff802152ed:	48 85 d8             	test   %rbx,%rax
ffffffff802152f0:	0f 85 ea 02 00 00    	jne    ffffffff802155e0 <_RME_Captbl_Add+0x370>
ffffffff802152f6:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802152fa:	48 89 c3             	mov    %rax,%rbx
ffffffff802152fd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215304:	48 83 fb 03          	cmp    $0x3,%rbx
ffffffff80215308:	75 a9                	jne    ffffffff802152b3 <_RME_Captbl_Add+0x43>
ffffffff8021530a:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80215310:	48 3b 77 28          	cmp    0x28(%rdi),%rsi
ffffffff80215314:	0f 83 56 02 00 00    	jae    ffffffff80215570 <_RME_Captbl_Add+0x300>
ffffffff8021531a:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021531e:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80215322:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff80215325:	48 89 fb             	mov    %rdi,%rbx
ffffffff80215328:	48 c1 eb 30          	shr    $0x30,%rbx
ffffffff8021532c:	48 83 fb 03          	cmp    $0x3,%rbx
ffffffff80215330:	0f 85 7d ff ff ff    	jne    ffffffff802152b3 <_RME_Captbl_Add+0x43>
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Src,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Src);
ffffffff80215336:	f6 c5 80             	test   $0x80,%ch
ffffffff80215339:	0f 85 b9 01 00 00    	jne    ffffffff802154f8 <_RME_Captbl_Add+0x288>
ffffffff8021533f:	4c 39 d9             	cmp    %r11,%rcx
ffffffff80215342:	0f 83 28 02 00 00    	jae    ffffffff80215570 <_RME_Captbl_Add+0x300>
ffffffff80215348:	48 c1 e1 06          	shl    $0x6,%rcx
    ptr_t Kmem_End;
    ptr_t Kmem_Start;
    ptr_t Kmem_Flags;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Dst,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Dst);
ffffffff8021534c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Src,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Src);
ffffffff80215353:	4c 01 d1             	add    %r10,%rcx
ffffffff80215356:	4c 8b 19             	mov    (%rcx),%r11
ffffffff80215359:	4d 89 da             	mov    %r11,%r10
ffffffff8021535c:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80215360:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80215364:	0f 85 49 ff ff ff    	jne    ffffffff802152b3 <_RME_Captbl_Add+0x43>
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Dst,RME_CAPTBL_FLAG_ADD_DST);
ffffffff8021536a:	49 ba 00 00 00 00 00 	movabs $0x800000000000,%r10
ffffffff80215371:	80 00 00 
ffffffff80215374:	4c 85 d7             	test   %r10,%rdi
ffffffff80215377:	0f 85 63 02 00 00    	jne    ffffffff802155e0 <_RME_Captbl_Add+0x370>
ffffffff8021537d:	f6 46 10 10          	testb  $0x10,0x10(%rsi)
ffffffff80215381:	0f 84 49 02 00 00    	je     ffffffff802155d0 <_RME_Captbl_Add+0x360>
    RME_CAP_CHECK(Captbl_Src,RME_CAPTBL_FLAG_ADD_SRC);
ffffffff80215387:	4d 85 d3             	test   %r10,%r11
ffffffff8021538a:	0f 85 50 02 00 00    	jne    ffffffff802155e0 <_RME_Captbl_Add+0x370>
ffffffff80215390:	f6 41 10 08          	testb  $0x8,0x10(%rcx)
ffffffff80215394:	0f 84 36 02 00 00    	je     ffffffff802155d0 <_RME_Captbl_Add+0x360>
    
    /* Get the cap slots */
    RME_CAPTBL_GETSLOT(Captbl_Dst,Cap_Dst,struct RME_Cap_Struct*,Cap_Dst_Struct);
ffffffff8021539a:	48 39 56 28          	cmp    %rdx,0x28(%rsi)
ffffffff8021539e:	0f 86 cc 01 00 00    	jbe    ffffffff80215570 <_RME_Captbl_Add+0x300>
    RME_CAPTBL_GETSLOT(Captbl_Src,Cap_Src,struct RME_Cap_Struct*,Cap_Src_Struct);
ffffffff802153a4:	4c 39 41 28          	cmp    %r8,0x28(%rcx)
ffffffff802153a8:	0f 86 c2 01 00 00    	jbe    ffffffff80215570 <_RME_Captbl_Add+0x300>
ffffffff802153ae:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff802153b2:	4c 89 c3             	mov    %r8,%rbx
ffffffff802153b5:	48 03 59 18          	add    0x18(%rcx),%rbx
    
    /* Does the source cap exist, and not freezed? */
    if(Cap_Src_Struct->Head.Type_Ref==0)
ffffffff802153b9:	48 8b 03             	mov    (%rbx),%rax
ffffffff802153bc:	48 85 c0             	test   %rax,%rax
ffffffff802153bf:	0f 84 ab 02 00 00    	je     ffffffff80215670 <_RME_Captbl_Add+0x400>
        return RME_ERR_CAP_NULL;
    if(((Cap_Src_Struct->Head.Type_Ref)&RME_CAP_FROZEN)!=0)
ffffffff802153c5:	4c 85 d0             	test   %r10,%rax
ffffffff802153c8:	0f 85 12 02 00 00    	jne    ffffffff802155e0 <_RME_Captbl_Add+0x370>
    Kmem_End=0;
    Kmem_Start=0;
    Kmem_Flags=0;
    
    /* Is there a flag conflict? - For page tables, we have different checking mechanisms */
    if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_PGTBL)
ffffffff802153ce:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802153d2:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802153d6:	48 89 c1             	mov    %rax,%rcx
ffffffff802153d9:	0f 84 a1 01 00 00    	je     ffffffff80215580 <_RME_Captbl_Add+0x310>
        if(RME_PGTBL_FLAG_FLAGS(Flags)==0)
            return RME_ERR_CAP_FLAG;
        if((RME_PGTBL_FLAG_FLAGS(Flags)&(~RME_PGTBL_FLAG_FLAGS(Cap_Src_Struct->Head.Flags)))!=0)
            return RME_ERR_CAP_FLAG;
    }
    else if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_KERN)
ffffffff802153df:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802153e3:	0f 84 07 02 00 00    	je     ffffffff802155f0 <_RME_Captbl_Add+0x380>
        if(RME_KERN_FLAG_LOW(Flags)<RME_KERN_FLAG_LOW(Cap_Src_Struct->Head.Flags))
            return RME_ERR_CAP_FLAG;
        if(RME_KERN_FLAG_HIGH(Flags)<RME_KERN_FLAG_LOW(Flags))
            return RME_ERR_CAP_FLAG;
    }
    else if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_KMEM)
ffffffff802153e9:	48 83 f9 02          	cmp    $0x2,%rcx

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Dst,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Dst);
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Src,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Src);
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Dst,RME_CAPTBL_FLAG_ADD_DST);
ffffffff802153ed:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
        if(RME_KERN_FLAG_LOW(Flags)<RME_KERN_FLAG_LOW(Cap_Src_Struct->Head.Flags))
            return RME_ERR_CAP_FLAG;
        if(RME_KERN_FLAG_HIGH(Flags)<RME_KERN_FLAG_LOW(Flags))
            return RME_ERR_CAP_FLAG;
    }
    else if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_KMEM)
ffffffff802153f4:	0f 84 b9 fe ff ff    	je     ffffffff802152b3 <_RME_Captbl_Add+0x43>
            return RME_ERR_CAP_FLAG;
    }
    else
    {
        /* Check the flags - if there are extra ones, or all zero */
        if(Flags==0)
ffffffff802153fa:	4d 85 c9             	test   %r9,%r9
ffffffff802153fd:	0f 84 b0 fe ff ff    	je     ffffffff802152b3 <_RME_Captbl_Add+0x43>
            return RME_ERR_CAP_FLAG;
        if((Flags&(~(Cap_Src_Struct->Head.Flags)))!=0)
ffffffff80215403:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
ffffffff80215407:	48 f7 d1             	not    %rcx
ffffffff8021540a:	4c 85 c9             	test   %r9,%rcx
ffffffff8021540d:	0f 85 a0 fe ff ff    	jne    ffffffff802152b3 <_RME_Captbl_Add+0x43>
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Dst,RME_CAPTBL_FLAG_ADD_DST);
    RME_CAP_CHECK(Captbl_Src,RME_CAPTBL_FLAG_ADD_SRC);
    
    /* Get the cap slots */
    RME_CAPTBL_GETSLOT(Captbl_Dst,Cap_Dst,struct RME_Cap_Struct*,Cap_Dst_Struct);
ffffffff80215413:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80215417:	48 03 56 18          	add    0x18(%rsi),%rdx
            return RME_ERR_CAP_FLAG;
        if((Flags&(~(Cap_Src_Struct->Head.Flags)))!=0)
            return RME_ERR_CAP_FLAG;
    }
    /* Is the destination slot unoccupied, and is quiescent? */
    if(Cap_Dst_Struct->Head.Type_Ref!=0)
ffffffff8021541b:	48 83 3a 00          	cmpq   $0x0,(%rdx)
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Dst,RME_CAPTBL_FLAG_ADD_DST);
    RME_CAP_CHECK(Captbl_Src,RME_CAPTBL_FLAG_ADD_SRC);
    
    /* Get the cap slots */
    RME_CAPTBL_GETSLOT(Captbl_Dst,Cap_Dst,struct RME_Cap_Struct*,Cap_Dst_Struct);
ffffffff8021541f:	48 89 d5             	mov    %rdx,%rbp
            return RME_ERR_CAP_FLAG;
        if((Flags&(~(Cap_Src_Struct->Head.Flags)))!=0)
            return RME_ERR_CAP_FLAG;
    }
    /* Is the destination slot unoccupied, and is quiescent? */
    if(Cap_Dst_Struct->Head.Type_Ref!=0)
ffffffff80215422:	0f 85 38 02 00 00    	jne    ffffffff80215660 <_RME_Captbl_Add+0x3f0>
        return RME_ERR_CAP_EXIST;
    if(RME_CAP_QUIE(Cap_Dst_Struct->Head.Timestamp)==0)
ffffffff80215428:	48 8b 15 d1 db 00 00 	mov    0xdbd1(%rip),%rdx        # ffffffff80223000 <RME_Timestamp>
ffffffff8021542f:	48 2b 55 20          	sub    0x20(%rbp),%rdx
        return RME_ERR_CAP_QUIE;
ffffffff80215433:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
            return RME_ERR_CAP_FLAG;
    }
    /* Is the destination slot unoccupied, and is quiescent? */
    if(Cap_Dst_Struct->Head.Type_Ref!=0)
        return RME_ERR_CAP_EXIST;
    if(RME_CAP_QUIE(Cap_Dst_Struct->Head.Timestamp)==0)
ffffffff8021543a:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021543e:	0f 86 6f fe ff ff    	jbe    ffffffff802152b3 <_RME_Captbl_Add+0x43>
        return RME_ERR_CAP_QUIE;
    
    /* Try to take the empty slot */
    RME_CAPTBL_OCCUPY(Cap_Dst_Struct,Type_Ref);
ffffffff80215444:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80215449:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80215450:	80 00 00 
ffffffff80215453:	48 89 ef             	mov    %rbp,%rdi
ffffffff80215456:	4d 89 cc             	mov    %r9,%r12
ffffffff80215459:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80215460:	00 00 
ffffffff80215462:	e8 1a 64 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80215467:	48 85 c0             	test   %rax,%rax
ffffffff8021546a:	0f 84 f0 01 00 00    	je     ffffffff80215660 <_RME_Captbl_Add+0x3f0>
    
    /* All done, we replicate the cap with flags */
    if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_KMEM)
ffffffff80215470:	66 83 7b 06 02       	cmpw   $0x2,0x6(%rbx)
ffffffff80215475:	0f 84 a5 01 00 00    	je     ffffffff80215620 <_RME_Captbl_Add+0x3b0>
        /* If this is a kernel memory cap, we need to write the range information as well */
        ((struct RME_Cap_Kmem*)Cap_Dst_Struct)->Start=Kmem_Start;
        ((struct RME_Cap_Kmem*)Cap_Dst_Struct)->End=Kmem_End-1;
    }
    else
        RME_CAP_COPY(Cap_Dst_Struct,Cap_Src_Struct,Flags);
ffffffff8021547b:	4c 89 65 10          	mov    %r12,0x10(%rbp)
ffffffff8021547f:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff80215483:	48 89 45 18          	mov    %rax,0x18(%rbp)
ffffffff80215487:	48 8b 43 28          	mov    0x28(%rbx),%rax
ffffffff8021548b:	48 89 45 28          	mov    %rax,0x28(%rbp)
ffffffff8021548f:	48 8b 43 30          	mov    0x30(%rbx),%rax
ffffffff80215493:	48 89 45 30          	mov    %rax,0x30(%rbp)
ffffffff80215497:	48 8b 43 38          	mov    0x38(%rbx),%rax
ffffffff8021549b:	48 89 45 38          	mov    %rax,0x38(%rbp)
    
    /* Set the parent */
    Cap_Dst_Struct->Head.Parent=(ptr_t)Cap_Src_Struct;
ffffffff8021549f:	48 89 5d 08          	mov    %rbx,0x8(%rbp)
    /* Set the parent's reference count */
    Type_Ref=__RME_Fetch_Add(&(Cap_Src_Struct->Head.Type_Ref), 1);
ffffffff802154a3:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802154a8:	48 89 df             	mov    %rbx,%rdi
ffffffff802154ab:	e8 ee 63 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    /* Is it overflowed? */
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff802154b0:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffff,%rdx
ffffffff802154b7:	7f 00 00 
        RME_CAP_COPY(Cap_Dst_Struct,Cap_Src_Struct,Flags);
    
    /* Set the parent */
    Cap_Dst_Struct->Head.Parent=(ptr_t)Cap_Src_Struct;
    /* Set the parent's reference count */
    Type_Ref=__RME_Fetch_Add(&(Cap_Src_Struct->Head.Type_Ref), 1);
ffffffff802154ba:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    /* Is it overflowed? */
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff802154bf:	48 21 d0             	and    %rdx,%rax
ffffffff802154c2:	48 ba fe ff ff ff ff 	movabs $0x3ffffffffffe,%rdx
ffffffff802154c9:	3f 00 00 
ffffffff802154cc:	48 39 d0             	cmp    %rdx,%rax
ffffffff802154cf:	0f 87 a7 01 00 00    	ja     ffffffff8021567c <_RME_Captbl_Add+0x40c>
        /* Clear the taken slot as well */
        Cap_Dst_Struct->Head.Type_Ref=0;
        return RME_ERR_CAP_REFCNT;
    }
    /* Write in the correct information */
    Cap_Dst_Struct->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref),0);
ffffffff802154d5:	48 b8 00 00 00 00 00 	movabs $0xffff000000000000,%rax
ffffffff802154dc:	00 ff ff 
ffffffff802154df:	48 23 03             	and    (%rbx),%rax
ffffffff802154e2:	48 89 45 00          	mov    %rax,0x0(%rbp)
    
    return 0;
}
ffffffff802154e6:	48 83 c4 10          	add    $0x10,%rsp
        return RME_ERR_CAP_REFCNT;
    }
    /* Write in the correct information */
    Cap_Dst_Struct->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref),0);
    
    return 0;
ffffffff802154ea:	31 c0                	xor    %eax,%eax
}
ffffffff802154ec:	5b                   	pop    %rbx
ffffffff802154ed:	5d                   	pop    %rbp
ffffffff802154ee:	41 5c                	pop    %r12
ffffffff802154f0:	c3                   	retq   
ffffffff802154f1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ptr_t Kmem_Start;
    ptr_t Kmem_Flags;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Dst,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Dst);
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Src,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Src);
ffffffff802154f8:	48 89 c8             	mov    %rcx,%rax
ffffffff802154fb:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff802154ff:	4c 39 d8             	cmp    %r11,%rax
ffffffff80215502:	73 6c                	jae    ffffffff80215570 <_RME_Captbl_Add+0x300>
ffffffff80215504:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80215508:	49 bb 00 00 00 00 00 	movabs $0x800000000000,%r11
ffffffff8021550f:	80 00 00 
ffffffff80215512:	49 01 c2             	add    %rax,%r10
ffffffff80215515:	49 8b 02             	mov    (%r10),%rax
ffffffff80215518:	4c 85 d8             	test   %r11,%rax
ffffffff8021551b:	0f 85 bf 00 00 00    	jne    ffffffff802155e0 <_RME_Captbl_Add+0x370>
ffffffff80215521:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215525:	49 89 c3             	mov    %rax,%r11
    ptr_t Kmem_End;
    ptr_t Kmem_Start;
    ptr_t Kmem_Flags;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Dst,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Dst);
ffffffff80215528:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Src,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Src);
ffffffff8021552f:	49 83 fb 03          	cmp    $0x3,%r11
ffffffff80215533:	0f 85 7a fd ff ff    	jne    ffffffff802152b3 <_RME_Captbl_Add+0x43>
ffffffff80215539:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff8021553f:	49 3b 4a 28          	cmp    0x28(%r10),%rcx
ffffffff80215543:	73 2b                	jae    ffffffff80215570 <_RME_Captbl_Add+0x300>
ffffffff80215545:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80215549:	49 03 4a 18          	add    0x18(%r10),%rcx
ffffffff8021554d:	4c 8b 19             	mov    (%rcx),%r11
ffffffff80215550:	4d 89 da             	mov    %r11,%r10
ffffffff80215553:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff80215557:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8021555b:	0f 84 09 fe ff ff    	je     ffffffff8021536a <_RME_Captbl_Add+0xfa>
ffffffff80215561:	e9 4d fd ff ff       	jmpq   ffffffff802152b3 <_RME_Captbl_Add+0x43>
ffffffff80215566:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021556d:	00 00 00 
    }
    /* Write in the correct information */
    Cap_Dst_Struct->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref),0);
    
    return 0;
}
ffffffff80215570:	48 83 c4 10          	add    $0x10,%rsp
    ptr_t Kmem_End;
    ptr_t Kmem_Start;
    ptr_t Kmem_Flags;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Dst,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Dst);
ffffffff80215574:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    }
    /* Write in the correct information */
    Cap_Dst_Struct->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref),0);
    
    return 0;
}
ffffffff8021557b:	5b                   	pop    %rbx
ffffffff8021557c:	5d                   	pop    %rbp
ffffffff8021557d:	41 5c                	pop    %r12
ffffffff8021557f:	c3                   	retq   
    
    /* Is there a flag conflict? - For page tables, we have different checking mechanisms */
    if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_PGTBL)
    {
        /* Check the delegation range */
        if(RME_PGTBL_FLAG_HIGH(Flags)>RME_PGTBL_FLAG_HIGH(Cap_Src_Struct->Head.Flags))
ffffffff80215580:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff80215584:	4d 89 c8             	mov    %r9,%r8
ffffffff80215587:	49 c1 e8 24          	shr    $0x24,%r8
ffffffff8021558b:	48 89 c1             	mov    %rax,%rcx
ffffffff8021558e:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff80215592:	49 39 c8             	cmp    %rcx,%r8
ffffffff80215595:	77 39                	ja     ffffffff802155d0 <_RME_Captbl_Add+0x360>
            return RME_ERR_CAP_FLAG;
        if(RME_PGTBL_FLAG_LOW(Flags)<RME_PGTBL_FLAG_LOW(Cap_Src_Struct->Head.Flags))
ffffffff80215597:	4c 89 c9             	mov    %r9,%rcx
            return RME_ERR_CAP_FLAG;
        if(RME_PGTBL_FLAG_HIGH(Flags)<RME_PGTBL_FLAG_LOW(Flags))
ffffffff8021559a:	48 89 c7             	mov    %rax,%rdi
    if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_PGTBL)
    {
        /* Check the delegation range */
        if(RME_PGTBL_FLAG_HIGH(Flags)>RME_PGTBL_FLAG_HIGH(Cap_Src_Struct->Head.Flags))
            return RME_ERR_CAP_FLAG;
        if(RME_PGTBL_FLAG_LOW(Flags)<RME_PGTBL_FLAG_LOW(Cap_Src_Struct->Head.Flags))
ffffffff8021559d:	48 c1 e9 08          	shr    $0x8,%rcx
            return RME_ERR_CAP_FLAG;
        if(RME_PGTBL_FLAG_HIGH(Flags)<RME_PGTBL_FLAG_LOW(Flags))
ffffffff802155a1:	48 c1 ef 08          	shr    $0x8,%rdi
    if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_PGTBL)
    {
        /* Check the delegation range */
        if(RME_PGTBL_FLAG_HIGH(Flags)>RME_PGTBL_FLAG_HIGH(Cap_Src_Struct->Head.Flags))
            return RME_ERR_CAP_FLAG;
        if(RME_PGTBL_FLAG_LOW(Flags)<RME_PGTBL_FLAG_LOW(Cap_Src_Struct->Head.Flags))
ffffffff802155a5:	81 e1 ff ff ff 0f    	and    $0xfffffff,%ecx
            return RME_ERR_CAP_FLAG;
        if(RME_PGTBL_FLAG_HIGH(Flags)<RME_PGTBL_FLAG_LOW(Flags))
ffffffff802155ab:	81 e7 ff ff ff 0f    	and    $0xfffffff,%edi
ffffffff802155b1:	48 39 f9             	cmp    %rdi,%rcx
ffffffff802155b4:	72 1a                	jb     ffffffff802155d0 <_RME_Captbl_Add+0x360>
ffffffff802155b6:	49 39 c8             	cmp    %rcx,%r8
ffffffff802155b9:	72 15                	jb     ffffffff802155d0 <_RME_Captbl_Add+0x360>
            return RME_ERR_CAP_FLAG;
        /* Check the flags - if there are extra ones, or all zero */
        if(RME_PGTBL_FLAG_FLAGS(Flags)==0)
ffffffff802155bb:	45 84 c9             	test   %r9b,%r9b
ffffffff802155be:	74 10                	je     ffffffff802155d0 <_RME_Captbl_Add+0x360>
            return RME_ERR_CAP_FLAG;
        if((RME_PGTBL_FLAG_FLAGS(Flags)&(~RME_PGTBL_FLAG_FLAGS(Cap_Src_Struct->Head.Flags)))!=0)
ffffffff802155c0:	f7 d0                	not    %eax
ffffffff802155c2:	0f b6 c0             	movzbl %al,%eax
ffffffff802155c5:	4c 85 c8             	test   %r9,%rax
ffffffff802155c8:	0f 84 45 fe ff ff    	je     ffffffff80215413 <_RME_Captbl_Add+0x1a3>
ffffffff802155ce:	66 90                	xchg   %ax,%ax

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Dst,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Dst);
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Src,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Src);
    /* Check if both captbls are not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Dst,RME_CAPTBL_FLAG_ADD_DST);
ffffffff802155d0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802155d7:	e9 d7 fc ff ff       	jmpq   ffffffff802152b3 <_RME_Captbl_Add+0x43>
ffffffff802155dc:	0f 1f 40 00          	nopl   0x0(%rax)
    }
    /* Write in the correct information */
    Cap_Dst_Struct->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref),0);
    
    return 0;
}
ffffffff802155e0:	48 83 c4 10          	add    $0x10,%rsp
    ptr_t Kmem_End;
    ptr_t Kmem_Start;
    ptr_t Kmem_Flags;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Dst,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Dst);
ffffffff802155e4:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
    }
    /* Write in the correct information */
    Cap_Dst_Struct->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref),0);
    
    return 0;
}
ffffffff802155eb:	5b                   	pop    %rbx
ffffffff802155ec:	5d                   	pop    %rbp
ffffffff802155ed:	41 5c                	pop    %r12
ffffffff802155ef:	c3                   	retq   
    }
    else if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_KERN)
    {
        /* Kernel capabilities only have ranges, no flags - check the delegation range */
        /* Check the delegation range */
        if(RME_KERN_FLAG_HIGH(Flags)>RME_KERN_FLAG_HIGH(Cap_Src_Struct->Head.Flags))
ffffffff802155f0:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff802155f4:	4c 89 c9             	mov    %r9,%rcx
ffffffff802155f7:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff802155fb:	48 89 c7             	mov    %rax,%rdi
ffffffff802155fe:	48 c1 ef 20          	shr    $0x20,%rdi
ffffffff80215602:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80215605:	77 c9                	ja     ffffffff802155d0 <_RME_Captbl_Add+0x360>
            return RME_ERR_CAP_FLAG;
        if(RME_KERN_FLAG_LOW(Flags)<RME_KERN_FLAG_LOW(Cap_Src_Struct->Head.Flags))
            return RME_ERR_CAP_FLAG;
        if(RME_KERN_FLAG_HIGH(Flags)<RME_KERN_FLAG_LOW(Flags))
ffffffff80215607:	44 39 c8             	cmp    %r9d,%eax
ffffffff8021560a:	44 89 cf             	mov    %r9d,%edi
ffffffff8021560d:	77 c1                	ja     ffffffff802155d0 <_RME_Captbl_Add+0x360>
ffffffff8021560f:	48 39 f9             	cmp    %rdi,%rcx
ffffffff80215612:	0f 83 fb fd ff ff    	jae    ffffffff80215413 <_RME_Captbl_Add+0x1a3>
ffffffff80215618:	eb b6                	jmp    ffffffff802155d0 <_RME_Captbl_Add+0x360>
ffffffff8021561a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    RME_CAPTBL_OCCUPY(Cap_Dst_Struct,Type_Ref);
    
    /* All done, we replicate the cap with flags */
    if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_KMEM)
    {
        RME_CAP_COPY(Cap_Dst_Struct,Cap_Src_Struct,Kmem_Flags);
ffffffff80215620:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
ffffffff80215627:	00 
ffffffff80215628:	48 8b 43 18          	mov    0x18(%rbx),%rax
ffffffff8021562c:	48 89 45 18          	mov    %rax,0x18(%rbp)
ffffffff80215630:	48 8b 43 28          	mov    0x28(%rbx),%rax
ffffffff80215634:	48 89 45 28          	mov    %rax,0x28(%rbp)
ffffffff80215638:	48 8b 43 30          	mov    0x30(%rbx),%rax
ffffffff8021563c:	48 89 45 30          	mov    %rax,0x30(%rbp)
ffffffff80215640:	48 8b 43 38          	mov    0x38(%rbx),%rax
        /* If this is a kernel memory cap, we need to write the range information as well */
        ((struct RME_Cap_Kmem*)Cap_Dst_Struct)->Start=Kmem_Start;
ffffffff80215644:	48 c7 45 28 00 00 00 	movq   $0x0,0x28(%rbp)
ffffffff8021564b:	00 
        ((struct RME_Cap_Kmem*)Cap_Dst_Struct)->End=Kmem_End-1;
ffffffff8021564c:	48 c7 45 30 ff ff ff 	movq   $0xffffffffffffffff,0x30(%rbp)
ffffffff80215653:	ff 
    RME_CAPTBL_OCCUPY(Cap_Dst_Struct,Type_Ref);
    
    /* All done, we replicate the cap with flags */
    if(RME_CAP_TYPE(Cap_Src_Struct->Head.Type_Ref)==RME_CAP_KMEM)
    {
        RME_CAP_COPY(Cap_Dst_Struct,Cap_Src_Struct,Kmem_Flags);
ffffffff80215654:	48 89 45 38          	mov    %rax,0x38(%rbp)
ffffffff80215658:	e9 42 fe ff ff       	jmpq   ffffffff8021549f <_RME_Captbl_Add+0x22f>
ffffffff8021565d:	0f 1f 00             	nopl   (%rax)
        if((Flags&(~(Cap_Src_Struct->Head.Flags)))!=0)
            return RME_ERR_CAP_FLAG;
    }
    /* Is the destination slot unoccupied, and is quiescent? */
    if(Cap_Dst_Struct->Head.Type_Ref!=0)
        return RME_ERR_CAP_EXIST;
ffffffff80215660:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80215667:	e9 47 fc ff ff       	jmpq   ffffffff802152b3 <_RME_Captbl_Add+0x43>
ffffffff8021566c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAPTBL_GETSLOT(Captbl_Dst,Cap_Dst,struct RME_Cap_Struct*,Cap_Dst_Struct);
    RME_CAPTBL_GETSLOT(Captbl_Src,Cap_Src,struct RME_Cap_Struct*,Cap_Src_Struct);
    
    /* Does the source cap exist, and not freezed? */
    if(Cap_Src_Struct->Head.Type_Ref==0)
        return RME_ERR_CAP_NULL;
ffffffff80215670:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80215677:	e9 37 fc ff ff       	jmpq   ffffffff802152b3 <_RME_Captbl_Add+0x43>
    Type_Ref=__RME_Fetch_Add(&(Cap_Src_Struct->Head.Type_Ref), 1);
    /* Is it overflowed? */
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
    {
        /* Refcnt overflowed(very unlikely to happen) */
        __RME_Fetch_Add(&(Cap_Src_Struct->Head.Type_Ref), -1);
ffffffff8021567c:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80215683:	48 89 df             	mov    %rbx,%rdi
ffffffff80215686:	e8 13 62 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        /* Clear the taken slot as well */
        Cap_Dst_Struct->Head.Type_Ref=0;
ffffffff8021568b:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff80215692:	00 
        return RME_ERR_CAP_REFCNT;
ffffffff80215693:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021569a:	e9 14 fc ff ff       	jmpq   ffffffff802152b3 <_RME_Captbl_Add+0x43>
ffffffff8021569f:	90                   	nop

ffffffff802156a0 <_RME_Captbl_Rem>:
    ptr_t Type_Ref;
    /* This is used for removal */
    struct RME_Cap_Struct* Parent;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Rem,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff802156a0:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff802156a6:	75 30                	jne    ffffffff802156d8 <_RME_Captbl_Rem+0x38>
ffffffff802156a8:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff802156ac:	0f 86 46 01 00 00    	jbe    ffffffff802157f8 <_RME_Captbl_Rem+0x158>
ffffffff802156b2:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802156b6:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff802156ba:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802156c1:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff802156c4:	48 89 cf             	mov    %rcx,%rdi
ffffffff802156c7:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802156cb:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802156cf:	74 7a                	je     ffffffff8021574b <_RME_Captbl_Rem+0xab>
ffffffff802156d1:	f3 c3                	repz retq 
ffffffff802156d3:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff802156d8:	48 89 f1             	mov    %rsi,%rcx
ffffffff802156db:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff802156df:	48 3b 4f 28          	cmp    0x28(%rdi),%rcx
ffffffff802156e3:	0f 83 0f 01 00 00    	jae    ffffffff802157f8 <_RME_Captbl_Rem+0x158>
ffffffff802156e9:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802156ed:	48 03 4f 18          	add    0x18(%rdi),%rcx
ffffffff802156f1:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff802156f8:	80 00 00 
ffffffff802156fb:	48 8b 01             	mov    (%rcx),%rax
ffffffff802156fe:	48 85 f8             	test   %rdi,%rax
ffffffff80215701:	0f 85 29 01 00 00    	jne    ffffffff80215830 <_RME_Captbl_Rem+0x190>
ffffffff80215707:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021570b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021570e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215715:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80215719:	0f 85 d4 00 00 00    	jne    ffffffff802157f3 <_RME_Captbl_Rem+0x153>
ffffffff8021571f:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80215725:	48 3b 71 28          	cmp    0x28(%rcx),%rsi
ffffffff80215729:	0f 83 c9 00 00 00    	jae    ffffffff802157f8 <_RME_Captbl_Rem+0x158>
ffffffff8021572f:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80215733:	48 03 71 18          	add    0x18(%rcx),%rsi
ffffffff80215737:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff8021573a:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021573d:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80215741:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80215745:	0f 85 a8 00 00 00    	jne    ffffffff802157f3 <_RME_Captbl_Rem+0x153>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_REM);
ffffffff8021574b:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80215752:	80 00 00 
ffffffff80215755:	48 85 c1             	test   %rax,%rcx
ffffffff80215758:	0f 85 d2 00 00 00    	jne    ffffffff80215830 <_RME_Captbl_Rem+0x190>
ffffffff8021575e:	f6 46 10 20          	testb  $0x20,0x10(%rsi)
ffffffff80215762:	0f 84 d8 00 00 00    	je     ffffffff80215840 <_RME_Captbl_Rem+0x1a0>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Rem,struct RME_Cap_Struct*,Captbl_Rem);
ffffffff80215768:	48 39 56 28          	cmp    %rdx,0x28(%rsi)
ffffffff8021576c:	0f 86 86 00 00 00    	jbe    ffffffff802157f8 <_RME_Captbl_Rem+0x158>
              cid_t Cap_Rem - The capability slot you want to remove. 1-Level.
Output      : None.
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Captbl_Rem(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl_Rem, cid_t Cap_Rem)
{
ffffffff80215772:	53                   	push   %rbx
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Rem,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_REM);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Rem,struct RME_Cap_Struct*,Captbl_Rem);
ffffffff80215773:	48 c1 e2 06          	shl    $0x6,%rdx
              cid_t Cap_Rem - The capability slot you want to remove. 1-Level.
Output      : None.
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Captbl_Rem(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl_Rem, cid_t Cap_Rem)
{
ffffffff80215777:	48 83 ec 10          	sub    $0x10,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Rem,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_REM);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Rem,struct RME_Cap_Struct*,Captbl_Rem);
ffffffff8021577b:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff8021577f:	48 89 d7             	mov    %rdx,%rdi
    /* Removal check */
    RME_CAP_REM_CHECK(Captbl_Rem,Type_Ref);
ffffffff80215782:	48 8b 12             	mov    (%rdx),%rdx
ffffffff80215785:	48 85 c2             	test   %rax,%rdx
ffffffff80215788:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff8021578d:	0f 85 bd 00 00 00    	jne    ffffffff80215850 <_RME_Captbl_Rem+0x1b0>
ffffffff80215793:	48 89 d0             	mov    %rdx,%rax
ffffffff80215796:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021579a:	48 85 c0             	test   %rax,%rax
ffffffff8021579d:	74 61                	je     ffffffff80215800 <_RME_Captbl_Rem+0x160>
ffffffff8021579f:	48 8b 05 5a d8 00 00 	mov    0xd85a(%rip),%rax        # ffffffff80223000 <RME_Timestamp>
ffffffff802157a6:	48 2b 47 20          	sub    0x20(%rdi),%rax
ffffffff802157aa:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff802157ae:	0f 86 ac 00 00 00    	jbe    ffffffff80215860 <_RME_Captbl_Rem+0x1c0>
ffffffff802157b4:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff802157bb:	7f 00 00 
ffffffff802157be:	48 85 c2             	test   %rax,%rdx
ffffffff802157c1:	75 4d                	jne    ffffffff80215810 <_RME_Captbl_Rem+0x170>
ffffffff802157c3:	48 8b 5f 08          	mov    0x8(%rdi),%rbx
ffffffff802157c7:	48 85 db             	test   %rbx,%rbx
ffffffff802157ca:	74 44                	je     ffffffff80215810 <_RME_Captbl_Rem+0x170>
    /* Remember this for refcnt operations */
    Parent=(struct RME_Cap_Struct*)(Captbl_Rem->Head.Parent);
    /* Remove the cap */
    RME_CAP_REMDEL(Captbl_Rem,Type_Ref);
ffffffff802157cc:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff802157d1:	31 d2                	xor    %edx,%edx
ffffffff802157d3:	e8 a9 60 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff802157d8:	48 85 c0             	test   %rax,%rax
ffffffff802157db:	74 23                	je     ffffffff80215800 <_RME_Captbl_Rem+0x160>
    
    /* Check done, decrease its parent's refcnt */
    __RME_Fetch_Add(&(Parent->Head.Type_Ref), -1);
ffffffff802157dd:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802157e4:	48 89 df             	mov    %rbx,%rdi
ffffffff802157e7:	e8 b2 60 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    
    return 0;
ffffffff802157ec:	31 c0                	xor    %eax,%eax
}
ffffffff802157ee:	48 83 c4 10          	add    $0x10,%rsp
ffffffff802157f2:	5b                   	pop    %rbx
ffffffff802157f3:	f3 c3                	repz retq 
ffffffff802157f5:	0f 1f 00             	nopl   (%rax)
    ptr_t Type_Ref;
    /* This is used for removal */
    struct RME_Cap_Struct* Parent;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Rem,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff802157f8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802157ff:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_REM);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Rem,struct RME_Cap_Struct*,Captbl_Rem);
    /* Removal check */
    RME_CAP_REM_CHECK(Captbl_Rem,Type_Ref);
ffffffff80215800:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80215807:	eb e5                	jmp    ffffffff802157ee <_RME_Captbl_Rem+0x14e>
ffffffff80215809:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80215810:	48 b8 ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rax
ffffffff80215817:	7f ff ff 
ffffffff8021581a:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021581f:	48 21 c2             	and    %rax,%rdx
ffffffff80215822:	e8 5a 60 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80215827:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021582e:	eb be                	jmp    ffffffff802157ee <_RME_Captbl_Rem+0x14e>
    ptr_t Type_Ref;
    /* This is used for removal */
    struct RME_Cap_Struct* Parent;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Rem,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80215830:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
    
    /* Check done, decrease its parent's refcnt */
    __RME_Fetch_Add(&(Parent->Head.Type_Ref), -1);
    
    return 0;
}
ffffffff80215837:	c3                   	retq   
ffffffff80215838:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021583f:	00 
    struct RME_Cap_Struct* Parent;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Rem,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_REM);
ffffffff80215840:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80215847:	c3                   	retq   
ffffffff80215848:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021584f:	00 
    ptr_t Type_Ref;
    /* This is used for removal */
    struct RME_Cap_Struct* Parent;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Rem,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80215850:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80215857:	eb 95                	jmp    ffffffff802157ee <_RME_Captbl_Rem+0x14e>
ffffffff80215859:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_REM);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Rem,struct RME_Cap_Struct*,Captbl_Rem);
    /* Removal check */
    RME_CAP_REM_CHECK(Captbl_Rem,Type_Ref);
ffffffff80215860:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
ffffffff80215867:	e9 82 ff ff ff       	jmpq   ffffffff802157ee <_RME_Captbl_Rem+0x14e>
ffffffff8021586c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80215870 <_RME_Clear>:
******************************************************************************/
void _RME_Clear(void* Addr, ptr_t Size)
{
	cnt_t Count;

    for(Count=0;Count<Size;Count++)
ffffffff80215870:	48 85 f6             	test   %rsi,%rsi
ffffffff80215873:	0f 84 57 01 00 00    	je     ffffffff802159d0 <_RME_Clear+0x160>
ffffffff80215879:	48 89 f9             	mov    %rdi,%rcx
ffffffff8021587c:	48 89 f0             	mov    %rsi,%rax
ffffffff8021587f:	48 f7 d9             	neg    %rcx
ffffffff80215882:	83 e1 07             	and    $0x7,%ecx
ffffffff80215885:	48 39 f1             	cmp    %rsi,%rcx
ffffffff80215888:	48 0f 47 ce          	cmova  %rsi,%rcx
ffffffff8021588c:	48 83 fe 0a          	cmp    $0xa,%rsi
ffffffff80215890:	0f 87 4a 01 00 00    	ja     ffffffff802159e0 <_RME_Clear+0x170>
ffffffff80215896:	48 83 f8 01          	cmp    $0x1,%rax
    	((u8*)Addr)[Count]=0;
ffffffff8021589a:	c6 07 00             	movb   $0x0,(%rdi)
ffffffff8021589d:	0f 84 55 01 00 00    	je     ffffffff802159f8 <_RME_Clear+0x188>
ffffffff802158a3:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff802158a7:	c6 47 01 00          	movb   $0x0,0x1(%rdi)
ffffffff802158ab:	0f 84 9f 01 00 00    	je     ffffffff80215a50 <_RME_Clear+0x1e0>
ffffffff802158b1:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802158b5:	c6 47 02 00          	movb   $0x0,0x2(%rdi)
ffffffff802158b9:	0f 84 a1 01 00 00    	je     ffffffff80215a60 <_RME_Clear+0x1f0>
ffffffff802158bf:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff802158c3:	c6 47 03 00          	movb   $0x0,0x3(%rdi)
ffffffff802158c7:	0f 84 43 01 00 00    	je     ffffffff80215a10 <_RME_Clear+0x1a0>
ffffffff802158cd:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff802158d1:	c6 47 04 00          	movb   $0x0,0x4(%rdi)
ffffffff802158d5:	0f 84 45 01 00 00    	je     ffffffff80215a20 <_RME_Clear+0x1b0>
ffffffff802158db:	48 83 f8 06          	cmp    $0x6,%rax
ffffffff802158df:	c6 47 05 00          	movb   $0x0,0x5(%rdi)
ffffffff802158e3:	0f 84 47 01 00 00    	je     ffffffff80215a30 <_RME_Clear+0x1c0>
ffffffff802158e9:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff802158ed:	c6 47 06 00          	movb   $0x0,0x6(%rdi)
ffffffff802158f1:	0f 84 49 01 00 00    	je     ffffffff80215a40 <_RME_Clear+0x1d0>
ffffffff802158f7:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff802158fb:	c6 47 07 00          	movb   $0x0,0x7(%rdi)
ffffffff802158ff:	0f 84 6b 01 00 00    	je     ffffffff80215a70 <_RME_Clear+0x200>
ffffffff80215905:	48 83 f8 0a          	cmp    $0xa,%rax
ffffffff80215909:	c6 47 08 00          	movb   $0x0,0x8(%rdi)
ffffffff8021590d:	0f 85 6d 01 00 00    	jne    ffffffff80215a80 <_RME_Clear+0x210>
ffffffff80215913:	c6 47 09 00          	movb   $0x0,0x9(%rdi)
******************************************************************************/
void _RME_Clear(void* Addr, ptr_t Size)
{
	cnt_t Count;

    for(Count=0;Count<Size;Count++)
ffffffff80215917:	b9 0a 00 00 00       	mov    $0xa,%ecx
ffffffff8021591c:	ba 0a 00 00 00       	mov    $0xa,%edx
ffffffff80215921:	48 39 c6             	cmp    %rax,%rsi
ffffffff80215924:	0f 84 ae 00 00 00    	je     ffffffff802159d8 <_RME_Clear+0x168>
ffffffff8021592a:	49 89 f3             	mov    %rsi,%r11
ffffffff8021592d:	4c 8d 4e ff          	lea    -0x1(%rsi),%r9
ffffffff80215931:	49 29 c3             	sub    %rax,%r11
ffffffff80215934:	4d 8d 43 f8          	lea    -0x8(%r11),%r8
ffffffff80215938:	49 29 c1             	sub    %rax,%r9
ffffffff8021593b:	49 c1 e8 03          	shr    $0x3,%r8
ffffffff8021593f:	49 83 c0 01          	add    $0x1,%r8
ffffffff80215943:	49 83 f9 06          	cmp    $0x6,%r9
ffffffff80215947:	4e 8d 14 c5 00 00 00 	lea    0x0(,%r8,8),%r10
ffffffff8021594e:	00 
ffffffff8021594f:	76 22                	jbe    ffffffff80215973 <_RME_Clear+0x103>
ffffffff80215951:	48 01 f8             	add    %rdi,%rax
ffffffff80215954:	45 31 c9             	xor    %r9d,%r9d
    	((u8*)Addr)[Count]=0;
ffffffff80215957:	4a c7 04 c8 00 00 00 	movq   $0x0,(%rax,%r9,8)
ffffffff8021595e:	00 
ffffffff8021595f:	49 83 c1 01          	add    $0x1,%r9
ffffffff80215963:	4d 39 c8             	cmp    %r9,%r8
ffffffff80215966:	77 ef                	ja     ffffffff80215957 <_RME_Clear+0xe7>
ffffffff80215968:	4c 01 d2             	add    %r10,%rdx
ffffffff8021596b:	4c 01 d1             	add    %r10,%rcx
ffffffff8021596e:	4d 39 d3             	cmp    %r10,%r11
ffffffff80215971:	74 5d                	je     ffffffff802159d0 <_RME_Clear+0x160>
******************************************************************************/
void _RME_Clear(void* Addr, ptr_t Size)
{
	cnt_t Count;

    for(Count=0;Count<Size;Count++)
ffffffff80215973:	48 8d 42 01          	lea    0x1(%rdx),%rax
    	((u8*)Addr)[Count]=0;
ffffffff80215977:	c6 04 0f 00          	movb   $0x0,(%rdi,%rcx,1)
******************************************************************************/
void _RME_Clear(void* Addr, ptr_t Size)
{
	cnt_t Count;

    for(Count=0;Count<Size;Count++)
ffffffff8021597b:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021597e:	76 50                	jbe    ffffffff802159d0 <_RME_Clear+0x160>
ffffffff80215980:	48 8d 42 02          	lea    0x2(%rdx),%rax
    	((u8*)Addr)[Count]=0;
ffffffff80215984:	c6 44 17 01 00       	movb   $0x0,0x1(%rdi,%rdx,1)
******************************************************************************/
void _RME_Clear(void* Addr, ptr_t Size)
{
	cnt_t Count;

    for(Count=0;Count<Size;Count++)
ffffffff80215989:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021598c:	76 42                	jbe    ffffffff802159d0 <_RME_Clear+0x160>
ffffffff8021598e:	48 8d 42 03          	lea    0x3(%rdx),%rax
    	((u8*)Addr)[Count]=0;
ffffffff80215992:	c6 44 17 02 00       	movb   $0x0,0x2(%rdi,%rdx,1)
******************************************************************************/
void _RME_Clear(void* Addr, ptr_t Size)
{
	cnt_t Count;

    for(Count=0;Count<Size;Count++)
ffffffff80215997:	48 39 c6             	cmp    %rax,%rsi
ffffffff8021599a:	76 34                	jbe    ffffffff802159d0 <_RME_Clear+0x160>
ffffffff8021599c:	48 8d 42 04          	lea    0x4(%rdx),%rax
    	((u8*)Addr)[Count]=0;
ffffffff802159a0:	c6 44 17 03 00       	movb   $0x0,0x3(%rdi,%rdx,1)
******************************************************************************/
void _RME_Clear(void* Addr, ptr_t Size)
{
	cnt_t Count;

    for(Count=0;Count<Size;Count++)
ffffffff802159a5:	48 39 c6             	cmp    %rax,%rsi
ffffffff802159a8:	76 26                	jbe    ffffffff802159d0 <_RME_Clear+0x160>
ffffffff802159aa:	48 8d 42 05          	lea    0x5(%rdx),%rax
    	((u8*)Addr)[Count]=0;
ffffffff802159ae:	c6 44 17 04 00       	movb   $0x0,0x4(%rdi,%rdx,1)
******************************************************************************/
void _RME_Clear(void* Addr, ptr_t Size)
{
	cnt_t Count;

    for(Count=0;Count<Size;Count++)
ffffffff802159b3:	48 39 c6             	cmp    %rax,%rsi
ffffffff802159b6:	76 18                	jbe    ffffffff802159d0 <_RME_Clear+0x160>
ffffffff802159b8:	48 8d 42 06          	lea    0x6(%rdx),%rax
    	((u8*)Addr)[Count]=0;
ffffffff802159bc:	c6 44 17 05 00       	movb   $0x0,0x5(%rdi,%rdx,1)
******************************************************************************/
void _RME_Clear(void* Addr, ptr_t Size)
{
	cnt_t Count;

    for(Count=0;Count<Size;Count++)
ffffffff802159c1:	48 39 c6             	cmp    %rax,%rsi
ffffffff802159c4:	76 0a                	jbe    ffffffff802159d0 <_RME_Clear+0x160>
    	((u8*)Addr)[Count]=0;
ffffffff802159c6:	c6 44 17 06 00       	movb   $0x0,0x6(%rdi,%rdx,1)
ffffffff802159cb:	c3                   	retq   
ffffffff802159cc:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff802159d0:	f3 c3                	repz retq 
ffffffff802159d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff802159d8:	f3 c3                	repz retq 
ffffffff802159da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff802159e0:	48 85 c9             	test   %rcx,%rcx
ffffffff802159e3:	0f 85 a6 00 00 00    	jne    ffffffff80215a8f <_RME_Clear+0x21f>
******************************************************************************/
void _RME_Clear(void* Addr, ptr_t Size)
{
	cnt_t Count;

    for(Count=0;Count<Size;Count++)
ffffffff802159e9:	31 c0                	xor    %eax,%eax
ffffffff802159eb:	31 d2                	xor    %edx,%edx
ffffffff802159ed:	e9 38 ff ff ff       	jmpq   ffffffff8021592a <_RME_Clear+0xba>
ffffffff802159f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff802159f8:	b9 01 00 00 00       	mov    $0x1,%ecx
ffffffff802159fd:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80215a02:	e9 1a ff ff ff       	jmpq   ffffffff80215921 <_RME_Clear+0xb1>
ffffffff80215a07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80215a0e:	00 00 
ffffffff80215a10:	b9 04 00 00 00       	mov    $0x4,%ecx
ffffffff80215a15:	ba 04 00 00 00       	mov    $0x4,%edx
ffffffff80215a1a:	e9 02 ff ff ff       	jmpq   ffffffff80215921 <_RME_Clear+0xb1>
ffffffff80215a1f:	90                   	nop
ffffffff80215a20:	b9 05 00 00 00       	mov    $0x5,%ecx
ffffffff80215a25:	ba 05 00 00 00       	mov    $0x5,%edx
ffffffff80215a2a:	e9 f2 fe ff ff       	jmpq   ffffffff80215921 <_RME_Clear+0xb1>
ffffffff80215a2f:	90                   	nop
ffffffff80215a30:	b9 06 00 00 00       	mov    $0x6,%ecx
ffffffff80215a35:	ba 06 00 00 00       	mov    $0x6,%edx
ffffffff80215a3a:	e9 e2 fe ff ff       	jmpq   ffffffff80215921 <_RME_Clear+0xb1>
ffffffff80215a3f:	90                   	nop
ffffffff80215a40:	b9 07 00 00 00       	mov    $0x7,%ecx
ffffffff80215a45:	ba 07 00 00 00       	mov    $0x7,%edx
ffffffff80215a4a:	e9 d2 fe ff ff       	jmpq   ffffffff80215921 <_RME_Clear+0xb1>
ffffffff80215a4f:	90                   	nop
ffffffff80215a50:	b9 02 00 00 00       	mov    $0x2,%ecx
ffffffff80215a55:	ba 02 00 00 00       	mov    $0x2,%edx
ffffffff80215a5a:	e9 c2 fe ff ff       	jmpq   ffffffff80215921 <_RME_Clear+0xb1>
ffffffff80215a5f:	90                   	nop
ffffffff80215a60:	b9 03 00 00 00       	mov    $0x3,%ecx
ffffffff80215a65:	ba 03 00 00 00       	mov    $0x3,%edx
ffffffff80215a6a:	e9 b2 fe ff ff       	jmpq   ffffffff80215921 <_RME_Clear+0xb1>
ffffffff80215a6f:	90                   	nop
ffffffff80215a70:	b9 08 00 00 00       	mov    $0x8,%ecx
ffffffff80215a75:	ba 08 00 00 00       	mov    $0x8,%edx
ffffffff80215a7a:	e9 a2 fe ff ff       	jmpq   ffffffff80215921 <_RME_Clear+0xb1>
ffffffff80215a7f:	90                   	nop
ffffffff80215a80:	b9 09 00 00 00       	mov    $0x9,%ecx
ffffffff80215a85:	ba 09 00 00 00       	mov    $0x9,%edx
ffffffff80215a8a:	e9 92 fe ff ff       	jmpq   ffffffff80215921 <_RME_Clear+0xb1>
ffffffff80215a8f:	48 89 c8             	mov    %rcx,%rax
ffffffff80215a92:	e9 ff fd ff ff       	jmpq   ffffffff80215896 <_RME_Clear+0x26>
ffffffff80215a97:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80215a9e:	00 00 

ffffffff80215aa0 <_RME_Memcmp>:
    cnt_t Count;

    Dst=(u8*)Ptr1;
    Src=(u8*)Ptr2;

    for(Count=0;Count<Num;Count++)
ffffffff80215aa0:	48 85 d2             	test   %rdx,%rdx
ffffffff80215aa3:	74 2a                	je     ffffffff80215acf <_RME_Memcmp+0x2f>
    {
    	if(Dst[Count]!=Src[Count])
ffffffff80215aa5:	0f b6 0f             	movzbl (%rdi),%ecx
ffffffff80215aa8:	44 0f b6 06          	movzbl (%rsi),%r8d
ffffffff80215aac:	31 c0                	xor    %eax,%eax
ffffffff80215aae:	44 38 c1             	cmp    %r8b,%cl
ffffffff80215ab1:	74 13                	je     ffffffff80215ac6 <_RME_Memcmp+0x26>
ffffffff80215ab3:	eb 23                	jmp    ffffffff80215ad8 <_RME_Memcmp+0x38>
ffffffff80215ab5:	0f 1f 00             	nopl   (%rax)
ffffffff80215ab8:	0f b6 0c 07          	movzbl (%rdi,%rax,1),%ecx
ffffffff80215abc:	44 0f b6 04 06       	movzbl (%rsi,%rax,1),%r8d
ffffffff80215ac1:	44 38 c1             	cmp    %r8b,%cl
ffffffff80215ac4:	75 12                	jne    ffffffff80215ad8 <_RME_Memcmp+0x38>
    cnt_t Count;

    Dst=(u8*)Ptr1;
    Src=(u8*)Ptr2;

    for(Count=0;Count<Num;Count++)
ffffffff80215ac6:	48 83 c0 01          	add    $0x1,%rax
ffffffff80215aca:	48 39 d0             	cmp    %rdx,%rax
ffffffff80215acd:	75 e9                	jne    ffffffff80215ab8 <_RME_Memcmp+0x18>
    {
    	if(Dst[Count]!=Src[Count])
    		return Dst[Count]-Src[Count];
    }

    return 0;
ffffffff80215acf:	31 c0                	xor    %eax,%eax
}
ffffffff80215ad1:	c3                   	retq   
ffffffff80215ad2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    Src=(u8*)Ptr2;

    for(Count=0;Count<Num;Count++)
    {
    	if(Dst[Count]!=Src[Count])
    		return Dst[Count]-Src[Count];
ffffffff80215ad8:	0f b6 c1             	movzbl %cl,%eax
ffffffff80215adb:	44 29 c0             	sub    %r8d,%eax
ffffffff80215ade:	48 98                	cltq   
ffffffff80215ae0:	c3                   	retq   
ffffffff80215ae1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80215ae6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80215aed:	00 00 00 

ffffffff80215af0 <_RME_Memcpy>:
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215af0:	48 85 d2             	test   %rdx,%rdx
ffffffff80215af3:	0f 84 76 01 00 00    	je     ffffffff80215c6f <_RME_Memcpy+0x17f>
ffffffff80215af9:	48 8d 47 08          	lea    0x8(%rdi),%rax
ffffffff80215afd:	48 39 c6             	cmp    %rax,%rsi
ffffffff80215b00:	48 8d 46 08          	lea    0x8(%rsi),%rax
ffffffff80215b04:	0f 93 c1             	setae  %cl
ffffffff80215b07:	48 39 c7             	cmp    %rax,%rdi
ffffffff80215b0a:	0f 93 c0             	setae  %al
ffffffff80215b0d:	08 c1                	or     %al,%cl
ffffffff80215b0f:	0f 84 73 01 00 00    	je     ffffffff80215c88 <_RME_Memcpy+0x198>
ffffffff80215b15:	48 83 fa 0e          	cmp    $0xe,%rdx
ffffffff80215b19:	0f 86 69 01 00 00    	jbe    ffffffff80215c88 <_RME_Memcpy+0x198>
ffffffff80215b1f:	48 89 f0             	mov    %rsi,%rax
              ptr_t Size - The size to clear.
Output      : None.
Return      : None.
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
ffffffff80215b22:	41 56                	push   %r14
ffffffff80215b24:	55                   	push   %rbp
ffffffff80215b25:	48 f7 d8             	neg    %rax
ffffffff80215b28:	53                   	push   %rbx
ffffffff80215b29:	83 e0 07             	and    $0x7,%eax
ffffffff80215b2c:	48 39 d0             	cmp    %rdx,%rax
ffffffff80215b2f:	48 0f 47 c2          	cmova  %rdx,%rax
ffffffff80215b33:	48 85 c0             	test   %rax,%rax
ffffffff80215b36:	0f 84 3c 01 00 00    	je     ffffffff80215c78 <_RME_Memcpy+0x188>
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
        ((u8*)Dst)[Count]=((u8*)Src)[Count];
ffffffff80215b3c:	0f b6 0e             	movzbl (%rsi),%ecx
ffffffff80215b3f:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80215b43:	88 0f                	mov    %cl,(%rdi)
ffffffff80215b45:	0f 84 d5 01 00 00    	je     ffffffff80215d20 <_RME_Memcpy+0x230>
ffffffff80215b4b:	0f b6 4e 01          	movzbl 0x1(%rsi),%ecx
ffffffff80215b4f:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff80215b53:	88 4f 01             	mov    %cl,0x1(%rdi)
ffffffff80215b56:	0f 84 ac 01 00 00    	je     ffffffff80215d08 <_RME_Memcpy+0x218>
ffffffff80215b5c:	0f b6 4e 02          	movzbl 0x2(%rsi),%ecx
ffffffff80215b60:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80215b64:	88 4f 02             	mov    %cl,0x2(%rdi)
ffffffff80215b67:	0f 84 83 01 00 00    	je     ffffffff80215cf0 <_RME_Memcpy+0x200>
ffffffff80215b6d:	0f b6 4e 03          	movzbl 0x3(%rsi),%ecx
ffffffff80215b71:	48 83 f8 04          	cmp    $0x4,%rax
ffffffff80215b75:	88 4f 03             	mov    %cl,0x3(%rdi)
ffffffff80215b78:	0f 84 5a 01 00 00    	je     ffffffff80215cd8 <_RME_Memcpy+0x1e8>
ffffffff80215b7e:	0f b6 4e 04          	movzbl 0x4(%rsi),%ecx
ffffffff80215b82:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff80215b86:	88 4f 04             	mov    %cl,0x4(%rdi)
ffffffff80215b89:	0f 84 31 01 00 00    	je     ffffffff80215cc0 <_RME_Memcpy+0x1d0>
ffffffff80215b8f:	0f b6 4e 05          	movzbl 0x5(%rsi),%ecx
ffffffff80215b93:	48 83 f8 07          	cmp    $0x7,%rax
ffffffff80215b97:	88 4f 05             	mov    %cl,0x5(%rdi)
ffffffff80215b9a:	0f 85 08 01 00 00    	jne    ffffffff80215ca8 <_RME_Memcpy+0x1b8>
ffffffff80215ba0:	0f b6 4e 06          	movzbl 0x6(%rsi),%ecx
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215ba4:	41 bb 07 00 00 00    	mov    $0x7,%r11d
ffffffff80215baa:	41 ba 07 00 00 00    	mov    $0x7,%r10d
        ((u8*)Dst)[Count]=((u8*)Src)[Count];
ffffffff80215bb0:	88 4f 06             	mov    %cl,0x6(%rdi)
ffffffff80215bb3:	48 89 d3             	mov    %rdx,%rbx
ffffffff80215bb6:	48 8d 2c 06          	lea    (%rsi,%rax,1),%rbp
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215bba:	45 31 c0             	xor    %r8d,%r8d
ffffffff80215bbd:	48 29 c3             	sub    %rax,%rbx
ffffffff80215bc0:	48 01 f8             	add    %rdi,%rax
ffffffff80215bc3:	48 8d 4b f8          	lea    -0x8(%rbx),%rcx
ffffffff80215bc7:	48 c1 e9 03          	shr    $0x3,%rcx
ffffffff80215bcb:	48 83 c1 01          	add    $0x1,%rcx
ffffffff80215bcf:	4c 8d 0c cd 00 00 00 	lea    0x0(,%rcx,8),%r9
ffffffff80215bd6:	00 
        ((u8*)Dst)[Count]=((u8*)Src)[Count];
ffffffff80215bd7:	4e 8b 74 c5 00       	mov    0x0(%rbp,%r8,8),%r14
ffffffff80215bdc:	4e 89 34 c0          	mov    %r14,(%rax,%r8,8)
ffffffff80215be0:	49 83 c0 01          	add    $0x1,%r8
ffffffff80215be4:	4c 39 c1             	cmp    %r8,%rcx
ffffffff80215be7:	77 ee                	ja     ffffffff80215bd7 <_RME_Memcpy+0xe7>
ffffffff80215be9:	4c 39 cb             	cmp    %r9,%rbx
ffffffff80215bec:	4b 8d 04 11          	lea    (%r9,%r10,1),%rax
ffffffff80215bf0:	4b 8d 0c 0b          	lea    (%r11,%r9,1),%rcx
ffffffff80215bf4:	74 75                	je     ffffffff80215c6b <_RME_Memcpy+0x17b>
ffffffff80215bf6:	44 0f b6 04 0e       	movzbl (%rsi,%rcx,1),%r8d
ffffffff80215bfb:	44 88 04 0f          	mov    %r8b,(%rdi,%rcx,1)
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215bff:	48 8d 48 01          	lea    0x1(%rax),%rcx
ffffffff80215c03:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80215c06:	76 63                	jbe    ffffffff80215c6b <_RME_Memcpy+0x17b>
        ((u8*)Dst)[Count]=((u8*)Src)[Count];
ffffffff80215c08:	0f b6 4c 06 01       	movzbl 0x1(%rsi,%rax,1),%ecx
ffffffff80215c0d:	88 4c 07 01          	mov    %cl,0x1(%rdi,%rax,1)
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215c11:	48 8d 48 02          	lea    0x2(%rax),%rcx
ffffffff80215c15:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80215c18:	76 51                	jbe    ffffffff80215c6b <_RME_Memcpy+0x17b>
        ((u8*)Dst)[Count]=((u8*)Src)[Count];
ffffffff80215c1a:	0f b6 4c 06 02       	movzbl 0x2(%rsi,%rax,1),%ecx
ffffffff80215c1f:	88 4c 07 02          	mov    %cl,0x2(%rdi,%rax,1)
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215c23:	48 8d 48 03          	lea    0x3(%rax),%rcx
ffffffff80215c27:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80215c2a:	76 3f                	jbe    ffffffff80215c6b <_RME_Memcpy+0x17b>
        ((u8*)Dst)[Count]=((u8*)Src)[Count];
ffffffff80215c2c:	0f b6 4c 06 03       	movzbl 0x3(%rsi,%rax,1),%ecx
ffffffff80215c31:	88 4c 07 03          	mov    %cl,0x3(%rdi,%rax,1)
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215c35:	48 8d 48 04          	lea    0x4(%rax),%rcx
ffffffff80215c39:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80215c3c:	76 2d                	jbe    ffffffff80215c6b <_RME_Memcpy+0x17b>
        ((u8*)Dst)[Count]=((u8*)Src)[Count];
ffffffff80215c3e:	0f b6 4c 06 04       	movzbl 0x4(%rsi,%rax,1),%ecx
ffffffff80215c43:	88 4c 07 04          	mov    %cl,0x4(%rdi,%rax,1)
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215c47:	48 8d 48 05          	lea    0x5(%rax),%rcx
ffffffff80215c4b:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80215c4e:	76 1b                	jbe    ffffffff80215c6b <_RME_Memcpy+0x17b>
        ((u8*)Dst)[Count]=((u8*)Src)[Count];
ffffffff80215c50:	0f b6 4c 06 05       	movzbl 0x5(%rsi,%rax,1),%ecx
ffffffff80215c55:	88 4c 07 05          	mov    %cl,0x5(%rdi,%rax,1)
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215c59:	48 8d 48 06          	lea    0x6(%rax),%rcx
ffffffff80215c5d:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80215c60:	76 09                	jbe    ffffffff80215c6b <_RME_Memcpy+0x17b>
        ((u8*)Dst)[Count]=((u8*)Src)[Count];
ffffffff80215c62:	0f b6 54 06 06       	movzbl 0x6(%rsi,%rax,1),%edx
ffffffff80215c67:	88 54 07 06          	mov    %dl,0x6(%rdi,%rax,1)
}
ffffffff80215c6b:	5b                   	pop    %rbx
ffffffff80215c6c:	5d                   	pop    %rbp
ffffffff80215c6d:	41 5e                	pop    %r14
ffffffff80215c6f:	f3 c3                	repz retq 
ffffffff80215c71:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215c78:	45 31 db             	xor    %r11d,%r11d
ffffffff80215c7b:	45 31 d2             	xor    %r10d,%r10d
ffffffff80215c7e:	e9 30 ff ff ff       	jmpq   ffffffff80215bb3 <_RME_Memcpy+0xc3>
ffffffff80215c83:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80215c88:	31 c0                	xor    %eax,%eax
ffffffff80215c8a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        ((u8*)Dst)[Count]=((u8*)Src)[Count];
ffffffff80215c90:	0f b6 0c 06          	movzbl (%rsi,%rax,1),%ecx
ffffffff80215c94:	88 0c 07             	mov    %cl,(%rdi,%rax,1)
******************************************************************************/
void _RME_Memcpy(void* Dst, void* Src, ptr_t Num)
{
    cnt_t Count;

    for(Count=0;Count<Num;Count++)
ffffffff80215c97:	48 83 c0 01          	add    $0x1,%rax
ffffffff80215c9b:	48 39 d0             	cmp    %rdx,%rax
ffffffff80215c9e:	75 f0                	jne    ffffffff80215c90 <_RME_Memcpy+0x1a0>
ffffffff80215ca0:	f3 c3                	repz retq 
ffffffff80215ca2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80215ca8:	41 bb 06 00 00 00    	mov    $0x6,%r11d
ffffffff80215cae:	41 ba 06 00 00 00    	mov    $0x6,%r10d
ffffffff80215cb4:	e9 fa fe ff ff       	jmpq   ffffffff80215bb3 <_RME_Memcpy+0xc3>
ffffffff80215cb9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80215cc0:	41 bb 05 00 00 00    	mov    $0x5,%r11d
ffffffff80215cc6:	41 ba 05 00 00 00    	mov    $0x5,%r10d
ffffffff80215ccc:	e9 e2 fe ff ff       	jmpq   ffffffff80215bb3 <_RME_Memcpy+0xc3>
ffffffff80215cd1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80215cd8:	41 bb 04 00 00 00    	mov    $0x4,%r11d
ffffffff80215cde:	41 ba 04 00 00 00    	mov    $0x4,%r10d
ffffffff80215ce4:	e9 ca fe ff ff       	jmpq   ffffffff80215bb3 <_RME_Memcpy+0xc3>
ffffffff80215ce9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80215cf0:	41 bb 03 00 00 00    	mov    $0x3,%r11d
ffffffff80215cf6:	41 ba 03 00 00 00    	mov    $0x3,%r10d
ffffffff80215cfc:	e9 b2 fe ff ff       	jmpq   ffffffff80215bb3 <_RME_Memcpy+0xc3>
ffffffff80215d01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80215d08:	41 bb 02 00 00 00    	mov    $0x2,%r11d
ffffffff80215d0e:	41 ba 02 00 00 00    	mov    $0x2,%r10d
ffffffff80215d14:	e9 9a fe ff ff       	jmpq   ffffffff80215bb3 <_RME_Memcpy+0xc3>
ffffffff80215d19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80215d20:	41 bb 01 00 00 00    	mov    $0x1,%r11d
ffffffff80215d26:	41 ba 01 00 00 00    	mov    $0x1,%r10d
ffffffff80215d2c:	e9 82 fe ff ff       	jmpq   ffffffff80215bb3 <_RME_Memcpy+0xc3>
ffffffff80215d31:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80215d36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80215d3d:	00 00 00 

ffffffff80215d40 <_RME_Timestamp_Inc>:
Return      : ptr_t - The timestamp value before the increment.
******************************************************************************/
ptr_t _RME_Timestamp_Inc(cnt_t Value)
{
    /* The incremental value cannot be smaller than zero or equal to zero */
    RME_ASSERT(Value>0);
ffffffff80215d40:	48 85 ff             	test   %rdi,%rdi
ffffffff80215d43:	0f 8f b7 01 00 00    	jg     ffffffff80215f00 <_RME_Timestamp_Inc+0x1c0>
Input       : cnt_t Value - The value to increase.
Output      : None.
Return      : ptr_t - The timestamp value before the increment.
******************************************************************************/
ptr_t _RME_Timestamp_Inc(cnt_t Value)
{
ffffffff80215d49:	41 55                	push   %r13
ffffffff80215d4b:	41 54                	push   %r12
ffffffff80215d4d:	55                   	push   %rbp
ffffffff80215d4e:	53                   	push   %rbx
ffffffff80215d4f:	48 c7 c3 80 e1 21 80 	mov    $0xffffffff8021e180,%rbx
ffffffff80215d56:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80215d5a:	eb 19                	jmp    ffffffff80215d75 <_RME_Timestamp_Inc+0x35>
ffffffff80215d5c:	0f 1f 40 00          	nopl   0x0(%rax)
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
    {
        if(String[Count]=='\0')
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80215d60:	0f be f8             	movsbl %al,%edi
ffffffff80215d63:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80215d67:	e8 a4 b5 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80215d6c:	48 81 fb 00 e2 21 80 	cmp    $0xffffffff8021e200,%rbx
ffffffff80215d73:	74 07                	je     ffffffff80215d7c <_RME_Timestamp_Inc+0x3c>
    {
        if(String[Count]=='\0')
ffffffff80215d75:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80215d78:	84 c0                	test   %al,%al
ffffffff80215d7a:	75 e4                	jne    ffffffff80215d60 <_RME_Timestamp_Inc+0x20>
ffffffff80215d7c:	48 c7 c3 00 ee 21 80 	mov    $0xffffffff8021ee00,%rbx
ffffffff80215d83:	eb 18                	jmp    ffffffff80215d9d <_RME_Timestamp_Inc+0x5d>
ffffffff80215d85:	0f 1f 00             	nopl   (%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80215d88:	0f be f8             	movsbl %al,%edi
ffffffff80215d8b:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80215d8f:	e8 7c b5 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80215d94:	48 81 fb 80 ee 21 80 	cmp    $0xffffffff8021ee80,%rbx
ffffffff80215d9b:	74 07                	je     ffffffff80215da4 <_RME_Timestamp_Inc+0x64>
    {
        if(String[Count]=='\0')
ffffffff80215d9d:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80215da0:	84 c0                	test   %al,%al
ffffffff80215da2:	75 e4                	jne    ffffffff80215d88 <_RME_Timestamp_Inc+0x48>
ffffffff80215da4:	48 c7 c3 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rbx
ffffffff80215dab:	eb 18                	jmp    ffffffff80215dc5 <_RME_Timestamp_Inc+0x85>
ffffffff80215dad:	0f 1f 00             	nopl   (%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80215db0:	0f be f8             	movsbl %al,%edi
ffffffff80215db3:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80215db7:	e8 54 b5 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80215dbc:	48 81 fb 70 e4 21 80 	cmp    $0xffffffff8021e470,%rbx
ffffffff80215dc3:	74 07                	je     ffffffff80215dcc <_RME_Timestamp_Inc+0x8c>
    {
        if(String[Count]=='\0')
ffffffff80215dc5:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80215dc8:	84 c0                	test   %al,%al
ffffffff80215dca:	75 e4                	jne    ffffffff80215db0 <_RME_Timestamp_Inc+0x70>
Input       : cnt_t Value - The value to increase.
Output      : None.
Return      : ptr_t - The timestamp value before the increment.
******************************************************************************/
ptr_t _RME_Timestamp_Inc(cnt_t Value)
{
ffffffff80215dcc:	bb 64 00 00 00       	mov    $0x64,%ebx
ffffffff80215dd1:	b9 76 00 00 00       	mov    $0x76,%ecx
ffffffff80215dd6:	41 bd 03 00 00 00    	mov    $0x3,%r13d
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
            Div/=10;
ffffffff80215ddc:	48 bd cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rbp
ffffffff80215de3:	cc cc cc 
ffffffff80215de6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80215ded:	00 00 00 
        Num=Count;
        
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
ffffffff80215df0:	48 89 c8             	mov    %rcx,%rax
ffffffff80215df3:	31 d2                	xor    %edx,%edx
        Iter=Int;
        Num=Count;
        
        while(Count>0)
        {
            Count--;
ffffffff80215df5:	49 83 ed 01          	sub    $0x1,%r13
            __RME_Putchar(Iter/Div+'0');
ffffffff80215df9:	48 f7 f3             	div    %rbx
ffffffff80215dfc:	83 c0 30             	add    $0x30,%eax
ffffffff80215dff:	49 89 d4             	mov    %rdx,%r12
ffffffff80215e02:	0f be f8             	movsbl %al,%edi
ffffffff80215e05:	e8 06 b5 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
            Iter=Iter%Div;
            Div/=10;
ffffffff80215e0a:	48 89 d8             	mov    %rbx,%rax
        
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
ffffffff80215e0d:	4c 89 e1             	mov    %r12,%rcx
            Div/=10;
ffffffff80215e10:	48 f7 e5             	mul    %rbp
ffffffff80215e13:	48 c1 ea 03          	shr    $0x3,%rdx
        Div/=10;
        
        Iter=Int;
        Num=Count;
        
        while(Count>0)
ffffffff80215e17:	4d 85 ed             	test   %r13,%r13
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
            Div/=10;
ffffffff80215e1a:	48 89 d3             	mov    %rdx,%rbx
        Div/=10;
        
        Iter=Int;
        Num=Count;
        
        while(Count>0)
ffffffff80215e1d:	75 d1                	jne    ffffffff80215df0 <_RME_Timestamp_Inc+0xb0>
ffffffff80215e1f:	48 c7 c3 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rbx
ffffffff80215e26:	49 c7 c4 79 e4 21 80 	mov    $0xffffffff8021e479,%r12
ffffffff80215e2d:	48 89 dd             	mov    %rbx,%rbp
ffffffff80215e30:	eb 17                	jmp    ffffffff80215e49 <_RME_Timestamp_Inc+0x109>
ffffffff80215e32:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
    {
        if(String[Count]=='\0')
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80215e38:	0f be f8             	movsbl %al,%edi
ffffffff80215e3b:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80215e3f:	e8 cc b4 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80215e44:	49 39 ec             	cmp    %rbp,%r12
ffffffff80215e47:	74 08                	je     ffffffff80215e51 <_RME_Timestamp_Inc+0x111>
    {
        if(String[Count]=='\0')
ffffffff80215e49:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80215e4d:	84 c0                	test   %al,%al
ffffffff80215e4f:	75 e7                	jne    ffffffff80215e38 <_RME_Timestamp_Inc+0xf8>
ffffffff80215e51:	48 c7 c5 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rbp
ffffffff80215e58:	eb 1b                	jmp    ffffffff80215e75 <_RME_Timestamp_Inc+0x135>
ffffffff80215e5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80215e60:	0f be f8             	movsbl %al,%edi
ffffffff80215e63:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80215e67:	e8 a4 b4 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80215e6c:	48 81 fd 7c e4 21 80 	cmp    $0xffffffff8021e47c,%rbp
ffffffff80215e73:	74 08                	je     ffffffff80215e7d <_RME_Timestamp_Inc+0x13d>
    {
        if(String[Count]=='\0')
ffffffff80215e75:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80215e79:	84 c0                	test   %al,%al
ffffffff80215e7b:	75 e3                	jne    ffffffff80215e60 <_RME_Timestamp_Inc+0x120>
ffffffff80215e7d:	48 c7 c5 08 e4 21 80 	mov    $0xffffffff8021e408,%rbp
ffffffff80215e84:	49 c7 c5 88 e4 21 80 	mov    $0xffffffff8021e488,%r13
ffffffff80215e8b:	eb 14                	jmp    ffffffff80215ea1 <_RME_Timestamp_Inc+0x161>
ffffffff80215e8d:	0f 1f 00             	nopl   (%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80215e90:	0f be f8             	movsbl %al,%edi
ffffffff80215e93:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80215e97:	e8 74 b4 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80215e9c:	49 39 ed             	cmp    %rbp,%r13
ffffffff80215e9f:	74 08                	je     ffffffff80215ea9 <_RME_Timestamp_Inc+0x169>
    {
        if(String[Count]=='\0')
ffffffff80215ea1:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80215ea5:	84 c0                	test   %al,%al
ffffffff80215ea7:	75 e7                	jne    ffffffff80215e90 <_RME_Timestamp_Inc+0x150>
ffffffff80215ea9:	48 c7 c5 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rbp
ffffffff80215eb0:	eb 1b                	jmp    ffffffff80215ecd <_RME_Timestamp_Inc+0x18d>
ffffffff80215eb2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80215eb8:	0f be f8             	movsbl %al,%edi
ffffffff80215ebb:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80215ebf:	e8 4c b4 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80215ec4:	48 81 fd 71 ee 21 80 	cmp    $0xffffffff8021ee71,%rbp
ffffffff80215ecb:	74 24                	je     ffffffff80215ef1 <_RME_Timestamp_Inc+0x1b1>
    {
        if(String[Count]=='\0')
ffffffff80215ecd:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80215ed1:	84 c0                	test   %al,%al
ffffffff80215ed3:	75 e3                	jne    ffffffff80215eb8 <_RME_Timestamp_Inc+0x178>
ffffffff80215ed5:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80215ed8:	84 c0                	test   %al,%al
ffffffff80215eda:	74 1c                	je     ffffffff80215ef8 <_RME_Timestamp_Inc+0x1b8>
ffffffff80215edc:	0f 1f 40 00          	nopl   0x0(%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80215ee0:	0f be f8             	movsbl %al,%edi
ffffffff80215ee3:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80215ee7:	e8 24 b4 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80215eec:	49 39 dc             	cmp    %rbx,%r12
ffffffff80215eef:	74 07                	je     ffffffff80215ef8 <_RME_Timestamp_Inc+0x1b8>
    {
        if(String[Count]=='\0')
ffffffff80215ef1:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80215ef4:	84 c0                	test   %al,%al
ffffffff80215ef6:	75 e8                	jne    ffffffff80215ee0 <_RME_Timestamp_Inc+0x1a0>
ffffffff80215ef8:	eb fe                	jmp    ffffffff80215ef8 <_RME_Timestamp_Inc+0x1b8>
ffffffff80215efa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80215f00:	48 89 fe             	mov    %rdi,%rsi
******************************************************************************/
ptr_t _RME_Timestamp_Inc(cnt_t Value)
{
    /* The incremental value cannot be smaller than zero or equal to zero */
    RME_ASSERT(Value>0);
    return __RME_Fetch_Add(&RME_Timestamp,Value);
ffffffff80215f03:	48 c7 c7 00 30 22 80 	mov    $0xffffffff80223000,%rdi
ffffffff80215f0a:	e9 8f 59 ff ff       	jmpq   ffffffff8020b89e <__RME_Fetch_Add>
ffffffff80215f0f:	90                   	nop

ffffffff80215f10 <_RME_Kern_Boot_Crt>:
              cid_t Cap_Kern - The capability to the kernel function. 1-Level.
Output      : None.
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kern_Boot_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Kern)
{
ffffffff80215f10:	53                   	push   %rbx
ffffffff80215f11:	48 89 d3             	mov    %rdx,%rbx
ffffffff80215f14:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_Cap_Captbl* Captbl_Op;
    struct RME_Cap_Kern* Kern_Crt;
    ptr_t Type_Ref;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80215f18:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80215f1e:	75 30                	jne    ffffffff80215f50 <_RME_Kern_Boot_Crt+0x40>
ffffffff80215f20:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff80215f24:	0f 86 16 01 00 00    	jbe    ffffffff80216040 <_RME_Kern_Boot_Crt+0x130>
ffffffff80215f2a:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80215f2e:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80215f32:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215f39:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff80215f3c:	48 89 ca             	mov    %rcx,%rdx
ffffffff80215f3f:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80215f43:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80215f47:	74 76                	je     ffffffff80215fbf <_RME_Kern_Boot_Crt+0xaf>
ffffffff80215f49:	e9 eb 00 00 00       	jmpq   ffffffff80216039 <_RME_Kern_Boot_Crt+0x129>
ffffffff80215f4e:	66 90                	xchg   %ax,%ax
ffffffff80215f50:	48 89 f2             	mov    %rsi,%rdx
ffffffff80215f53:	48 c1 fa 10          	sar    $0x10,%rdx
ffffffff80215f57:	48 3b 57 28          	cmp    0x28(%rdi),%rdx
ffffffff80215f5b:	0f 83 df 00 00 00    	jae    ffffffff80216040 <_RME_Kern_Boot_Crt+0x130>
ffffffff80215f61:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80215f65:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff80215f69:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff80215f70:	80 00 00 
ffffffff80215f73:	48 8b 02             	mov    (%rdx),%rax
ffffffff80215f76:	48 85 c8             	test   %rcx,%rax
ffffffff80215f79:	0f 85 d1 00 00 00    	jne    ffffffff80216050 <_RME_Kern_Boot_Crt+0x140>
ffffffff80215f7f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80215f83:	48 89 c1             	mov    %rax,%rcx
ffffffff80215f86:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80215f8d:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80215f91:	0f 85 a2 00 00 00    	jne    ffffffff80216039 <_RME_Kern_Boot_Crt+0x129>
ffffffff80215f97:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80215f9d:	48 3b 72 28          	cmp    0x28(%rdx),%rsi
ffffffff80215fa1:	0f 83 99 00 00 00    	jae    ffffffff80216040 <_RME_Kern_Boot_Crt+0x130>
ffffffff80215fa7:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80215fab:	48 03 72 18          	add    0x18(%rdx),%rsi
ffffffff80215faf:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff80215fb2:	48 89 ca             	mov    %rcx,%rdx
ffffffff80215fb5:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80215fb9:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80215fbd:	75 7a                	jne    ffffffff80216039 <_RME_Kern_Boot_Crt+0x129>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff80215fbf:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80215fc6:	80 00 00 
ffffffff80215fc9:	48 85 d1             	test   %rdx,%rcx
ffffffff80215fcc:	0f 85 7e 00 00 00    	jne    ffffffff80216050 <_RME_Kern_Boot_Crt+0x140>
ffffffff80215fd2:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff80215fd6:	0f 84 84 00 00 00    	je     ffffffff80216060 <_RME_Kern_Boot_Crt+0x150>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Kern,struct RME_Cap_Kern*,Kern_Crt);
ffffffff80215fdc:	48 39 5e 28          	cmp    %rbx,0x28(%rsi)
    struct RME_Cap_Captbl* Captbl_Op;
    struct RME_Cap_Kern* Kern_Crt;
    ptr_t Type_Ref;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80215fe0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Kern,struct RME_Cap_Kern*,Kern_Crt);
ffffffff80215fe7:	76 50                	jbe    ffffffff80216039 <_RME_Kern_Boot_Crt+0x129>
ffffffff80215fe9:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80215fed:	48 03 5e 18          	add    0x18(%rsi),%rbx
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Kern_Crt,Type_Ref);
ffffffff80215ff1:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80215ff6:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80215ffd:	00 00 
ffffffff80215fff:	48 89 df             	mov    %rbx,%rdi
ffffffff80216002:	e8 7a 58 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80216007:	48 85 c0             	test   %rax,%rax
ffffffff8021600a:	74 64                	je     ffffffff80216070 <_RME_Kern_Boot_Crt+0x160>
    
    Kern_Crt->Head.Parent=0;
    /* The kernel capability does not have an object */
    Kern_Crt->Head.Object=0;
    Kern_Crt->Head.Flags=RME_KERN_FLAG_FULL_RANGE;
ffffffff8021600c:	48 b8 00 00 00 00 ff 	movabs $0xffffffff00000000,%rax
ffffffff80216013:	ff ff ff 
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Kern,struct RME_Cap_Kern*,Kern_Crt);
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Kern_Crt,Type_Ref);
    
    Kern_Crt->Head.Parent=0;
ffffffff80216016:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff8021601d:	00 
    /* The kernel capability does not have an object */
    Kern_Crt->Head.Object=0;
ffffffff8021601e:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff80216025:	00 
    Kern_Crt->Head.Flags=RME_KERN_FLAG_FULL_RANGE;
ffffffff80216026:	48 89 43 10          	mov    %rax,0x10(%rbx)
    
    /* Creation complete, and make it undeletable */
    Kern_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_KERN,1);
ffffffff8021602a:	48 b8 01 00 00 00 00 	movabs $0x1000000000001,%rax
ffffffff80216031:	00 01 00 
ffffffff80216034:	48 89 03             	mov    %rax,(%rbx)
    return 0;
ffffffff80216037:	31 c0                	xor    %eax,%eax
}
ffffffff80216039:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021603d:	5b                   	pop    %rbx
ffffffff8021603e:	c3                   	retq   
ffffffff8021603f:	90                   	nop
    struct RME_Cap_Captbl* Captbl_Op;
    struct RME_Cap_Kern* Kern_Crt;
    ptr_t Type_Ref;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80216040:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216047:	eb f0                	jmp    ffffffff80216039 <_RME_Kern_Boot_Crt+0x129>
ffffffff80216049:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff80216050:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216057:	eb e0                	jmp    ffffffff80216039 <_RME_Kern_Boot_Crt+0x129>
ffffffff80216059:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff80216060:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80216067:	eb d0                	jmp    ffffffff80216039 <_RME_Kern_Boot_Crt+0x129>
ffffffff80216069:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Kern,struct RME_Cap_Kern*,Kern_Crt);
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Kern_Crt,Type_Ref);
ffffffff80216070:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80216077:	eb c0                	jmp    ffffffff80216039 <_RME_Kern_Boot_Crt+0x129>
ffffffff80216079:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80216080 <_RME_Kern_Act>:
                    cid_t Cap_Kern, ptr_t Func_ID, ptr_t Param1, ptr_t Param2)
{
    struct RME_Cap_Kern* Kern_Op;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Kern,RME_CAP_KERN,struct RME_Cap_Kern*,Kern_Op);    
ffffffff80216080:	f6 c6 80             	test   $0x80,%dh
                      for setting the return value. On failure, a context switch 
                      in the kernel fucntion is banned.
******************************************************************************/
ret_t _RME_Kern_Act(struct RME_Cap_Captbl* Captbl, struct RME_Reg_Struct* Reg,
                    cid_t Cap_Kern, ptr_t Func_ID, ptr_t Param1, ptr_t Param2)
{
ffffffff80216083:	49 89 f3             	mov    %rsi,%r11
ffffffff80216086:	48 89 d0             	mov    %rdx,%rax
ffffffff80216089:	48 89 ce             	mov    %rcx,%rsi
    struct RME_Cap_Kern* Kern_Op;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Kern,RME_CAP_KERN,struct RME_Cap_Kern*,Kern_Op);    
ffffffff8021608c:	75 1a                	jne    ffffffff802160a8 <_RME_Kern_Act+0x28>
ffffffff8021608e:	48 39 57 28          	cmp    %rdx,0x28(%rdi)
ffffffff80216092:	0f 86 a8 00 00 00    	jbe    ffffffff80216140 <_RME_Kern_Act+0xc0>
ffffffff80216098:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021609c:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff802160a0:	eb 52                	jmp    ffffffff802160f4 <_RME_Kern_Act+0x74>
ffffffff802160a2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff802160a8:	49 89 d2             	mov    %rdx,%r10
ffffffff802160ab:	49 c1 fa 10          	sar    $0x10,%r10
ffffffff802160af:	4c 3b 57 28          	cmp    0x28(%rdi),%r10
ffffffff802160b3:	0f 83 87 00 00 00    	jae    ffffffff80216140 <_RME_Kern_Act+0xc0>
ffffffff802160b9:	49 c1 e2 06          	shl    $0x6,%r10
ffffffff802160bd:	4c 03 57 18          	add    0x18(%rdi),%r10
ffffffff802160c1:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff802160c8:	80 00 00 
ffffffff802160cb:	49 8b 12             	mov    (%r10),%rdx
ffffffff802160ce:	48 85 ca             	test   %rcx,%rdx
ffffffff802160d1:	0f 85 99 00 00 00    	jne    ffffffff80216170 <_RME_Kern_Act+0xf0>
ffffffff802160d7:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802160db:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802160df:	75 6f                	jne    ffffffff80216150 <_RME_Kern_Act+0xd0>
ffffffff802160e1:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff802160e6:	49 3b 42 28          	cmp    0x28(%r10),%rax
ffffffff802160ea:	73 54                	jae    ffffffff80216140 <_RME_Kern_Act+0xc0>
ffffffff802160ec:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802160f0:	49 03 42 18          	add    0x18(%r10),%rax
ffffffff802160f4:	48 8b 10             	mov    (%rax),%rdx
ffffffff802160f7:	48 89 d1             	mov    %rdx,%rcx
ffffffff802160fa:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802160fe:	48 83 f9 01          	cmp    $0x1,%rcx
ffffffff80216102:	75 4c                	jne    ffffffff80216150 <_RME_Kern_Act+0xd0>
    /* Check if the target cap is not frozen */
    if((Kern_Op->Head.Type_Ref&RME_CAP_FROZEN)!=0)
ffffffff80216104:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff8021610b:	80 00 00 
ffffffff8021610e:	48 85 ca             	test   %rcx,%rdx
ffffffff80216111:	75 5d                	jne    ffffffff80216170 <_RME_Kern_Act+0xf0>
        return RME_ERR_CAP_FROZEN;
    /* Check if the range of calling is allowed - This is kernel function specific */
    if((Func_ID>RME_KERN_FLAG_HIGH(Kern_Op->Head.Flags))||
ffffffff80216113:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80216117:	48 89 c2             	mov    %rax,%rdx
ffffffff8021611a:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff8021611e:	48 39 f2             	cmp    %rsi,%rdx
ffffffff80216121:	72 3d                	jb     ffffffff80216160 <_RME_Kern_Act+0xe0>
ffffffff80216123:	89 c0                	mov    %eax,%eax
ffffffff80216125:	48 39 c6             	cmp    %rax,%rsi
ffffffff80216128:	72 36                	jb     ffffffff80216160 <_RME_Kern_Act+0xe0>
       (Func_ID<RME_KERN_FLAG_LOW(Kern_Op->Head.Flags)))
        return RME_ERR_CAP_FLAG;
    /* Return whatever the function returns */
    return __RME_Kern_Func_Handler(Reg,Func_ID,Param1,Param2);
ffffffff8021612a:	4c 89 c9             	mov    %r9,%rcx
ffffffff8021612d:	4c 89 c2             	mov    %r8,%rdx
ffffffff80216130:	4c 89 df             	mov    %r11,%rdi
ffffffff80216133:	e9 e8 dd ff ff       	jmpq   ffffffff80213f20 <__RME_Kern_Func_Handler>
ffffffff80216138:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021613f:	00 
                    cid_t Cap_Kern, ptr_t Func_ID, ptr_t Param1, ptr_t Param2)
{
    struct RME_Cap_Kern* Kern_Op;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Kern,RME_CAP_KERN,struct RME_Cap_Kern*,Kern_Op);    
ffffffff80216140:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80216147:	c3                   	retq   
ffffffff80216148:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021614f:	00 
ffffffff80216150:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80216157:	c3                   	retq   
ffffffff80216158:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021615f:	00 
    if((Kern_Op->Head.Type_Ref&RME_CAP_FROZEN)!=0)
        return RME_ERR_CAP_FROZEN;
    /* Check if the range of calling is allowed - This is kernel function specific */
    if((Func_ID>RME_KERN_FLAG_HIGH(Kern_Op->Head.Flags))||
       (Func_ID<RME_KERN_FLAG_LOW(Kern_Op->Head.Flags)))
        return RME_ERR_CAP_FLAG;
ffffffff80216160:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
    /* Return whatever the function returns */
    return __RME_Kern_Func_Handler(Reg,Func_ID,Param1,Param2);
}
ffffffff80216167:	c3                   	retq   
ffffffff80216168:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021616f:	00 
                    cid_t Cap_Kern, ptr_t Func_ID, ptr_t Param1, ptr_t Param2)
{
    struct RME_Cap_Kern* Kern_Op;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Kern,RME_CAP_KERN,struct RME_Cap_Kern*,Kern_Op);    
ffffffff80216170:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80216177:	c3                   	retq   
ffffffff80216178:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021617f:	00 

ffffffff80216180 <_RME_Kmem_Boot_Crt>:
    ptr_t Kmem_Start;
    ptr_t Kmem_End;
    ptr_t Type_Ref;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80216180:	f7 c6 00 80 00 00    	test   $0x8000,%esi
Output      : None.
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kmem_Boot_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl,
		                 cid_t Cap_Kmem, ptr_t Start, ptr_t End, ptr_t Flags)
{
ffffffff80216186:	49 89 d2             	mov    %rdx,%r10
    ptr_t Kmem_Start;
    ptr_t Kmem_End;
    ptr_t Type_Ref;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80216189:	0f 85 41 02 00 00    	jne    ffffffff802163d0 <_RME_Kmem_Boot_Crt+0x250>
ffffffff8021618f:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff80216193:	0f 86 f2 02 00 00    	jbe    ffffffff8021648b <_RME_Kmem_Boot_Crt+0x30b>
ffffffff80216199:	48 89 f0             	mov    %rsi,%rax
ffffffff8021619c:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802161a0:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff802161a4:	48 8b 30             	mov    (%rax),%rsi
ffffffff802161a7:	48 89 f2             	mov    %rsi,%rdx
ffffffff802161aa:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802161ae:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802161b2:	0f 85 7f 02 00 00    	jne    ffffffff80216437 <_RME_Kmem_Boot_Crt+0x2b7>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff802161b8:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802161bf:	80 00 00 
ffffffff802161c2:	48 85 d6             	test   %rdx,%rsi
ffffffff802161c5:	0f 85 e2 02 00 00    	jne    ffffffff802164ad <_RME_Kmem_Boot_Crt+0x32d>
ffffffff802161cb:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff802161cf:	0f 84 d0 02 00 00    	je     ffffffff802164a5 <_RME_Kmem_Boot_Crt+0x325>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Kmem,struct RME_Cap_Kmem*,Kmem_Crt);
ffffffff802161d5:	4c 39 50 28          	cmp    %r10,0x28(%rax)
ffffffff802161d9:	0f 86 ac 02 00 00    	jbe    ffffffff8021648b <_RME_Kmem_Boot_Crt+0x30b>
Output      : None.
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kmem_Boot_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl,
		                 cid_t Cap_Kmem, ptr_t Start, ptr_t End, ptr_t Flags)
{
ffffffff802161df:	41 55                	push   %r13
ffffffff802161e1:	41 54                	push   %r12
ffffffff802161e3:	4d 89 cd             	mov    %r9,%r13
ffffffff802161e6:	55                   	push   %rbp
ffffffff802161e7:	53                   	push   %rbx
ffffffff802161e8:	4c 89 d3             	mov    %r10,%rbx
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Kmem,struct RME_Cap_Kmem*,Kmem_Crt);
ffffffff802161eb:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff802161ef:	4c 89 c5             	mov    %r8,%rbp
ffffffff802161f2:	49 89 cc             	mov    %rcx,%r12
Output      : None.
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kmem_Boot_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl,
		                 cid_t Cap_Kmem, ptr_t Start, ptr_t End, ptr_t Flags)
{
ffffffff802161f5:	48 83 ec 18          	sub    $0x18,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Kmem,struct RME_Cap_Kmem*,Kmem_Crt);
ffffffff802161f9:	48 03 58 18          	add    0x18(%rax),%rbx
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Kmem_Crt,Type_Ref);
ffffffff802161fd:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80216202:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff80216209:	00 00 
ffffffff8021620b:	48 89 df             	mov    %rbx,%rdi
ffffffff8021620e:	e8 6e 56 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80216213:	48 85 c0             	test   %rax,%rax
ffffffff80216216:	0f 84 77 02 00 00    	je     ffffffff80216493 <_RME_Kmem_Boot_Crt+0x313>
#else
    Kmem_End=RME_ROUND_DOWN(End+1,6);
    Kmem_Start=RME_ROUND_UP(Start,6);
#endif
    /* Must at least allow creation of something */
    RME_ASSERT(Flags!=0);
ffffffff8021621c:	4d 85 ed             	test   %r13,%r13
ffffffff8021621f:	0f 85 1b 02 00 00    	jne    ffffffff80216440 <_RME_Kmem_Boot_Crt+0x2c0>
ffffffff80216225:	48 c7 c3 80 e1 21 80 	mov    $0xffffffff8021e180,%rbx
ffffffff8021622c:	eb 17                	jmp    ffffffff80216245 <_RME_Kmem_Boot_Crt+0xc5>
ffffffff8021622e:	66 90                	xchg   %ax,%ax
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
    {
        if(String[Count]=='\0')
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216230:	0f be f8             	movsbl %al,%edi
ffffffff80216233:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80216237:	e8 d4 b0 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff8021623c:	48 81 fb 00 e2 21 80 	cmp    $0xffffffff8021e200,%rbx
ffffffff80216243:	74 07                	je     ffffffff8021624c <_RME_Kmem_Boot_Crt+0xcc>
    {
        if(String[Count]=='\0')
ffffffff80216245:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80216248:	84 c0                	test   %al,%al
ffffffff8021624a:	75 e4                	jne    ffffffff80216230 <_RME_Kmem_Boot_Crt+0xb0>
ffffffff8021624c:	48 c7 c3 00 ee 21 80 	mov    $0xffffffff8021ee00,%rbx
ffffffff80216253:	eb 18                	jmp    ffffffff8021626d <_RME_Kmem_Boot_Crt+0xed>
ffffffff80216255:	0f 1f 00             	nopl   (%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216258:	0f be f8             	movsbl %al,%edi
ffffffff8021625b:	48 83 c3 01          	add    $0x1,%rbx
ffffffff8021625f:	e8 ac b0 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216264:	48 81 fb 80 ee 21 80 	cmp    $0xffffffff8021ee80,%rbx
ffffffff8021626b:	74 07                	je     ffffffff80216274 <_RME_Kmem_Boot_Crt+0xf4>
    {
        if(String[Count]=='\0')
ffffffff8021626d:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80216270:	84 c0                	test   %al,%al
ffffffff80216272:	75 e4                	jne    ffffffff80216258 <_RME_Kmem_Boot_Crt+0xd8>
ffffffff80216274:	48 c7 c3 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rbx
ffffffff8021627b:	eb 18                	jmp    ffffffff80216295 <_RME_Kmem_Boot_Crt+0x115>
ffffffff8021627d:	0f 1f 00             	nopl   (%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216280:	0f be f8             	movsbl %al,%edi
ffffffff80216283:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80216287:	e8 84 b0 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff8021628c:	48 81 fb 70 e4 21 80 	cmp    $0xffffffff8021e470,%rbx
ffffffff80216293:	74 07                	je     ffffffff8021629c <_RME_Kmem_Boot_Crt+0x11c>
    {
        if(String[Count]=='\0')
ffffffff80216295:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80216298:	84 c0                	test   %al,%al
ffffffff8021629a:	75 e4                	jne    ffffffff80216280 <_RME_Kmem_Boot_Crt+0x100>
Output      : None.
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kmem_Boot_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl,
		                 cid_t Cap_Kmem, ptr_t Start, ptr_t End, ptr_t Flags)
{
ffffffff8021629c:	bb 64 00 00 00       	mov    $0x64,%ebx
ffffffff802162a1:	b9 f3 00 00 00       	mov    $0xf3,%ecx
ffffffff802162a6:	41 bd 03 00 00 00    	mov    $0x3,%r13d
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
            Div/=10;
ffffffff802162ac:	48 bd cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rbp
ffffffff802162b3:	cc cc cc 
ffffffff802162b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff802162bd:	00 00 00 
        Num=Count;
        
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
ffffffff802162c0:	48 89 c8             	mov    %rcx,%rax
ffffffff802162c3:	31 d2                	xor    %edx,%edx
        Iter=Int;
        Num=Count;
        
        while(Count>0)
        {
            Count--;
ffffffff802162c5:	49 83 ed 01          	sub    $0x1,%r13
            __RME_Putchar(Iter/Div+'0');
ffffffff802162c9:	48 f7 f3             	div    %rbx
ffffffff802162cc:	83 c0 30             	add    $0x30,%eax
ffffffff802162cf:	49 89 d4             	mov    %rdx,%r12
ffffffff802162d2:	0f be f8             	movsbl %al,%edi
ffffffff802162d5:	e8 36 b0 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
            Iter=Iter%Div;
            Div/=10;
ffffffff802162da:	48 89 d8             	mov    %rbx,%rax
        
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
ffffffff802162dd:	4c 89 e1             	mov    %r12,%rcx
            Div/=10;
ffffffff802162e0:	48 f7 e5             	mul    %rbp
ffffffff802162e3:	48 c1 ea 03          	shr    $0x3,%rdx
        Div/=10;
        
        Iter=Int;
        Num=Count;
        
        while(Count>0)
ffffffff802162e7:	4d 85 ed             	test   %r13,%r13
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
            Div/=10;
ffffffff802162ea:	48 89 d3             	mov    %rdx,%rbx
        Div/=10;
        
        Iter=Int;
        Num=Count;
        
        while(Count>0)
ffffffff802162ed:	75 d1                	jne    ffffffff802162c0 <_RME_Kmem_Boot_Crt+0x140>
ffffffff802162ef:	48 c7 c3 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rbx
ffffffff802162f6:	49 c7 c4 79 e4 21 80 	mov    $0xffffffff8021e479,%r12
ffffffff802162fd:	48 89 dd             	mov    %rbx,%rbp
ffffffff80216300:	eb 1b                	jmp    ffffffff8021631d <_RME_Kmem_Boot_Crt+0x19d>
ffffffff80216302:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
    {
        if(String[Count]=='\0')
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216308:	0f be f8             	movsbl %al,%edi
ffffffff8021630b:	48 83 c5 01          	add    $0x1,%rbp
ffffffff8021630f:	e8 fc af ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216314:	48 81 fd 79 e4 21 80 	cmp    $0xffffffff8021e479,%rbp
ffffffff8021631b:	74 08                	je     ffffffff80216325 <_RME_Kmem_Boot_Crt+0x1a5>
    {
        if(String[Count]=='\0')
ffffffff8021631d:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80216321:	84 c0                	test   %al,%al
ffffffff80216323:	75 e3                	jne    ffffffff80216308 <_RME_Kmem_Boot_Crt+0x188>
ffffffff80216325:	48 c7 c5 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rbp
ffffffff8021632c:	eb 17                	jmp    ffffffff80216345 <_RME_Kmem_Boot_Crt+0x1c5>
ffffffff8021632e:	66 90                	xchg   %ax,%ax
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216330:	0f be f8             	movsbl %al,%edi
ffffffff80216333:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80216337:	e8 d4 af ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff8021633c:	48 81 fd 7c e4 21 80 	cmp    $0xffffffff8021e47c,%rbp
ffffffff80216343:	74 08                	je     ffffffff8021634d <_RME_Kmem_Boot_Crt+0x1cd>
    {
        if(String[Count]=='\0')
ffffffff80216345:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80216349:	84 c0                	test   %al,%al
ffffffff8021634b:	75 e3                	jne    ffffffff80216330 <_RME_Kmem_Boot_Crt+0x1b0>
ffffffff8021634d:	48 c7 c5 08 e4 21 80 	mov    $0xffffffff8021e408,%rbp
ffffffff80216354:	eb 1f                	jmp    ffffffff80216375 <_RME_Kmem_Boot_Crt+0x1f5>
ffffffff80216356:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021635d:	00 00 00 
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216360:	0f be f8             	movsbl %al,%edi
ffffffff80216363:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80216367:	e8 a4 af ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff8021636c:	48 81 fd 88 e4 21 80 	cmp    $0xffffffff8021e488,%rbp
ffffffff80216373:	74 08                	je     ffffffff8021637d <_RME_Kmem_Boot_Crt+0x1fd>
    {
        if(String[Count]=='\0')
ffffffff80216375:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80216379:	84 c0                	test   %al,%al
ffffffff8021637b:	75 e3                	jne    ffffffff80216360 <_RME_Kmem_Boot_Crt+0x1e0>
ffffffff8021637d:	48 c7 c5 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rbp
ffffffff80216384:	49 c7 c5 71 ee 21 80 	mov    $0xffffffff8021ee71,%r13
ffffffff8021638b:	eb 14                	jmp    ffffffff802163a1 <_RME_Kmem_Boot_Crt+0x221>
ffffffff8021638d:	0f 1f 00             	nopl   (%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216390:	0f be f8             	movsbl %al,%edi
ffffffff80216393:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80216397:	e8 74 af ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff8021639c:	49 39 ed             	cmp    %rbp,%r13
ffffffff8021639f:	74 20                	je     ffffffff802163c1 <_RME_Kmem_Boot_Crt+0x241>
    {
        if(String[Count]=='\0')
ffffffff802163a1:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff802163a5:	84 c0                	test   %al,%al
ffffffff802163a7:	75 e7                	jne    ffffffff80216390 <_RME_Kmem_Boot_Crt+0x210>
ffffffff802163a9:	0f b6 03             	movzbl (%rbx),%eax
ffffffff802163ac:	84 c0                	test   %al,%al
ffffffff802163ae:	74 18                	je     ffffffff802163c8 <_RME_Kmem_Boot_Crt+0x248>
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff802163b0:	0f be f8             	movsbl %al,%edi
ffffffff802163b3:	48 83 c3 01          	add    $0x1,%rbx
ffffffff802163b7:	e8 54 af ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff802163bc:	49 39 dc             	cmp    %rbx,%r12
ffffffff802163bf:	74 07                	je     ffffffff802163c8 <_RME_Kmem_Boot_Crt+0x248>
    {
        if(String[Count]=='\0')
ffffffff802163c1:	0f b6 03             	movzbl (%rbx),%eax
ffffffff802163c4:	84 c0                	test   %al,%al
ffffffff802163c6:	75 e8                	jne    ffffffff802163b0 <_RME_Kmem_Boot_Crt+0x230>
ffffffff802163c8:	eb fe                	jmp    ffffffff802163c8 <_RME_Kmem_Boot_Crt+0x248>
ffffffff802163ca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    ptr_t Kmem_Start;
    ptr_t Kmem_End;
    ptr_t Type_Ref;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff802163d0:	48 89 f0             	mov    %rsi,%rax
ffffffff802163d3:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff802163d7:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff802163db:	0f 83 aa 00 00 00    	jae    ffffffff8021648b <_RME_Kmem_Boot_Crt+0x30b>
ffffffff802163e1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802163e5:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff802163e9:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff802163f0:	80 00 00 
ffffffff802163f3:	48 89 c2             	mov    %rax,%rdx
ffffffff802163f6:	48 8b 00             	mov    (%rax),%rax
ffffffff802163f9:	48 85 f8             	test   %rdi,%rax
ffffffff802163fc:	0f 85 ab 00 00 00    	jne    ffffffff802164ad <_RME_Kmem_Boot_Crt+0x32d>
ffffffff80216402:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80216406:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021640a:	75 2b                	jne    ffffffff80216437 <_RME_Kmem_Boot_Crt+0x2b7>
ffffffff8021640c:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80216412:	48 3b 72 28          	cmp    0x28(%rdx),%rsi
ffffffff80216416:	73 73                	jae    ffffffff8021648b <_RME_Kmem_Boot_Crt+0x30b>
ffffffff80216418:	48 89 f0             	mov    %rsi,%rax
ffffffff8021641b:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021641f:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff80216423:	48 8b 30             	mov    (%rax),%rsi
ffffffff80216426:	48 89 f2             	mov    %rsi,%rdx
ffffffff80216429:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021642d:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80216431:	0f 84 81 fd ff ff    	je     ffffffff802161b8 <_RME_Kmem_Boot_Crt+0x38>
ffffffff80216437:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021643e:	c3                   	retq   
ffffffff8021643f:	90                   	nop
    /* The kernel memory capability does not have an object */
    Kmem_Crt->Head.Object=0;
    /* Fill in the flags, start and end */
    Kmem_Crt->Head.Flags=Flags;
    /* Extra flags */
    Kmem_Crt->Start=Kmem_Start;
ffffffff80216440:	49 8d 44 24 3f       	lea    0x3f(%r12),%rax
    Kmem_Start=RME_ROUND_UP(Start,6);
#endif
    /* Must at least allow creation of something */
    RME_ASSERT(Flags!=0);

    Kmem_Crt->Head.Parent=0;
ffffffff80216445:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff8021644c:	00 
    /* The kernel memory capability does not have an object */
    Kmem_Crt->Head.Object=0;
ffffffff8021644d:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff80216454:	00 
    /* Fill in the flags, start and end */
    Kmem_Crt->Head.Flags=Flags;
ffffffff80216455:	4c 89 6b 10          	mov    %r13,0x10(%rbx)
    /* Extra flags */
    Kmem_Crt->Start=Kmem_Start;
ffffffff80216459:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff8021645d:	48 89 43 28          	mov    %rax,0x28(%rbx)
    Kmem_Crt->End=Kmem_End-1;
ffffffff80216461:	48 8d 45 01          	lea    0x1(%rbp),%rax
ffffffff80216465:	48 83 e0 c0          	and    $0xffffffffffffffc0,%rax
ffffffff80216469:	48 83 e8 01          	sub    $0x1,%rax
ffffffff8021646d:	48 89 43 30          	mov    %rax,0x30(%rbx)
    /* Creation complete */
    Kmem_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_KMEM,1);
ffffffff80216471:	48 b8 01 00 00 00 00 	movabs $0x2000000000001,%rax
ffffffff80216478:	00 02 00 
ffffffff8021647b:	48 89 03             	mov    %rax,(%rbx)
    return 0;
}
ffffffff8021647e:	48 83 c4 18          	add    $0x18,%rsp
    /* Extra flags */
    Kmem_Crt->Start=Kmem_Start;
    Kmem_Crt->End=Kmem_End-1;
    /* Creation complete */
    Kmem_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_KMEM,1);
    return 0;
ffffffff80216482:	31 c0                	xor    %eax,%eax
}
ffffffff80216484:	5b                   	pop    %rbx
ffffffff80216485:	5d                   	pop    %rbp
ffffffff80216486:	41 5c                	pop    %r12
ffffffff80216488:	41 5d                	pop    %r13
ffffffff8021648a:	c3                   	retq   
    ptr_t Kmem_Start;
    ptr_t Kmem_End;
    ptr_t Type_Ref;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021648b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    Kmem_Crt->Start=Kmem_Start;
    Kmem_Crt->End=Kmem_End-1;
    /* Creation complete */
    Kmem_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_KMEM,1);
    return 0;
}
ffffffff80216492:	c3                   	retq   
ffffffff80216493:	48 83 c4 18          	add    $0x18,%rsp
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Kmem,struct RME_Cap_Kmem*,Kmem_Crt);
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Kmem_Crt,Type_Ref);
ffffffff80216497:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
    Kmem_Crt->Start=Kmem_Start;
    Kmem_Crt->End=Kmem_End-1;
    /* Creation complete */
    Kmem_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_KMEM,1);
    return 0;
}
ffffffff8021649e:	5b                   	pop    %rbx
ffffffff8021649f:	5d                   	pop    %rbp
ffffffff802164a0:	41 5c                	pop    %r12
ffffffff802164a2:	41 5d                	pop    %r13
ffffffff802164a4:	c3                   	retq   
    ptr_t Type_Ref;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff802164a5:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802164ac:	c3                   	retq   
    ptr_t Kmem_Start;
    ptr_t Kmem_End;
    ptr_t Type_Ref;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff802164ad:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802164b4:	c3                   	retq   
ffffffff802164b5:	90                   	nop
ffffffff802164b6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff802164bd:	00 00 00 

ffffffff802164c0 <_RME_Svc_Handler>:
Input       : struct RME_Reg_Struct* Reg - The register set when entering the handler.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void _RME_Svc_Handler(struct RME_Reg_Struct* Reg)
{
ffffffff802164c0:	53                   	push   %rbx
ffffffff802164c1:	48 89 fb             	mov    %rdi,%rbx
ffffffff802164c4:	48 83 ec 30          	sub    $0x30,%rsp
    ptr_t CPUID;
    struct RME_Inv_Struct* Inv_Top;
    struct RME_Cap_Captbl* Captbl;
    
    /* Get the system call parameters from the system call */
    __RME_Get_Syscall_Param(Reg, &Svc, &Capid, Param);
ffffffff802164c8:	48 8d 54 24 10       	lea    0x10(%rsp),%rdx
ffffffff802164cd:	48 8d 4c 24 18       	lea    0x18(%rsp),%rcx
ffffffff802164d2:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff802164d7:	e8 34 d8 ff ff       	callq  ffffffff80213d10 <__RME_Get_Syscall_Param>
    
    /* Get our current capability table. No need to check whether it is frozen
     * because it can't be deleted anyway */
    CPUID=RME_CPUID();
ffffffff802164dc:	e8 5e 53 ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
    Inv_Top=RME_INVSTK_TOP(RME_Cur_Thd[CPUID]);
ffffffff802164e1:	48 8b 14 c5 00 28 22 	mov    -0x7fddd800(,%rax,8),%rdx
ffffffff802164e8:	80 
ffffffff802164e9:	48 8b 82 c0 09 00 00 	mov    0x9c0(%rdx),%rax
    if(Inv_Top==0)
ffffffff802164f0:	48 85 c0             	test   %rax,%rax
ffffffff802164f3:	0f 84 67 01 00 00    	je     ffffffff80216660 <_RME_Svc_Handler+0x1a0>
    __RME_Get_Syscall_Param(Reg, &Svc, &Capid, Param);
    
    /* Get our current capability table. No need to check whether it is frozen
     * because it can't be deleted anyway */
    CPUID=RME_CPUID();
    Inv_Top=RME_INVSTK_TOP(RME_Cur_Thd[CPUID]);
ffffffff802164f9:	48 8d 8a b8 09 00 00 	lea    0x9b8(%rdx),%rcx
    if(Inv_Top==0)
ffffffff80216500:	48 39 c8             	cmp    %rcx,%rax
ffffffff80216503:	0f 84 57 01 00 00    	je     ffffffff80216660 <_RME_Svc_Handler+0x1a0>
        Captbl=RME_Cur_Thd[CPUID]->Sched.Proc->Captbl;
    else
        Captbl=Inv_Top->Proc->Captbl;
ffffffff80216509:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021650d:	48 8b 78 08          	mov    0x8(%rax),%rdi
    /* See if this operation can potentially cause a register set switch. All the 
     * functions that may cause a register set switch is listed here. The behavior
     * of these functions shall be: If the function is successful, they shall
     * perform the return value saving on proper register stacks by themselves;
     * if the function fails, it should not conduct such return value saving. */
    switch((Svc&0x3F))
ffffffff80216511:	4c 8b 54 24 08       	mov    0x8(%rsp),%r10
ffffffff80216516:	4c 89 d0             	mov    %r10,%rax
ffffffff80216519:	83 e0 3f             	and    $0x3f,%eax
ffffffff8021651c:	48 83 f8 08          	cmp    $0x8,%rax
ffffffff80216520:	0f 87 4a 01 00 00    	ja     ffffffff80216670 <_RME_Svc_Handler+0x1b0>
ffffffff80216526:	ff 24 c5 58 ee 21 80 	jmpq   *-0x7fde11a8(,%rax,8)
ffffffff8021652d:	0f 1f 00             	nopl   (%rax)
            RME_SWITCH_RETURN(Reg,Retval);
        }
        /* Transfer time to a thread */
        case RME_SVC_THD_TIME_XFER:
        {
            Retval=_RME_Thd_Time_Xfer(Captbl, Reg      /* struct RME_Reg_Struct* Reg */,
ffffffff80216530:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
ffffffff80216535:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff8021653a:	48 89 de             	mov    %rbx,%rsi
ffffffff8021653d:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff80216542:	e8 99 57 00 00       	callq  ffffffff8021bce0 <_RME_Thd_Time_Xfer>
                                              Param[0] /* cid_t Cap_Thd_Dst */,
                                              Param[1] /* cid_t Cap_Thd_Src */, 
                                              Param[2] /* ptr_t Time */);
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80216547:	48 85 c0             	test   %rax,%rax
ffffffff8021654a:	78 23                	js     ffffffff8021656f <_RME_Svc_Handler+0xaf>
            break;
        }
    }
    /* We set the registers and return */
    __RME_Set_Syscall_Retval(Reg, Retval);
}
ffffffff8021654c:	48 83 c4 30          	add    $0x30,%rsp
ffffffff80216550:	5b                   	pop    %rbx
ffffffff80216551:	c3                   	retq   
ffffffff80216552:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            RME_SWITCH_RETURN(Reg,Retval);
        }
        /* Switch to another thread */
        case RME_SVC_THD_SWT:
        {
            Retval=_RME_Thd_Swt(Captbl, Reg      /* struct RME_Reg_Struct* Reg */,
ffffffff80216558:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff8021655d:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff80216562:	48 89 de             	mov    %rbx,%rsi
ffffffff80216565:	e8 e6 5e 00 00       	callq  ffffffff8021c450 <_RME_Thd_Swt>
                                        Param[0] /* cid_t Cap_Thd */,
                                        Param[1] /* ptr_t Full_Yield */);
            RME_SWITCH_RETURN(Reg, Retval);
ffffffff8021656a:	48 85 c0             	test   %rax,%rax
ffffffff8021656d:	79 dd                	jns    ffffffff8021654c <_RME_Svc_Handler+0x8c>
ffffffff8021656f:	48 89 df             	mov    %rbx,%rdi
ffffffff80216572:	48 89 c6             	mov    %rax,%rsi
ffffffff80216575:	e8 c6 d7 ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
            break;
        }
    }
    /* We set the registers and return */
    __RME_Set_Syscall_Retval(Reg, Retval);
}
ffffffff8021657a:	48 83 c4 30          	add    $0x30,%rsp
ffffffff8021657e:	5b                   	pop    %rbx
ffffffff8021657f:	c3                   	retq   
            RME_SWITCH_RETURN(Reg,Retval);
        }
        /* Receive from a signal endpoint */
        case RME_SVC_SIG_RCV:
        {
            Retval=_RME_Sig_Rcv(Captbl, Reg      /* struct RME_Reg_Struct* Reg */,
ffffffff80216580:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff80216585:	48 89 de             	mov    %rbx,%rsi
ffffffff80216588:	e8 83 6f 00 00       	callq  ffffffff8021d510 <_RME_Sig_Rcv>
                                        Param[0] /* cid_t Cap_Sig */);
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021658d:	48 85 c0             	test   %rax,%rax
ffffffff80216590:	79 ba                	jns    ffffffff8021654c <_RME_Svc_Handler+0x8c>
ffffffff80216592:	eb db                	jmp    ffffffff8021656f <_RME_Svc_Handler+0xaf>
ffffffff80216594:	0f 1f 40 00          	nopl   0x0(%rax)
        }
        /* Call kernel functions */
        case RME_SVC_KERN:
        {
            Retval=_RME_Kern_Act(Captbl, Reg                    /* struct RME_Reg_Struct* Reg */,
ffffffff80216598:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
ffffffff8021659d:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
ffffffff802165a2:	48 89 de             	mov    %rbx,%rsi
ffffffff802165a5:	48 8b 4c 24 18       	mov    0x18(%rsp),%rcx
ffffffff802165aa:	48 8b 54 24 10       	mov    0x10(%rsp),%rdx
ffffffff802165af:	e8 cc fa ff ff       	callq  ffffffff80216080 <_RME_Kern_Act>
                                         Capid                  /* cid_t Cap_Kern */,
                                         Param[0]               /* ptr_t Func_ID */,
                                         Param[1]               /* ptr_t Param1 */,
                                         Param[2]               /* ptr_t Param2 */);
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802165b4:	48 85 c0             	test   %rax,%rax
ffffffff802165b7:	79 93                	jns    ffffffff8021654c <_RME_Svc_Handler+0x8c>
ffffffff802165b9:	eb b4                	jmp    ffffffff8021656f <_RME_Svc_Handler+0xaf>
ffffffff802165bb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        }
        /* Changing thread priority */
        case RME_SVC_THD_SCHED_PRIO:
        {
            Retval=_RME_Thd_Sched_Prio(Captbl, Reg      /* struct RME_Reg_Struct* Reg */,
ffffffff802165c0:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff802165c5:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff802165ca:	48 89 de             	mov    %rbx,%rsi
ffffffff802165cd:	e8 1e 4d 00 00       	callq  ffffffff8021b2f0 <_RME_Thd_Sched_Prio>
                                               Param[0] /* cid_t Cap_Thd */,
                                               Param[1] /* ptr_t Prio */);
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802165d2:	48 85 c0             	test   %rax,%rax
ffffffff802165d5:	0f 89 71 ff ff ff    	jns    ffffffff8021654c <_RME_Svc_Handler+0x8c>
ffffffff802165db:	eb 92                	jmp    ffffffff8021656f <_RME_Svc_Handler+0xaf>
ffffffff802165dd:	0f 1f 00             	nopl   (%rax)
        }
        /* Free a thread from some core */
        case RME_SVC_THD_SCHED_FREE:
        {
            Retval=_RME_Thd_Sched_Free(Captbl, Reg      /* struct RME_Reg_Struct* Reg */,
ffffffff802165e0:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff802165e5:	48 89 de             	mov    %rbx,%rsi
ffffffff802165e8:	e8 13 51 00 00       	callq  ffffffff8021b700 <_RME_Thd_Sched_Free>
                                               Param[0] /* cid_t Cap_Thd */);
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff802165ed:	48 85 c0             	test   %rax,%rax
ffffffff802165f0:	0f 89 56 ff ff ff    	jns    ffffffff8021654c <_RME_Svc_Handler+0x8c>
ffffffff802165f6:	e9 74 ff ff ff       	jmpq   ffffffff8021656f <_RME_Svc_Handler+0xaf>
ffffffff802165fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            RME_SWITCH_RETURN(Reg,Retval);
        }
        /* Activate an invocation */
        case RME_SVC_INV_ACT:
        {
            Retval=_RME_Inv_Act(Captbl, Reg      /* struct RME_Reg_Struct* Reg */,
ffffffff80216600:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff80216605:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff8021660a:	48 89 de             	mov    %rbx,%rsi
ffffffff8021660d:	e8 0e 78 00 00       	callq  ffffffff8021de20 <_RME_Inv_Act>
                                        Param[0] /* cid_t Cap_Inv */,
                                        Param[1] /* ptr_t Param */);
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff80216612:	48 85 c0             	test   %rax,%rax
ffffffff80216615:	0f 89 31 ff ff ff    	jns    ffffffff8021654c <_RME_Svc_Handler+0x8c>
ffffffff8021661b:	e9 4f ff ff ff       	jmpq   ffffffff8021656f <_RME_Svc_Handler+0xaf>
        }
        /* Send to a signal endpoint */
        case RME_SVC_SIG_SND:
        {
            Retval=_RME_Sig_Snd(Captbl, Reg      /* struct RME_Reg_Struct* Reg */,
ffffffff80216620:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff80216625:	48 89 de             	mov    %rbx,%rsi
ffffffff80216628:	e8 e3 6c 00 00       	callq  ffffffff8021d310 <_RME_Sig_Snd>
                                        Param[0] /* cid_t Cap_Sig */);
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021662d:	48 85 c0             	test   %rax,%rax
ffffffff80216630:	0f 89 16 ff ff ff    	jns    ffffffff8021654c <_RME_Svc_Handler+0x8c>
ffffffff80216636:	e9 34 ff ff ff       	jmpq   ffffffff8021656f <_RME_Svc_Handler+0xaf>
ffffffff8021663b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    switch((Svc&0x3F))
    {
        /* Return from invocation */
        case RME_SVC_INV_RET:
        {
            Retval=_RME_Inv_Ret(Reg /* struct RME_Reg_Struct* Reg */,
ffffffff80216640:	31 f6                	xor    %esi,%esi
ffffffff80216642:	48 89 df             	mov    %rbx,%rdi
ffffffff80216645:	e8 e6 79 00 00       	callq  ffffffff8021e030 <_RME_Inv_Ret>
                                0   /* ptr_t Fault_Flag */);
            RME_SWITCH_RETURN(Reg,Retval);
ffffffff8021664a:	48 85 c0             	test   %rax,%rax
ffffffff8021664d:	0f 89 f9 fe ff ff    	jns    ffffffff8021654c <_RME_Svc_Handler+0x8c>
ffffffff80216653:	e9 17 ff ff ff       	jmpq   ffffffff8021656f <_RME_Svc_Handler+0xaf>
ffffffff80216658:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021665f:	00 
    /* Get our current capability table. No need to check whether it is frozen
     * because it can't be deleted anyway */
    CPUID=RME_CPUID();
    Inv_Top=RME_INVSTK_TOP(RME_Cur_Thd[CPUID]);
    if(Inv_Top==0)
        Captbl=RME_Cur_Thd[CPUID]->Sched.Proc->Captbl;
ffffffff80216660:	48 8b 42 60          	mov    0x60(%rdx),%rax
ffffffff80216664:	48 8b 78 08          	mov    0x8(%rax),%rdi
ffffffff80216668:	e9 a4 fe ff ff       	jmpq   ffffffff80216511 <_RME_Svc_Handler+0x51>
ffffffff8021666d:	0f 1f 00             	nopl   (%rax)
        }
        default:break;
    } 

    /* It is guaranteed that these functions will never cause a context switch */
    switch((Svc&0x3F))
ffffffff80216670:	48 83 e8 09          	sub    $0x9,%rax
ffffffff80216674:	48 83 f8 19          	cmp    $0x19,%rax
ffffffff80216678:	0f 87 60 03 00 00    	ja     ffffffff802169de <_RME_Svc_Handler+0x51e>
ffffffff8021667e:	ff 24 c5 a0 ee 21 80 	jmpq   *-0x7fde1160(,%rax,8)
                                        Param[2]               /* ptr_t Vaddr */);
            break;
        }
        case RME_SVC_INV_DEL:
        {
            Retval=_RME_Inv_Del(Captbl, Capid    /* cid_t Cap_Captbl */,
ffffffff80216685:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff8021668a:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff8021668f:	e8 dc 73 00 00       	callq  ffffffff8021da70 <_RME_Inv_Del>
ffffffff80216694:	48 89 c6             	mov    %rax,%rsi
ffffffff80216697:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021669e:	00 00 
            Retval=RME_ERR_CAP_NULL;
            break;
        }
    }
    /* We set the registers and return */
    __RME_Set_Syscall_Retval(Reg, Retval);
ffffffff802166a0:	48 89 df             	mov    %rbx,%rdi
ffffffff802166a3:	e8 98 d6 ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
ffffffff802166a8:	e9 9f fe ff ff       	jmpq   ffffffff8021654c <_RME_Svc_Handler+0x8c>
        /* Invocation */
        case RME_SVC_INV_CRT:
        {
            Retval=_RME_Inv_Crt(Captbl, Capid                  /* cid_t Cap_Captbl */,
                                        RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                        RME_PARAM_D0(Param[0]) /* cid_t Cap_Inv */,
ffffffff802166ad:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
            break;
        }
        /* Invocation */
        case RME_SVC_INV_CRT:
        {
            Retval=_RME_Inv_Crt(Captbl, Capid                  /* cid_t Cap_Captbl */,
ffffffff802166b2:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff802166b7:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
ffffffff802166bc:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
ffffffff802166c1:	89 d1                	mov    %edx,%ecx
ffffffff802166c3:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802166c7:	e8 44 70 00 00       	callq  ffffffff8021d710 <_RME_Inv_Crt>
ffffffff802166cc:	48 89 c6             	mov    %rax,%rsi
                                        RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                        RME_PARAM_D0(Param[0]) /* cid_t Cap_Inv */,
                                        Param[1]               /* cid_t Cap_Proc */,
                                        Param[2]               /* ptr_t Vaddr */);
            break;
ffffffff802166cf:	eb cf                	jmp    ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                        Param[2] /* ptr_t Vaddr */);
            break;
        }
        case RME_SVC_SIG_DEL:
        {
            Retval=_RME_Sig_Del(Captbl, Capid    /* cid_t Cap_Captbl */,
ffffffff802166d1:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff802166d6:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff802166db:	e8 40 68 00 00       	callq  ffffffff8021cf20 <_RME_Sig_Del>
ffffffff802166e0:	48 89 c6             	mov    %rax,%rsi
                                        Param[0] /* cid_t Cap_Sig */);
            break;
ffffffff802166e3:	eb bb                	jmp    ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
            break;
        }
        /* Signal */
        case RME_SVC_SIG_CRT:
        {
            Retval=_RME_Sig_Crt(Captbl, Capid    /* cid_t Cap_Captbl */,
ffffffff802166e5:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff802166ea:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
ffffffff802166ef:	48 8b 4c 24 20       	mov    0x20(%rsp),%rcx
ffffffff802166f4:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff802166f9:	e8 a2 65 00 00       	callq  ffffffff8021cca0 <_RME_Sig_Crt>
ffffffff802166fe:	48 89 c6             	mov    %rax,%rsi
                                        Param[0] /* cid_t Cap_Kmem */,
                                        Param[1] /* cid_t Cap_Sig */, 
                                        Param[2] /* ptr_t Vaddr */);
            break;
ffffffff80216701:	eb 9d                	jmp    ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                               Param[2] /* ptr_t Prio */);
            break;
        }
        case RME_SVC_THD_SCHED_RCV:
        {
            Retval=_RME_Thd_Sched_Rcv(Captbl, Param[0] /* cid_t Cap_Thd */);
ffffffff80216703:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
ffffffff80216708:	e8 63 54 00 00       	callq  ffffffff8021bb70 <_RME_Thd_Sched_Rcv>
ffffffff8021670d:	48 89 c6             	mov    %rax,%rsi
            break;
ffffffff80216710:	eb 8e                	jmp    ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                            Param[1] /* ptr_t Kaddr */);
            break;
        }
        case RME_SVC_THD_SCHED_BIND:
        {
            Retval=_RME_Thd_Sched_Bind(Captbl, Param[0] /* cid_t Cap_Thd */,
ffffffff80216712:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
ffffffff80216717:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
ffffffff8021671c:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff80216721:	e8 4a 49 00 00       	callq  ffffffff8021b070 <_RME_Thd_Sched_Bind>
ffffffff80216726:	48 89 c6             	mov    %rax,%rsi
                                               Param[1] /* cid_t Cap_Thd_Sched */, 
                                               Param[2] /* ptr_t Prio */);
            break;
ffffffff80216729:	e9 72 ff ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                             Param[2] /* ptr_t Stack */);
            break;
        }
        case RME_SVC_THD_HYP_SET:
        {
            Retval=_RME_Thd_Hyp_Set(Captbl, Param[0] /* cid_t Cap_Thd */,
ffffffff8021672e:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
ffffffff80216733:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff80216738:	e8 03 48 00 00       	callq  ffffffff8021af40 <_RME_Thd_Hyp_Set>
ffffffff8021673d:	48 89 c6             	mov    %rax,%rsi
                                            Param[1] /* ptr_t Kaddr */);
            break;
ffffffff80216740:	e9 5b ff ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                        Param[0] /* cid_t Cap_Thd */);
            break;
        }
        case RME_SVC_THD_EXEC_SET:
        {
            Retval=_RME_Thd_Exec_Set(Captbl, Param[0] /* cid_t Cap_Thd */,
ffffffff80216745:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
ffffffff8021674a:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
ffffffff8021674f:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff80216754:	e8 47 46 00 00       	callq  ffffffff8021ada0 <_RME_Thd_Exec_Set>
ffffffff80216759:	48 89 c6             	mov    %rax,%rsi
                                             Param[1] /* ptr_t Entry */,
                                             Param[2] /* ptr_t Stack */);
            break;
ffffffff8021675c:	e9 3f ff ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                        Param[2]               /* ptr_t Vaddr */);
            break;
        }
        case RME_SVC_THD_DEL:
        {
            Retval=_RME_Thd_Del(Captbl, Capid    /* cid_t Cap_Captbl */,
ffffffff80216761:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80216766:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff8021676b:	e8 60 43 00 00       	callq  ffffffff8021aad0 <_RME_Thd_Del>
ffffffff80216770:	48 89 c6             	mov    %rax,%rsi
                                        Param[0] /* cid_t Cap_Thd */);
            break;
ffffffff80216773:	e9 28 ff ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
        {
            Retval=_RME_Thd_Crt(Captbl, Capid                  /* cid_t Cap_Captbl */,
                                        RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                        RME_PARAM_D0(Param[0]) /* cid_t Cap_Thd */,
                                        RME_PARAM_D1(Param[1]) /* cid_t Cap_Proc */,
                                        RME_PARAM_D0(Param[1]) /* ptr_t Max_Prio */,
ffffffff80216778:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
        /* Thread */
        case RME_SVC_THD_CRT:
        {
            Retval=_RME_Thd_Crt(Captbl, Capid                  /* cid_t Cap_Captbl */,
                                        RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                        RME_PARAM_D0(Param[0]) /* cid_t Cap_Thd */,
ffffffff8021677d:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
            break;
        }
        /* Thread */
        case RME_SVC_THD_CRT:
        {
            Retval=_RME_Thd_Crt(Captbl, Capid                  /* cid_t Cap_Captbl */,
ffffffff80216782:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80216786:	ff 74 24 30          	pushq  0x30(%rsp)
ffffffff8021678a:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff8021678f:	89 d1                	mov    %edx,%ecx
ffffffff80216791:	45 89 c1             	mov    %r8d,%r9d
ffffffff80216794:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216798:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff8021679c:	e8 df 3e 00 00       	callq  ffffffff8021a680 <_RME_Thd_Crt>
ffffffff802167a1:	48 89 c6             	mov    %rax,%rsi
                                        RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                        RME_PARAM_D0(Param[0]) /* cid_t Cap_Thd */,
                                        RME_PARAM_D1(Param[1]) /* cid_t Cap_Proc */,
                                        RME_PARAM_D0(Param[1]) /* ptr_t Max_Prio */,
                                        Param[2]               /* ptr_t Vaddr */);
            break;
ffffffff802167a4:	58                   	pop    %rax
ffffffff802167a5:	5a                   	pop    %rdx
ffffffff802167a6:	e9 f5 fe ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                         Param[1] /* cid_t Cap_Captbl */);
            break;
        }
        case RME_SVC_PROC_PGT:
        {
            Retval=_RME_Proc_Pgt(Captbl, Param[0] /* cid_t Cap_Proc */,
ffffffff802167ab:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
ffffffff802167b0:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff802167b5:	e8 86 38 00 00       	callq  ffffffff8021a040 <_RME_Proc_Pgt>
ffffffff802167ba:	48 89 c6             	mov    %rax,%rsi
                                         Param[1] /* cid_t Cap_Pgtbl */);
            break;
ffffffff802167bd:	e9 de fe ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                         Param[0] /* cid_t Cap_Proc */);
            break;
        }
        case RME_SVC_PROC_CPT:
        {
            Retval=_RME_Proc_Cpt(Captbl, Param[0] /* cid_t Cap_Proc */,
ffffffff802167c2:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
ffffffff802167c7:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff802167cc:	e8 df 35 00 00       	callq  ffffffff80219db0 <_RME_Proc_Cpt>
ffffffff802167d1:	48 89 c6             	mov    %rax,%rsi
                                         Param[1] /* cid_t Cap_Captbl */);
            break;
ffffffff802167d4:	e9 c7 fe ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                         Param[2]               /* ptr_t Vaddr */);
            break;
        }
        case RME_SVC_PROC_DEL:
        {
            Retval=_RME_Proc_Del(Captbl, Capid    /* cid_t Cap_Captbl */,
ffffffff802167d9:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff802167de:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff802167e3:	e8 08 33 00 00       	callq  ffffffff80219af0 <_RME_Proc_Del>
ffffffff802167e8:	48 89 c6             	mov    %rax,%rsi
                                         Param[0] /* cid_t Cap_Proc */);
            break;
ffffffff802167eb:	e9 b0 fe ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
        {
            Retval=_RME_Proc_Crt(Captbl, Capid                  /* cid_t Cap_Captbl_Crt */,
                                         RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                         RME_PARAM_D0(Param[0]) /* cid_t Cap_Proc */,
                                         RME_PARAM_D1(Param[1]) /* cid_t Cap_Captbl */,
                                         RME_PARAM_D0(Param[1]) /* cid_t Cap_Pgtbl */,
ffffffff802167f0:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
        /* Process */
        case RME_SVC_PROC_CRT:
        {
            Retval=_RME_Proc_Crt(Captbl, Capid                  /* cid_t Cap_Captbl_Crt */,
                                         RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                         RME_PARAM_D0(Param[0]) /* cid_t Cap_Proc */,
ffffffff802167f5:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
            break;
        }
        /* Process */
        case RME_SVC_PROC_CRT:
        {
            Retval=_RME_Proc_Crt(Captbl, Capid                  /* cid_t Cap_Captbl_Crt */,
ffffffff802167fa:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff802167fe:	ff 74 24 30          	pushq  0x30(%rsp)
ffffffff80216802:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
ffffffff80216807:	89 d1                	mov    %edx,%ecx
ffffffff80216809:	45 89 c1             	mov    %r8d,%r9d
ffffffff8021680c:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff80216810:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80216814:	e8 77 2d 00 00       	callq  ffffffff80219590 <_RME_Proc_Crt>
                                         RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                         RME_PARAM_D0(Param[0]) /* cid_t Cap_Proc */,
                                         RME_PARAM_D1(Param[1]) /* cid_t Cap_Captbl */,
                                         RME_PARAM_D0(Param[1]) /* cid_t Cap_Pgtbl */,
                                         Param[2]               /* ptr_t Vaddr */);
            break;
ffffffff80216819:	59                   	pop    %rcx
            break;
        }
        /* Process */
        case RME_SVC_PROC_CRT:
        {
            Retval=_RME_Proc_Crt(Captbl, Capid                  /* cid_t Cap_Captbl_Crt */,
ffffffff8021681a:	48 89 c6             	mov    %rax,%rsi
                                         RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                         RME_PARAM_D0(Param[0]) /* cid_t Cap_Proc */,
                                         RME_PARAM_D1(Param[1]) /* cid_t Cap_Captbl */,
                                         RME_PARAM_D0(Param[1]) /* cid_t Cap_Pgtbl */,
                                         Param[2]               /* ptr_t Vaddr */);
            break;
ffffffff8021681d:	5f                   	pop    %rdi
ffffffff8021681e:	e9 7d fe ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                          Param[2]               /* ptr_t Flags_Child */);
            break;
        }
        case RME_SVC_PGTBL_DES:
        {
            Retval=_RME_Pgtbl_Des(Captbl, Param[0] /* cid_t Cap_Pgtbl */,
ffffffff80216823:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
ffffffff80216828:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff8021682d:	e8 ce 20 00 00       	callq  ffffffff80218900 <_RME_Pgtbl_Des>
ffffffff80216832:	48 89 c6             	mov    %rax,%rsi
                                          Param[1] /* ptr_t Pos */);
            break;
ffffffff80216835:	e9 66 fe ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
        }
        case RME_SVC_PGTBL_CON:
        {
            Retval=_RME_Pgtbl_Con(Captbl, RME_PARAM_D1(Param[0]) /* cid_t Cap_Pgtbl_Parent */,
                                          Param[1]               /* ptr_t Pos */,
                                          RME_PARAM_D0(Param[0]) /* cid_t Cap_Pgtbl_Child */,
ffffffff8021683a:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
                                          Param[1] /* ptr_t Pos */);
            break;
        }
        case RME_SVC_PGTBL_CON:
        {
            Retval=_RME_Pgtbl_Con(Captbl, RME_PARAM_D1(Param[0]) /* cid_t Cap_Pgtbl_Parent */,
ffffffff8021683f:	4c 8b 44 24 28       	mov    0x28(%rsp),%r8
ffffffff80216844:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff80216849:	89 f1                	mov    %esi,%ecx
ffffffff8021684b:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8021684f:	e8 5c 1e 00 00       	callq  ffffffff802186b0 <_RME_Pgtbl_Con>
ffffffff80216854:	48 89 c6             	mov    %rax,%rsi
                                          Param[1]               /* ptr_t Pos */,
                                          RME_PARAM_D0(Param[0]) /* cid_t Cap_Pgtbl_Child */,
                                          Param[2]               /* ptr_t Flags_Child */);
            break;
ffffffff80216857:	e9 44 fe ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                          RME_PARAM_D0(Param[2]) /* ptr_t Index */);
            break;
        }
        case RME_SVC_PGTBL_REM:
        {
            Retval=_RME_Pgtbl_Rem(Captbl, Param[0] /* cid_t Cap_Pgtbl */,
ffffffff8021685c:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
ffffffff80216861:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff80216866:	e8 f5 1c 00 00       	callq  ffffffff80218560 <_RME_Pgtbl_Rem>
ffffffff8021686b:	48 89 c6             	mov    %rax,%rsi
                                          Param[1] /* ptr_t Pos */);
            break;
ffffffff8021686e:	e9 2d fe ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
            Retval=_RME_Pgtbl_Add(Captbl, RME_PARAM_D1(Param[0]) /* cid_t Cap_Pgtbl_Dst */,
                                          RME_PARAM_D0(Param[0]) /* ptr_t Pos_Dst */,
                                          RME_PARAM_D1(Param[2]) /* ptr_t Flags_Dst */,
                                          RME_PARAM_D1(Param[1]) /* cid_t Cap_Pgtbl_Src */,
                                          RME_PARAM_D0(Param[1]) /* ptr_t Pos_Src */,
                                          RME_PARAM_D0(Param[2]) /* ptr_t Index */);
ffffffff80216873:	48 8b 44 24 28       	mov    0x28(%rsp),%rax
        {
            Retval=_RME_Pgtbl_Add(Captbl, RME_PARAM_D1(Param[0]) /* cid_t Cap_Pgtbl_Dst */,
                                          RME_PARAM_D0(Param[0]) /* ptr_t Pos_Dst */,
                                          RME_PARAM_D1(Param[2]) /* ptr_t Flags_Dst */,
                                          RME_PARAM_D1(Param[1]) /* cid_t Cap_Pgtbl_Src */,
                                          RME_PARAM_D0(Param[1]) /* ptr_t Pos_Src */,
ffffffff80216878:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
                                          Param[0] /* cid_t Cap_Pgtbl */);
            break;
        }
        case RME_SVC_PGTBL_ADD:
        {
            Retval=_RME_Pgtbl_Add(Captbl, RME_PARAM_D1(Param[0]) /* cid_t Cap_Pgtbl_Dst */,
ffffffff8021687d:	48 83 ec 08          	sub    $0x8,%rsp
                                          RME_PARAM_D0(Param[0]) /* ptr_t Pos_Dst */,
ffffffff80216881:	48 8b 74 24 20       	mov    0x20(%rsp),%rsi
                                          Param[0] /* cid_t Cap_Pgtbl */);
            break;
        }
        case RME_SVC_PGTBL_ADD:
        {
            Retval=_RME_Pgtbl_Add(Captbl, RME_PARAM_D1(Param[0]) /* cid_t Cap_Pgtbl_Dst */,
ffffffff80216886:	48 89 c1             	mov    %rax,%rcx
ffffffff80216889:	89 c0                	mov    %eax,%eax
ffffffff8021688b:	45 89 c1             	mov    %r8d,%r9d
ffffffff8021688e:	50                   	push   %rax
ffffffff8021688f:	89 f2                	mov    %esi,%edx
ffffffff80216891:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80216895:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff80216899:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021689d:	e8 8e 19 00 00       	callq  ffffffff80218230 <_RME_Pgtbl_Add>
                                          RME_PARAM_D0(Param[0]) /* ptr_t Pos_Dst */,
                                          RME_PARAM_D1(Param[2]) /* ptr_t Flags_Dst */,
                                          RME_PARAM_D1(Param[1]) /* cid_t Cap_Pgtbl_Src */,
                                          RME_PARAM_D0(Param[1]) /* ptr_t Pos_Src */,
                                          RME_PARAM_D0(Param[2]) /* ptr_t Index */);
            break;
ffffffff802168a2:	41 58                	pop    %r8
                                          Param[0] /* cid_t Cap_Pgtbl */);
            break;
        }
        case RME_SVC_PGTBL_ADD:
        {
            Retval=_RME_Pgtbl_Add(Captbl, RME_PARAM_D1(Param[0]) /* cid_t Cap_Pgtbl_Dst */,
ffffffff802168a4:	48 89 c6             	mov    %rax,%rsi
                                          RME_PARAM_D0(Param[0]) /* ptr_t Pos_Dst */,
                                          RME_PARAM_D1(Param[2]) /* ptr_t Flags_Dst */,
                                          RME_PARAM_D1(Param[1]) /* cid_t Cap_Pgtbl_Src */,
                                          RME_PARAM_D0(Param[1]) /* ptr_t Pos_Src */,
                                          RME_PARAM_D0(Param[2]) /* ptr_t Index */);
            break;
ffffffff802168a7:	41 59                	pop    %r9
ffffffff802168a9:	e9 f2 fd ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                          RME_PARAM_PC(Svc)      /* ptr_t Num_Order */);
            break;
        }
        case RME_SVC_PGTBL_DEL:
        {
            Retval=_RME_Pgtbl_Del(Captbl, Capid    /* cid_t Cap_Captbl */,
ffffffff802168ae:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff802168b3:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff802168b8:	e8 93 16 00 00       	callq  ffffffff80217f50 <_RME_Pgtbl_Del>
ffffffff802168bd:	48 89 c6             	mov    %rax,%rsi
                                          Param[0] /* cid_t Cap_Pgtbl */);
            break;
ffffffff802168c0:	e9 db fd ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                          RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                          RME_PARAM_Q1(Param[0]) /* cid_t Cap_Pgtbl */,
                                          Param[1]               /* ptr_t Vaddr */,
                                          Param[2]               /* ptr_t Start_Addr */,
                                          RME_PARAM_PT(Param[2]) /* ptr_t Top_Flag */,
                                          RME_PARAM_Q0(Param[0]) /* ptr_t Size_Order */,
ffffffff802168c5:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
            Retval=_RME_Pgtbl_Crt(Captbl, Capid                  /* cid_t Cap_Captbl */,
                                          RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                          RME_PARAM_Q1(Param[0]) /* cid_t Cap_Pgtbl */,
                                          Param[1]               /* ptr_t Vaddr */,
                                          Param[2]               /* ptr_t Start_Addr */,
                                          RME_PARAM_PT(Param[2]) /* ptr_t Top_Flag */,
ffffffff802168ca:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
            break;
        }
        /* Page table */
        case RME_SVC_PGTBL_CRT:
        {
            Retval=_RME_Pgtbl_Crt(Captbl, Capid                  /* cid_t Cap_Captbl */,
ffffffff802168cf:	49 c1 ea 10          	shr    $0x10,%r10
ffffffff802168d3:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff802168d7:	41 52                	push   %r10
ffffffff802168d9:	48 89 c1             	mov    %rax,%rcx
ffffffff802168dc:	48 89 c2             	mov    %rax,%rdx
ffffffff802168df:	0f b7 c0             	movzwl %ax,%eax
ffffffff802168e2:	50                   	push   %rax
ffffffff802168e3:	4c 89 c8             	mov    %r9,%rax
ffffffff802168e6:	48 c1 e9 10          	shr    $0x10,%rcx
ffffffff802168ea:	83 e0 01             	and    $0x1,%eax
ffffffff802168ed:	0f b7 c9             	movzwl %cx,%ecx
ffffffff802168f0:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802168f4:	50                   	push   %rax
ffffffff802168f5:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
ffffffff802168fa:	4c 8b 44 24 40       	mov    0x40(%rsp),%r8
ffffffff802168ff:	e8 bc 11 00 00       	callq  ffffffff80217ac0 <_RME_Pgtbl_Crt>
                                          Param[1]               /* ptr_t Vaddr */,
                                          Param[2]               /* ptr_t Start_Addr */,
                                          RME_PARAM_PT(Param[2]) /* ptr_t Top_Flag */,
                                          RME_PARAM_Q0(Param[0]) /* ptr_t Size_Order */,
                                          RME_PARAM_PC(Svc)      /* ptr_t Num_Order */);
            break;
ffffffff80216904:	48 83 c4 20          	add    $0x20,%rsp
            break;
        }
        /* Page table */
        case RME_SVC_PGTBL_CRT:
        {
            Retval=_RME_Pgtbl_Crt(Captbl, Capid                  /* cid_t Cap_Captbl */,
ffffffff80216908:	48 89 c6             	mov    %rax,%rsi
                                          Param[1]               /* ptr_t Vaddr */,
                                          Param[2]               /* ptr_t Start_Addr */,
                                          RME_PARAM_PT(Param[2]) /* ptr_t Top_Flag */,
                                          RME_PARAM_Q0(Param[0]) /* ptr_t Size_Order */,
                                          RME_PARAM_PC(Svc)      /* ptr_t Num_Order */);
            break;
ffffffff8021690b:	e9 90 fd ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                           RME_PARAM_KM(Svc,Capid) /* ptr_t Ext_Flags */);
            break;
        }
        case RME_SVC_CAPTBL_REM:
        {
            Retval=_RME_Captbl_Rem(Captbl, Capid    /* cid_t Cap_Captbl_Rem */,
ffffffff80216910:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80216915:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff8021691a:	e8 81 ed ff ff       	callq  ffffffff802156a0 <_RME_Captbl_Rem>
ffffffff8021691f:	48 89 c6             	mov    %rax,%rsi
                                           Param[0] /* cid_t Cap_Rem */);
            break;
ffffffff80216922:	e9 79 fd ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
        case RME_SVC_CAPTBL_ADD:
        {
            Retval=_RME_Captbl_Add(Captbl, RME_PARAM_D1(Param[0])  /* cid_t Cap_Captbl_Dst */,
                                           RME_PARAM_D0(Param[0])  /* cid_t Cap_Dst */,
                                           RME_PARAM_D1(Param[1])  /* cid_t Cap_Captbl_Src */,
                                           RME_PARAM_D0(Param[1])  /* cid_t Cap_Src */,
ffffffff80216927:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
            break;
        }
        case RME_SVC_CAPTBL_ADD:
        {
            Retval=_RME_Captbl_Add(Captbl, RME_PARAM_D1(Param[0])  /* cid_t Cap_Captbl_Dst */,
                                           RME_PARAM_D0(Param[0])  /* cid_t Cap_Dst */,
ffffffff8021692c:	48 8b 74 24 18       	mov    0x18(%rsp),%rsi
                                           Param[0] /* cid_t Cap_Frz */);
            break;
        }
        case RME_SVC_CAPTBL_ADD:
        {
            Retval=_RME_Captbl_Add(Captbl, RME_PARAM_D1(Param[0])  /* cid_t Cap_Captbl_Dst */,
ffffffff80216931:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80216935:	49 c1 e2 20          	shl    $0x20,%r10
ffffffff80216939:	4c 0b 54 24 18       	or     0x18(%rsp),%r10
ffffffff8021693e:	4c 89 c1             	mov    %r8,%rcx
ffffffff80216941:	89 f2                	mov    %esi,%edx
ffffffff80216943:	45 89 c0             	mov    %r8d,%r8d
ffffffff80216946:	48 c1 ee 20          	shr    $0x20,%rsi
ffffffff8021694a:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff8021694e:	41 52                	push   %r10
ffffffff80216950:	4c 8b 4c 24 38       	mov    0x38(%rsp),%r9
ffffffff80216955:	e8 16 e9 ff ff       	callq  ffffffff80215270 <_RME_Captbl_Add>
                                           RME_PARAM_D0(Param[0])  /* cid_t Cap_Dst */,
                                           RME_PARAM_D1(Param[1])  /* cid_t Cap_Captbl_Src */,
                                           RME_PARAM_D0(Param[1])  /* cid_t Cap_Src */,
                                           Param[2]                /* ptr_t Flags */,
                                           RME_PARAM_KM(Svc,Capid) /* ptr_t Ext_Flags */);
            break;
ffffffff8021695a:	41 5a                	pop    %r10
                                           Param[0] /* cid_t Cap_Frz */);
            break;
        }
        case RME_SVC_CAPTBL_ADD:
        {
            Retval=_RME_Captbl_Add(Captbl, RME_PARAM_D1(Param[0])  /* cid_t Cap_Captbl_Dst */,
ffffffff8021695c:	48 89 c6             	mov    %rax,%rsi
                                           RME_PARAM_D0(Param[0])  /* cid_t Cap_Dst */,
                                           RME_PARAM_D1(Param[1])  /* cid_t Cap_Captbl_Src */,
                                           RME_PARAM_D0(Param[1])  /* cid_t Cap_Src */,
                                           Param[2]                /* ptr_t Flags */,
                                           RME_PARAM_KM(Svc,Capid) /* ptr_t Ext_Flags */);
            break;
ffffffff8021695f:	41 5b                	pop    %r11
ffffffff80216961:	e9 3a fd ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                           Param[0] /* cid_t Cap_Captbl */);
            break;
        }
        case RME_SVC_CAPTBL_FRZ:
        {
            Retval=_RME_Captbl_Frz(Captbl, Capid    /* cid_t Cap_Captbl_Frz */,
ffffffff80216966:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff8021696b:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff80216970:	e8 6b e7 ff ff       	callq  ffffffff802150e0 <_RME_Captbl_Frz>
ffffffff80216975:	48 89 c6             	mov    %rax,%rsi
                                           Param[0] /* cid_t Cap_Frz */);
            break;
ffffffff80216978:	e9 23 fd ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
                                           Param[2]               /* ptr_t Entry_Num */);
            break;
        }
        case RME_SVC_CAPTBL_DEL:
        {
            Retval=_RME_Captbl_Del(Captbl, Capid    /* cid_t Cap_Captbl_Del */,
ffffffff8021697d:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff80216982:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
ffffffff80216987:	e8 74 e4 ff ff       	callq  ffffffff80214e00 <_RME_Captbl_Del>
ffffffff8021698c:	48 89 c6             	mov    %rax,%rsi
                                           Param[0] /* cid_t Cap_Captbl */);
            break;
ffffffff8021698f:	e9 0c fd ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
        /* Capability table */
        case RME_SVC_CAPTBL_CRT:
        { 
            Retval=_RME_Captbl_Crt(Captbl, Capid                  /* cid_t Cap_Captbl_Crt */,
                                           RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                           RME_PARAM_D0(Param[0]) /* cid_t Cap_Crt */,
ffffffff80216994:	48 8b 54 24 18       	mov    0x18(%rsp),%rdx
    switch((Svc&0x3F))
    {
        /* Capability table */
        case RME_SVC_CAPTBL_CRT:
        { 
            Retval=_RME_Captbl_Crt(Captbl, Capid                  /* cid_t Cap_Captbl_Crt */,
ffffffff80216999:	48 8b 74 24 10       	mov    0x10(%rsp),%rsi
ffffffff8021699e:	4c 8b 4c 24 28       	mov    0x28(%rsp),%r9
ffffffff802169a3:	4c 8b 44 24 20       	mov    0x20(%rsp),%r8
ffffffff802169a8:	89 d1                	mov    %edx,%ecx
ffffffff802169aa:	48 c1 ea 20          	shr    $0x20,%rdx
ffffffff802169ae:	e8 8d e1 ff ff       	callq  ffffffff80214b40 <_RME_Captbl_Crt>
ffffffff802169b3:	48 89 c6             	mov    %rax,%rsi
                                           RME_PARAM_D1(Param[0]) /* cid_t Cap_Kmem */,
                                           RME_PARAM_D0(Param[0]) /* cid_t Cap_Crt */,
                                           Param[1]               /* ptr_t Vaddr */,
                                           Param[2]               /* ptr_t Entry_Num */);
            break;
ffffffff802169b6:	e9 e5 fc ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
        case RME_SVC_INV_SET:
        {
            Retval=_RME_Inv_Set(Captbl, RME_PARAM_D0(Param[0]) /* cid_t Cap_Inv */,
                                        Param[1]               /* ptr_t Entry */,
                                        Param[2]               /* ptr_t Stack */,
                                        RME_PARAM_D1(Param[0]) /* ptr_t Fault_Ret_Flag */);
ffffffff802169bb:	4c 8b 44 24 18       	mov    0x18(%rsp),%r8
                                        Param[0] /* cid_t Cap_Inv */);
            break;
        }
        case RME_SVC_INV_SET:
        {
            Retval=_RME_Inv_Set(Captbl, RME_PARAM_D0(Param[0]) /* cid_t Cap_Inv */,
ffffffff802169c0:	48 8b 4c 24 28       	mov    0x28(%rsp),%rcx
ffffffff802169c5:	48 8b 54 24 20       	mov    0x20(%rsp),%rdx
ffffffff802169ca:	44 89 c6             	mov    %r8d,%esi
ffffffff802169cd:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff802169d1:	e8 4a 73 00 00       	callq  ffffffff8021dd20 <_RME_Inv_Set>
ffffffff802169d6:	48 89 c6             	mov    %rax,%rsi
                                        Param[1]               /* ptr_t Entry */,
                                        Param[2]               /* ptr_t Stack */,
                                        RME_PARAM_D1(Param[0]) /* ptr_t Fault_Ret_Flag */);
            break;
ffffffff802169d9:	e9 c2 fc ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
        }
        /* This is an error */
        default: 
        {
            Retval=RME_ERR_CAP_NULL;
ffffffff802169de:	48 83 ce ff          	or     $0xffffffffffffffff,%rsi
ffffffff802169e2:	e9 b9 fc ff ff       	jmpq   ffffffff802166a0 <_RME_Svc_Handler+0x1e0>
ffffffff802169e7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff802169ee:	00 00 

ffffffff802169f0 <_RME_Tick_SMP_Handler>:
Input       : struct RME_Reg_Struct* Reg - The register set when entering the handler.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void _RME_Tick_SMP_Handler(struct RME_Reg_Struct* Reg)
{
ffffffff802169f0:	41 55                	push   %r13
ffffffff802169f2:	41 54                	push   %r12
ffffffff802169f4:	49 89 fc             	mov    %rdi,%r12
ffffffff802169f7:	55                   	push   %rbp
ffffffff802169f8:	53                   	push   %rbx
ffffffff802169f9:	48 83 ec 08          	sub    $0x8,%rsp
	ptr_t CPUID;
	struct RME_Thd_Struct* Next_Thd;

	CPUID=RME_CPUID();
ffffffff802169fd:	e8 3d 4e ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
	if(RME_Cur_Thd[CPUID]->Sched.Slices<RME_THD_INF_TIME)
ffffffff80216a02:	48 8b 14 c5 00 28 22 	mov    -0x7fddd800(,%rax,8),%rdx
ffffffff80216a09:	80 
void _RME_Tick_SMP_Handler(struct RME_Reg_Struct* Reg)
{
	ptr_t CPUID;
	struct RME_Thd_Struct* Next_Thd;

	CPUID=RME_CPUID();
ffffffff80216a0a:	48 89 c3             	mov    %rax,%rbx
	if(RME_Cur_Thd[CPUID]->Sched.Slices<RME_THD_INF_TIME)
ffffffff80216a0d:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff80216a14:	ff ff 7f 
ffffffff80216a17:	48 8b 42 30          	mov    0x30(%rdx),%rax
ffffffff80216a1b:	48 39 c8             	cmp    %rcx,%rax
ffffffff80216a1e:	77 17                	ja     ffffffff80216a37 <_RME_Tick_SMP_Handler+0x47>
	{
		/* Decrease timeslice count */
		RME_Cur_Thd[CPUID]->Sched.Slices--;
ffffffff80216a20:	48 83 e8 01          	sub    $0x1,%rax
ffffffff80216a24:	48 89 42 30          	mov    %rax,0x30(%rdx)
		/* See if the current thread's timeslice is used up */
		if(RME_Cur_Thd[CPUID]->Sched.Slices==0)
ffffffff80216a28:	48 8b 04 dd 00 28 22 	mov    -0x7fddd800(,%rbx,8),%rax
ffffffff80216a2f:	80 
ffffffff80216a30:	48 83 78 30 00       	cmpq   $0x0,0x30(%rax)
ffffffff80216a35:	74 21                	je     ffffffff80216a58 <_RME_Tick_SMP_Handler+0x68>
		}
	}

	/* Send a signal to the kernel system ticker receive endpoint. This endpoint
	 * is per-core */
	_RME_Kern_Snd(Reg, RME_Tick_Sig[CPUID]);
ffffffff80216a37:	48 8b 34 dd 00 20 22 	mov    -0x7fdde000(,%rbx,8),%rsi
ffffffff80216a3e:	80 
}
ffffffff80216a3f:	48 83 c4 08          	add    $0x8,%rsp
		}
	}

	/* Send a signal to the kernel system ticker receive endpoint. This endpoint
	 * is per-core */
	_RME_Kern_Snd(Reg, RME_Tick_Sig[CPUID]);
ffffffff80216a43:	4c 89 e7             	mov    %r12,%rdi
}
ffffffff80216a46:	5b                   	pop    %rbx
ffffffff80216a47:	5d                   	pop    %rbp
ffffffff80216a48:	41 5c                	pop    %r12
ffffffff80216a4a:	41 5d                	pop    %r13
		}
	}

	/* Send a signal to the kernel system ticker receive endpoint. This endpoint
	 * is per-core */
	_RME_Kern_Snd(Reg, RME_Tick_Sig[CPUID]);
ffffffff80216a4c:	e9 af 67 00 00       	jmpq   ffffffff8021d200 <_RME_Kern_Snd>
ffffffff80216a51:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
		RME_Cur_Thd[CPUID]->Sched.Slices--;
		/* See if the current thread's timeslice is used up */
		if(RME_Cur_Thd[CPUID]->Sched.Slices==0)
		{
			/* Running out of time. Kick this guy out and pick someone else */
			RME_Cur_Thd[CPUID]->Sched.State=RME_THD_TIMEOUT;
ffffffff80216a58:	48 c7 40 38 03 00 00 	movq   $0x3,0x38(%rax)
ffffffff80216a5f:	00 
			/* Send a scheduler notification to its parent */
			_RME_Run_Notif(RME_Cur_Thd[CPUID]);
ffffffff80216a60:	48 8b 3c dd 00 28 22 	mov    -0x7fddd800(,%rbx,8),%rdi
ffffffff80216a67:	80 
ffffffff80216a68:	e8 73 24 00 00       	callq  ffffffff80218ee0 <_RME_Run_Notif>
			_RME_Run_Del(RME_Cur_Thd[CPUID]);
ffffffff80216a6d:	48 8b 3c dd 00 28 22 	mov    -0x7fddd800(,%rbx,8),%rdi
ffffffff80216a74:	80 
ffffffff80216a75:	e8 56 23 00 00       	callq  ffffffff80218dd0 <_RME_Run_Del>
			Next_Thd=_RME_Run_High(CPUID);
ffffffff80216a7a:	48 89 df             	mov    %rbx,%rdi
ffffffff80216a7d:	e8 be 23 00 00       	callq  ffffffff80218e40 <_RME_Run_High>
			RME_ASSERT(Next_Thd!=0);
ffffffff80216a82:	48 85 c0             	test   %rax,%rax
			/* Running out of time. Kick this guy out and pick someone else */
			RME_Cur_Thd[CPUID]->Sched.State=RME_THD_TIMEOUT;
			/* Send a scheduler notification to its parent */
			_RME_Run_Notif(RME_Cur_Thd[CPUID]);
			_RME_Run_Del(RME_Cur_Thd[CPUID]);
			Next_Thd=_RME_Run_High(CPUID);
ffffffff80216a85:	48 89 c5             	mov    %rax,%rbp
			RME_ASSERT(Next_Thd!=0);
ffffffff80216a88:	74 26                	je     ffffffff80216ab0 <_RME_Tick_SMP_Handler+0xc0>
			Next_Thd->Sched.State=RME_THD_RUNNING;
ffffffff80216a8a:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80216a91:	00 
			/* Do a solid context switch, to the new guy */
			_RME_Run_Swt(Reg, RME_Cur_Thd[CPUID],Next_Thd);
ffffffff80216a92:	48 8b 34 dd 00 28 22 	mov    -0x7fddd800(,%rbx,8),%rsi
ffffffff80216a99:	80 
ffffffff80216a9a:	48 89 c2             	mov    %rax,%rdx
ffffffff80216a9d:	4c 89 e7             	mov    %r12,%rdi
ffffffff80216aa0:	e8 6b 24 00 00       	callq  ffffffff80218f10 <_RME_Run_Swt>
			RME_Cur_Thd[CPUID]=Next_Thd;
ffffffff80216aa5:	48 89 2c dd 00 28 22 	mov    %rbp,-0x7fddd800(,%rbx,8)
ffffffff80216aac:	80 
ffffffff80216aad:	eb 88                	jmp    ffffffff80216a37 <_RME_Tick_SMP_Handler+0x47>
ffffffff80216aaf:	90                   	nop
ffffffff80216ab0:	48 c7 c3 80 e1 21 80 	mov    $0xffffffff8021e180,%rbx
ffffffff80216ab7:	eb 1c                	jmp    ffffffff80216ad5 <_RME_Tick_SMP_Handler+0xe5>
ffffffff80216ab9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
    {
        if(String[Count]=='\0')
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216ac0:	0f be f8             	movsbl %al,%edi
ffffffff80216ac3:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80216ac7:	e8 44 a8 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216acc:	48 81 fb 00 e2 21 80 	cmp    $0xffffffff8021e200,%rbx
ffffffff80216ad3:	74 07                	je     ffffffff80216adc <_RME_Tick_SMP_Handler+0xec>
    {
        if(String[Count]=='\0')
ffffffff80216ad5:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80216ad8:	84 c0                	test   %al,%al
ffffffff80216ada:	75 e4                	jne    ffffffff80216ac0 <_RME_Tick_SMP_Handler+0xd0>
ffffffff80216adc:	48 c7 c3 00 ee 21 80 	mov    $0xffffffff8021ee00,%rbx
ffffffff80216ae3:	eb 18                	jmp    ffffffff80216afd <_RME_Tick_SMP_Handler+0x10d>
ffffffff80216ae5:	0f 1f 00             	nopl   (%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216ae8:	0f be f8             	movsbl %al,%edi
ffffffff80216aeb:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80216aef:	e8 1c a8 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216af4:	48 81 fb 80 ee 21 80 	cmp    $0xffffffff8021ee80,%rbx
ffffffff80216afb:	74 07                	je     ffffffff80216b04 <_RME_Tick_SMP_Handler+0x114>
    {
        if(String[Count]=='\0')
ffffffff80216afd:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80216b00:	84 c0                	test   %al,%al
ffffffff80216b02:	75 e4                	jne    ffffffff80216ae8 <_RME_Tick_SMP_Handler+0xf8>
ffffffff80216b04:	48 c7 c3 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rbx
ffffffff80216b0b:	eb 18                	jmp    ffffffff80216b25 <_RME_Tick_SMP_Handler+0x135>
ffffffff80216b0d:	0f 1f 00             	nopl   (%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216b10:	0f be f8             	movsbl %al,%edi
ffffffff80216b13:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80216b17:	e8 f4 a7 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216b1c:	48 81 fb 70 e4 21 80 	cmp    $0xffffffff8021e470,%rbx
ffffffff80216b23:	74 07                	je     ffffffff80216b2c <_RME_Tick_SMP_Handler+0x13c>
    {
        if(String[Count]=='\0')
ffffffff80216b25:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80216b28:	84 c0                	test   %al,%al
ffffffff80216b2a:	75 e4                	jne    ffffffff80216b10 <_RME_Tick_SMP_Handler+0x120>
Input       : struct RME_Reg_Struct* Reg - The register set when entering the handler.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : None.
******************************************************************************/
void _RME_Tick_SMP_Handler(struct RME_Reg_Struct* Reg)
{
ffffffff80216b2c:	bb 64 00 00 00       	mov    $0x64,%ebx
ffffffff80216b31:	b9 74 02 00 00       	mov    $0x274,%ecx
ffffffff80216b36:	41 bd 03 00 00 00    	mov    $0x3,%r13d
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
            Div/=10;
ffffffff80216b3c:	48 bd cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rbp
ffffffff80216b43:	cc cc cc 
ffffffff80216b46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80216b4d:	00 00 00 
        Num=Count;
        
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
ffffffff80216b50:	48 89 c8             	mov    %rcx,%rax
ffffffff80216b53:	31 d2                	xor    %edx,%edx
        Iter=Int;
        Num=Count;
        
        while(Count>0)
        {
            Count--;
ffffffff80216b55:	49 83 ed 01          	sub    $0x1,%r13
            __RME_Putchar(Iter/Div+'0');
ffffffff80216b59:	48 f7 f3             	div    %rbx
ffffffff80216b5c:	83 c0 30             	add    $0x30,%eax
ffffffff80216b5f:	49 89 d4             	mov    %rdx,%r12
ffffffff80216b62:	0f be f8             	movsbl %al,%edi
ffffffff80216b65:	e8 a6 a7 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
            Iter=Iter%Div;
            Div/=10;
ffffffff80216b6a:	48 89 d8             	mov    %rbx,%rax
        
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
ffffffff80216b6d:	4c 89 e1             	mov    %r12,%rcx
            Div/=10;
ffffffff80216b70:	48 f7 e5             	mul    %rbp
ffffffff80216b73:	48 c1 ea 03          	shr    $0x3,%rdx
        Div/=10;
        
        Iter=Int;
        Num=Count;
        
        while(Count>0)
ffffffff80216b77:	4d 85 ed             	test   %r13,%r13
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
            Div/=10;
ffffffff80216b7a:	48 89 d3             	mov    %rdx,%rbx
        Div/=10;
        
        Iter=Int;
        Num=Count;
        
        while(Count>0)
ffffffff80216b7d:	75 d1                	jne    ffffffff80216b50 <_RME_Tick_SMP_Handler+0x160>
ffffffff80216b7f:	48 c7 c3 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rbx
ffffffff80216b86:	49 c7 c4 79 e4 21 80 	mov    $0xffffffff8021e479,%r12
ffffffff80216b8d:	48 89 dd             	mov    %rbx,%rbp
ffffffff80216b90:	eb 17                	jmp    ffffffff80216ba9 <_RME_Tick_SMP_Handler+0x1b9>
ffffffff80216b92:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
    {
        if(String[Count]=='\0')
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216b98:	0f be f8             	movsbl %al,%edi
ffffffff80216b9b:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80216b9f:	e8 6c a7 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216ba4:	49 39 ec             	cmp    %rbp,%r12
ffffffff80216ba7:	74 08                	je     ffffffff80216bb1 <_RME_Tick_SMP_Handler+0x1c1>
    {
        if(String[Count]=='\0')
ffffffff80216ba9:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80216bad:	84 c0                	test   %al,%al
ffffffff80216baf:	75 e7                	jne    ffffffff80216b98 <_RME_Tick_SMP_Handler+0x1a8>
ffffffff80216bb1:	48 c7 c5 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rbp
ffffffff80216bb8:	eb 1b                	jmp    ffffffff80216bd5 <_RME_Tick_SMP_Handler+0x1e5>
ffffffff80216bba:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216bc0:	0f be f8             	movsbl %al,%edi
ffffffff80216bc3:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80216bc7:	e8 44 a7 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216bcc:	48 81 fd 7c e4 21 80 	cmp    $0xffffffff8021e47c,%rbp
ffffffff80216bd3:	74 08                	je     ffffffff80216bdd <_RME_Tick_SMP_Handler+0x1ed>
    {
        if(String[Count]=='\0')
ffffffff80216bd5:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80216bd9:	84 c0                	test   %al,%al
ffffffff80216bdb:	75 e3                	jne    ffffffff80216bc0 <_RME_Tick_SMP_Handler+0x1d0>
ffffffff80216bdd:	48 c7 c5 08 e4 21 80 	mov    $0xffffffff8021e408,%rbp
ffffffff80216be4:	49 c7 c5 88 e4 21 80 	mov    $0xffffffff8021e488,%r13
ffffffff80216beb:	eb 14                	jmp    ffffffff80216c01 <_RME_Tick_SMP_Handler+0x211>
ffffffff80216bed:	0f 1f 00             	nopl   (%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216bf0:	0f be f8             	movsbl %al,%edi
ffffffff80216bf3:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80216bf7:	e8 14 a7 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216bfc:	49 39 ed             	cmp    %rbp,%r13
ffffffff80216bff:	74 08                	je     ffffffff80216c09 <_RME_Tick_SMP_Handler+0x219>
    {
        if(String[Count]=='\0')
ffffffff80216c01:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80216c05:	84 c0                	test   %al,%al
ffffffff80216c07:	75 e7                	jne    ffffffff80216bf0 <_RME_Tick_SMP_Handler+0x200>
ffffffff80216c09:	48 c7 c5 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rbp
ffffffff80216c10:	eb 1b                	jmp    ffffffff80216c2d <_RME_Tick_SMP_Handler+0x23d>
ffffffff80216c12:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216c18:	0f be f8             	movsbl %al,%edi
ffffffff80216c1b:	48 83 c5 01          	add    $0x1,%rbp
ffffffff80216c1f:	e8 ec a6 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216c24:	48 81 fd 71 ee 21 80 	cmp    $0xffffffff8021ee71,%rbp
ffffffff80216c2b:	74 24                	je     ffffffff80216c51 <_RME_Tick_SMP_Handler+0x261>
    {
        if(String[Count]=='\0')
ffffffff80216c2d:	0f b6 45 00          	movzbl 0x0(%rbp),%eax
ffffffff80216c31:	84 c0                	test   %al,%al
ffffffff80216c33:	75 e3                	jne    ffffffff80216c18 <_RME_Tick_SMP_Handler+0x228>
ffffffff80216c35:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80216c38:	84 c0                	test   %al,%al
ffffffff80216c3a:	74 1c                	je     ffffffff80216c58 <_RME_Tick_SMP_Handler+0x268>
ffffffff80216c3c:	0f 1f 40 00          	nopl   0x0(%rax)
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216c40:	0f be f8             	movsbl %al,%edi
ffffffff80216c43:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80216c47:	e8 c4 a6 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216c4c:	49 39 dc             	cmp    %rbx,%r12
ffffffff80216c4f:	74 07                	je     ffffffff80216c58 <_RME_Tick_SMP_Handler+0x268>
    {
        if(String[Count]=='\0')
ffffffff80216c51:	0f b6 03             	movzbl (%rbx),%eax
ffffffff80216c54:	84 c0                	test   %al,%al
ffffffff80216c56:	75 e8                	jne    ffffffff80216c40 <_RME_Tick_SMP_Handler+0x250>
ffffffff80216c58:	eb fe                	jmp    ffffffff80216c58 <_RME_Tick_SMP_Handler+0x268>
ffffffff80216c5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80216c60 <_RME_Tick_Handler>:
Return      : None.
******************************************************************************/
void _RME_Tick_Handler(struct RME_Reg_Struct* Reg)
{
    /* Increase the tick count */
    RME_Timestamp++;
ffffffff80216c60:	48 83 05 98 c3 00 00 	addq   $0x1,0xc398(%rip)        # ffffffff80223000 <RME_Timestamp>
ffffffff80216c67:	01 
    /* Call generic handler */
    _RME_Tick_SMP_Handler(Reg);
ffffffff80216c68:	e9 83 fd ff ff       	jmpq   ffffffff802169f0 <_RME_Tick_SMP_Handler>
ffffffff80216c6d:	0f 1f 00             	nopl   (%rax)

ffffffff80216c70 <RME_Kmain>:
Input       : None.
Output      : None.
Return      : ret_t - This function never returns.
******************************************************************************/
ret_t RME_Kmain(void)
{
ffffffff80216c70:	48 83 ec 08          	sub    $0x8,%rsp
    /* Disable all interrupts first */
    __RME_Disable_Int();
ffffffff80216c74:	e8 39 4c ff ff       	callq  ffffffff8020b8b2 <__RME_Disable_Int>
    /* Some low-level checks to make sure the correctness of the core */
    __RME_Low_Level_Check();
    /* Hardware low-level init */
    __RME_Low_Level_Init();
ffffffff80216c79:	e8 12 a9 ff ff       	callq  ffffffff80211590 <__RME_Low_Level_Init>
    /* Initialize the kernel page tables */
    __RME_Pgtbl_Kmem_Init();
ffffffff80216c7e:	e8 ed b2 ff ff       	callq  ffffffff80211f70 <__RME_Pgtbl_Kmem_Init>
    
    /* Initialize the kernel object allocation table - default init */
    _RME_Kotbl_Init(RME_KOTBL_WORD_NUM);
ffffffff80216c83:	bf 04 00 00 00       	mov    $0x4,%edi
ffffffff80216c88:	e8 c3 02 00 00       	callq  ffffffff80216f50 <_RME_Kotbl_Init>
ret_t _RME_Syscall_Init(void)
{
    cnt_t Count;
    
    /* Set it to 0x00..FF.. */
    RME_Timestamp=(~((ptr_t)(0)))>>(sizeof(ptr_t)*4);
ffffffff80216c8d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
ffffffff80216c92:	48 89 05 67 c3 00 00 	mov    %rax,0xc367(%rip)        # ffffffff80223000 <RME_Timestamp>
ffffffff80216c99:	48 c7 c0 00 28 22 80 	mov    $0xffffffff80222800,%rax
    
    for(Count=0;Count<RME_CPU_NUM;Count++)
        RME_Cur_Thd[Count]=0;
ffffffff80216ca0:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff80216ca7:	48 83 c0 08          	add    $0x8,%rax
    cnt_t Count;
    
    /* Set it to 0x00..FF.. */
    RME_Timestamp=(~((ptr_t)(0)))>>(sizeof(ptr_t)*4);
    
    for(Count=0;Count<RME_CPU_NUM;Count++)
ffffffff80216cab:	48 3d 00 30 22 80    	cmp    $0xffffffff80223000,%rax
ffffffff80216cb1:	75 ed                	jne    ffffffff80216ca0 <RME_Kmain+0x30>
    /* Initialize the kernel object allocation table - default init */
    _RME_Kotbl_Init(RME_KOTBL_WORD_NUM);
    /* Initialize system calls, and kernel timestamp counter */
    _RME_Syscall_Init();
    /* Initialize process/threads control module */
    _RME_Prcthd_Init();
ffffffff80216cb3:	e8 48 23 00 00       	callq  ffffffff80219000 <_RME_Prcthd_Init>
    
    /* Boot into the first process, and handle it all the other cases&enable the interrupt */
    __RME_Boot();
ffffffff80216cb8:	e8 73 bc ff ff       	callq  ffffffff80212930 <__RME_Boot>
    
    /* Should never reach here. If it reached here, we reboot */
    __RME_Reboot();
ffffffff80216cbd:	e8 6e cf ff ff       	callq  ffffffff80213c30 <__RME_Reboot>
    
    return 0;
}
ffffffff80216cc2:	31 c0                	xor    %eax,%eax
ffffffff80216cc4:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80216cc8:	c3                   	retq   
ffffffff80216cc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80216cd0 <RME_Print_Int>:
    cnt_t Count;
    cnt_t Num;
    ptr_t Div;
    
    /* how many digits are there? */
    if(Int==0)
ffffffff80216cd0:	48 85 ff             	test   %rdi,%rdi
Input       : cnt_t Int - The integer to print.
Output      : None.
Return      : cnt_t - The length of the string printed.
******************************************************************************/
cnt_t RME_Print_Int(cnt_t Int)
{
ffffffff80216cd3:	41 56                	push   %r14
ffffffff80216cd5:	41 55                	push   %r13
ffffffff80216cd7:	41 54                	push   %r12
ffffffff80216cd9:	55                   	push   %rbp
ffffffff80216cda:	53                   	push   %rbx
    cnt_t Count;
    cnt_t Num;
    ptr_t Div;
    
    /* how many digits are there? */
    if(Int==0)
ffffffff80216cdb:	0f 84 3f 01 00 00    	je     ffffffff80216e20 <RME_Print_Int+0x150>
    {
        __RME_Putchar('0');
        return 1;
    }
    else if(Int<0)
ffffffff80216ce1:	0f 88 91 00 00 00    	js     ffffffff80216d78 <RME_Print_Int+0xa8>
    else
    {
        /* How many digits are there? */
        Count=0;
        Div=1;
        Iter=Int;
ffffffff80216ce7:	48 89 fa             	mov    %rdi,%rdx
    }
    else
    {
        /* How many digits are there? */
        Count=0;
        Div=1;
ffffffff80216cea:	bb 01 00 00 00       	mov    $0x1,%ebx
        }
    }
    else
    {
        /* How many digits are there? */
        Count=0;
ffffffff80216cef:	31 ed                	xor    %ebp,%ebp
        Div=1;
        Iter=Int;
        while(Iter!=0)
        {
            Iter/=10;
ffffffff80216cf1:	48 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rcx
ffffffff80216cf8:	cc cc cc 
ffffffff80216cfb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80216d00:	48 89 d0             	mov    %rdx,%rax
            Count++;
            Div*=10;
ffffffff80216d03:	48 8d 1c 9b          	lea    (%rbx,%rbx,4),%rbx
        Div=1;
        Iter=Int;
        while(Iter!=0)
        {
            Iter/=10;
            Count++;
ffffffff80216d07:	48 83 c5 01          	add    $0x1,%rbp
        Count=0;
        Div=1;
        Iter=Int;
        while(Iter!=0)
        {
            Iter/=10;
ffffffff80216d0b:	48 f7 e1             	mul    %rcx
ffffffff80216d0e:	49 bc cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r12
ffffffff80216d15:	cc cc cc 
            Count++;
            Div*=10;
ffffffff80216d18:	48 01 db             	add    %rbx,%rbx
        Count=0;
        Div=1;
        Iter=Int;
        while(Iter!=0)
        {
            Iter/=10;
ffffffff80216d1b:	48 c1 ea 03          	shr    $0x3,%rdx
    {
        /* How many digits are there? */
        Count=0;
        Div=1;
        Iter=Int;
        while(Iter!=0)
ffffffff80216d1f:	48 85 d2             	test   %rdx,%rdx
ffffffff80216d22:	75 dc                	jne    ffffffff80216d00 <RME_Print_Int+0x30>
        {
            Iter/=10;
            Count++;
            Div*=10;
        }
        Div/=10;
ffffffff80216d24:	48 89 d8             	mov    %rbx,%rax
ffffffff80216d27:	49 89 ee             	mov    %rbp,%r14
ffffffff80216d2a:	49 f7 e4             	mul    %r12
ffffffff80216d2d:	48 89 d3             	mov    %rdx,%rbx
ffffffff80216d30:	48 c1 eb 03          	shr    $0x3,%rbx
ffffffff80216d34:	0f 1f 40 00          	nopl   0x0(%rax)
        Num=Count;
        
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
ffffffff80216d38:	48 89 f8             	mov    %rdi,%rax
ffffffff80216d3b:	31 d2                	xor    %edx,%edx
        Iter=Int;
        Num=Count;
        
        while(Count>0)
        {
            Count--;
ffffffff80216d3d:	49 83 ee 01          	sub    $0x1,%r14
            __RME_Putchar(Iter/Div+'0');
ffffffff80216d41:	48 f7 f3             	div    %rbx
ffffffff80216d44:	8d 78 30             	lea    0x30(%rax),%edi
ffffffff80216d47:	49 89 d5             	mov    %rdx,%r13
ffffffff80216d4a:	40 0f be ff          	movsbl %dil,%edi
ffffffff80216d4e:	e8 bd a5 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
            Iter=Iter%Div;
            Div/=10;
ffffffff80216d53:	48 89 d8             	mov    %rbx,%rax
        
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
ffffffff80216d56:	4c 89 ef             	mov    %r13,%rdi
            Div/=10;
ffffffff80216d59:	49 f7 e4             	mul    %r12
ffffffff80216d5c:	48 89 d3             	mov    %rdx,%rbx
ffffffff80216d5f:	48 c1 eb 03          	shr    $0x3,%rbx
        Div/=10;
        
        Iter=Int;
        Num=Count;
        
        while(Count>0)
ffffffff80216d63:	4d 85 f6             	test   %r14,%r14
ffffffff80216d66:	75 d0                	jne    ffffffff80216d38 <RME_Print_Int+0x68>
ffffffff80216d68:	48 89 e8             	mov    %rbp,%rax
            Div/=10;
        }
    }
    
    return Num;
}
ffffffff80216d6b:	5b                   	pop    %rbx
ffffffff80216d6c:	5d                   	pop    %rbp
ffffffff80216d6d:	41 5c                	pop    %r12
ffffffff80216d6f:	41 5d                	pop    %r13
ffffffff80216d71:	41 5e                	pop    %r14
ffffffff80216d73:	c3                   	retq   
ffffffff80216d74:	0f 1f 40 00          	nopl   0x0(%rax)
    {
        /* How many digits are there? */
        Count=0;
        Div=1;
        Iter=-Int;
        while(Iter!=0)
ffffffff80216d78:	48 f7 df             	neg    %rdi
ffffffff80216d7b:	48 89 fb             	mov    %rdi,%rbx
ffffffff80216d7e:	0f 84 b4 00 00 00    	je     ffffffff80216e38 <RME_Print_Int+0x168>
ffffffff80216d84:	48 89 fa             	mov    %rdi,%rdx
ffffffff80216d87:	41 bc 01 00 00 00    	mov    $0x1,%r12d
ffffffff80216d8d:	31 ed                	xor    %ebp,%ebp
        {
            Iter/=10;
ffffffff80216d8f:	48 b9 cd cc cc cc cc 	movabs $0xcccccccccccccccd,%rcx
ffffffff80216d96:	cc cc cc 
ffffffff80216d99:	eb 08                	jmp    ffffffff80216da3 <RME_Print_Int+0xd3>
ffffffff80216d9b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
            Count++;
ffffffff80216da0:	4c 89 f5             	mov    %r14,%rbp
        Count=0;
        Div=1;
        Iter=-Int;
        while(Iter!=0)
        {
            Iter/=10;
ffffffff80216da3:	48 89 d0             	mov    %rdx,%rax
            Count++;
            Div*=10;
ffffffff80216da6:	4f 8d 24 a4          	lea    (%r12,%r12,4),%r12
        Count=0;
        Div=1;
        Iter=-Int;
        while(Iter!=0)
        {
            Iter/=10;
ffffffff80216daa:	49 bd cd cc cc cc cc 	movabs $0xcccccccccccccccd,%r13
ffffffff80216db1:	cc cc cc 
ffffffff80216db4:	48 f7 e1             	mul    %rcx
            Count++;
ffffffff80216db7:	4c 8d 75 01          	lea    0x1(%rbp),%r14
            Div*=10;
ffffffff80216dbb:	4d 01 e4             	add    %r12,%r12
        Count=0;
        Div=1;
        Iter=-Int;
        while(Iter!=0)
        {
            Iter/=10;
ffffffff80216dbe:	48 c1 ea 03          	shr    $0x3,%rdx
    {
        /* How many digits are there? */
        Count=0;
        Div=1;
        Iter=-Int;
        while(Iter!=0)
ffffffff80216dc2:	48 85 d2             	test   %rdx,%rdx
ffffffff80216dc5:	75 d9                	jne    ffffffff80216da0 <RME_Print_Int+0xd0>
        {
            Iter/=10;
            Count++;
            Div*=10;
        }
        Div/=10;
ffffffff80216dc7:	4c 89 e0             	mov    %r12,%rax
        
        __RME_Putchar('-');
ffffffff80216dca:	bf 2d 00 00 00       	mov    $0x2d,%edi
        Iter=-Int;
        Num=Count+1;
ffffffff80216dcf:	48 83 c5 02          	add    $0x2,%rbp
        {
            Iter/=10;
            Count++;
            Div*=10;
        }
        Div/=10;
ffffffff80216dd3:	49 f7 e5             	mul    %r13
ffffffff80216dd6:	48 c1 ea 03          	shr    $0x3,%rdx
ffffffff80216dda:	49 89 d4             	mov    %rdx,%r12
        
        __RME_Putchar('-');
ffffffff80216ddd:	e8 2e a5 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
ffffffff80216de2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        Num=Count+1;
        
        while(Count>0)
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
ffffffff80216de8:	48 89 d8             	mov    %rbx,%rax
ffffffff80216deb:	31 d2                	xor    %edx,%edx
        Iter=-Int;
        Num=Count+1;
        
        while(Count>0)
        {
            Count--;
ffffffff80216ded:	49 83 ee 01          	sub    $0x1,%r14
            __RME_Putchar(Iter/Div+'0');
ffffffff80216df1:	49 f7 f4             	div    %r12
ffffffff80216df4:	83 c0 30             	add    $0x30,%eax
ffffffff80216df7:	48 89 d3             	mov    %rdx,%rbx
ffffffff80216dfa:	0f be f8             	movsbl %al,%edi
ffffffff80216dfd:	e8 0e a5 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
            Iter=Iter%Div;
            Div/=10;
ffffffff80216e02:	4c 89 e0             	mov    %r12,%rax
ffffffff80216e05:	49 f7 e5             	mul    %r13
ffffffff80216e08:	48 c1 ea 03          	shr    $0x3,%rdx
        
        __RME_Putchar('-');
        Iter=-Int;
        Num=Count+1;
        
        while(Count>0)
ffffffff80216e0c:	4d 85 f6             	test   %r14,%r14
        {
            Count--;
            __RME_Putchar(Iter/Div+'0');
            Iter=Iter%Div;
            Div/=10;
ffffffff80216e0f:	49 89 d4             	mov    %rdx,%r12
        
        __RME_Putchar('-');
        Iter=-Int;
        Num=Count+1;
        
        while(Count>0)
ffffffff80216e12:	75 d4                	jne    ffffffff80216de8 <RME_Print_Int+0x118>
ffffffff80216e14:	e9 4f ff ff ff       	jmpq   ffffffff80216d68 <RME_Print_Int+0x98>
ffffffff80216e19:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ptr_t Div;
    
    /* how many digits are there? */
    if(Int==0)
    {
        __RME_Putchar('0');
ffffffff80216e20:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff80216e25:	e8 e6 a4 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
            Div/=10;
        }
    }
    
    return Num;
}
ffffffff80216e2a:	5b                   	pop    %rbx
    
    /* how many digits are there? */
    if(Int==0)
    {
        __RME_Putchar('0');
        return 1;
ffffffff80216e2b:	b8 01 00 00 00       	mov    $0x1,%eax
            Div/=10;
        }
    }
    
    return Num;
}
ffffffff80216e30:	5d                   	pop    %rbp
ffffffff80216e31:	41 5c                	pop    %r12
ffffffff80216e33:	41 5d                	pop    %r13
ffffffff80216e35:	41 5e                	pop    %r14
ffffffff80216e37:	c3                   	retq   
            Count++;
            Div*=10;
        }
        Div/=10;
        
        __RME_Putchar('-');
ffffffff80216e38:	bf 2d 00 00 00       	mov    $0x2d,%edi
ffffffff80216e3d:	e8 ce a4 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
        Iter=-Int;
        Num=Count+1;
ffffffff80216e42:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80216e47:	e9 1f ff ff ff       	jmpq   ffffffff80216d6b <RME_Print_Int+0x9b>
ffffffff80216e4c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff80216e50 <RME_Print_Uint>:
    ptr_t Iter;
    cnt_t Count;
    cnt_t Num;
    
    /* how many digits are there? */
    if(Uint==0)
ffffffff80216e50:	48 85 ff             	test   %rdi,%rdi
Input       : ptr_t Uint - The unsigned integer to print.
Output      : None.
Return      : cnt_t - The length of the string printed.
******************************************************************************/
cnt_t RME_Print_Uint(ptr_t Uint)
{
ffffffff80216e53:	41 54                	push   %r12
ffffffff80216e55:	55                   	push   %rbp
ffffffff80216e56:	53                   	push   %rbx
    ptr_t Iter;
    cnt_t Count;
    cnt_t Num;
    
    /* how many digits are there? */
    if(Uint==0)
ffffffff80216e57:	0f 84 93 00 00 00    	je     ffffffff80216ef0 <RME_Print_Uint+0xa0>
    else
    {
        /* Filter out all the zeroes */
        Count=0;
        Iter=Uint;
        while((Iter>>((sizeof(ptr_t)*8)-4))==0)
ffffffff80216e5d:	48 89 f9             	mov    %rdi,%rcx
ffffffff80216e60:	31 d2                	xor    %edx,%edx
ffffffff80216e62:	48 89 fd             	mov    %rdi,%rbp
ffffffff80216e65:	48 c1 e9 3c          	shr    $0x3c,%rcx
ffffffff80216e69:	48 89 f8             	mov    %rdi,%rax
        {
            Iter<<=4;
            Count++;
        }
        /* Count is the number of pts to print */
        Count=sizeof(ptr_t)*2-Count;
ffffffff80216e6c:	41 bc 10 00 00 00    	mov    $0x10,%r12d
    else
    {
        /* Filter out all the zeroes */
        Count=0;
        Iter=Uint;
        while((Iter>>((sizeof(ptr_t)*8)-4))==0)
ffffffff80216e72:	48 85 c9             	test   %rcx,%rcx
ffffffff80216e75:	75 2d                	jne    ffffffff80216ea4 <RME_Print_Uint+0x54>
ffffffff80216e77:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff80216e7e:	00 00 
        {
            Iter<<=4;
ffffffff80216e80:	48 c1 e0 04          	shl    $0x4,%rax
            Count++;
ffffffff80216e84:	48 83 c2 01          	add    $0x1,%rdx
    else
    {
        /* Filter out all the zeroes */
        Count=0;
        Iter=Uint;
        while((Iter>>((sizeof(ptr_t)*8)-4))==0)
ffffffff80216e88:	48 89 c1             	mov    %rax,%rcx
ffffffff80216e8b:	48 c1 e9 3c          	shr    $0x3c,%rcx
ffffffff80216e8f:	48 85 c9             	test   %rcx,%rcx
ffffffff80216e92:	74 ec                	je     ffffffff80216e80 <RME_Print_Uint+0x30>
        {
            Iter<<=4;
            Count++;
        }
        /* Count is the number of pts to print */
        Count=sizeof(ptr_t)*2-Count;
ffffffff80216e94:	b8 10 00 00 00       	mov    $0x10,%eax
ffffffff80216e99:	48 29 d0             	sub    %rdx,%rax
        Num=Count;
        while(Count>0)
ffffffff80216e9c:	48 85 c0             	test   %rax,%rax
        {
            Iter<<=4;
            Count++;
        }
        /* Count is the number of pts to print */
        Count=sizeof(ptr_t)*2-Count;
ffffffff80216e9f:	49 89 c4             	mov    %rax,%r12
        Num=Count;
        while(Count>0)
ffffffff80216ea2:	7e 43                	jle    ffffffff80216ee7 <RME_Print_Uint+0x97>
        {
            Iter<<=4;
            Count++;
        }
        /* Count is the number of pts to print */
        Count=sizeof(ptr_t)*2-Count;
ffffffff80216ea4:	4c 89 e3             	mov    %r12,%rbx
ffffffff80216ea7:	eb 14                	jmp    ffffffff80216ebd <RME_Print_Uint+0x6d>
ffffffff80216ea9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        while(Count>0)
        {
            Count--;
            Iter=(Uint>>(Count*4))&0x0F;
            if(Iter<10)
                __RME_Putchar('0'+Iter);
ffffffff80216eb0:	8d 7a 30             	lea    0x30(%rdx),%edi
ffffffff80216eb3:	e8 58 a4 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
            Count++;
        }
        /* Count is the number of pts to print */
        Count=sizeof(ptr_t)*2-Count;
        Num=Count;
        while(Count>0)
ffffffff80216eb8:	48 85 db             	test   %rbx,%rbx
ffffffff80216ebb:	74 27                	je     ffffffff80216ee4 <RME_Print_Uint+0x94>
        {
            Count--;
ffffffff80216ebd:	48 83 eb 01          	sub    $0x1,%rbx
            Iter=(Uint>>(Count*4))&0x0F;
ffffffff80216ec1:	48 89 ea             	mov    %rbp,%rdx
ffffffff80216ec4:	8d 0c 9d 00 00 00 00 	lea    0x0(,%rbx,4),%ecx
ffffffff80216ecb:	48 d3 ea             	shr    %cl,%rdx
ffffffff80216ece:	83 e2 0f             	and    $0xf,%edx
            if(Iter<10)
ffffffff80216ed1:	48 83 fa 09          	cmp    $0x9,%rdx
ffffffff80216ed5:	76 d9                	jbe    ffffffff80216eb0 <RME_Print_Uint+0x60>
                __RME_Putchar('0'+Iter);
            else
                __RME_Putchar('A'+Iter-10);
ffffffff80216ed7:	8d 7a 37             	lea    0x37(%rdx),%edi
ffffffff80216eda:	e8 31 a4 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
            Count++;
        }
        /* Count is the number of pts to print */
        Count=sizeof(ptr_t)*2-Count;
        Num=Count;
        while(Count>0)
ffffffff80216edf:	48 85 db             	test   %rbx,%rbx
ffffffff80216ee2:	75 d9                	jne    ffffffff80216ebd <RME_Print_Uint+0x6d>
ffffffff80216ee4:	4c 89 e0             	mov    %r12,%rax
                __RME_Putchar('A'+Iter-10);
        }
    }
    
    return Num;
}
ffffffff80216ee7:	5b                   	pop    %rbx
ffffffff80216ee8:	5d                   	pop    %rbp
ffffffff80216ee9:	41 5c                	pop    %r12
ffffffff80216eeb:	c3                   	retq   
ffffffff80216eec:	0f 1f 40 00          	nopl   0x0(%rax)
    cnt_t Num;
    
    /* how many digits are there? */
    if(Uint==0)
    {
        __RME_Putchar('0');
ffffffff80216ef0:	bf 30 00 00 00       	mov    $0x30,%edi
ffffffff80216ef5:	e8 16 a4 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
                __RME_Putchar('A'+Iter-10);
        }
    }
    
    return Num;
}
ffffffff80216efa:	5b                   	pop    %rbx
    
    /* how many digits are there? */
    if(Uint==0)
    {
        __RME_Putchar('0');
        return 1;
ffffffff80216efb:	b8 01 00 00 00       	mov    $0x1,%eax
                __RME_Putchar('A'+Iter-10);
        }
    }
    
    return Num;
}
ffffffff80216f00:	5d                   	pop    %rbp
ffffffff80216f01:	41 5c                	pop    %r12
ffffffff80216f03:	c3                   	retq   
ffffffff80216f04:	66 90                	xchg   %ax,%ax
ffffffff80216f06:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80216f0d:	00 00 00 

ffffffff80216f10 <RME_Print_String>:
Input       : s8* String - The string to print
Output      : None.
Return      : cnt_t - The length of the string printed, the '\0' is not included.
******************************************************************************/
cnt_t RME_Print_String(s8* String)
{
ffffffff80216f10:	55                   	push   %rbp
ffffffff80216f11:	53                   	push   %rbx
ffffffff80216f12:	48 89 fd             	mov    %rdi,%rbp
    cnt_t Count;
    
    Count=0;
ffffffff80216f15:	31 db                	xor    %ebx,%ebx
Input       : s8* String - The string to print
Output      : None.
Return      : cnt_t - The length of the string printed, the '\0' is not included.
******************************************************************************/
cnt_t RME_Print_String(s8* String)
{
ffffffff80216f17:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80216f1b:	eb 15                	jmp    ffffffff80216f32 <RME_Print_String+0x22>
ffffffff80216f1d:	0f 1f 00             	nopl   (%rax)
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
    {
        if(String[Count]=='\0')
            break;
        
        __RME_Putchar(String[Count++]);
ffffffff80216f20:	48 83 c3 01          	add    $0x1,%rbx
ffffffff80216f24:	e8 e7 a3 ff ff       	callq  ffffffff80211310 <__RME_Putchar>
cnt_t RME_Print_String(s8* String)
{
    cnt_t Count;
    
    Count=0;
    while(Count<RME_KERNEL_DEBUG_MAX_STR)
ffffffff80216f29:	48 81 fb 80 00 00 00 	cmp    $0x80,%rbx
ffffffff80216f30:	74 0a                	je     ffffffff80216f3c <RME_Print_String+0x2c>
    {
        if(String[Count]=='\0')
ffffffff80216f32:	0f be 7c 1d 00       	movsbl 0x0(%rbp,%rbx,1),%edi
ffffffff80216f37:	40 84 ff             	test   %dil,%dil
ffffffff80216f3a:	75 e4                	jne    ffffffff80216f20 <RME_Print_String+0x10>
        
        __RME_Putchar(String[Count++]);
    }
    
    return Count;
}
ffffffff80216f3c:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80216f40:	48 89 d8             	mov    %rbx,%rax
ffffffff80216f43:	5b                   	pop    %rbx
ffffffff80216f44:	5d                   	pop    %rbp
ffffffff80216f45:	c3                   	retq   
ffffffff80216f46:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80216f4d:	00 00 00 

ffffffff80216f50 <_RME_Kotbl_Init>:
******************************************************************************/
ret_t _RME_Kotbl_Init(ptr_t Words)
{
    ptr_t Count;
    
    if(Words<RME_KOTBL_WORD_NUM)
ffffffff80216f50:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80216f54:	76 25                	jbe    ffffffff80216f7b <_RME_Kotbl_Init+0x2b>
ffffffff80216f56:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80216f5d:	80 ff ff 
ffffffff80216f60:	48 8d 14 f8          	lea    (%rax,%rdi,8),%rdx
ffffffff80216f64:	0f 1f 40 00          	nopl   0x0(%rax)
    /* Avoid compiler warning about unused variable */
    RME_Kotbl[0]=0;

    /* Zero out the whole table */
    for(Count=0;Count<Words;Count++)
    	RME_KOTBL[Count]=0;
ffffffff80216f68:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff80216f6f:	48 83 c0 08          	add    $0x8,%rax
    
    /* Avoid compiler warning about unused variable */
    RME_Kotbl[0]=0;

    /* Zero out the whole table */
    for(Count=0;Count<Words;Count++)
ffffffff80216f73:	48 39 d0             	cmp    %rdx,%rax
ffffffff80216f76:	75 f0                	jne    ffffffff80216f68 <_RME_Kotbl_Init+0x18>
    	RME_KOTBL[Count]=0;
    
    return 0;
ffffffff80216f78:	31 c0                	xor    %eax,%eax
ffffffff80216f7a:	c3                   	retq   
ret_t _RME_Kotbl_Init(ptr_t Words)
{
    ptr_t Count;
    
    if(Words<RME_KOTBL_WORD_NUM)
        return -1;
ffffffff80216f7b:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    /* Zero out the whole table */
    for(Count=0;Count<Words;Count++)
    	RME_KOTBL[Count]=0;
    
    return 0;
}
ffffffff80216f82:	c3                   	retq   
ffffffff80216f83:	0f 1f 00             	nopl   (%rax)
ffffffff80216f86:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80216f8d:	00 00 00 

ffffffff80216f90 <_RME_Kotbl_Mark>:
    /* The mask at the end word */
    ptr_t End_Mask;
    ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KMEM_SLOT_ORDER-1))!=0)
ffffffff80216f90:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff80216f94:	0f 85 15 02 00 00    	jne    ffffffff802171af <_RME_Kotbl_Mark+0x21f>
              ptr_t Size - The size of the memory to populate.
Output      : None.
Return      : ret_t - If the operation is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kotbl_Mark(ptr_t Kaddr, ptr_t Size)
{
ffffffff80216f9a:	41 57                	push   %r15
ffffffff80216f9c:	41 56                	push   %r14
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff80216f9e:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
              ptr_t Size - The size of the memory to populate.
Output      : None.
Return      : ret_t - If the operation is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kotbl_Mark(ptr_t Kaddr, ptr_t Size)
{
ffffffff80216fa5:	41 55                	push   %r13
    /* Check if the marking is within range - unnecessary due to the kmem cap range limits */
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80216fa7:	49 bd 00 00 00 00 00 	movabs $0x800000000000,%r13
ffffffff80216fae:	80 00 00 
              ptr_t Size - The size of the memory to populate.
Output      : None.
Return      : ret_t - If the operation is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kotbl_Mark(ptr_t Kaddr, ptr_t Size)
{
ffffffff80216fb1:	41 54                	push   %r12
    /* Check if the marking is within range - unnecessary due to the kmem cap range limits */
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80216fb3:	49 01 fd             	add    %rdi,%r13
              ptr_t Size - The size of the memory to populate.
Output      : None.
Return      : ret_t - If the operation is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kotbl_Mark(ptr_t Kaddr, ptr_t Size)
{
ffffffff80216fb6:	55                   	push   %rbp
ffffffff80216fb7:	53                   	push   %rbx
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80216fb8:	48 bb ff ff ff ff ff 	movabs $0x7fffffffffff,%rbx
ffffffff80216fbf:	7f 00 00 
    /* Check if the marking is within range - unnecessary due to the kmem cap range limits */
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80216fc2:	4c 89 e9             	mov    %r13,%rcx
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff80216fc5:	48 89 d0             	mov    %rdx,%rax
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80216fc8:	48 01 f3             	add    %rsi,%rbx
    /* Check if the marking is within range - unnecessary due to the kmem cap range limits */
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80216fcb:	48 c1 e9 04          	shr    $0x4,%rcx
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
    Start=Start>>RME_WORD_ORDER;
ffffffff80216fcf:	49 c1 ed 0a          	shr    $0xa,%r13
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80216fd3:	48 01 fb             	add    %rdi,%rbx
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff80216fd6:	48 d3 e0             	shl    %cl,%rax
              ptr_t Size - The size of the memory to populate.
Output      : None.
Return      : ret_t - If the operation is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kotbl_Mark(ptr_t Kaddr, ptr_t Size)
{
ffffffff80216fd9:	48 83 ec 38          	sub    $0x38,%rsp
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80216fdd:	48 89 d9             	mov    %rbx,%rcx
    End_Mask=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1));
    End=End>>RME_WORD_ORDER;
ffffffff80216fe0:	48 c1 eb 0a          	shr    $0xa,%rbx
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff80216fe4:	48 89 04 24          	mov    %rax,(%rsp)
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80216fe8:	48 c1 e9 04          	shr    $0x4,%rcx
    End_Mask=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff80216fec:	f7 d1                	not    %ecx
ffffffff80216fee:	48 d3 ea             	shr    %cl,%rdx
    End=End>>RME_WORD_ORDER;
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff80216ff1:	49 39 dd             	cmp    %rbx,%r13
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    End_Mask=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff80216ff4:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    End=End>>RME_WORD_ORDER;
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff80216ff9:	0f 84 61 01 00 00    	je     ffffffff80217160 <_RME_Kotbl_Mark+0x1d0>
ffffffff80216fff:	48 89 c1             	mov    %rax,%rcx
    }
    else
    {
        Undo=0;
        /* Check&Mark the start */
        Old_Val=RME_KOTBL[Start];
ffffffff80217002:	4a 8d 04 ed 00 00 00 	lea    0x0(,%r13,8),%rax
ffffffff80217009:	00 
ffffffff8021700a:	48 bd 00 00 00 01 00 	movabs $0xffff800001000000,%rbp
ffffffff80217011:	80 ff ff 
ffffffff80217014:	49 89 c7             	mov    %rax,%r15
ffffffff80217017:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
ffffffff8021701c:	48 01 e8             	add    %rbp,%rax
ffffffff8021701f:	48 8b 10             	mov    (%rax),%rdx
ffffffff80217022:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
        if((Old_Val&Start_Mask)!=0)
ffffffff80217027:	48 85 d1             	test   %rdx,%rcx
    }
    else
    {
        Undo=0;
        /* Check&Mark the start */
        Old_Val=RME_KOTBL[Start];
ffffffff8021702a:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
        if((Old_Val&Start_Mask)!=0)
ffffffff8021702f:	0f 85 cc 00 00 00    	jne    ffffffff80217101 <_RME_Kotbl_Mark+0x171>
            return RME_ERR_KOT_BMP;
        if(__RME_Comp_Swap(&RME_KOTBL[Start],&Old_Val,Old_Val|Start_Mask)==0)
ffffffff80217035:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
ffffffff8021703a:	48 09 ca             	or     %rcx,%rdx
ffffffff8021703d:	48 89 c7             	mov    %rax,%rdi
ffffffff80217040:	e8 3c 48 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80217045:	48 85 c0             	test   %rax,%rax
ffffffff80217048:	0f 84 b3 00 00 00    	je     ffffffff80217101 <_RME_Kotbl_Mark+0x171>
            return RME_ERR_KOT_BMP;
        /* Check&Mark the middle */
        for(Count=Start+1;Count<End;Count++)
ffffffff8021704e:	4d 8d 75 01          	lea    0x1(%r13),%r14
ffffffff80217052:	4c 39 f3             	cmp    %r14,%rbx
ffffffff80217055:	0f 86 c8 00 00 00    	jbe    ffffffff80217123 <_RME_Kotbl_Mark+0x193>
        {
            Old_Val=RME_KOTBL[Count];
ffffffff8021705b:	4c 89 f9             	mov    %r15,%rcx
ffffffff8021705e:	4d 8d 7c 2f 08       	lea    0x8(%r15,%rbp,1),%r15
ffffffff80217063:	49 8b 07             	mov    (%r15),%rax
            if(Old_Val!=0)
ffffffff80217066:	48 85 c0             	test   %rax,%rax
        if(__RME_Comp_Swap(&RME_KOTBL[Start],&Old_Val,Old_Val|Start_Mask)==0)
            return RME_ERR_KOT_BMP;
        /* Check&Mark the middle */
        for(Count=Start+1;Count<End;Count++)
        {
            Old_Val=RME_KOTBL[Count];
ffffffff80217069:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
            if(Old_Val!=0)
ffffffff8021706e:	75 50                	jne    ffffffff802170c0 <_RME_Kotbl_Mark+0x130>
ffffffff80217070:	49 bc 10 00 00 01 00 	movabs $0xffff800001000010,%r12
ffffffff80217077:	80 ff ff 
ffffffff8021707a:	49 01 cc             	add    %rcx,%r12
ffffffff8021707d:	4d 29 fc             	sub    %r15,%r12
ffffffff80217080:	eb 25                	jmp    ffffffff802170a7 <_RME_Kotbl_Mark+0x117>
ffffffff80217082:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if((Old_Val&Start_Mask)!=0)
            return RME_ERR_KOT_BMP;
        if(__RME_Comp_Swap(&RME_KOTBL[Start],&Old_Val,Old_Val|Start_Mask)==0)
            return RME_ERR_KOT_BMP;
        /* Check&Mark the middle */
        for(Count=Start+1;Count<End;Count++)
ffffffff80217088:	49 83 c6 01          	add    $0x1,%r14
ffffffff8021708c:	4c 39 f3             	cmp    %r14,%rbx
ffffffff8021708f:	0f 84 8b 00 00 00    	je     ffffffff80217120 <_RME_Kotbl_Mark+0x190>
        {
            Old_Val=RME_KOTBL[Count];
ffffffff80217095:	4a 8b 44 f5 00       	mov    0x0(%rbp,%r14,8),%rax
ffffffff8021709a:	4d 01 e7             	add    %r12,%r15
            if(Old_Val!=0)
ffffffff8021709d:	48 85 c0             	test   %rax,%rax
        if(__RME_Comp_Swap(&RME_KOTBL[Start],&Old_Val,Old_Val|Start_Mask)==0)
            return RME_ERR_KOT_BMP;
        /* Check&Mark the middle */
        for(Count=Start+1;Count<End;Count++)
        {
            Old_Val=RME_KOTBL[Count];
ffffffff802170a0:	48 89 44 24 28       	mov    %rax,0x28(%rsp)
            if(Old_Val!=0)
ffffffff802170a5:	75 19                	jne    ffffffff802170c0 <_RME_Kotbl_Mark+0x130>
                Undo=1;
                break;
            }
            else
            {
                if(__RME_Comp_Swap(&RME_KOTBL[Count],&Old_Val,RME_ALLBITS)==0)
ffffffff802170a7:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
ffffffff802170ac:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
ffffffff802170b3:	4c 89 ff             	mov    %r15,%rdi
ffffffff802170b6:	e8 c6 47 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff802170bb:	48 85 c0             	test   %rax,%rax
ffffffff802170be:	75 c8                	jne    ffffffff80217088 <_RME_Kotbl_Mark+0xf8>
        
        /* See if we need to undo. If yes, proceed to unroll and return error */
        if(Undo!=0)
        {
            /* Undo the middle part - we do not need CAS here, because write back is always atomic */
            for(Count--;Count>Start;Count--)
ffffffff802170c0:	49 8d 46 ff          	lea    -0x1(%r14),%rax
ffffffff802170c4:	49 39 c5             	cmp    %rax,%r13
ffffffff802170c7:	73 27                	jae    ffffffff802170f0 <_RME_Kotbl_Mark+0x160>
ffffffff802170c9:	4c 8b 7c 24 10       	mov    0x10(%rsp),%r15
ffffffff802170ce:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff802170d5:	80 ff ff 
ffffffff802170d8:	4a 8d 54 f0 f8       	lea    -0x8(%rax,%r14,8),%rdx
ffffffff802170dd:	49 01 c7             	add    %rax,%r15
                RME_KOTBL[Count]=0;
ffffffff802170e0:	48 c7 02 00 00 00 00 	movq   $0x0,(%rdx)
ffffffff802170e7:	48 83 ea 08          	sub    $0x8,%rdx
        
        /* See if we need to undo. If yes, proceed to unroll and return error */
        if(Undo!=0)
        {
            /* Undo the middle part - we do not need CAS here, because write back is always atomic */
            for(Count--;Count>Start;Count--)
ffffffff802170eb:	4c 39 fa             	cmp    %r15,%rdx
ffffffff802170ee:	75 f0                	jne    ffffffff802170e0 <_RME_Kotbl_Mark+0x150>
                RME_KOTBL[Count]=0;
            /* Undo the first word - need atomic instructions */
            __RME_Fetch_And(&(RME_KOTBL[Start]),~Start_Mask);
ffffffff802170f0:	48 8b 34 24          	mov    (%rsp),%rsi
ffffffff802170f4:	48 8b 7c 24 18       	mov    0x18(%rsp),%rdi
ffffffff802170f9:	48 f7 d6             	not    %rsi
ffffffff802170fc:	e8 a5 47 ff ff       	callq  ffffffff8020b8a6 <__RME_Fetch_And>
            return RME_ERR_KOT_BMP;
        }
    }
    
    return 0;
}
ffffffff80217101:	48 83 c4 38          	add    $0x38,%rsp
            for(Count--;Count>Start;Count--)
                RME_KOTBL[Count]=0;
            /* Undo the first word - need atomic instructions */
            __RME_Fetch_And(&(RME_KOTBL[Start]),~Start_Mask);
            /* Return failure */
            return RME_ERR_KOT_BMP;
ffffffff80217105:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
        }
    }
    
    return 0;
}
ffffffff8021710c:	5b                   	pop    %rbx
ffffffff8021710d:	5d                   	pop    %rbp
ffffffff8021710e:	41 5c                	pop    %r12
ffffffff80217110:	41 5d                	pop    %r13
ffffffff80217112:	41 5e                	pop    %r14
ffffffff80217114:	41 5f                	pop    %r15
ffffffff80217116:	c3                   	retq   
ffffffff80217117:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021711e:	00 00 
ffffffff80217120:	49 89 de             	mov    %rbx,%r14
        }
        /* See if the middle part failed. If yes, we skip the end marking */
        if(Undo==0)
        {
            /* Check&Mark the end */
            Old_Val=RME_KOTBL[End];
ffffffff80217123:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021712a:	80 ff ff 
ffffffff8021712d:	48 8d 3c d8          	lea    (%rax,%rbx,8),%rdi
ffffffff80217131:	48 8b 17             	mov    (%rdi),%rdx
            if((Old_Val&End_Mask)!=0)
ffffffff80217134:	48 85 54 24 08       	test   %rdx,0x8(%rsp)
        }
        /* See if the middle part failed. If yes, we skip the end marking */
        if(Undo==0)
        {
            /* Check&Mark the end */
            Old_Val=RME_KOTBL[End];
ffffffff80217139:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
            if((Old_Val&End_Mask)!=0)
ffffffff8021713e:	75 80                	jne    ffffffff802170c0 <_RME_Kotbl_Mark+0x130>
                Undo=1;
            else
            {
                if(__RME_Comp_Swap(&RME_KOTBL[End],&Old_Val,Old_Val|End_Mask)==0)
ffffffff80217140:	48 0b 54 24 08       	or     0x8(%rsp),%rdx
ffffffff80217145:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
ffffffff8021714a:	e8 32 47 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021714f:	48 85 c0             	test   %rax,%rax
ffffffff80217152:	0f 84 68 ff ff ff    	je     ffffffff802170c0 <_RME_Kotbl_Mark+0x130>
            /* Return failure */
            return RME_ERR_KOT_BMP;
        }
    }
    
    return 0;
ffffffff80217158:	31 c0                	xor    %eax,%eax
ffffffff8021715a:	eb 44                	jmp    ffffffff802171a0 <_RME_Kotbl_Mark+0x210>
ffffffff8021715c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80217160:	49 89 c6             	mov    %rax,%r14
    
    /* See if the start and end are in the same word */
    if(Start==End)
    {
        /* Someone already populated something here */
        Old_Val=RME_KOTBL[Start];
ffffffff80217163:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff8021716a:	80 ff ff 
        if((Old_Val&(Start_Mask&End_Mask))!=0)
ffffffff8021716d:	4c 23 74 24 08       	and    0x8(%rsp),%r14
    
    /* See if the start and end are in the same word */
    if(Start==End)
    {
        /* Someone already populated something here */
        Old_Val=RME_KOTBL[Start];
ffffffff80217172:	4a 8d 3c e8          	lea    (%rax,%r13,8),%rdi
ffffffff80217176:	48 8b 17             	mov    (%rdi),%rdx
        if((Old_Val&(Start_Mask&End_Mask))!=0)
ffffffff80217179:	4c 85 f2             	test   %r14,%rdx
    
    /* See if the start and end are in the same word */
    if(Start==End)
    {
        /* Someone already populated something here */
        Old_Val=RME_KOTBL[Start];
ffffffff8021717c:	48 89 54 24 28       	mov    %rdx,0x28(%rsp)
        if((Old_Val&(Start_Mask&End_Mask))!=0)
ffffffff80217181:	0f 85 7a ff ff ff    	jne    ffffffff80217101 <_RME_Kotbl_Mark+0x171>
            return RME_ERR_KOT_BMP;
        /* Check done, do the marking with CAS */
        if(__RME_Comp_Swap(&RME_KOTBL[Start],&Old_Val,Old_Val|(Start_Mask&End_Mask))==0)
ffffffff80217187:	48 8d 74 24 28       	lea    0x28(%rsp),%rsi
ffffffff8021718c:	4c 09 f2             	or     %r14,%rdx
ffffffff8021718f:	e8 ed 46 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80217194:	48 85 c0             	test   %rax,%rax
ffffffff80217197:	0f 94 c0             	sete   %al
ffffffff8021719a:	0f b6 c0             	movzbl %al,%eax
ffffffff8021719d:	48 f7 d8             	neg    %rax
            return RME_ERR_KOT_BMP;
        }
    }
    
    return 0;
}
ffffffff802171a0:	48 83 c4 38          	add    $0x38,%rsp
ffffffff802171a4:	5b                   	pop    %rbx
ffffffff802171a5:	5d                   	pop    %rbp
ffffffff802171a6:	41 5c                	pop    %r12
ffffffff802171a8:	41 5d                	pop    %r13
ffffffff802171aa:	41 5e                	pop    %r14
ffffffff802171ac:	41 5f                	pop    %r15
ffffffff802171ae:	c3                   	retq   
    ptr_t End_Mask;
    ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KMEM_SLOT_ORDER-1))!=0)
        return RME_ERR_KOT_BMP;
ffffffff802171af:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
            return RME_ERR_KOT_BMP;
        }
    }
    
    return 0;
}
ffffffff802171b6:	c3                   	retq   
ffffffff802171b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff802171be:	00 00 

ffffffff802171c0 <_RME_Kotbl_Erase>:
    /* The mask at the end word */
    ptr_t End_Mask;
    ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KMEM_SLOT_ORDER-1))!=0)
ffffffff802171c0:	40 f6 c7 0f          	test   $0xf,%dil
ffffffff802171c4:	0f 85 8d 01 00 00    	jne    ffffffff80217357 <_RME_Kotbl_Erase+0x197>
    /* Check if the marking is within range - unnecessary due to the kmem cap range limits */
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff802171ca:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff802171d1:	80 00 00 
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff802171d4:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffff,%rax
ffffffff802171db:	7f 00 00 
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff802171de:	49 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%r10
    /* Check if the marking is within range - unnecessary due to the kmem cap range limits */
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff802171e5:	48 01 fa             	add    %rdi,%rdx
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff802171e8:	48 01 c6             	add    %rax,%rsi
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff802171eb:	4d 89 d1             	mov    %r10,%r9
    /* Check if the marking is within range - unnecessary due to the kmem cap range limits */
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff802171ee:	48 89 d1             	mov    %rdx,%rcx
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff802171f1:	48 01 f7             	add    %rsi,%rdi
              ptr_t Size - The size of the memory to depopulate.
Output      : None.
Return      : ret_t - If the operation is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kotbl_Erase(ptr_t Kaddr, ptr_t Size)
{
ffffffff802171f4:	41 55                	push   %r13
    /* Check if the marking is within range - unnecessary due to the kmem cap range limits */
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff802171f6:	48 c1 e9 04          	shr    $0x4,%rcx
              ptr_t Size - The size of the memory to depopulate.
Output      : None.
Return      : ret_t - If the operation is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kotbl_Erase(ptr_t Kaddr, ptr_t Size)
{
ffffffff802171fa:	41 54                	push   %r12
ffffffff802171fc:	55                   	push   %rbp
    /* if((Kaddr<RME_KMEM_VA_START)||((Kaddr+Size)>(RME_KMEM_VA_START+RME_KMEM_SIZE)))
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff802171fd:	49 d3 e1             	shl    %cl,%r9
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80217200:	48 89 f9             	mov    %rdi,%rcx
              ptr_t Size - The size of the memory to depopulate.
Output      : None.
Return      : ret_t - If the operation is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kotbl_Erase(ptr_t Kaddr, ptr_t Size)
{
ffffffff80217203:	53                   	push   %rbx
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
ffffffff80217204:	48 c1 e9 04          	shr    $0x4,%rcx
        return RME_ERR_KOT_BMP; */
    
    /* Round the marking to RME_KMEM_SLOT_ORDER boundary, and rely on compiler for optimization */
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
    Start=Start>>RME_WORD_ORDER;
ffffffff80217208:	48 c1 ea 0a          	shr    $0xa,%rdx
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    End_Mask=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021720c:	4d 89 d4             	mov    %r10,%r12
ffffffff8021720f:	f7 d1                	not    %ecx
    End=End>>RME_WORD_ORDER;
ffffffff80217211:	48 c1 ef 0a          	shr    $0xa,%rdi
              ptr_t Size - The size of the memory to depopulate.
Output      : None.
Return      : ret_t - If the operation is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Kotbl_Erase(ptr_t Kaddr, ptr_t Size)
{
ffffffff80217215:	48 83 ec 08          	sub    $0x8,%rsp
    Start=(Kaddr-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    Start_Mask=RME_MASK_START(Start&RME_MASK_END(RME_WORD_ORDER-1));
    Start=Start>>RME_WORD_ORDER;
    
    End=(Kaddr+Size-1-RME_KMEM_VA_START)>>RME_KMEM_SLOT_ORDER;
    End_Mask=RME_MASK_END(End&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff80217219:	49 d3 ec             	shr    %cl,%r12
    End=End>>RME_WORD_ORDER;
    
    /* See if the start and end are in the same word */
    if(Start==End)
ffffffff8021721c:	48 39 fa             	cmp    %rdi,%rdx
ffffffff8021721f:	0f 84 fb 00 00 00    	je     ffffffff80217320 <_RME_Kotbl_Erase+0x160>
        __RME_Fetch_And(&(RME_KOTBL[Start]),~(Start_Mask&End_Mask));
    }
    else
    {
        /* Check the start */
        if((RME_KOTBL[Start]&Start_Mask)!=Start_Mask)
ffffffff80217225:	48 8d 34 d5 00 00 00 	lea    0x0(,%rdx,8),%rsi
ffffffff8021722c:	00 
ffffffff8021722d:	48 b9 00 00 00 01 00 	movabs $0xffff800001000000,%rcx
ffffffff80217234:	80 ff ff 
ffffffff80217237:	4d 89 c8             	mov    %r9,%r8
    ptr_t End_Mask;
    ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KMEM_SLOT_ORDER-1))!=0)
        return RME_ERR_KOT_BMP;
ffffffff8021723a:	4c 89 d0             	mov    %r10,%rax
        __RME_Fetch_And(&(RME_KOTBL[Start]),~(Start_Mask&End_Mask));
    }
    else
    {
        /* Check the start */
        if((RME_KOTBL[Start]&Start_Mask)!=Start_Mask)
ffffffff8021723d:	4c 8d 1c 0e          	lea    (%rsi,%rcx,1),%r11
ffffffff80217241:	4d 23 03             	and    (%r11),%r8
ffffffff80217244:	4d 39 c1             	cmp    %r8,%r9
ffffffff80217247:	0f 85 ab 00 00 00    	jne    ffffffff802172f8 <_RME_Kotbl_Erase+0x138>
            return RME_ERR_KOT_BMP;
        /* Check the middle */
        for(Count=Start+1;Count<End-1;Count++)
ffffffff8021724d:	4c 8d 47 ff          	lea    -0x1(%rdi),%r8
ffffffff80217251:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80217255:	4c 39 c2             	cmp    %r8,%rdx
ffffffff80217258:	0f 83 01 01 00 00    	jae    ffffffff8021735f <_RME_Kotbl_Erase+0x19f>
        {
            if(RME_KOTBL[Count]!=RME_ALLBITS)
ffffffff8021725e:	48 8d 6c 0e 08       	lea    0x8(%rsi,%rcx,1),%rbp
ffffffff80217263:	48 83 7d 00 ff       	cmpq   $0xffffffffffffffff,0x0(%rbp)
ffffffff80217268:	0f 85 8a 00 00 00    	jne    ffffffff802172f8 <_RME_Kotbl_Erase+0x138>
ffffffff8021726e:	48 89 c8             	mov    %rcx,%rax
ffffffff80217271:	eb 10                	jmp    ffffffff80217283 <_RME_Kotbl_Erase+0xc3>
ffffffff80217273:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80217278:	48 83 3c d0 ff       	cmpq   $0xffffffffffffffff,(%rax,%rdx,8)
ffffffff8021727d:	0f 85 85 00 00 00    	jne    ffffffff80217308 <_RME_Kotbl_Erase+0x148>
    {
        /* Check the start */
        if((RME_KOTBL[Start]&Start_Mask)!=Start_Mask)
            return RME_ERR_KOT_BMP;
        /* Check the middle */
        for(Count=Start+1;Count<End-1;Count++)
ffffffff80217283:	48 83 c2 01          	add    $0x1,%rdx
ffffffff80217287:	4c 39 c2             	cmp    %r8,%rdx
ffffffff8021728a:	75 ec                	jne    ffffffff80217278 <_RME_Kotbl_Erase+0xb8>
        {
            if(RME_KOTBL[Count]!=RME_ALLBITS)
                return RME_ERR_KOT_BMP;
        }
        /* Check the end */
        if((RME_KOTBL[End]&End_Mask)!=End_Mask)
ffffffff8021728c:	48 8d 1c fd 00 00 00 	lea    0x0(,%rdi,8),%rbx
ffffffff80217293:	00 
ffffffff80217294:	49 bd 00 00 00 01 00 	movabs $0xffff800001000000,%r13
ffffffff8021729b:	80 ff ff 
ffffffff8021729e:	4c 89 e2             	mov    %r12,%rdx
    ptr_t End_Mask;
    ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KMEM_SLOT_ORDER-1))!=0)
        return RME_ERR_KOT_BMP;
ffffffff802172a1:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
        {
            if(RME_KOTBL[Count]!=RME_ALLBITS)
                return RME_ERR_KOT_BMP;
        }
        /* Check the end */
        if((RME_KOTBL[End]&End_Mask)!=End_Mask)
ffffffff802172a8:	49 01 dd             	add    %rbx,%r13
ffffffff802172ab:	49 23 55 00          	and    0x0(%r13),%rdx
ffffffff802172af:	49 39 d4             	cmp    %rdx,%r12
ffffffff802172b2:	75 44                	jne    ffffffff802172f8 <_RME_Kotbl_Erase+0x138>
            return RME_ERR_KOT_BMP;
        
        /* Erase the start - make it atomic */
        __RME_Fetch_And(&(RME_KOTBL[Start]),~Start_Mask);
ffffffff802172b4:	4c 89 ce             	mov    %r9,%rsi
ffffffff802172b7:	4c 89 df             	mov    %r11,%rdi
ffffffff802172ba:	48 f7 d6             	not    %rsi
ffffffff802172bd:	e8 e4 45 ff ff       	callq  ffffffff8020b8a6 <__RME_Fetch_And>
ffffffff802172c2:	48 bf f8 ff ff 00 00 	movabs $0xffff800000fffff8,%rdi
ffffffff802172c9:	80 ff ff 
ffffffff802172cc:	48 89 e8             	mov    %rbp,%rax
ffffffff802172cf:	48 01 df             	add    %rbx,%rdi
ffffffff802172d2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        /* Erase the middle - do not need atomics here */
        for(Count=Start+1;Count<End-1;Count++)
            RME_KOTBL[Count]=0;
ffffffff802172d8:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
ffffffff802172df:	48 83 c0 08          	add    $0x8,%rax
            return RME_ERR_KOT_BMP;
        
        /* Erase the start - make it atomic */
        __RME_Fetch_And(&(RME_KOTBL[Start]),~Start_Mask);
        /* Erase the middle - do not need atomics here */
        for(Count=Start+1;Count<End-1;Count++)
ffffffff802172e3:	48 39 f8             	cmp    %rdi,%rax
ffffffff802172e6:	75 f0                	jne    ffffffff802172d8 <_RME_Kotbl_Erase+0x118>
            RME_KOTBL[Count]=0;
        /* Erase the end - make it atomic */
        __RME_Fetch_And(&(RME_KOTBL[End]),~End_Mask);
ffffffff802172e8:	4c 89 e6             	mov    %r12,%rsi
ffffffff802172eb:	4c 89 ef             	mov    %r13,%rdi
ffffffff802172ee:	48 f7 d6             	not    %rsi
ffffffff802172f1:	e8 b0 45 ff ff       	callq  ffffffff8020b8a6 <__RME_Fetch_And>
    }
    
    return 0;
ffffffff802172f6:	31 c0                	xor    %eax,%eax
}
ffffffff802172f8:	48 83 c4 08          	add    $0x8,%rsp
ffffffff802172fc:	5b                   	pop    %rbx
ffffffff802172fd:	5d                   	pop    %rbp
ffffffff802172fe:	41 5c                	pop    %r12
ffffffff80217300:	41 5d                	pop    %r13
ffffffff80217302:	c3                   	retq   
ffffffff80217303:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff80217308:	48 83 c4 08          	add    $0x8,%rsp
    ptr_t End_Mask;
    ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KMEM_SLOT_ORDER-1))!=0)
        return RME_ERR_KOT_BMP;
ffffffff8021730c:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
        /* Erase the end - make it atomic */
        __RME_Fetch_And(&(RME_KOTBL[End]),~End_Mask);
    }
    
    return 0;
}
ffffffff80217313:	5b                   	pop    %rbx
ffffffff80217314:	5d                   	pop    %rbp
ffffffff80217315:	41 5c                	pop    %r12
ffffffff80217317:	41 5d                	pop    %r13
ffffffff80217319:	c3                   	retq   
ffffffff8021731a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    
    /* See if the start and end are in the same word */
    if(Start==End)
    {
        /* This address range is not fully populated */
        if((RME_KOTBL[Start]&(Start_Mask&End_Mask))!=(Start_Mask&End_Mask))
ffffffff80217320:	48 b8 00 00 00 01 00 	movabs $0xffff800001000000,%rax
ffffffff80217327:	80 ff ff 
ffffffff8021732a:	4c 89 ce             	mov    %r9,%rsi
ffffffff8021732d:	48 8d 3c d0          	lea    (%rax,%rdx,8),%rdi
ffffffff80217331:	4c 21 e6             	and    %r12,%rsi
    ptr_t End_Mask;
    ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KMEM_SLOT_ORDER-1))!=0)
        return RME_ERR_KOT_BMP;
ffffffff80217334:	4c 89 d0             	mov    %r10,%rax
    
    /* See if the start and end are in the same word */
    if(Start==End)
    {
        /* This address range is not fully populated */
        if((RME_KOTBL[Start]&(Start_Mask&End_Mask))!=(Start_Mask&End_Mask))
ffffffff80217337:	48 89 f2             	mov    %rsi,%rdx
ffffffff8021733a:	48 23 17             	and    (%rdi),%rdx
ffffffff8021733d:	48 39 d6             	cmp    %rdx,%rsi
ffffffff80217340:	75 b6                	jne    ffffffff802172f8 <_RME_Kotbl_Erase+0x138>
            return RME_ERR_KOT_BMP;
        /* Check done, do the marking - need atomic operations */
        __RME_Fetch_And(&(RME_KOTBL[Start]),~(Start_Mask&End_Mask));
ffffffff80217342:	48 f7 d6             	not    %rsi
ffffffff80217345:	e8 5c 45 ff ff       	callq  ffffffff8020b8a6 <__RME_Fetch_And>
        /* Erase the end - make it atomic */
        __RME_Fetch_And(&(RME_KOTBL[End]),~End_Mask);
    }
    
    return 0;
}
ffffffff8021734a:	48 83 c4 08          	add    $0x8,%rsp
            RME_KOTBL[Count]=0;
        /* Erase the end - make it atomic */
        __RME_Fetch_And(&(RME_KOTBL[End]),~End_Mask);
    }
    
    return 0;
ffffffff8021734e:	31 c0                	xor    %eax,%eax
}
ffffffff80217350:	5b                   	pop    %rbx
ffffffff80217351:	5d                   	pop    %rbp
ffffffff80217352:	41 5c                	pop    %r12
ffffffff80217354:	41 5d                	pop    %r13
ffffffff80217356:	c3                   	retq   
    ptr_t End_Mask;
    ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KMEM_SLOT_ORDER-1))!=0)
        return RME_ERR_KOT_BMP;
ffffffff80217357:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
        /* Erase the end - make it atomic */
        __RME_Fetch_And(&(RME_KOTBL[End]),~End_Mask);
    }
    
    return 0;
}
ffffffff8021735e:	c3                   	retq   
        {
            if(RME_KOTBL[Count]!=RME_ALLBITS)
                return RME_ERR_KOT_BMP;
        }
        /* Check the end */
        if((RME_KOTBL[End]&End_Mask)!=End_Mask)
ffffffff8021735f:	4c 8d 2c f9          	lea    (%rcx,%rdi,8),%r13
ffffffff80217363:	4c 89 e2             	mov    %r12,%rdx
    ptr_t End_Mask;
    ptr_t Count;

    /* Check if the marking is well aligned */
    if((Kaddr&RME_MASK_END(RME_KMEM_SLOT_ORDER-1))!=0)
        return RME_ERR_KOT_BMP;
ffffffff80217366:	4c 89 d0             	mov    %r10,%rax
        {
            if(RME_KOTBL[Count]!=RME_ALLBITS)
                return RME_ERR_KOT_BMP;
        }
        /* Check the end */
        if((RME_KOTBL[End]&End_Mask)!=End_Mask)
ffffffff80217369:	49 23 55 00          	and    0x0(%r13),%rdx
ffffffff8021736d:	49 39 d4             	cmp    %rdx,%r12
ffffffff80217370:	75 86                	jne    ffffffff802172f8 <_RME_Kotbl_Erase+0x138>
            return RME_ERR_KOT_BMP;
        
        /* Erase the start - make it atomic */
        __RME_Fetch_And(&(RME_KOTBL[Start]),~Start_Mask);
ffffffff80217372:	4c 89 ce             	mov    %r9,%rsi
ffffffff80217375:	4c 89 df             	mov    %r11,%rdi
ffffffff80217378:	48 f7 d6             	not    %rsi
ffffffff8021737b:	e8 26 45 ff ff       	callq  ffffffff8020b8a6 <__RME_Fetch_And>
ffffffff80217380:	e9 63 ff ff ff       	jmpq   ffffffff802172e8 <_RME_Kotbl_Erase+0x128>
ffffffff80217385:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021738c:	00 00 00 
ffffffff8021738f:	90                   	nop

ffffffff80217390 <_RME_Pgtbl_Boot_Crt>:
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Pgtbl_Boot_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl,
                          cid_t Cap_Pgtbl, ptr_t Vaddr, ptr_t Start_Addr,
                          ptr_t Top_Flag, ptr_t Size_Order, ptr_t Num_Order)
{
ffffffff80217390:	41 57                	push   %r15
ffffffff80217392:	41 56                	push   %r14
ffffffff80217394:	41 55                	push   %r13
ffffffff80217396:	41 54                	push   %r12
ffffffff80217398:	55                   	push   %rbp
ffffffff80217399:	53                   	push   %rbx
ffffffff8021739a:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8021739e:	48 8b 6c 24 68       	mov    0x68(%rsp),%rbp
    struct RME_Cap_Pgtbl* Pgtbl_Crt;
    ptr_t Type_Ref;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff802173a3:	48 89 e8             	mov    %rbp,%rax
ffffffff802173a6:	48 03 44 24 60       	add    0x60(%rsp),%rax
ffffffff802173ab:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff802173af:	0f 87 30 03 00 00    	ja     ffffffff802176e5 <_RME_Pgtbl_Boot_Crt+0x355>
ffffffff802173b5:	49 89 d5             	mov    %rdx,%r13
        return RME_ERR_PGT_HW;
    
    /* Check if these parameters are feasible */
    if(__RME_Pgtbl_Check(Start_Addr, Top_Flag, Size_Order, Num_Order)!=0)
ffffffff802173b8:	48 8b 54 24 60       	mov    0x60(%rsp),%rdx
ffffffff802173bd:	4d 89 ce             	mov    %r9,%r14
ffffffff802173c0:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffffff802173c5:	49 89 cc             	mov    %rcx,%r12
ffffffff802173c8:	49 89 f7             	mov    %rsi,%r15
ffffffff802173cb:	48 89 e9             	mov    %rbp,%rcx
ffffffff802173ce:	4c 89 f6             	mov    %r14,%rsi
ffffffff802173d1:	4c 89 c7             	mov    %r8,%rdi
ffffffff802173d4:	4c 89 c3             	mov    %r8,%rbx
ffffffff802173d7:	e8 24 cf ff ff       	callq  ffffffff80214300 <__RME_Pgtbl_Check>
ffffffff802173dc:	48 85 c0             	test   %rax,%rax
ffffffff802173df:	0f 85 00 03 00 00    	jne    ffffffff802176e5 <_RME_Pgtbl_Boot_Crt+0x355>
        return RME_ERR_PGT_HW;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff802173e5:	41 f7 c7 00 80 00 00 	test   $0x8000,%r15d
ffffffff802173ec:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
ffffffff802173f1:	0f 85 71 01 00 00    	jne    ffffffff80217568 <_RME_Pgtbl_Boot_Crt+0x1d8>
ffffffff802173f7:	4d 39 79 28          	cmp    %r15,0x28(%r9)
ffffffff802173fb:	0f 86 59 03 00 00    	jbe    ffffffff8021775a <_RME_Pgtbl_Boot_Crt+0x3ca>
ffffffff80217401:	4c 89 f8             	mov    %r15,%rax
ffffffff80217404:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217408:	49 03 41 18          	add    0x18(%r9),%rax
ffffffff8021740c:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021740f:	48 89 ca             	mov    %rcx,%rdx
ffffffff80217412:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80217416:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021741a:	0f 85 b7 01 00 00    	jne    ffffffff802175d7 <_RME_Pgtbl_Boot_Crt+0x247>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff80217420:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80217427:	80 00 00 
ffffffff8021742a:	48 85 d1             	test   %rdx,%rcx
ffffffff8021742d:	0f 85 e5 02 00 00    	jne    ffffffff80217718 <_RME_Pgtbl_Boot_Crt+0x388>
ffffffff80217433:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff80217437:	0f 84 f1 02 00 00    	je     ffffffff8021772e <_RME_Pgtbl_Boot_Crt+0x39e>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
ffffffff8021743d:	4c 39 68 28          	cmp    %r13,0x28(%rax)
ffffffff80217441:	0f 86 13 03 00 00    	jbe    ffffffff8021775a <_RME_Pgtbl_Boot_Crt+0x3ca>
ffffffff80217447:	4d 89 e8             	mov    %r13,%r8
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);
ffffffff8021744a:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
ffffffff8021744f:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
ffffffff80217456:	00 00 
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
ffffffff80217458:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8021745c:	4c 03 40 18          	add    0x18(%rax),%r8
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);
ffffffff80217460:	4c 89 c7             	mov    %r8,%rdi
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
ffffffff80217463:	4d 89 c7             	mov    %r8,%r15
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);
ffffffff80217466:	e8 16 44 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021746b:	48 85 c0             	test   %rax,%rax
ffffffff8021746e:	0f 84 d0 02 00 00    	je     ffffffff80217744 <_RME_Pgtbl_Boot_Crt+0x3b4>

    /* Try to populate the area - Are we creating the top level? */
    if(Top_Flag!=0)
    {  
        if(_RME_Kotbl_Mark(Vaddr, RME_PGTBL_SIZE_TOP(Num_Order))!=0)
ffffffff80217474:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80217479:	89 e9                	mov    %ebp,%ecx
ffffffff8021747b:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021747e:	d3 e0                	shl    %cl,%eax
ffffffff80217480:	4c 63 e8             	movslq %eax,%r13
ffffffff80217483:	49 c1 e5 03          	shl    $0x3,%r13
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);

    /* Try to populate the area - Are we creating the top level? */
    if(Top_Flag!=0)
ffffffff80217487:	4d 85 f6             	test   %r14,%r14
    {  
        if(_RME_Kotbl_Mark(Vaddr, RME_PGTBL_SIZE_TOP(Num_Order))!=0)
ffffffff8021748a:	4c 89 ee             	mov    %r13,%rsi
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);

    /* Try to populate the area - Are we creating the top level? */
    if(Top_Flag!=0)
ffffffff8021748d:	0f 84 5d 01 00 00    	je     ffffffff802175f0 <_RME_Pgtbl_Boot_Crt+0x260>
    {  
        if(_RME_Kotbl_Mark(Vaddr, RME_PGTBL_SIZE_TOP(Num_Order))!=0)
ffffffff80217493:	e8 f8 fa ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff80217498:	48 85 c0             	test   %rax,%rax
ffffffff8021749b:	0f 85 5a 02 00 00    	jne    ffffffff802176fb <_RME_Pgtbl_Boot_Crt+0x36b>
    Pgtbl_Crt->Head.Object=Vaddr;
    /* Set the property of the page table to only act as source and creating process */
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
                          RME_PGTBL_FLAG_ADD_SRC|
                          RME_PGTBL_FLAG_PROC_CRT;
    Pgtbl_Crt->Start_Addr=Start_Addr|Top_Flag;
ffffffff802174a1:	49 09 de             	or     %rbx,%r14
    /* These two variables are directly placed here. Checks will be done by the driver */
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
ffffffff802174a4:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
    }

    Pgtbl_Crt->Head.Parent=0;
    Pgtbl_Crt->Head.Object=Vaddr;
    /* Set the property of the page table to only act as source and creating process */
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
ffffffff802174a9:	48 b8 41 00 00 00 f0 	movabs $0xfffffff000000041,%rax
ffffffff802174b0:	ff ff ff 
            Pgtbl_Crt->Head.Type_Ref=0;
            return RME_ERR_CAP_KOTBL;
        }
    }

    Pgtbl_Crt->Head.Parent=0;
ffffffff802174b3:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
ffffffff802174ba:	00 
    Pgtbl_Crt->Head.Object=Vaddr;
ffffffff802174bb:	4d 89 67 18          	mov    %r12,0x18(%r15)
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
    /* Done. We start initialization of the page table, and we also add all 
     * kernel pages to them. If unsuccessful, we revert operations. At here, 
     * all the information of the page table should be filled in, except for
     * its header */
    if(__RME_Pgtbl_Init(Pgtbl_Crt)!=0)
ffffffff802174bf:	4c 89 ff             	mov    %r15,%rdi
    }

    Pgtbl_Crt->Head.Parent=0;
    Pgtbl_Crt->Head.Object=Vaddr;
    /* Set the property of the page table to only act as source and creating process */
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
ffffffff802174c2:	49 89 47 10          	mov    %rax,0x10(%r15)
                          RME_PGTBL_FLAG_ADD_SRC|
                          RME_PGTBL_FLAG_PROC_CRT;
    Pgtbl_Crt->Start_Addr=Start_Addr|Top_Flag;
ffffffff802174c6:	4d 89 77 30          	mov    %r14,0x30(%r15)
    /* These two variables are directly placed here. Checks will be done by the driver */
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
ffffffff802174ca:	48 c1 e3 20          	shl    $0x20,%rbx
ffffffff802174ce:	48 09 dd             	or     %rbx,%rbp
ffffffff802174d1:	49 89 6f 28          	mov    %rbp,0x28(%r15)
    /* Done. We start initialization of the page table, and we also add all 
     * kernel pages to them. If unsuccessful, we revert operations. At here, 
     * all the information of the page table should be filled in, except for
     * its header */
    if(__RME_Pgtbl_Init(Pgtbl_Crt)!=0)
ffffffff802174d5:	e8 76 ce ff ff       	callq  ffffffff80214350 <__RME_Pgtbl_Init>
ffffffff802174da:	48 85 c0             	test   %rax,%rax
ffffffff802174dd:	0f 84 dd 01 00 00    	je     ffffffff802176c0 <_RME_Pgtbl_Boot_Crt+0x330>
    {
        /* This must be successful */
        if(Top_Flag!=0)
            RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PGTBL_SIZE_TOP(Num_Order))==0);
ffffffff802174e3:	4c 89 ee             	mov    %r13,%rsi
ffffffff802174e6:	4c 89 e7             	mov    %r12,%rdi
ffffffff802174e9:	e8 d2 fc ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
ffffffff802174ee:	48 85 c0             	test   %rax,%rax
ffffffff802174f1:	0f 84 e7 01 00 00    	je     ffffffff802176de <_RME_Pgtbl_Boot_Crt+0x34e>
ffffffff802174f7:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff802174fe:	e8 0d fa ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217503:	48 c7 c7 70 ef 21 80 	mov    $0xffffffff8021ef70,%rdi
ffffffff8021750a:	e8 01 fa ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021750f:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80217516:	e8 f5 f9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021751b:	bf 82 00 00 00       	mov    $0x82,%edi
ffffffff80217520:	e8 ab f7 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80217525:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021752c:	e8 df f9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217531:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80217538:	e8 d3 f9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021753d:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80217544:	e8 c7 f9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217549:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff80217550:	e8 bb f9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217555:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021755c:	e8 af f9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217561:	eb fe                	jmp    ffffffff80217561 <_RME_Pgtbl_Boot_Crt+0x1d1>
ffffffff80217563:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    /* Check if these parameters are feasible */
    if(__RME_Pgtbl_Check(Start_Addr, Top_Flag, Size_Order, Num_Order)!=0)
        return RME_ERR_PGT_HW;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80217568:	4c 89 f8             	mov    %r15,%rax
ffffffff8021756b:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021756f:	49 3b 41 28          	cmp    0x28(%r9),%rax
ffffffff80217573:	0f 83 e1 01 00 00    	jae    ffffffff8021775a <_RME_Pgtbl_Boot_Crt+0x3ca>
ffffffff80217579:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021757d:	49 03 41 18          	add    0x18(%r9),%rax
ffffffff80217581:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff80217588:	80 00 00 
ffffffff8021758b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021758e:	48 8b 00             	mov    (%rax),%rax
ffffffff80217591:	48 85 c8             	test   %rcx,%rax
ffffffff80217594:	0f 85 7e 01 00 00    	jne    ffffffff80217718 <_RME_Pgtbl_Boot_Crt+0x388>
ffffffff8021759a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021759e:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff802175a2:	75 33                	jne    ffffffff802175d7 <_RME_Pgtbl_Boot_Crt+0x247>
ffffffff802175a4:	4d 89 f8             	mov    %r15,%r8
ffffffff802175a7:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff802175ae:	4c 3b 42 28          	cmp    0x28(%rdx),%r8
ffffffff802175b2:	0f 83 a2 01 00 00    	jae    ffffffff8021775a <_RME_Pgtbl_Boot_Crt+0x3ca>
ffffffff802175b8:	4c 89 c0             	mov    %r8,%rax
ffffffff802175bb:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802175bf:	48 03 42 18          	add    0x18(%rdx),%rax
ffffffff802175c3:	48 8b 08             	mov    (%rax),%rcx
ffffffff802175c6:	48 89 ca             	mov    %rcx,%rdx
ffffffff802175c9:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff802175cd:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff802175d1:	0f 84 49 fe ff ff    	je     ffffffff80217420 <_RME_Pgtbl_Boot_Crt+0x90>
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff802175d7:	48 83 c4 28          	add    $0x28,%rsp
    /* Check if these parameters are feasible */
    if(__RME_Pgtbl_Check(Start_Addr, Top_Flag, Size_Order, Num_Order)!=0)
        return RME_ERR_PGT_HW;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff802175db:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff802175e2:	5b                   	pop    %rbx
ffffffff802175e3:	5d                   	pop    %rbp
ffffffff802175e4:	41 5c                	pop    %r12
ffffffff802175e6:	41 5d                	pop    %r13
ffffffff802175e8:	41 5e                	pop    %r14
ffffffff802175ea:	41 5f                	pop    %r15
ffffffff802175ec:	c3                   	retq   
ffffffff802175ed:	0f 1f 00             	nopl   (%rax)
            return RME_ERR_CAP_KOTBL;
        }
    }
    else
    {
        if(_RME_Kotbl_Mark(Vaddr, RME_PGTBL_SIZE_NOM(Num_Order))!=0)
ffffffff802175f0:	e8 9b f9 ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff802175f5:	48 85 c0             	test   %rax,%rax
ffffffff802175f8:	0f 85 fd 00 00 00    	jne    ffffffff802176fb <_RME_Pgtbl_Boot_Crt+0x36b>
    Pgtbl_Crt->Head.Object=Vaddr;
    /* Set the property of the page table to only act as source and creating process */
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
                          RME_PGTBL_FLAG_ADD_SRC|
                          RME_PGTBL_FLAG_PROC_CRT;
    Pgtbl_Crt->Start_Addr=Start_Addr|Top_Flag;
ffffffff802175fe:	49 89 5f 30          	mov    %rbx,0x30(%r15)
    /* These two variables are directly placed here. Checks will be done by the driver */
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
ffffffff80217602:	48 8b 5c 24 60       	mov    0x60(%rsp),%rbx
    }

    Pgtbl_Crt->Head.Parent=0;
    Pgtbl_Crt->Head.Object=Vaddr;
    /* Set the property of the page table to only act as source and creating process */
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
ffffffff80217607:	48 b8 41 00 00 00 f0 	movabs $0xfffffff000000041,%rax
ffffffff8021760e:	ff ff ff 
            Pgtbl_Crt->Head.Type_Ref=0;
            return RME_ERR_CAP_KOTBL;
        }
    }

    Pgtbl_Crt->Head.Parent=0;
ffffffff80217611:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
ffffffff80217618:	00 
    Pgtbl_Crt->Head.Object=Vaddr;
ffffffff80217619:	4d 89 67 18          	mov    %r12,0x18(%r15)
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
    /* Done. We start initialization of the page table, and we also add all 
     * kernel pages to them. If unsuccessful, we revert operations. At here, 
     * all the information of the page table should be filled in, except for
     * its header */
    if(__RME_Pgtbl_Init(Pgtbl_Crt)!=0)
ffffffff8021761d:	4c 89 ff             	mov    %r15,%rdi
    }

    Pgtbl_Crt->Head.Parent=0;
    Pgtbl_Crt->Head.Object=Vaddr;
    /* Set the property of the page table to only act as source and creating process */
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
ffffffff80217620:	49 89 47 10          	mov    %rax,0x10(%r15)
                          RME_PGTBL_FLAG_ADD_SRC|
                          RME_PGTBL_FLAG_PROC_CRT;
    Pgtbl_Crt->Start_Addr=Start_Addr|Top_Flag;
    /* These two variables are directly placed here. Checks will be done by the driver */
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
ffffffff80217624:	48 c1 e3 20          	shl    $0x20,%rbx
ffffffff80217628:	48 09 dd             	or     %rbx,%rbp
ffffffff8021762b:	49 89 6f 28          	mov    %rbp,0x28(%r15)
    /* Done. We start initialization of the page table, and we also add all 
     * kernel pages to them. If unsuccessful, we revert operations. At here, 
     * all the information of the page table should be filled in, except for
     * its header */
    if(__RME_Pgtbl_Init(Pgtbl_Crt)!=0)
ffffffff8021762f:	e8 1c cd ff ff       	callq  ffffffff80214350 <__RME_Pgtbl_Init>
ffffffff80217634:	48 85 c0             	test   %rax,%rax
ffffffff80217637:	0f 84 83 00 00 00    	je     ffffffff802176c0 <_RME_Pgtbl_Boot_Crt+0x330>
    {
        /* This must be successful */
        if(Top_Flag!=0)
            RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PGTBL_SIZE_TOP(Num_Order))==0);
        else
            RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PGTBL_SIZE_NOM(Num_Order))==0);
ffffffff8021763d:	4c 89 ee             	mov    %r13,%rsi
ffffffff80217640:	4c 89 e7             	mov    %r12,%rdi
ffffffff80217643:	e8 78 fb ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
ffffffff80217648:	48 85 c0             	test   %rax,%rax
ffffffff8021764b:	0f 84 8d 00 00 00    	je     ffffffff802176de <_RME_Pgtbl_Boot_Crt+0x34e>
ffffffff80217651:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80217658:	e8 b3 f8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021765d:	48 c7 c7 70 ef 21 80 	mov    $0xffffffff8021ef70,%rdi
ffffffff80217664:	e8 a7 f8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217669:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80217670:	e8 9b f8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217675:	bf 84 00 00 00       	mov    $0x84,%edi
ffffffff8021767a:	e8 51 f6 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021767f:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80217686:	e8 85 f8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021768b:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80217692:	e8 79 f8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217697:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021769e:	e8 6d f8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802176a3:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff802176aa:	e8 61 f8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802176af:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802176b6:	e8 55 f8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802176bb:	eb fe                	jmp    ffffffff802176bb <_RME_Pgtbl_Boot_Crt+0x32b>
ffffffff802176bd:	0f 1f 00             	nopl   (%rax)
        /* Unsuccessful. Revert operations */
        Pgtbl_Crt->Head.Type_Ref=0;
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
ffffffff802176c0:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff802176c7:	00 04 00 
ffffffff802176ca:	49 89 07             	mov    %rax,(%r15)
    return 0;
}
ffffffff802176cd:	48 83 c4 28          	add    $0x28,%rsp
        Pgtbl_Crt->Head.Type_Ref=0;
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
ffffffff802176d1:	31 c0                	xor    %eax,%eax
}
ffffffff802176d3:	5b                   	pop    %rbx
ffffffff802176d4:	5d                   	pop    %rbp
ffffffff802176d5:	41 5c                	pop    %r12
ffffffff802176d7:	41 5d                	pop    %r13
ffffffff802176d9:	41 5e                	pop    %r14
ffffffff802176db:	41 5f                	pop    %r15
ffffffff802176dd:	c3                   	retq   
            RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PGTBL_SIZE_TOP(Num_Order))==0);
        else
            RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PGTBL_SIZE_NOM(Num_Order))==0);
        
        /* Unsuccessful. Revert operations */
        Pgtbl_Crt->Head.Type_Ref=0;
ffffffff802176de:	49 c7 07 00 00 00 00 	movq   $0x0,(%r15)
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff802176e5:	48 83 c4 28          	add    $0x28,%rsp
        else
            RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PGTBL_SIZE_NOM(Num_Order))==0);
        
        /* Unsuccessful. Revert operations */
        Pgtbl_Crt->Head.Type_Ref=0;
        return RME_ERR_PGT_HW;
ffffffff802176e9:	48 c7 c0 f3 ff ff ff 	mov    $0xfffffffffffffff3,%rax
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff802176f0:	5b                   	pop    %rbx
ffffffff802176f1:	5d                   	pop    %rbp
ffffffff802176f2:	41 5c                	pop    %r12
ffffffff802176f4:	41 5d                	pop    %r13
ffffffff802176f6:	41 5e                	pop    %r14
ffffffff802176f8:	41 5f                	pop    %r15
ffffffff802176fa:	c3                   	retq   
    }
    else
    {
        if(_RME_Kotbl_Mark(Vaddr, RME_PGTBL_SIZE_NOM(Num_Order))!=0)
        {
            Pgtbl_Crt->Head.Type_Ref=0;
ffffffff802176fb:	49 c7 07 00 00 00 00 	movq   $0x0,(%r15)
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff80217702:	48 83 c4 28          	add    $0x28,%rsp
    else
    {
        if(_RME_Kotbl_Mark(Vaddr, RME_PGTBL_SIZE_NOM(Num_Order))!=0)
        {
            Pgtbl_Crt->Head.Type_Ref=0;
            return RME_ERR_CAP_KOTBL;
ffffffff80217706:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff8021770d:	5b                   	pop    %rbx
ffffffff8021770e:	5d                   	pop    %rbp
ffffffff8021770f:	41 5c                	pop    %r12
ffffffff80217711:	41 5d                	pop    %r13
ffffffff80217713:	41 5e                	pop    %r14
ffffffff80217715:	41 5f                	pop    %r15
ffffffff80217717:	c3                   	retq   
ffffffff80217718:	48 83 c4 28          	add    $0x28,%rsp
    /* Check if these parameters are feasible */
    if(__RME_Pgtbl_Check(Start_Addr, Top_Flag, Size_Order, Num_Order)!=0)
        return RME_ERR_PGT_HW;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021771c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff80217723:	5b                   	pop    %rbx
ffffffff80217724:	5d                   	pop    %rbp
ffffffff80217725:	41 5c                	pop    %r12
ffffffff80217727:	41 5d                	pop    %r13
ffffffff80217729:	41 5e                	pop    %r14
ffffffff8021772b:	41 5f                	pop    %r15
ffffffff8021772d:	c3                   	retq   
ffffffff8021772e:	48 83 c4 28          	add    $0x28,%rsp
        return RME_ERR_PGT_HW;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff80217732:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff80217739:	5b                   	pop    %rbx
ffffffff8021773a:	5d                   	pop    %rbp
ffffffff8021773b:	41 5c                	pop    %r12
ffffffff8021773d:	41 5d                	pop    %r13
ffffffff8021773f:	41 5e                	pop    %r14
ffffffff80217741:	41 5f                	pop    %r15
ffffffff80217743:	c3                   	retq   
ffffffff80217744:	48 83 c4 28          	add    $0x28,%rsp
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);
ffffffff80217748:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff8021774f:	5b                   	pop    %rbx
ffffffff80217750:	5d                   	pop    %rbp
ffffffff80217751:	41 5c                	pop    %r12
ffffffff80217753:	41 5d                	pop    %r13
ffffffff80217755:	41 5e                	pop    %r14
ffffffff80217757:	41 5f                	pop    %r15
ffffffff80217759:	c3                   	retq   
ffffffff8021775a:	48 83 c4 28          	add    $0x28,%rsp
    /* Check if these parameters are feasible */
    if(__RME_Pgtbl_Check(Start_Addr, Top_Flag, Size_Order, Num_Order)!=0)
        return RME_ERR_PGT_HW;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021775e:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff80217765:	5b                   	pop    %rbx
ffffffff80217766:	5d                   	pop    %rbp
ffffffff80217767:	41 5c                	pop    %r12
ffffffff80217769:	41 5d                	pop    %r13
ffffffff8021776b:	41 5e                	pop    %r14
ffffffff8021776d:	41 5f                	pop    %r15
ffffffff8021776f:	c3                   	retq   

ffffffff80217770 <_RME_Pgtbl_Boot_Con>:
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff80217770:	f7 c6 00 80 00 00    	test   $0x8000,%esi
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Pgtbl_Boot_Con(struct RME_Cap_Captbl* Captbl,
                          cid_t Cap_Pgtbl_Parent, ptr_t Pos,
                          cid_t Cap_Pgtbl_Child, ptr_t Flags_Child)
{
ffffffff80217776:	53                   	push   %rbx
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff80217777:	75 37                	jne    ffffffff802177b0 <_RME_Pgtbl_Boot_Con+0x40>
ffffffff80217779:	48 8b 5f 28          	mov    0x28(%rdi),%rbx
ffffffff8021777d:	48 39 f3             	cmp    %rsi,%rbx
ffffffff80217780:	0f 86 ba 01 00 00    	jbe    ffffffff80217940 <_RME_Pgtbl_Boot_Con+0x1d0>
ffffffff80217786:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
ffffffff8021778a:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021778e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217795:	48 89 f7             	mov    %rsi,%rdi
ffffffff80217798:	4c 01 df             	add    %r11,%rdi
ffffffff8021779b:	48 8b 37             	mov    (%rdi),%rsi
ffffffff8021779e:	49 89 f1             	mov    %rsi,%r9
ffffffff802177a1:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff802177a5:	49 83 f9 04          	cmp    $0x4,%r9
ffffffff802177a9:	74 79                	je     ffffffff80217824 <_RME_Pgtbl_Boot_Con+0xb4>
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Map(Pgtbl_Parent, Pos, Pgtbl_Child, Flags_Child)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff802177ab:	5b                   	pop    %rbx
ffffffff802177ac:	c3                   	retq   
ffffffff802177ad:	0f 1f 00             	nopl   (%rax)
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff802177b0:	48 8b 5f 28          	mov    0x28(%rdi),%rbx
ffffffff802177b4:	49 89 f2             	mov    %rsi,%r10
ffffffff802177b7:	49 c1 fa 10          	sar    $0x10,%r10
ffffffff802177bb:	49 39 da             	cmp    %rbx,%r10
ffffffff802177be:	0f 83 7c 01 00 00    	jae    ffffffff80217940 <_RME_Pgtbl_Boot_Con+0x1d0>
ffffffff802177c4:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
ffffffff802177c8:	49 c1 e2 06          	shl    $0x6,%r10
ffffffff802177cc:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff802177d3:	80 00 00 
ffffffff802177d6:	4d 01 da             	add    %r11,%r10
ffffffff802177d9:	49 8b 02             	mov    (%r10),%rax
ffffffff802177dc:	48 85 f8             	test   %rdi,%rax
ffffffff802177df:	0f 85 6b 01 00 00    	jne    ffffffff80217950 <_RME_Pgtbl_Boot_Con+0x1e0>
ffffffff802177e5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802177e9:	48 89 c7             	mov    %rax,%rdi
ffffffff802177ec:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802177f3:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802177f7:	75 b2                	jne    ffffffff802177ab <_RME_Pgtbl_Boot_Con+0x3b>
ffffffff802177f9:	48 89 f7             	mov    %rsi,%rdi
ffffffff802177fc:	81 e7 ff 7f 00 00    	and    $0x7fff,%edi
ffffffff80217802:	49 3b 7a 28          	cmp    0x28(%r10),%rdi
ffffffff80217806:	0f 83 34 01 00 00    	jae    ffffffff80217940 <_RME_Pgtbl_Boot_Con+0x1d0>
ffffffff8021780c:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff80217810:	49 03 7a 18          	add    0x18(%r10),%rdi
ffffffff80217814:	48 8b 37             	mov    (%rdi),%rsi
ffffffff80217817:	49 89 f1             	mov    %rsi,%r9
ffffffff8021781a:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8021781e:	49 83 f9 04          	cmp    $0x4,%r9
ffffffff80217822:	75 87                	jne    ffffffff802177ab <_RME_Pgtbl_Boot_Con+0x3b>
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Child,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Child);
ffffffff80217824:	f6 c5 80             	test   $0x80,%ch
ffffffff80217827:	0f 85 a3 00 00 00    	jne    ffffffff802178d0 <_RME_Pgtbl_Boot_Con+0x160>
ffffffff8021782d:	48 39 d9             	cmp    %rbx,%rcx
ffffffff80217830:	0f 83 0a 01 00 00    	jae    ffffffff80217940 <_RME_Pgtbl_Boot_Con+0x1d0>
ffffffff80217836:	48 c1 e1 06          	shl    $0x6,%rcx
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff8021783a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Child,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Child);
ffffffff80217841:	4e 8d 0c 19          	lea    (%rcx,%r11,1),%r9
ffffffff80217845:	49 8b 09             	mov    (%r9),%rcx
ffffffff80217848:	49 89 ca             	mov    %rcx,%r10
ffffffff8021784b:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8021784f:	49 83 fa 04          	cmp    $0x4,%r10
ffffffff80217853:	0f 85 52 ff ff ff    	jne    ffffffff802177ab <_RME_Pgtbl_Boot_Con+0x3b>
    /* Check if both page table caps are not frozen but don't check flags */
    RME_CAP_CHECK(Pgtbl_Parent, 0);
ffffffff80217859:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80217860:	80 00 00 
ffffffff80217863:	48 85 c6             	test   %rax,%rsi
ffffffff80217866:	0f 85 e4 00 00 00    	jne    ffffffff80217950 <_RME_Pgtbl_Boot_Con+0x1e0>
    RME_CAP_CHECK(Pgtbl_Child, 0);
ffffffff8021786c:	48 85 c1             	test   %rax,%rcx
ffffffff8021786f:	0f 85 db 00 00 00    	jne    ffffffff80217950 <_RME_Pgtbl_Boot_Con+0x1e0>
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Parent->Size_Num_Order))!=0)
ffffffff80217875:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff80217879:	48 89 d0             	mov    %rdx,%rax
ffffffff8021787c:	48 d3 e8             	shr    %cl,%rax
ffffffff8021787f:	48 85 c0             	test   %rax,%rax
ffffffff80217882:	0f 85 d8 00 00 00    	jne    ffffffff80217960 <_RME_Pgtbl_Boot_Con+0x1f0>
        return RME_ERR_PGT_ADDR;
    
    /* See if the child table falls within one slot of the parent table */
    Child_Size_Ord=RME_PGTBL_NUMORD(Pgtbl_Child->Size_Num_Order)+
ffffffff80217888:	49 8b 41 28          	mov    0x28(%r9),%rax
                   RME_PGTBL_SIZEORD(Pgtbl_Child->Size_Num_Order);
    if(RME_PGTBL_SIZEORD(Pgtbl_Parent->Size_Num_Order)<Child_Size_Ord)
ffffffff8021788c:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80217890:	89 c6                	mov    %eax,%esi
ffffffff80217892:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff80217896:	48 01 c6             	add    %rax,%rsi
    RME_CAP_CHECK(Pgtbl_Parent, 0);
    RME_CAP_CHECK(Pgtbl_Child, 0);
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Parent->Size_Num_Order))!=0)
        return RME_ERR_PGT_ADDR;
ffffffff80217899:	48 c7 c0 f5 ff ff ff 	mov    $0xfffffffffffffff5,%rax
    
    /* See if the child table falls within one slot of the parent table */
    Child_Size_Ord=RME_PGTBL_NUMORD(Pgtbl_Child->Size_Num_Order)+
                   RME_PGTBL_SIZEORD(Pgtbl_Child->Size_Num_Order);
    if(RME_PGTBL_SIZEORD(Pgtbl_Parent->Size_Num_Order)<Child_Size_Ord)
ffffffff802178a0:	48 39 ce             	cmp    %rcx,%rsi
ffffffff802178a3:	0f 87 02 ff ff ff    	ja     ffffffff802177ab <_RME_Pgtbl_Boot_Con+0x3b>
ffffffff802178a9:	48 89 d6             	mov    %rdx,%rsi
ffffffff802178ac:	4c 89 c1             	mov    %r8,%rcx
        return RME_ERR_PGT_ADDR;
#endif

    /* Actually do the mapping - This work is passed down to the driver layer. 
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Map(Pgtbl_Parent, Pos, Pgtbl_Child, Flags_Child)!=0)
ffffffff802178af:	4c 89 ca             	mov    %r9,%rdx
ffffffff802178b2:	e8 69 cc ff ff       	callq  ffffffff80214520 <__RME_Pgtbl_Pgdir_Map>
        return RME_ERR_PGT_MAP;
ffffffff802178b7:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802178bb:	48 19 c0             	sbb    %rax,%rax
ffffffff802178be:	48 f7 d0             	not    %rax
ffffffff802178c1:	48 83 e0 f4          	and    $0xfffffffffffffff4,%rax
    
    return 0;
}
ffffffff802178c5:	5b                   	pop    %rbx
ffffffff802178c6:	c3                   	retq   
ffffffff802178c7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff802178ce:	00 00 
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Child,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Child);
ffffffff802178d0:	49 89 c9             	mov    %rcx,%r9
ffffffff802178d3:	49 c1 f9 10          	sar    $0x10,%r9
ffffffff802178d7:	49 39 d9             	cmp    %rbx,%r9
ffffffff802178da:	73 64                	jae    ffffffff80217940 <_RME_Pgtbl_Boot_Con+0x1d0>
ffffffff802178dc:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff802178e0:	49 ba 00 00 00 00 00 	movabs $0x800000000000,%r10
ffffffff802178e7:	80 00 00 
ffffffff802178ea:	4d 01 d9             	add    %r11,%r9
ffffffff802178ed:	49 8b 01             	mov    (%r9),%rax
ffffffff802178f0:	4c 85 d0             	test   %r10,%rax
ffffffff802178f3:	75 5b                	jne    ffffffff80217950 <_RME_Pgtbl_Boot_Con+0x1e0>
ffffffff802178f5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802178f9:	49 89 c2             	mov    %rax,%r10
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff802178fc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Child,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Child);
ffffffff80217903:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff80217907:	0f 85 9e fe ff ff    	jne    ffffffff802177ab <_RME_Pgtbl_Boot_Con+0x3b>
ffffffff8021790d:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff80217913:	49 3b 49 28          	cmp    0x28(%r9),%rcx
ffffffff80217917:	73 27                	jae    ffffffff80217940 <_RME_Pgtbl_Boot_Con+0x1d0>
ffffffff80217919:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021791d:	49 03 49 18          	add    0x18(%r9),%rcx
ffffffff80217921:	49 89 c9             	mov    %rcx,%r9
ffffffff80217924:	48 8b 09             	mov    (%rcx),%rcx
ffffffff80217927:	49 89 ca             	mov    %rcx,%r10
ffffffff8021792a:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8021792e:	49 83 fa 04          	cmp    $0x4,%r10
ffffffff80217932:	0f 84 21 ff ff ff    	je     ffffffff80217859 <_RME_Pgtbl_Boot_Con+0xe9>
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Map(Pgtbl_Parent, Pos, Pgtbl_Child, Flags_Child)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff80217938:	5b                   	pop    %rbx
ffffffff80217939:	c3                   	retq   
ffffffff8021793a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff80217940:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Map(Pgtbl_Parent, Pos, Pgtbl_Child, Flags_Child)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff80217947:	5b                   	pop    %rbx
ffffffff80217948:	c3                   	retq   
ffffffff80217949:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff80217950:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Map(Pgtbl_Parent, Pos, Pgtbl_Child, Flags_Child)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff80217957:	5b                   	pop    %rbx
ffffffff80217958:	c3                   	retq   
ffffffff80217959:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_CHECK(Pgtbl_Parent, 0);
    RME_CAP_CHECK(Pgtbl_Child, 0);
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Parent->Size_Num_Order))!=0)
        return RME_ERR_PGT_ADDR;
ffffffff80217960:	48 c7 c0 f5 ff ff ff 	mov    $0xfffffffffffffff5,%rax
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Map(Pgtbl_Parent, Pos, Pgtbl_Child, Flags_Child)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff80217967:	5b                   	pop    %rbx
ffffffff80217968:	c3                   	retq   
ffffffff80217969:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80217970 <_RME_Pgtbl_Boot_Add>:
                          ptr_t Paddr, ptr_t Pos, ptr_t Flags)
{
    struct RME_Cap_Pgtbl* Pgtbl_Op;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);    
ffffffff80217970:	f7 c6 00 80 00 00    	test   $0x8000,%esi
Output      : None.
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Pgtbl_Boot_Add(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, 
                          ptr_t Paddr, ptr_t Pos, ptr_t Flags)
{
ffffffff80217976:	49 89 c9             	mov    %rcx,%r9
    struct RME_Cap_Pgtbl* Pgtbl_Op;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);    
ffffffff80217979:	75 35                	jne    ffffffff802179b0 <_RME_Pgtbl_Boot_Add+0x40>
ffffffff8021797b:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021797f:	0f 86 0b 01 00 00    	jbe    ffffffff80217a90 <_RME_Pgtbl_Boot_Add+0x120>
ffffffff80217985:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80217989:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021798d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217994:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff80217997:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021799a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021799d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802179a1:	48 83 fe 04          	cmp    $0x4,%rsi
ffffffff802179a5:	74 7e                	je     ffffffff80217a25 <_RME_Pgtbl_Boot_Add+0xb5>
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Page_Map(Pgtbl_Op, Paddr, Pos, Flags)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff802179a7:	f3 c3                	repz retq 
ffffffff802179a9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
                          ptr_t Paddr, ptr_t Pos, ptr_t Flags)
{
    struct RME_Cap_Pgtbl* Pgtbl_Op;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);    
ffffffff802179b0:	48 89 f0             	mov    %rsi,%rax
ffffffff802179b3:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff802179b7:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff802179bb:	0f 83 cf 00 00 00    	jae    ffffffff80217a90 <_RME_Pgtbl_Boot_Add+0x120>
ffffffff802179c1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802179c5:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff802179c9:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff802179d0:	80 00 00 
ffffffff802179d3:	48 89 c7             	mov    %rax,%rdi
ffffffff802179d6:	48 8b 00             	mov    (%rax),%rax
ffffffff802179d9:	48 85 c8             	test   %rcx,%rax
ffffffff802179dc:	0f 85 be 00 00 00    	jne    ffffffff80217aa0 <_RME_Pgtbl_Boot_Add+0x130>
ffffffff802179e2:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802179e6:	48 89 c1             	mov    %rax,%rcx
ffffffff802179e9:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802179f0:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802179f4:	0f 85 93 00 00 00    	jne    ffffffff80217a8d <_RME_Pgtbl_Boot_Add+0x11d>
ffffffff802179fa:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80217a00:	48 3b 77 28          	cmp    0x28(%rdi),%rsi
ffffffff80217a04:	0f 83 86 00 00 00    	jae    ffffffff80217a90 <_RME_Pgtbl_Boot_Add+0x120>
ffffffff80217a0a:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80217a0e:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80217a12:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff80217a15:	48 89 f7             	mov    %rsi,%rdi
ffffffff80217a18:	48 89 ce             	mov    %rcx,%rsi
ffffffff80217a1b:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80217a1f:	48 83 fe 04          	cmp    $0x4,%rsi
ffffffff80217a23:	75 68                	jne    ffffffff80217a8d <_RME_Pgtbl_Boot_Add+0x11d>
    /* Check if the target captbl is not frozen, but don't check their properties */
    RME_CAP_CHECK(Pgtbl_Op,0);
ffffffff80217a25:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80217a2c:	80 00 00 
ffffffff80217a2f:	48 85 c1             	test   %rax,%rcx
ffffffff80217a32:	75 6c                	jne    ffffffff80217aa0 <_RME_Pgtbl_Boot_Add+0x130>
    if(Paddr!=((Pos<<RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order))+RME_PGTBL_START(Pgtbl_Op->Start_Addr)))
        return RME_ERR_PGT_ADDR; 
#endif

    /* See if the mapping range and the granularity is allowed */
    if(((Pos>>RME_PGTBL_NUMORD(Pgtbl_Op->Size_Num_Order))!=0)||
ffffffff80217a34:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff80217a38:	4c 89 c8             	mov    %r9,%rax
ffffffff80217a3b:	48 d3 e8             	shr    %cl,%rax
ffffffff80217a3e:	48 85 c0             	test   %rax,%rax
ffffffff80217a41:	75 6d                	jne    ffffffff80217ab0 <_RME_Pgtbl_Boot_Add+0x140>
ffffffff80217a43:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80217a47:	b8 40 00 00 00       	mov    $0x40,%eax
ffffffff80217a4c:	29 c8                	sub    %ecx,%eax
ffffffff80217a4e:	89 c1                	mov    %eax,%ecx
ffffffff80217a50:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
ffffffff80217a57:	48 d3 e8             	shr    %cl,%rax
ffffffff80217a5a:	48 89 c1             	mov    %rax,%rcx
       ((Paddr&RME_MASK_END(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)-1))!=0))
        return RME_ERR_PGT_ADDR;
ffffffff80217a5d:	48 c7 c0 f5 ff ff ff 	mov    $0xfffffffffffffff5,%rax
    if(Paddr!=((Pos<<RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order))+RME_PGTBL_START(Pgtbl_Op->Start_Addr)))
        return RME_ERR_PGT_ADDR; 
#endif

    /* See if the mapping range and the granularity is allowed */
    if(((Pos>>RME_PGTBL_NUMORD(Pgtbl_Op->Size_Num_Order))!=0)||
ffffffff80217a64:	48 85 d1             	test   %rdx,%rcx
ffffffff80217a67:	75 24                	jne    ffffffff80217a8d <_RME_Pgtbl_Boot_Add+0x11d>
Output      : None.
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Pgtbl_Boot_Add(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, 
                          ptr_t Paddr, ptr_t Pos, ptr_t Flags)
{
ffffffff80217a69:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80217a6d:	48 89 d6             	mov    %rdx,%rsi
ffffffff80217a70:	4c 89 c1             	mov    %r8,%rcx
       ((Paddr&RME_MASK_END(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)-1))!=0))
        return RME_ERR_PGT_ADDR;

    /* Actually do the mapping - This work is passed down to the driver layer. 
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Page_Map(Pgtbl_Op, Paddr, Pos, Flags)!=0)
ffffffff80217a73:	4c 89 ca             	mov    %r9,%rdx
ffffffff80217a76:	e8 a5 c9 ff ff       	callq  ffffffff80214420 <__RME_Pgtbl_Page_Map>
        return RME_ERR_PGT_MAP;
ffffffff80217a7b:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80217a7f:	48 19 c0             	sbb    %rax,%rax
    
    return 0;
}
ffffffff80217a82:	48 83 c4 08          	add    $0x8,%rsp
        return RME_ERR_PGT_ADDR;

    /* Actually do the mapping - This work is passed down to the driver layer. 
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Page_Map(Pgtbl_Op, Paddr, Pos, Flags)!=0)
        return RME_ERR_PGT_MAP;
ffffffff80217a86:	48 f7 d0             	not    %rax
ffffffff80217a89:	48 83 e0 f4          	and    $0xfffffffffffffff4,%rax
    
    return 0;
}
ffffffff80217a8d:	f3 c3                	repz retq 
ffffffff80217a8f:	90                   	nop
                          ptr_t Paddr, ptr_t Pos, ptr_t Flags)
{
    struct RME_Cap_Pgtbl* Pgtbl_Op;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);    
ffffffff80217a90:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217a97:	c3                   	retq   
ffffffff80217a98:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80217a9f:	00 
ffffffff80217aa0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217aa7:	c3                   	retq   
ffffffff80217aa8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80217aaf:	00 
#endif

    /* See if the mapping range and the granularity is allowed */
    if(((Pos>>RME_PGTBL_NUMORD(Pgtbl_Op->Size_Num_Order))!=0)||
       ((Paddr&RME_MASK_END(RME_PGTBL_SIZEORD(Pgtbl_Op->Size_Num_Order)-1))!=0))
        return RME_ERR_PGT_ADDR;
ffffffff80217ab0:	48 c7 c0 f5 ff ff ff 	mov    $0xfffffffffffffff5,%rax
ffffffff80217ab7:	c3                   	retq   
ffffffff80217ab8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80217abf:	00 

ffffffff80217ac0 <_RME_Pgtbl_Crt>:
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Pgtbl_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl,
                     cid_t Cap_Kmem, cid_t Cap_Pgtbl, ptr_t Vaddr,
                     ptr_t Start_Addr, ptr_t Top_Flag, ptr_t Size_Order, ptr_t Num_Order)
{
ffffffff80217ac0:	41 57                	push   %r15
ffffffff80217ac2:	41 56                	push   %r14
ffffffff80217ac4:	41 55                	push   %r13
ffffffff80217ac6:	41 54                	push   %r12
ffffffff80217ac8:	55                   	push   %rbp
ffffffff80217ac9:	53                   	push   %rbx
ffffffff80217aca:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff80217ace:	4c 8b 6c 24 70       	mov    0x70(%rsp),%r13
ffffffff80217ad3:	4c 8b 74 24 60       	mov    0x60(%rsp),%r14
    struct RME_Cap_Pgtbl* Pgtbl_Crt;
    ptr_t Type_Ref;
    
    /* Check if the total representable memory exceeds our maximum possible
     * addressible memory under the machine word length */
    if((Size_Order+Num_Order)>RME_POW2(RME_WORD_ORDER))
ffffffff80217ad8:	4c 89 e8             	mov    %r13,%rax
ffffffff80217adb:	48 03 44 24 68       	add    0x68(%rsp),%rax
ffffffff80217ae0:	48 83 f8 40          	cmp    $0x40,%rax
ffffffff80217ae4:	0f 87 19 04 00 00    	ja     ffffffff80217f03 <_RME_Pgtbl_Crt+0x443>
ffffffff80217aea:	48 89 d3             	mov    %rdx,%rbx
        return RME_ERR_PGT_HW;
    
    /* Check if these parameters are feasible */
    if(__RME_Pgtbl_Check(Start_Addr, Top_Flag, Size_Order, Num_Order)!=0)
ffffffff80217aed:	48 8b 54 24 68       	mov    0x68(%rsp),%rdx
ffffffff80217af2:	4d 89 cc             	mov    %r9,%r12
ffffffff80217af5:	48 89 74 24 08       	mov    %rsi,0x8(%rsp)
ffffffff80217afa:	48 89 3c 24          	mov    %rdi,(%rsp)
ffffffff80217afe:	49 89 cf             	mov    %rcx,%r15
ffffffff80217b01:	4c 89 f6             	mov    %r14,%rsi
ffffffff80217b04:	4c 89 e9             	mov    %r13,%rcx
ffffffff80217b07:	4c 89 e7             	mov    %r12,%rdi
ffffffff80217b0a:	4c 89 c5             	mov    %r8,%rbp
ffffffff80217b0d:	e8 ee c7 ff ff       	callq  ffffffff80214300 <__RME_Pgtbl_Check>
ffffffff80217b12:	48 85 c0             	test   %rax,%rax
ffffffff80217b15:	0f 85 e8 03 00 00    	jne    ffffffff80217f03 <_RME_Pgtbl_Crt+0x443>
        return RME_ERR_PGT_HW;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80217b1b:	4c 8b 4c 24 08       	mov    0x8(%rsp),%r9
ffffffff80217b20:	4c 8b 14 24          	mov    (%rsp),%r10
ffffffff80217b24:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff80217b2b:	0f 84 17 02 00 00    	je     ffffffff80217d48 <_RME_Pgtbl_Crt+0x288>
ffffffff80217b31:	49 8b 4a 28          	mov    0x28(%r10),%rcx
ffffffff80217b35:	4c 89 ca             	mov    %r9,%rdx
ffffffff80217b38:	48 c1 fa 10          	sar    $0x10,%rdx
ffffffff80217b3c:	48 39 ca             	cmp    %rcx,%rdx
ffffffff80217b3f:	0f 83 d4 03 00 00    	jae    ffffffff80217f19 <_RME_Pgtbl_Crt+0x459>
ffffffff80217b45:	49 8b 42 18          	mov    0x18(%r10),%rax
ffffffff80217b49:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80217b4d:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80217b54:	80 00 00 
ffffffff80217b57:	48 8d 34 02          	lea    (%rdx,%rax,1),%rsi
ffffffff80217b5b:	48 8b 16             	mov    (%rsi),%rdx
ffffffff80217b5e:	48 85 fa             	test   %rdi,%rdx
ffffffff80217b61:	0f 85 be 03 00 00    	jne    ffffffff80217f25 <_RME_Pgtbl_Crt+0x465>
ffffffff80217b67:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80217b6b:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff80217b6f:	0f 85 02 02 00 00    	jne    ffffffff80217d77 <_RME_Pgtbl_Crt+0x2b7>
ffffffff80217b75:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff80217b7c:	4c 3b 4e 28          	cmp    0x28(%rsi),%r9
ffffffff80217b80:	0f 83 93 03 00 00    	jae    ffffffff80217f19 <_RME_Pgtbl_Crt+0x459>
ffffffff80217b86:	4c 89 ca             	mov    %r9,%rdx
ffffffff80217b89:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80217b8d:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff80217b91:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80217b94:	48 89 f7             	mov    %rsi,%rdi
ffffffff80217b97:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80217b9b:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80217b9f:	0f 85 d2 01 00 00    	jne    ffffffff80217d77 <_RME_Pgtbl_Crt+0x2b7>
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff80217ba5:	f6 c7 80             	test   $0x80,%bh
ffffffff80217ba8:	0f 85 42 02 00 00    	jne    ffffffff80217df0 <_RME_Pgtbl_Crt+0x330>
ffffffff80217bae:	48 39 cb             	cmp    %rcx,%rbx
ffffffff80217bb1:	0f 83 62 03 00 00    	jae    ffffffff80217f19 <_RME_Pgtbl_Crt+0x459>
ffffffff80217bb7:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80217bbb:	48 01 d8             	add    %rbx,%rax
ffffffff80217bbe:	66 83 78 06 02       	cmpw   $0x2,0x6(%rax)
ffffffff80217bc3:	0f 85 ae 01 00 00    	jne    ffffffff80217d77 <_RME_Pgtbl_Crt+0x2b7>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff80217bc9:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff80217bd0:	80 00 00 
ffffffff80217bd3:	48 85 ce             	test   %rcx,%rsi
ffffffff80217bd6:	0f 85 49 03 00 00    	jne    ffffffff80217f25 <_RME_Pgtbl_Crt+0x465>
ffffffff80217bdc:	f6 42 10 01          	testb  $0x1,0x10(%rdx)
ffffffff80217be0:	0f 84 8a 02 00 00    	je     ffffffff80217e70 <_RME_Pgtbl_Crt+0x3b0>
    /* See if the creation is valid for this kmem range */
    if(Top_Flag!=0)
ffffffff80217be6:	4d 85 f6             	test   %r14,%r14
ffffffff80217be9:	0f 84 71 02 00 00    	je     ffffffff80217e60 <_RME_Pgtbl_Crt+0x3a0>
        RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PGTBL,Vaddr,RME_PGTBL_SIZE_TOP(Num_Order));
ffffffff80217bef:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80217bf3:	0f 84 77 02 00 00    	je     ffffffff80217e70 <_RME_Pgtbl_Crt+0x3b0>
ffffffff80217bf9:	48 39 68 28          	cmp    %rbp,0x28(%rax)
ffffffff80217bfd:	0f 87 6d 02 00 00    	ja     ffffffff80217e70 <_RME_Pgtbl_Crt+0x3b0>
    else
        RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PGTBL,Vaddr,RME_PGTBL_SIZE_NOM(Num_Order));
ffffffff80217c03:	44 89 e9             	mov    %r13d,%ecx
ffffffff80217c06:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80217c0b:	d3 e6                	shl    %cl,%esi
ffffffff80217c0d:	48 63 de             	movslq %esi,%rbx
ffffffff80217c10:	48 c1 e3 03          	shl    $0x3,%rbx
ffffffff80217c14:	48 8d 4c 1d 00       	lea    0x0(%rbp,%rbx,1),%rcx
ffffffff80217c19:	48 39 48 30          	cmp    %rcx,0x30(%rax)
ffffffff80217c1d:	0f 82 4d 02 00 00    	jb     ffffffff80217e70 <_RME_Pgtbl_Crt+0x3b0>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
ffffffff80217c23:	4c 39 7a 28          	cmp    %r15,0x28(%rdx)
ffffffff80217c27:	0f 86 ec 02 00 00    	jbe    ffffffff80217f19 <_RME_Pgtbl_Crt+0x459>
ffffffff80217c2d:	4c 89 f9             	mov    %r15,%rcx
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);
ffffffff80217c30:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
ffffffff80217c35:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
ffffffff80217c3c:	00 00 
        RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PGTBL,Vaddr,RME_PGTBL_SIZE_TOP(Num_Order));
    else
        RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PGTBL,Vaddr,RME_PGTBL_SIZE_NOM(Num_Order));
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
ffffffff80217c3e:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80217c42:	48 03 4a 18          	add    0x18(%rdx),%rcx
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);
ffffffff80217c46:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff80217c4d:	80 00 00 
ffffffff80217c50:	48 89 cf             	mov    %rcx,%rdi
        RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PGTBL,Vaddr,RME_PGTBL_SIZE_TOP(Num_Order));
    else
        RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PGTBL,Vaddr,RME_PGTBL_SIZE_NOM(Num_Order));
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
ffffffff80217c53:	49 89 cf             	mov    %rcx,%r15
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);
ffffffff80217c56:	e8 26 3c ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80217c5b:	48 85 c0             	test   %rax,%rax
ffffffff80217c5e:	0f 84 e0 02 00 00    	je     ffffffff80217f44 <_RME_Pgtbl_Crt+0x484>
    
    /* Try to populate the area - Are we creating the top level? */
    if(Top_Flag!=0)
ffffffff80217c64:	4d 85 f6             	test   %r14,%r14
    {  
        if(_RME_Kotbl_Mark(Vaddr, RME_PGTBL_SIZE_TOP(Num_Order))!=0)
ffffffff80217c67:	48 89 de             	mov    %rbx,%rsi
ffffffff80217c6a:	48 89 ef             	mov    %rbp,%rdi
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);
    
    /* Try to populate the area - Are we creating the top level? */
    if(Top_Flag!=0)
ffffffff80217c6d:	0f 84 0d 01 00 00    	je     ffffffff80217d80 <_RME_Pgtbl_Crt+0x2c0>
    {  
        if(_RME_Kotbl_Mark(Vaddr, RME_PGTBL_SIZE_TOP(Num_Order))!=0)
ffffffff80217c73:	e8 18 f3 ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff80217c78:	48 85 c0             	test   %rax,%rax
ffffffff80217c7b:	0f 85 b0 02 00 00    	jne    ffffffff80217f31 <_RME_Pgtbl_Crt+0x471>
    Pgtbl_Crt->Head.Object=Vaddr;
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
                          RME_PGTBL_FLAG_ADD_SRC|RME_PGTBL_FLAG_ADD_DST|RME_PGTBL_FLAG_REM|
                          RME_PGTBL_FLAG_CON_CHILD|RME_PGTBL_FLAG_CON_PARENT|RME_PGTBL_FLAG_DES|
                          RME_PGTBL_FLAG_PROC_CRT|RME_PGTBL_FLAG_PROC_PGT;
    Pgtbl_Crt->Start_Addr=Start_Addr|Top_Flag;
ffffffff80217c81:	4d 09 e6             	or     %r12,%r14
    /* These two variables are directly placed here. Checks will be done by the driver */
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
ffffffff80217c84:	4c 8b 64 24 68       	mov    0x68(%rsp),%r12
        }
    }
    
    Pgtbl_Crt->Head.Parent=0;
    Pgtbl_Crt->Head.Object=Vaddr;
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
ffffffff80217c89:	48 b8 ff 00 00 00 f0 	movabs $0xfffffff0000000ff,%rax
ffffffff80217c90:	ff ff ff 
            Pgtbl_Crt->Head.Type_Ref=0;
            return RME_ERR_CAP_KOTBL;
        }
    }
    
    Pgtbl_Crt->Head.Parent=0;
ffffffff80217c93:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
ffffffff80217c9a:	00 
    Pgtbl_Crt->Head.Object=Vaddr;
ffffffff80217c9b:	49 89 6f 18          	mov    %rbp,0x18(%r15)
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
    /* Done. We start initialization of the page table, and we also add all 
     * kernel pages to them. If unsuccessful, we revert operations. At here, 
     * all the information of the page table should be filled in, except for
     * its header */
    if(__RME_Pgtbl_Init(Pgtbl_Crt)!=0)
ffffffff80217c9f:	4c 89 ff             	mov    %r15,%rdi
        }
    }
    
    Pgtbl_Crt->Head.Parent=0;
    Pgtbl_Crt->Head.Object=Vaddr;
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
ffffffff80217ca2:	49 89 47 10          	mov    %rax,0x10(%r15)
                          RME_PGTBL_FLAG_ADD_SRC|RME_PGTBL_FLAG_ADD_DST|RME_PGTBL_FLAG_REM|
                          RME_PGTBL_FLAG_CON_CHILD|RME_PGTBL_FLAG_CON_PARENT|RME_PGTBL_FLAG_DES|
                          RME_PGTBL_FLAG_PROC_CRT|RME_PGTBL_FLAG_PROC_PGT;
    Pgtbl_Crt->Start_Addr=Start_Addr|Top_Flag;
ffffffff80217ca6:	4d 89 77 30          	mov    %r14,0x30(%r15)
    /* These two variables are directly placed here. Checks will be done by the driver */
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
ffffffff80217caa:	49 c1 e4 20          	shl    $0x20,%r12
ffffffff80217cae:	4d 09 e5             	or     %r12,%r13
ffffffff80217cb1:	4d 89 6f 28          	mov    %r13,0x28(%r15)
    /* Done. We start initialization of the page table, and we also add all 
     * kernel pages to them. If unsuccessful, we revert operations. At here, 
     * all the information of the page table should be filled in, except for
     * its header */
    if(__RME_Pgtbl_Init(Pgtbl_Crt)!=0)
ffffffff80217cb5:	e8 96 c6 ff ff       	callq  ffffffff80214350 <__RME_Pgtbl_Init>
ffffffff80217cba:	48 85 c0             	test   %rax,%rax
ffffffff80217cbd:	0f 84 0a 01 00 00    	je     ffffffff80217dcd <_RME_Pgtbl_Crt+0x30d>
    {
        /* This must be successful */
        if(Top_Flag!=0)
            RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PGTBL_SIZE_TOP(Num_Order))==0);
ffffffff80217cc3:	48 89 de             	mov    %rbx,%rsi
ffffffff80217cc6:	48 89 ef             	mov    %rbp,%rdi
ffffffff80217cc9:	e8 f2 f4 ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
ffffffff80217cce:	48 85 c0             	test   %rax,%rax
ffffffff80217cd1:	0f 84 25 02 00 00    	je     ffffffff80217efc <_RME_Pgtbl_Crt+0x43c>
ffffffff80217cd7:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80217cde:	e8 2d f2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217ce3:	48 c7 c7 70 ef 21 80 	mov    $0xffffffff8021ef70,%rdi
ffffffff80217cea:	e8 21 f2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217cef:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80217cf6:	e8 15 f2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217cfb:	bf 5e 01 00 00       	mov    $0x15e,%edi
ffffffff80217d00:	e8 cb ef ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80217d05:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80217d0c:	e8 ff f1 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217d11:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80217d18:	e8 f3 f1 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217d1d:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80217d24:	e8 e7 f1 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217d29:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff80217d30:	e8 db f1 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217d35:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80217d3c:	e8 cf f1 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217d41:	eb fe                	jmp    ffffffff80217d41 <_RME_Pgtbl_Crt+0x281>
ffffffff80217d43:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    /* Check if these parameters are feasible */
    if(__RME_Pgtbl_Check(Start_Addr, Top_Flag, Size_Order, Num_Order)!=0)
        return RME_ERR_PGT_HW;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80217d48:	49 8b 4a 28          	mov    0x28(%r10),%rcx
ffffffff80217d4c:	4c 39 c9             	cmp    %r9,%rcx
ffffffff80217d4f:	0f 86 c4 01 00 00    	jbe    ffffffff80217f19 <_RME_Pgtbl_Crt+0x459>
ffffffff80217d55:	49 8b 42 18          	mov    0x18(%r10),%rax
ffffffff80217d59:	4c 89 ca             	mov    %r9,%rdx
ffffffff80217d5c:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80217d60:	48 01 c2             	add    %rax,%rdx
ffffffff80217d63:	48 8b 32             	mov    (%rdx),%rsi
ffffffff80217d66:	48 89 f7             	mov    %rsi,%rdi
ffffffff80217d69:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80217d6d:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80217d71:	0f 84 2e fe ff ff    	je     ffffffff80217ba5 <_RME_Pgtbl_Crt+0xe5>
ffffffff80217d77:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80217d7e:	eb 5c                	jmp    ffffffff80217ddc <_RME_Pgtbl_Crt+0x31c>
            return RME_ERR_CAP_KOTBL;
        }
    }
    else
    {
        if(_RME_Kotbl_Mark(Vaddr, RME_PGTBL_SIZE_NOM(Num_Order))!=0)
ffffffff80217d80:	e8 0b f2 ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff80217d85:	48 85 c0             	test   %rax,%rax
ffffffff80217d88:	0f 85 a3 01 00 00    	jne    ffffffff80217f31 <_RME_Pgtbl_Crt+0x471>
    Pgtbl_Crt->Head.Object=Vaddr;
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
                          RME_PGTBL_FLAG_ADD_SRC|RME_PGTBL_FLAG_ADD_DST|RME_PGTBL_FLAG_REM|
                          RME_PGTBL_FLAG_CON_CHILD|RME_PGTBL_FLAG_CON_PARENT|RME_PGTBL_FLAG_DES|
                          RME_PGTBL_FLAG_PROC_CRT|RME_PGTBL_FLAG_PROC_PGT;
    Pgtbl_Crt->Start_Addr=Start_Addr|Top_Flag;
ffffffff80217d8e:	4d 89 67 30          	mov    %r12,0x30(%r15)
    /* These two variables are directly placed here. Checks will be done by the driver */
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
ffffffff80217d92:	4c 8b 64 24 68       	mov    0x68(%rsp),%r12
        }
    }
    
    Pgtbl_Crt->Head.Parent=0;
    Pgtbl_Crt->Head.Object=Vaddr;
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
ffffffff80217d97:	48 b8 ff 00 00 00 f0 	movabs $0xfffffff0000000ff,%rax
ffffffff80217d9e:	ff ff ff 
            Pgtbl_Crt->Head.Type_Ref=0;
            return RME_ERR_CAP_KOTBL;
        }
    }
    
    Pgtbl_Crt->Head.Parent=0;
ffffffff80217da1:	49 c7 47 08 00 00 00 	movq   $0x0,0x8(%r15)
ffffffff80217da8:	00 
    Pgtbl_Crt->Head.Object=Vaddr;
ffffffff80217da9:	49 89 6f 18          	mov    %rbp,0x18(%r15)
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
    /* Done. We start initialization of the page table, and we also add all 
     * kernel pages to them. If unsuccessful, we revert operations. At here, 
     * all the information of the page table should be filled in, except for
     * its header */
    if(__RME_Pgtbl_Init(Pgtbl_Crt)!=0)
ffffffff80217dad:	4c 89 ff             	mov    %r15,%rdi
        }
    }
    
    Pgtbl_Crt->Head.Parent=0;
    Pgtbl_Crt->Head.Object=Vaddr;
    Pgtbl_Crt->Head.Flags=RME_PGTBL_FLAG_FULL_RANGE|
ffffffff80217db0:	49 89 47 10          	mov    %rax,0x10(%r15)
                          RME_PGTBL_FLAG_ADD_SRC|RME_PGTBL_FLAG_ADD_DST|RME_PGTBL_FLAG_REM|
                          RME_PGTBL_FLAG_CON_CHILD|RME_PGTBL_FLAG_CON_PARENT|RME_PGTBL_FLAG_DES|
                          RME_PGTBL_FLAG_PROC_CRT|RME_PGTBL_FLAG_PROC_PGT;
    Pgtbl_Crt->Start_Addr=Start_Addr|Top_Flag;
    /* These two variables are directly placed here. Checks will be done by the driver */
    Pgtbl_Crt->Size_Num_Order=RME_PGTBL_ORDER(Size_Order,Num_Order);
ffffffff80217db4:	49 c1 e4 20          	shl    $0x20,%r12
ffffffff80217db8:	4d 09 e5             	or     %r12,%r13
ffffffff80217dbb:	4d 89 6f 28          	mov    %r13,0x28(%r15)
    /* Done. We start initialization of the page table, and we also add all 
     * kernel pages to them. If unsuccessful, we revert operations. At here, 
     * all the information of the page table should be filled in, except for
     * its header */
    if(__RME_Pgtbl_Init(Pgtbl_Crt)!=0)
ffffffff80217dbf:	e8 8c c5 ff ff       	callq  ffffffff80214350 <__RME_Pgtbl_Init>
ffffffff80217dc4:	48 85 c0             	test   %rax,%rax
ffffffff80217dc7:	0f 85 b3 00 00 00    	jne    ffffffff80217e80 <_RME_Pgtbl_Crt+0x3c0>
        /* Unsuccessful. Revert operations */
        Pgtbl_Crt->Head.Type_Ref=0;
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
ffffffff80217dcd:	48 b8 00 00 00 00 00 	movabs $0x4000000000000,%rax
ffffffff80217dd4:	00 04 00 
ffffffff80217dd7:	49 89 07             	mov    %rax,(%r15)
    return 0;
ffffffff80217dda:	31 c0                	xor    %eax,%eax
}
ffffffff80217ddc:	48 83 c4 28          	add    $0x28,%rsp
ffffffff80217de0:	5b                   	pop    %rbx
ffffffff80217de1:	5d                   	pop    %rbp
ffffffff80217de2:	41 5c                	pop    %r12
ffffffff80217de4:	41 5d                	pop    %r13
ffffffff80217de6:	41 5e                	pop    %r14
ffffffff80217de8:	41 5f                	pop    %r15
ffffffff80217dea:	c3                   	retq   
ffffffff80217deb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    if(__RME_Pgtbl_Check(Start_Addr, Top_Flag, Size_Order, Num_Order)!=0)
        return RME_ERR_PGT_HW;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff80217df0:	48 89 df             	mov    %rbx,%rdi
ffffffff80217df3:	48 c1 ff 10          	sar    $0x10,%rdi
ffffffff80217df7:	48 39 cf             	cmp    %rcx,%rdi
ffffffff80217dfa:	0f 83 19 01 00 00    	jae    ffffffff80217f19 <_RME_Pgtbl_Crt+0x459>
ffffffff80217e00:	48 89 f9             	mov    %rdi,%rcx
ffffffff80217e03:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80217e0a:	80 00 00 
ffffffff80217e0d:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80217e11:	48 01 c1             	add    %rax,%rcx
ffffffff80217e14:	48 8b 01             	mov    (%rcx),%rax
ffffffff80217e17:	48 85 f8             	test   %rdi,%rax
ffffffff80217e1a:	0f 85 05 01 00 00    	jne    ffffffff80217f25 <_RME_Pgtbl_Crt+0x465>
ffffffff80217e20:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80217e24:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80217e28:	0f 85 49 ff ff ff    	jne    ffffffff80217d77 <_RME_Pgtbl_Crt+0x2b7>
ffffffff80217e2e:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff80217e34:	48 3b 59 28          	cmp    0x28(%rcx),%rbx
ffffffff80217e38:	0f 83 db 00 00 00    	jae    ffffffff80217f19 <_RME_Pgtbl_Crt+0x459>
ffffffff80217e3e:	48 89 d8             	mov    %rbx,%rax
ffffffff80217e41:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217e45:	48 03 41 18          	add    0x18(%rcx),%rax
ffffffff80217e49:	66 83 78 06 02       	cmpw   $0x2,0x6(%rax)
ffffffff80217e4e:	0f 84 75 fd ff ff    	je     ffffffff80217bc9 <_RME_Pgtbl_Crt+0x109>
ffffffff80217e54:	e9 1e ff ff ff       	jmpq   ffffffff80217d77 <_RME_Pgtbl_Crt+0x2b7>
ffffffff80217e59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    /* See if the creation is valid for this kmem range */
    if(Top_Flag!=0)
        RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PGTBL,Vaddr,RME_PGTBL_SIZE_TOP(Num_Order));
    else
        RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PGTBL,Vaddr,RME_PGTBL_SIZE_NOM(Num_Order));
ffffffff80217e60:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80217e64:	74 0a                	je     ffffffff80217e70 <_RME_Pgtbl_Crt+0x3b0>
ffffffff80217e66:	48 3b 68 28          	cmp    0x28(%rax),%rbp
ffffffff80217e6a:	0f 83 93 fd ff ff    	jae    ffffffff80217c03 <_RME_Pgtbl_Crt+0x143>
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff80217e70:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80217e77:	e9 60 ff ff ff       	jmpq   ffffffff80217ddc <_RME_Pgtbl_Crt+0x31c>
ffffffff80217e7c:	0f 1f 40 00          	nopl   0x0(%rax)
    {
        /* This must be successful */
        if(Top_Flag!=0)
            RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PGTBL_SIZE_TOP(Num_Order))==0);
        else
            RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PGTBL_SIZE_NOM(Num_Order))==0);
ffffffff80217e80:	48 89 de             	mov    %rbx,%rsi
ffffffff80217e83:	48 89 ef             	mov    %rbp,%rdi
ffffffff80217e86:	e8 35 f3 ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
ffffffff80217e8b:	48 85 c0             	test   %rax,%rax
ffffffff80217e8e:	74 6c                	je     ffffffff80217efc <_RME_Pgtbl_Crt+0x43c>
ffffffff80217e90:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80217e97:	e8 74 f0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217e9c:	48 c7 c7 70 ef 21 80 	mov    $0xffffffff8021ef70,%rdi
ffffffff80217ea3:	e8 68 f0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217ea8:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80217eaf:	e8 5c f0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217eb4:	bf 60 01 00 00       	mov    $0x160,%edi
ffffffff80217eb9:	e8 12 ee ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80217ebe:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80217ec5:	e8 46 f0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217eca:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80217ed1:	e8 3a f0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217ed6:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80217edd:	e8 2e f0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217ee2:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff80217ee9:	e8 22 f0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217eee:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80217ef5:	e8 16 f0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80217efa:	eb fe                	jmp    ffffffff80217efa <_RME_Pgtbl_Crt+0x43a>
        
        /* Unsuccessful. Revert operations */
        Pgtbl_Crt->Head.Type_Ref=0;
ffffffff80217efc:	49 c7 07 00 00 00 00 	movq   $0x0,(%r15)
        return RME_ERR_PGT_HW;
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff80217f03:	48 83 c4 28          	add    $0x28,%rsp
        else
            RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PGTBL_SIZE_NOM(Num_Order))==0);
        
        /* Unsuccessful. Revert operations */
        Pgtbl_Crt->Head.Type_Ref=0;
        return RME_ERR_PGT_HW;
ffffffff80217f07:	48 c7 c0 f3 ff ff ff 	mov    $0xfffffffffffffff3,%rax
    }
    
    Pgtbl_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PGTBL,0);
    return 0;
}
ffffffff80217f0e:	5b                   	pop    %rbx
ffffffff80217f0f:	5d                   	pop    %rbp
ffffffff80217f10:	41 5c                	pop    %r12
ffffffff80217f12:	41 5d                	pop    %r13
ffffffff80217f14:	41 5e                	pop    %r14
ffffffff80217f16:	41 5f                	pop    %r15
ffffffff80217f18:	c3                   	retq   
    /* Check if these parameters are feasible */
    if(__RME_Pgtbl_Check(Start_Addr, Top_Flag, Size_Order, Num_Order)!=0)
        return RME_ERR_PGT_HW;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80217f19:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80217f20:	e9 b7 fe ff ff       	jmpq   ffffffff80217ddc <_RME_Pgtbl_Crt+0x31c>
ffffffff80217f25:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80217f2c:	e9 ab fe ff ff       	jmpq   ffffffff80217ddc <_RME_Pgtbl_Crt+0x31c>
    }
    else
    {
        if(_RME_Kotbl_Mark(Vaddr, RME_PGTBL_SIZE_NOM(Num_Order))!=0)
        {
            Pgtbl_Crt->Head.Type_Ref=0;
ffffffff80217f31:	49 c7 07 00 00 00 00 	movq   $0x0,(%r15)
            return RME_ERR_CAP_KOTBL;
ffffffff80217f38:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff80217f3f:	e9 98 fe ff ff       	jmpq   ffffffff80217ddc <_RME_Pgtbl_Crt+0x31c>
        RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PGTBL,Vaddr,RME_PGTBL_SIZE_NOM(Num_Order));
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Crt);
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Pgtbl_Crt,Type_Ref);
ffffffff80217f44:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff80217f4b:	e9 8c fe ff ff       	jmpq   ffffffff80217ddc <_RME_Pgtbl_Crt+0x31c>

ffffffff80217f50 <_RME_Pgtbl_Del>:
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80217f50:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80217f56:	0f 85 24 01 00 00    	jne    ffffffff80218080 <_RME_Pgtbl_Del+0x130>
ffffffff80217f5c:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff80217f60:	0f 86 2d 02 00 00    	jbe    ffffffff80218193 <_RME_Pgtbl_Del+0x243>
ffffffff80217f66:	48 89 f0             	mov    %rsi,%rax
ffffffff80217f69:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80217f6d:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80217f71:	48 8b 08             	mov    (%rax),%rcx
ffffffff80217f74:	48 89 ce             	mov    %rcx,%rsi
ffffffff80217f77:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80217f7b:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80217f7f:	0f 85 63 01 00 00    	jne    ffffffff802180e8 <_RME_Pgtbl_Del+0x198>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff80217f85:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff80217f8c:	80 00 00 
ffffffff80217f8f:	48 85 f1             	test   %rsi,%rcx
ffffffff80217f92:	0f 85 06 02 00 00    	jne    ffffffff8021819e <_RME_Pgtbl_Del+0x24e>
ffffffff80217f98:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80217f9c:	0f 84 05 02 00 00    	je     ffffffff802181a7 <_RME_Pgtbl_Del+0x257>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Del);
ffffffff80217fa2:	48 39 50 28          	cmp    %rdx,0x28(%rax)
ffffffff80217fa6:	0f 86 e7 01 00 00    	jbe    ffffffff80218193 <_RME_Pgtbl_Del+0x243>
                                page table capability to be in. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Pgtbl_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Pgtbl)
{
ffffffff80217fac:	41 54                	push   %r12
ffffffff80217fae:	55                   	push   %rbp
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Del);
ffffffff80217faf:	48 c1 e2 06          	shl    $0x6,%rdx
                                page table capability to be in. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Pgtbl_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Pgtbl)
{
ffffffff80217fb3:	53                   	push   %rbx
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Del);
ffffffff80217fb4:	48 89 d3             	mov    %rdx,%rbx
                                page table capability to be in. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Pgtbl_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Pgtbl)
{
ffffffff80217fb7:	48 83 ec 10          	sub    $0x10,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Del);
ffffffff80217fbb:	48 03 58 18          	add    0x18(%rax),%rbx
    /* Delete check */
    RME_CAP_DEL_CHECK(Pgtbl_Del,Type_Ref,RME_CAP_PGTBL);
ffffffff80217fbf:	48 8b 03             	mov    (%rbx),%rax
ffffffff80217fc2:	48 85 f0             	test   %rsi,%rax
ffffffff80217fc5:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80217fca:	0f 85 e0 01 00 00    	jne    ffffffff802181b0 <_RME_Pgtbl_Del+0x260>
ffffffff80217fd0:	48 89 c2             	mov    %rax,%rdx
ffffffff80217fd3:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80217fd7:	48 85 d2             	test   %rdx,%rdx
ffffffff80217fda:	0f 84 e3 01 00 00    	je     ffffffff802181c3 <_RME_Pgtbl_Del+0x273>
ffffffff80217fe0:	48 83 fa 04          	cmp    $0x4,%rdx
ffffffff80217fe4:	0f 85 ec 01 00 00    	jne    ffffffff802181d6 <_RME_Pgtbl_Del+0x286>
ffffffff80217fea:	48 8b 15 0f b0 00 00 	mov    0xb00f(%rip),%rdx        # ffffffff80223000 <RME_Timestamp>
ffffffff80217ff1:	48 2b 53 20          	sub    0x20(%rbx),%rdx
ffffffff80217ff5:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80217ff9:	0f 86 ea 01 00 00    	jbe    ffffffff802181e9 <_RME_Pgtbl_Del+0x299>
ffffffff80217fff:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffff,%rdx
ffffffff80218006:	7f 00 00 
ffffffff80218009:	48 85 d0             	test   %rdx,%rax
ffffffff8021800c:	0f 85 ea 01 00 00    	jne    ffffffff802181fc <_RME_Pgtbl_Del+0x2ac>
ffffffff80218012:	48 83 7b 08 00       	cmpq   $0x0,0x8(%rbx)
ffffffff80218017:	0f 85 df 01 00 00    	jne    ffffffff802181fc <_RME_Pgtbl_Del+0x2ac>
     * 1> It is not referenced by any higher-level page tables.
     * 2> It does not reference any lower-level page tables.
     * If the driver layer does not conform to this, the deletion of page table is
     * not guaranteed to main kernel consistency, and such consistency must be maintained
     * by the user-level. */
    if(__RME_Pgtbl_Del_Check(Pgtbl_Del)!=0)
ffffffff8021801d:	48 89 df             	mov    %rbx,%rdi
ffffffff80218020:	e8 ab c3 ff ff       	callq  ffffffff802143d0 <__RME_Pgtbl_Del_Check>
ffffffff80218025:	48 85 c0             	test   %rax,%rax
ffffffff80218028:	0f 85 36 01 00 00    	jne    ffffffff80218164 <_RME_Pgtbl_Del+0x214>
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Pgtbl_Del,ptr_t);
    if(((Pgtbl_Del->Start_Addr)&RME_PGTBL_TOP)!=0)
        Size=RME_PGTBL_SIZE_TOP(RME_PGTBL_NUMORD(Pgtbl_Del->Size_Num_Order));
ffffffff8021802e:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff80218032:	b8 01 00 00 00       	mov    $0x1,%eax
    else
        Size=RME_PGTBL_SIZE_NOM(RME_PGTBL_NUMORD(Pgtbl_Del->Size_Num_Order));
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
ffffffff80218037:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021803c:	31 d2                	xor    %edx,%edx
ffffffff8021803e:	48 89 df             	mov    %rbx,%rdi
        RME_CAP_DEFROST(Pgtbl_Del,Type_Ref);
        return RME_ERR_PGT_HW;
    }
    
    /* Remember these two variables for deletion */
    Object=RME_CAP_GETOBJ(Pgtbl_Del,ptr_t);
ffffffff80218041:	4c 8b 63 18          	mov    0x18(%rbx),%r12
    if(((Pgtbl_Del->Start_Addr)&RME_PGTBL_TOP)!=0)
        Size=RME_PGTBL_SIZE_TOP(RME_PGTBL_NUMORD(Pgtbl_Del->Size_Num_Order));
    else
        Size=RME_PGTBL_SIZE_NOM(RME_PGTBL_NUMORD(Pgtbl_Del->Size_Num_Order));
ffffffff80218045:	d3 e0                	shl    %cl,%eax
ffffffff80218047:	48 63 e8             	movslq %eax,%rbp
ffffffff8021804a:	48 c1 e5 03          	shl    $0x3,%rbp
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
ffffffff8021804e:	e8 2e 38 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80218053:	48 85 c0             	test   %rax,%rax
ffffffff80218056:	0f 84 67 01 00 00    	je     ffffffff802181c3 <_RME_Pgtbl_Del+0x273>
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
ffffffff8021805c:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021805f:	4c 89 e7             	mov    %r12,%rdi
ffffffff80218062:	e8 59 f1 ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
    
    return 0;
ffffffff80218067:	31 d2                	xor    %edx,%edx
        Size=RME_PGTBL_SIZE_NOM(RME_PGTBL_NUMORD(Pgtbl_Del->Size_Num_Order));
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
ffffffff80218069:	48 85 c0             	test   %rax,%rax
ffffffff8021806c:	0f 84 86 00 00 00    	je     ffffffff802180f8 <_RME_Pgtbl_Del+0x1a8>
    
    return 0;
}
ffffffff80218072:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80218076:	48 89 d0             	mov    %rdx,%rax
ffffffff80218079:	5b                   	pop    %rbx
ffffffff8021807a:	5d                   	pop    %rbp
ffffffff8021807b:	41 5c                	pop    %r12
ffffffff8021807d:	c3                   	retq   
ffffffff8021807e:	66 90                	xchg   %ax,%ax
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80218080:	48 89 f0             	mov    %rsi,%rax
ffffffff80218083:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff80218087:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff8021808b:	0f 83 02 01 00 00    	jae    ffffffff80218193 <_RME_Pgtbl_Del+0x243>
ffffffff80218091:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80218095:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80218099:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff802180a0:	80 00 00 
ffffffff802180a3:	48 8b 08             	mov    (%rax),%rcx
ffffffff802180a6:	48 85 f9             	test   %rdi,%rcx
ffffffff802180a9:	0f 85 ef 00 00 00    	jne    ffffffff8021819e <_RME_Pgtbl_Del+0x24e>
ffffffff802180af:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802180b3:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802180b7:	75 2f                	jne    ffffffff802180e8 <_RME_Pgtbl_Del+0x198>
ffffffff802180b9:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff802180bf:	48 3b 70 28          	cmp    0x28(%rax),%rsi
ffffffff802180c3:	0f 83 ca 00 00 00    	jae    ffffffff80218193 <_RME_Pgtbl_Del+0x243>
ffffffff802180c9:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802180cd:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff802180d1:	48 89 f0             	mov    %rsi,%rax
ffffffff802180d4:	48 8b 08             	mov    (%rax),%rcx
ffffffff802180d7:	48 89 ce             	mov    %rcx,%rsi
ffffffff802180da:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802180de:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802180e2:	0f 84 9d fe ff ff    	je     ffffffff80217f85 <_RME_Pgtbl_Del+0x35>
ffffffff802180e8:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
ffffffff802180ef:	e9 a6 00 00 00       	jmpq   ffffffff8021819a <_RME_Pgtbl_Del+0x24a>
ffffffff802180f4:	0f 1f 40 00          	nopl   0x0(%rax)
        Size=RME_PGTBL_SIZE_NOM(RME_PGTBL_NUMORD(Pgtbl_Del->Size_Num_Order));
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
ffffffff802180f8:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff802180ff:	e8 0c ee ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218104:	48 c7 c7 70 ef 21 80 	mov    $0xffffffff8021ef70,%rdi
ffffffff8021810b:	e8 00 ee ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218110:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80218117:	e8 f4 ed ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021811c:	bf a4 01 00 00       	mov    $0x1a4,%edi
ffffffff80218121:	e8 aa eb ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80218126:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021812d:	e8 de ed ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218132:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80218139:	e8 d2 ed ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021813e:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80218145:	e8 c6 ed ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021814a:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff80218151:	e8 ba ed ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218156:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021815d:	e8 ae ed ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218162:	eb fe                	jmp    ffffffff80218162 <_RME_Pgtbl_Del+0x212>
     * If the driver layer does not conform to this, the deletion of page table is
     * not guaranteed to main kernel consistency, and such consistency must be maintained
     * by the user-level. */
    if(__RME_Pgtbl_Del_Check(Pgtbl_Del)!=0)
    {
        RME_CAP_DEFROST(Pgtbl_Del,Type_Ref);
ffffffff80218164:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff8021816b:	7f ff ff 
ffffffff8021816e:	48 23 54 24 08       	and    0x8(%rsp),%rdx
ffffffff80218173:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80218178:	48 89 df             	mov    %rbx,%rdi
ffffffff8021817b:	e8 01 37 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
    
    return 0;
}
ffffffff80218180:	48 83 c4 10          	add    $0x10,%rsp
     * not guaranteed to main kernel consistency, and such consistency must be maintained
     * by the user-level. */
    if(__RME_Pgtbl_Del_Check(Pgtbl_Del)!=0)
    {
        RME_CAP_DEFROST(Pgtbl_Del,Type_Ref);
        return RME_ERR_PGT_HW;
ffffffff80218184:	48 c7 c2 f3 ff ff ff 	mov    $0xfffffffffffffff3,%rdx
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
    
    return 0;
}
ffffffff8021818b:	5b                   	pop    %rbx
ffffffff8021818c:	48 89 d0             	mov    %rdx,%rax
ffffffff8021818f:	5d                   	pop    %rbp
ffffffff80218190:	41 5c                	pop    %r12
ffffffff80218192:	c3                   	retq   
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80218193:	48 c7 c2 fd ff ff ff 	mov    $0xfffffffffffffffd,%rdx
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
    
    return 0;
}
ffffffff8021819a:	48 89 d0             	mov    %rdx,%rax
ffffffff8021819d:	c3                   	retq   
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021819e:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
ffffffff802181a5:	eb f3                	jmp    ffffffff8021819a <_RME_Pgtbl_Del+0x24a>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff802181a7:	48 c7 c2 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rdx
ffffffff802181ae:	eb ea                	jmp    ffffffff8021819a <_RME_Pgtbl_Del+0x24a>
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
    
    return 0;
}
ffffffff802181b0:	48 83 c4 10          	add    $0x10,%rsp
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff802181b4:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
    
    return 0;
}
ffffffff802181bb:	5b                   	pop    %rbx
ffffffff802181bc:	48 89 d0             	mov    %rdx,%rax
ffffffff802181bf:	5d                   	pop    %rbp
ffffffff802181c0:	41 5c                	pop    %r12
ffffffff802181c2:	c3                   	retq   
ffffffff802181c3:	48 83 c4 10          	add    $0x10,%rsp
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Pgtbl_Del,Type_Ref,RME_CAP_PGTBL);
ffffffff802181c7:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
    
    return 0;
}
ffffffff802181ce:	5b                   	pop    %rbx
ffffffff802181cf:	48 89 d0             	mov    %rdx,%rax
ffffffff802181d2:	5d                   	pop    %rbp
ffffffff802181d3:	41 5c                	pop    %r12
ffffffff802181d5:	c3                   	retq   
ffffffff802181d6:	48 83 c4 10          	add    $0x10,%rsp
    /* These are used for deletion */
    ptr_t Object;
    ptr_t Size;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff802181da:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
    
    return 0;
}
ffffffff802181e1:	5b                   	pop    %rbx
ffffffff802181e2:	48 89 d0             	mov    %rdx,%rax
ffffffff802181e5:	5d                   	pop    %rbp
ffffffff802181e6:	41 5c                	pop    %r12
ffffffff802181e8:	c3                   	retq   
ffffffff802181e9:	48 83 c4 10          	add    $0x10,%rsp
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Pgtbl_Del,Type_Ref,RME_CAP_PGTBL);
ffffffff802181ed:	48 c7 c2 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rdx
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
    
    return 0;
}
ffffffff802181f4:	5b                   	pop    %rbx
ffffffff802181f5:	48 89 d0             	mov    %rdx,%rax
ffffffff802181f8:	5d                   	pop    %rbp
ffffffff802181f9:	41 5c                	pop    %r12
ffffffff802181fb:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Pgtbl_Del,Type_Ref,RME_CAP_PGTBL);
ffffffff802181fc:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80218201:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff80218208:	7f ff ff 
ffffffff8021820b:	48 89 df             	mov    %rbx,%rdi
ffffffff8021820e:	48 21 c2             	and    %rax,%rdx
ffffffff80218211:	e8 6b 36 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
    
    return 0;
}
ffffffff80218216:	48 83 c4 10          	add    $0x10,%rsp
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Pgtbl,struct RME_Cap_Pgtbl*,Pgtbl_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Pgtbl_Del,Type_Ref,RME_CAP_PGTBL);
ffffffff8021821a:	48 c7 c2 fa ff ff ff 	mov    $0xfffffffffffffffa,%rdx
    RME_CAP_REMDEL(Pgtbl_Del,Type_Ref);
    /* Try to erase the area - This must be successful */
    RME_ASSERT(_RME_Kotbl_Erase(Object, Size));
    
    return 0;
}
ffffffff80218221:	5b                   	pop    %rbx
ffffffff80218222:	48 89 d0             	mov    %rdx,%rax
ffffffff80218225:	5d                   	pop    %rbp
ffffffff80218226:	41 5c                	pop    %r12
ffffffff80218228:	c3                   	retq   
ffffffff80218229:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80218230 <_RME_Pgtbl_Add>:
Return      : ret_t - If the unmapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Pgtbl_Add(struct RME_Cap_Captbl* Captbl, 
                     cid_t Cap_Pgtbl_Dst, ptr_t Pos_Dst, ptr_t Flags_Dst,
                     cid_t Cap_Pgtbl_Src, ptr_t Pos_Src, ptr_t Index)
{
ffffffff80218230:	41 54                	push   %r12
ffffffff80218232:	55                   	push   %rbp
ffffffff80218233:	49 89 ca             	mov    %rcx,%r10
ffffffff80218236:	53                   	push   %rbx
ffffffff80218237:	48 83 ec 10          	sub    $0x10,%rsp
    ptr_t Paddr_Dst;
    ptr_t Paddr_Src;
    ptr_t Flags_Src;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Dst,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Dst);
ffffffff8021823b:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80218241:	0f 85 c1 00 00 00    	jne    ffffffff80218308 <_RME_Pgtbl_Add+0xd8>
ffffffff80218247:	48 8b 6f 28          	mov    0x28(%rdi),%rbp
ffffffff8021824b:	48 39 f5             	cmp    %rsi,%rbp
ffffffff8021824e:	0f 86 b4 02 00 00    	jbe    ffffffff80218508 <_RME_Pgtbl_Add+0x2d8>
ffffffff80218254:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
ffffffff80218258:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021825c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218263:	4a 8d 1c 1e          	lea    (%rsi,%r11,1),%rbx
ffffffff80218267:	48 8b 0b             	mov    (%rbx),%rcx
ffffffff8021826a:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021826d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80218271:	48 83 fe 04          	cmp    $0x4,%rsi
ffffffff80218275:	0f 85 7e 02 00 00    	jne    ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Src,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Src);
ffffffff8021827b:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff80218282:	0f 84 09 01 00 00    	je     ffffffff80218391 <_RME_Pgtbl_Add+0x161>
ffffffff80218288:	4c 89 c7             	mov    %r8,%rdi
ffffffff8021828b:	48 c1 ff 10          	sar    $0x10,%rdi
ffffffff8021828f:	48 39 ef             	cmp    %rbp,%rdi
ffffffff80218292:	0f 83 70 02 00 00    	jae    ffffffff80218508 <_RME_Pgtbl_Add+0x2d8>
ffffffff80218298:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff8021829c:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff802182a3:	80 00 00 
ffffffff802182a6:	4c 01 df             	add    %r11,%rdi
ffffffff802182a9:	48 8b 07             	mov    (%rdi),%rax
ffffffff802182ac:	48 85 f0             	test   %rsi,%rax
ffffffff802182af:	0f 85 7b 02 00 00    	jne    ffffffff80218530 <_RME_Pgtbl_Add+0x300>
ffffffff802182b5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802182b9:	48 89 c6             	mov    %rax,%rsi
    ptr_t Paddr_Dst;
    ptr_t Paddr_Src;
    ptr_t Flags_Src;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Dst,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Dst);
ffffffff802182bc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Src,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Src);
ffffffff802182c3:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802182c7:	0f 85 2c 02 00 00    	jne    ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
ffffffff802182cd:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff802182d4:	4c 3b 47 28          	cmp    0x28(%rdi),%r8
ffffffff802182d8:	0f 83 2a 02 00 00    	jae    ffffffff80218508 <_RME_Pgtbl_Add+0x2d8>
ffffffff802182de:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff802182e2:	4c 03 47 18          	add    0x18(%rdi),%r8
ffffffff802182e6:	49 8b 30             	mov    (%r8),%rsi
ffffffff802182e9:	4c 89 c7             	mov    %r8,%rdi
ffffffff802182ec:	49 89 f0             	mov    %rsi,%r8
ffffffff802182ef:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff802182f3:	49 83 f8 04          	cmp    $0x4,%r8
ffffffff802182f7:	0f 84 c0 00 00 00    	je     ffffffff802183bd <_RME_Pgtbl_Add+0x18d>
ffffffff802182fd:	e9 f7 01 00 00       	jmpq   ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
ffffffff80218302:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    ptr_t Paddr_Dst;
    ptr_t Paddr_Src;
    ptr_t Flags_Src;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Dst,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Dst);
ffffffff80218308:	48 8b 6f 28          	mov    0x28(%rdi),%rbp
ffffffff8021830c:	48 89 f1             	mov    %rsi,%rcx
ffffffff8021830f:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff80218313:	48 39 e9             	cmp    %rbp,%rcx
ffffffff80218316:	0f 83 ec 01 00 00    	jae    ffffffff80218508 <_RME_Pgtbl_Add+0x2d8>
ffffffff8021831c:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
ffffffff80218320:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80218324:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021832b:	80 00 00 
ffffffff8021832e:	4c 01 d9             	add    %r11,%rcx
ffffffff80218331:	48 8b 01             	mov    (%rcx),%rax
ffffffff80218334:	48 85 f8             	test   %rdi,%rax
ffffffff80218337:	0f 85 f3 01 00 00    	jne    ffffffff80218530 <_RME_Pgtbl_Add+0x300>
ffffffff8021833d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218341:	48 89 c7             	mov    %rax,%rdi
ffffffff80218344:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021834b:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021834f:	0f 85 a4 01 00 00    	jne    ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
ffffffff80218355:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021835b:	48 3b 71 28          	cmp    0x28(%rcx),%rsi
ffffffff8021835f:	0f 83 a3 01 00 00    	jae    ffffffff80218508 <_RME_Pgtbl_Add+0x2d8>
ffffffff80218365:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80218369:	48 89 f3             	mov    %rsi,%rbx
ffffffff8021836c:	48 03 59 18          	add    0x18(%rcx),%rbx
ffffffff80218370:	48 8b 0b             	mov    (%rbx),%rcx
ffffffff80218373:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218376:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021837a:	48 83 fe 04          	cmp    $0x4,%rsi
ffffffff8021837e:	0f 85 75 01 00 00    	jne    ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Src,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Src);
ffffffff80218384:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8021838b:	0f 85 f7 fe ff ff    	jne    ffffffff80218288 <_RME_Pgtbl_Add+0x58>
ffffffff80218391:	49 39 e8             	cmp    %rbp,%r8
ffffffff80218394:	0f 83 6e 01 00 00    	jae    ffffffff80218508 <_RME_Pgtbl_Add+0x2d8>
ffffffff8021839a:	49 c1 e0 06          	shl    $0x6,%r8
    ptr_t Paddr_Dst;
    ptr_t Paddr_Src;
    ptr_t Flags_Src;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Dst,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Dst);
ffffffff8021839e:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Src,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Src);
ffffffff802183a5:	4b 8d 3c 18          	lea    (%r8,%r11,1),%rdi
ffffffff802183a9:	48 8b 37             	mov    (%rdi),%rsi
ffffffff802183ac:	49 89 f0             	mov    %rsi,%r8
ffffffff802183af:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff802183b3:	49 83 f8 04          	cmp    $0x4,%r8
ffffffff802183b7:	0f 85 3c 01 00 00    	jne    ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgtbl_Dst, RME_PGTBL_FLAG_ADD_DST);
ffffffff802183bd:	49 b8 00 00 00 00 00 	movabs $0x800000000000,%r8
ffffffff802183c4:	80 00 00 
ffffffff802183c7:	4c 85 c1             	test   %r8,%rcx
ffffffff802183ca:	0f 85 60 01 00 00    	jne    ffffffff80218530 <_RME_Pgtbl_Add+0x300>
ffffffff802183d0:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff802183d4:	a8 02                	test   $0x2,%al
ffffffff802183d6:	0f 84 44 01 00 00    	je     ffffffff80218520 <_RME_Pgtbl_Add+0x2f0>
    RME_CAP_CHECK(Pgtbl_Src, RME_PGTBL_FLAG_ADD_SRC);
ffffffff802183dc:	4c 85 c6             	test   %r8,%rsi
ffffffff802183df:	0f 85 4b 01 00 00    	jne    ffffffff80218530 <_RME_Pgtbl_Add+0x300>
ffffffff802183e5:	48 8b 4f 10          	mov    0x10(%rdi),%rcx
ffffffff802183e9:	f6 c1 01             	test   $0x1,%cl
ffffffff802183ec:	0f 84 2e 01 00 00    	je     ffffffff80218520 <_RME_Pgtbl_Add+0x2f0>
    /* Check the operation range - This is page table specific */
    if((Pos_Dst>RME_PGTBL_FLAG_HIGH(Pgtbl_Dst->Head.Flags))||
ffffffff802183f2:	48 89 c6             	mov    %rax,%rsi
ffffffff802183f5:	48 c1 ee 24          	shr    $0x24,%rsi
ffffffff802183f9:	48 39 d6             	cmp    %rdx,%rsi
ffffffff802183fc:	0f 82 1e 01 00 00    	jb     ffffffff80218520 <_RME_Pgtbl_Add+0x2f0>
ffffffff80218402:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80218406:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8021840b:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021840e:	0f 82 0c 01 00 00    	jb     ffffffff80218520 <_RME_Pgtbl_Add+0x2f0>
       (Pos_Dst<RME_PGTBL_FLAG_LOW(Pgtbl_Dst->Head.Flags))||
ffffffff80218414:	48 89 c8             	mov    %rcx,%rax
ffffffff80218417:	48 c1 e8 24          	shr    $0x24,%rax
ffffffff8021841b:	4c 39 c8             	cmp    %r9,%rax
ffffffff8021841e:	0f 82 fc 00 00 00    	jb     ffffffff80218520 <_RME_Pgtbl_Add+0x2f0>
       (Pos_Src>RME_PGTBL_FLAG_HIGH(Pgtbl_Src->Head.Flags))||
ffffffff80218424:	48 c1 e9 08          	shr    $0x8,%rcx
ffffffff80218428:	81 e1 ff ff ff 0f    	and    $0xfffffff,%ecx
ffffffff8021842e:	49 39 c9             	cmp    %rcx,%r9
ffffffff80218431:	0f 82 e9 00 00 00    	jb     ffffffff80218520 <_RME_Pgtbl_Add+0x2f0>
       (Pos_Src<RME_PGTBL_FLAG_LOW(Pgtbl_Src->Head.Flags)))
        return RME_ERR_CAP_FLAG;
            
    /* See if the size order relationship is correct */
    if(RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order)>RME_PGTBL_SIZEORD(Pgtbl_Src->Size_Num_Order))
ffffffff80218437:	48 8b 4b 28          	mov    0x28(%rbx),%rcx
ffffffff8021843b:	48 8b 47 28          	mov    0x28(%rdi),%rax
ffffffff8021843f:	49 89 c8             	mov    %rcx,%r8
ffffffff80218442:	49 89 c3             	mov    %rax,%r11
ffffffff80218445:	49 c1 e8 20          	shr    $0x20,%r8
ffffffff80218449:	49 c1 eb 20          	shr    $0x20,%r11
ffffffff8021844d:	4d 39 d8             	cmp    %r11,%r8
ffffffff80218450:	0f 87 ea 00 00 00    	ja     ffffffff80218540 <_RME_Pgtbl_Add+0x310>
        return RME_ERR_PGT_ADDR;
    /* See if the position indices are out of range */
    if(((Pos_Dst>>RME_PGTBL_NUMORD(Pgtbl_Dst->Size_Num_Order))!=0)||
ffffffff80218456:	48 89 d6             	mov    %rdx,%rsi
ffffffff80218459:	48 d3 ee             	shr    %cl,%rsi
ffffffff8021845c:	48 85 f6             	test   %rsi,%rsi
ffffffff8021845f:	0f 85 db 00 00 00    	jne    ffffffff80218540 <_RME_Pgtbl_Add+0x310>
ffffffff80218465:	4c 89 ce             	mov    %r9,%rsi
ffffffff80218468:	89 c1                	mov    %eax,%ecx
ffffffff8021846a:	48 d3 ee             	shr    %cl,%rsi
ffffffff8021846d:	48 85 f6             	test   %rsi,%rsi
ffffffff80218470:	0f 85 ca 00 00 00    	jne    ffffffff80218540 <_RME_Pgtbl_Add+0x310>
       ((Pos_Src>>RME_PGTBL_NUMORD(Pgtbl_Src->Size_Num_Order))!=0))
        return RME_ERR_PGT_ADDR;
    /* See if the source subposition index is out of range */
    if(RME_POW2(RME_PGTBL_SIZEORD(Pgtbl_Src->Size_Num_Order))<=
ffffffff80218476:	48 8b 44 24 30       	mov    0x30(%rsp),%rax
ffffffff8021847b:	44 89 d9             	mov    %r11d,%ecx
ffffffff8021847e:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80218483:	48 d3 e6             	shl    %cl,%rsi
ffffffff80218486:	44 89 c1             	mov    %r8d,%ecx
ffffffff80218489:	48 d3 e0             	shl    %cl,%rax
ffffffff8021848c:	48 89 c1             	mov    %rax,%rcx
       (Pos_Src<RME_PGTBL_FLAG_LOW(Pgtbl_Src->Head.Flags)))
        return RME_ERR_CAP_FLAG;
            
    /* See if the size order relationship is correct */
    if(RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order)>RME_PGTBL_SIZEORD(Pgtbl_Src->Size_Num_Order))
        return RME_ERR_PGT_ADDR;
ffffffff8021848f:	48 c7 c0 f5 ff ff ff 	mov    $0xfffffffffffffff5,%rax
    /* See if the position indices are out of range */
    if(((Pos_Dst>>RME_PGTBL_NUMORD(Pgtbl_Dst->Size_Num_Order))!=0)||
       ((Pos_Src>>RME_PGTBL_NUMORD(Pgtbl_Src->Size_Num_Order))!=0))
        return RME_ERR_PGT_ADDR;
    /* See if the source subposition index is out of range */
    if(RME_POW2(RME_PGTBL_SIZEORD(Pgtbl_Src->Size_Num_Order))<=
ffffffff80218496:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80218499:	76 5e                	jbe    ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
       (Index<<RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order)))
        return RME_ERR_PGT_ADDR;
    /* Get the physical address and RME standard flags of that source page */
    if(__RME_Pgtbl_Lookup(Pgtbl_Src, Pos_Src, &Paddr_Src, &Flags_Src)!=0)
ffffffff8021849b:	48 8d 4c 24 08       	lea    0x8(%rsp),%rcx
ffffffff802184a0:	4c 89 ce             	mov    %r9,%rsi
ffffffff802184a3:	48 89 d5             	mov    %rdx,%rbp
ffffffff802184a6:	48 89 e2             	mov    %rsp,%rdx
ffffffff802184a9:	4d 89 d4             	mov    %r10,%r12
ffffffff802184ac:	e8 ff c1 ff ff       	callq  ffffffff802146b0 <__RME_Pgtbl_Lookup>
ffffffff802184b1:	48 85 c0             	test   %rax,%rax
ffffffff802184b4:	0f 85 96 00 00 00    	jne    ffffffff80218550 <_RME_Pgtbl_Add+0x320>
        return RME_ERR_PGT_HW;
    
    /* Calculate the destination physical address */
    Paddr_Dst=Paddr_Src+(Index<<RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order));
ffffffff802184ba:	8b 4b 2c             	mov    0x2c(%rbx),%ecx
    if(Paddr_Dst!=((Pos_Dst<<RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order))+
                   RME_PGTBL_START(Pgtbl_Dst->Start_Addr)))
        return RME_ERR_PGT_ADDR;
#endif
    /* Analyze the flags - we do not allow expansion of access permissions */
    if(((Flags_Dst)&(~Flags_Src))!=0)
ffffffff802184bd:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
        return RME_ERR_PGT_PERM;
ffffffff802184c2:	48 c7 c0 f2 ff ff ff 	mov    $0xfffffffffffffff2,%rax
    /* Get the physical address and RME standard flags of that source page */
    if(__RME_Pgtbl_Lookup(Pgtbl_Src, Pos_Src, &Paddr_Src, &Flags_Src)!=0)
        return RME_ERR_PGT_HW;
    
    /* Calculate the destination physical address */
    Paddr_Dst=Paddr_Src+(Index<<RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order));
ffffffff802184c9:	48 8b 74 24 30       	mov    0x30(%rsp),%rsi
    if(Paddr_Dst!=((Pos_Dst<<RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order))+
                   RME_PGTBL_START(Pgtbl_Dst->Start_Addr)))
        return RME_ERR_PGT_ADDR;
#endif
    /* Analyze the flags - we do not allow expansion of access permissions */
    if(((Flags_Dst)&(~Flags_Src))!=0)
ffffffff802184ce:	48 f7 d2             	not    %rdx
    /* Get the physical address and RME standard flags of that source page */
    if(__RME_Pgtbl_Lookup(Pgtbl_Src, Pos_Src, &Paddr_Src, &Flags_Src)!=0)
        return RME_ERR_PGT_HW;
    
    /* Calculate the destination physical address */
    Paddr_Dst=Paddr_Src+(Index<<RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order));
ffffffff802184d1:	48 d3 e6             	shl    %cl,%rsi
ffffffff802184d4:	48 03 34 24          	add    (%rsp),%rsi
    if(Paddr_Dst!=((Pos_Dst<<RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order))+
                   RME_PGTBL_START(Pgtbl_Dst->Start_Addr)))
        return RME_ERR_PGT_ADDR;
#endif
    /* Analyze the flags - we do not allow expansion of access permissions */
    if(((Flags_Dst)&(~Flags_Src))!=0)
ffffffff802184d8:	4c 85 e2             	test   %r12,%rdx
ffffffff802184db:	75 1c                	jne    ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
    /* Actually do the mapping - This work is passed down to the driver layer. 
     * Successful or not will be determined by the driver layer. Under a multi-core
     * environment, the driver layer need to determine whether two cores are modifying
     * a same page, and do corresponding CAS if such operations are to be avoided.
     */
    if(__RME_Pgtbl_Page_Map(Pgtbl_Dst, Paddr_Dst, Pos_Dst, Flags_Dst)!=0)
ffffffff802184dd:	4c 89 e1             	mov    %r12,%rcx
ffffffff802184e0:	48 89 ea             	mov    %rbp,%rdx
ffffffff802184e3:	48 89 df             	mov    %rbx,%rdi
ffffffff802184e6:	e8 35 bf ff ff       	callq  ffffffff80214420 <__RME_Pgtbl_Page_Map>
        return RME_ERR_PGT_MAP;
ffffffff802184eb:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff802184ef:	48 19 c0             	sbb    %rax,%rax
ffffffff802184f2:	48 f7 d0             	not    %rax
ffffffff802184f5:	48 83 e0 f4          	and    $0xfffffffffffffff4,%rax
    
    return 0;
}
ffffffff802184f9:	48 83 c4 10          	add    $0x10,%rsp
ffffffff802184fd:	5b                   	pop    %rbx
ffffffff802184fe:	5d                   	pop    %rbp
ffffffff802184ff:	41 5c                	pop    %r12
ffffffff80218501:	c3                   	retq   
ffffffff80218502:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80218508:	48 83 c4 10          	add    $0x10,%rsp
    ptr_t Paddr_Dst;
    ptr_t Paddr_Src;
    ptr_t Flags_Src;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Dst,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Dst);
ffffffff8021850c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
     */
    if(__RME_Pgtbl_Page_Map(Pgtbl_Dst, Paddr_Dst, Pos_Dst, Flags_Dst)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff80218513:	5b                   	pop    %rbx
ffffffff80218514:	5d                   	pop    %rbp
ffffffff80218515:	41 5c                	pop    %r12
ffffffff80218517:	c3                   	retq   
ffffffff80218518:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021851f:	00 
ffffffff80218520:	48 83 c4 10          	add    $0x10,%rsp
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Dst,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Dst);
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Src,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Src);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgtbl_Dst, RME_PGTBL_FLAG_ADD_DST);
ffffffff80218524:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
     */
    if(__RME_Pgtbl_Page_Map(Pgtbl_Dst, Paddr_Dst, Pos_Dst, Flags_Dst)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff8021852b:	5b                   	pop    %rbx
ffffffff8021852c:	5d                   	pop    %rbp
ffffffff8021852d:	41 5c                	pop    %r12
ffffffff8021852f:	c3                   	retq   
    ptr_t Paddr_Dst;
    ptr_t Paddr_Src;
    ptr_t Flags_Src;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Dst,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Dst);
ffffffff80218530:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218537:	eb c0                	jmp    ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
ffffffff80218539:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
       (Pos_Src<RME_PGTBL_FLAG_LOW(Pgtbl_Src->Head.Flags)))
        return RME_ERR_CAP_FLAG;
            
    /* See if the size order relationship is correct */
    if(RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order)>RME_PGTBL_SIZEORD(Pgtbl_Src->Size_Num_Order))
        return RME_ERR_PGT_ADDR;
ffffffff80218540:	48 c7 c0 f5 ff ff ff 	mov    $0xfffffffffffffff5,%rax
ffffffff80218547:	eb b0                	jmp    ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
ffffffff80218549:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if(RME_POW2(RME_PGTBL_SIZEORD(Pgtbl_Src->Size_Num_Order))<=
       (Index<<RME_PGTBL_SIZEORD(Pgtbl_Dst->Size_Num_Order)))
        return RME_ERR_PGT_ADDR;
    /* Get the physical address and RME standard flags of that source page */
    if(__RME_Pgtbl_Lookup(Pgtbl_Src, Pos_Src, &Paddr_Src, &Flags_Src)!=0)
        return RME_ERR_PGT_HW;
ffffffff80218550:	48 c7 c0 f3 ff ff ff 	mov    $0xfffffffffffffff3,%rax
ffffffff80218557:	eb a0                	jmp    ffffffff802184f9 <_RME_Pgtbl_Add+0x2c9>
ffffffff80218559:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff80218560 <_RME_Pgtbl_Rem>:
ret_t _RME_Pgtbl_Rem(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, ptr_t Pos)
{
    struct RME_Cap_Pgtbl* Pgtbl_Rem;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_CAPTBL,struct RME_Cap_Pgtbl*,Pgtbl_Rem);
ffffffff80218560:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80218566:	75 38                	jne    ffffffff802185a0 <_RME_Pgtbl_Rem+0x40>
ffffffff80218568:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021856c:	0f 86 0e 01 00 00    	jbe    ffffffff80218680 <_RME_Pgtbl_Rem+0x120>
ffffffff80218572:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80218576:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021857a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218581:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff80218584:	48 89 f7             	mov    %rsi,%rdi
ffffffff80218587:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021858a:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021858e:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80218592:	74 7e                	je     ffffffff80218612 <_RME_Pgtbl_Rem+0xb2>
     * not happen by using the CAS. */
    if(__RME_Pgtbl_Page_Unmap(Pgtbl_Rem, Pos)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff80218594:	f3 c3                	repz retq 
ffffffff80218596:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021859d:	00 00 00 
ret_t _RME_Pgtbl_Rem(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, ptr_t Pos)
{
    struct RME_Cap_Pgtbl* Pgtbl_Rem;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_CAPTBL,struct RME_Cap_Pgtbl*,Pgtbl_Rem);
ffffffff802185a0:	48 89 f1             	mov    %rsi,%rcx
ffffffff802185a3:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff802185a7:	48 3b 4f 28          	cmp    0x28(%rdi),%rcx
ffffffff802185ab:	0f 83 cf 00 00 00    	jae    ffffffff80218680 <_RME_Pgtbl_Rem+0x120>
ffffffff802185b1:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802185b5:	48 03 4f 18          	add    0x18(%rdi),%rcx
ffffffff802185b9:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff802185c0:	80 00 00 
ffffffff802185c3:	48 8b 01             	mov    (%rcx),%rax
ffffffff802185c6:	48 85 f8             	test   %rdi,%rax
ffffffff802185c9:	0f 85 d1 00 00 00    	jne    ffffffff802186a0 <_RME_Pgtbl_Rem+0x140>
ffffffff802185cf:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff802185d3:	48 89 c7             	mov    %rax,%rdi
ffffffff802185d6:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802185dd:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802185e1:	0f 85 93 00 00 00    	jne    ffffffff8021867a <_RME_Pgtbl_Rem+0x11a>
ffffffff802185e7:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff802185ed:	48 3b 71 28          	cmp    0x28(%rcx),%rsi
ffffffff802185f1:	0f 83 89 00 00 00    	jae    ffffffff80218680 <_RME_Pgtbl_Rem+0x120>
ffffffff802185f7:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802185fb:	48 89 f7             	mov    %rsi,%rdi
ffffffff802185fe:	48 03 79 18          	add    0x18(%rcx),%rdi
ffffffff80218602:	48 8b 0f             	mov    (%rdi),%rcx
ffffffff80218605:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218608:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021860c:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80218610:	75 68                	jne    ffffffff8021867a <_RME_Pgtbl_Rem+0x11a>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgtbl_Rem,RME_PGTBL_FLAG_REM);
ffffffff80218612:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80218619:	80 00 00 
ffffffff8021861c:	48 85 c1             	test   %rax,%rcx
ffffffff8021861f:	75 7f                	jne    ffffffff802186a0 <_RME_Pgtbl_Rem+0x140>
ffffffff80218621:	48 8b 47 10          	mov    0x10(%rdi),%rax
ffffffff80218625:	a8 04                	test   $0x4,%al
ffffffff80218627:	74 67                	je     ffffffff80218690 <_RME_Pgtbl_Rem+0x130>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGTBL_FLAG_HIGH(Pgtbl_Rem->Head.Flags))||
ffffffff80218629:	48 89 c1             	mov    %rax,%rcx
ffffffff8021862c:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff80218630:	48 39 d1             	cmp    %rdx,%rcx
ffffffff80218633:	72 5b                	jb     ffffffff80218690 <_RME_Pgtbl_Rem+0x130>
ffffffff80218635:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff80218639:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff8021863e:	48 39 c2             	cmp    %rax,%rdx
ffffffff80218641:	72 4d                	jb     ffffffff80218690 <_RME_Pgtbl_Rem+0x130>
       (Pos<RME_PGTBL_FLAG_LOW(Pgtbl_Rem->Head.Flags)))
        return RME_ERR_CAP_FLAG;

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Rem->Size_Num_Order))!=0)
ffffffff80218643:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff80218647:	48 89 d0             	mov    %rdx,%rax
ffffffff8021864a:	48 d3 e8             	shr    %cl,%rax
ffffffff8021864d:	48 89 c1             	mov    %rax,%rcx
        return RME_ERR_PGT_ADDR;
ffffffff80218650:	48 c7 c0 f5 ff ff ff 	mov    $0xfffffffffffffff5,%rax
    if((Pos>RME_PGTBL_FLAG_HIGH(Pgtbl_Rem->Head.Flags))||
       (Pos<RME_PGTBL_FLAG_LOW(Pgtbl_Rem->Head.Flags)))
        return RME_ERR_CAP_FLAG;

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Rem->Size_Num_Order))!=0)
ffffffff80218657:	48 85 c9             	test   %rcx,%rcx
ffffffff8021865a:	75 1e                	jne    ffffffff8021867a <_RME_Pgtbl_Rem+0x11a>
              ptr_t Pos - The virtual address position to unmap from.
Output      : None.
Return      : ret_t - If the unmapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Pgtbl_Rem(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, ptr_t Pos)
{
ffffffff8021865c:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80218660:	48 89 d6             	mov    %rdx,%rsi
    
    /* Actually do the unmapping - This work is passed down to the driver layer.
     * Successful or not will be determined by the driver layer. In the multi-core
     * environment, this should be taken care of by the driver to make sure hazard will
     * not happen by using the CAS. */
    if(__RME_Pgtbl_Page_Unmap(Pgtbl_Rem, Pos)!=0)
ffffffff80218663:	e8 58 be ff ff       	callq  ffffffff802144c0 <__RME_Pgtbl_Page_Unmap>
        return RME_ERR_PGT_MAP;
ffffffff80218668:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021866c:	48 19 c0             	sbb    %rax,%rax
    
    return 0;
}
ffffffff8021866f:	48 83 c4 08          	add    $0x8,%rsp
    /* Actually do the unmapping - This work is passed down to the driver layer.
     * Successful or not will be determined by the driver layer. In the multi-core
     * environment, this should be taken care of by the driver to make sure hazard will
     * not happen by using the CAS. */
    if(__RME_Pgtbl_Page_Unmap(Pgtbl_Rem, Pos)!=0)
        return RME_ERR_PGT_MAP;
ffffffff80218673:	48 f7 d0             	not    %rax
ffffffff80218676:	48 83 e0 f4          	and    $0xfffffffffffffff4,%rax
    
    return 0;
}
ffffffff8021867a:	f3 c3                	repz retq 
ffffffff8021867c:	0f 1f 40 00          	nopl   0x0(%rax)
ret_t _RME_Pgtbl_Rem(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, ptr_t Pos)
{
    struct RME_Cap_Pgtbl* Pgtbl_Rem;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_CAPTBL,struct RME_Cap_Pgtbl*,Pgtbl_Rem);
ffffffff80218680:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218687:	c3                   	retq   
ffffffff80218688:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021868f:	00 
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgtbl_Rem,RME_PGTBL_FLAG_REM);
ffffffff80218690:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218697:	c3                   	retq   
ffffffff80218698:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021869f:	00 
ret_t _RME_Pgtbl_Rem(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, ptr_t Pos)
{
    struct RME_Cap_Pgtbl* Pgtbl_Rem;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_CAPTBL,struct RME_Cap_Pgtbl*,Pgtbl_Rem);
ffffffff802186a0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802186a7:	c3                   	retq   
ffffffff802186a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802186af:	00 

ffffffff802186b0 <_RME_Pgtbl_Con>:
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff802186b0:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff802186b6:	75 38                	jne    ffffffff802186f0 <_RME_Pgtbl_Con+0x40>
ffffffff802186b8:	4c 8b 5f 28          	mov    0x28(%rdi),%r11
ffffffff802186bc:	49 39 f3             	cmp    %rsi,%r11
ffffffff802186bf:	0f 86 fb 01 00 00    	jbe    ffffffff802188c0 <_RME_Pgtbl_Con+0x210>
ffffffff802186c5:	4c 8b 57 18          	mov    0x18(%rdi),%r10
ffffffff802186c9:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802186cd:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff802186d4:	4a 8d 3c 16          	lea    (%rsi,%r10,1),%rdi
ffffffff802186d8:	48 8b 37             	mov    (%rdi),%rsi
ffffffff802186db:	49 89 f1             	mov    %rsi,%r9
ffffffff802186de:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff802186e2:	49 83 f9 04          	cmp    $0x4,%r9
ffffffff802186e6:	0f 84 81 00 00 00    	je     ffffffff8021876d <_RME_Pgtbl_Con+0xbd>
ffffffff802186ec:	f3 c3                	repz retq 
ffffffff802186ee:	66 90                	xchg   %ax,%ax
ffffffff802186f0:	4c 8b 5f 28          	mov    0x28(%rdi),%r11
ffffffff802186f4:	48 89 f0             	mov    %rsi,%rax
ffffffff802186f7:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff802186fb:	4c 39 d8             	cmp    %r11,%rax
ffffffff802186fe:	0f 83 bc 01 00 00    	jae    ffffffff802188c0 <_RME_Pgtbl_Con+0x210>
ffffffff80218704:	4c 8b 57 18          	mov    0x18(%rdi),%r10
ffffffff80218708:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021870c:	49 b9 00 00 00 00 00 	movabs $0x800000000000,%r9
ffffffff80218713:	80 00 00 
ffffffff80218716:	4a 8d 3c 10          	lea    (%rax,%r10,1),%rdi
ffffffff8021871a:	48 8b 07             	mov    (%rdi),%rax
ffffffff8021871d:	4c 85 c8             	test   %r9,%rax
ffffffff80218720:	0f 85 ba 01 00 00    	jne    ffffffff802188e0 <_RME_Pgtbl_Con+0x230>
ffffffff80218726:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021872a:	49 89 c1             	mov    %rax,%r9
ffffffff8021872d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218734:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff80218738:	0f 85 0f 01 00 00    	jne    ffffffff8021884d <_RME_Pgtbl_Con+0x19d>
ffffffff8021873e:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80218744:	48 3b 77 28          	cmp    0x28(%rdi),%rsi
ffffffff80218748:	0f 83 72 01 00 00    	jae    ffffffff802188c0 <_RME_Pgtbl_Con+0x210>
ffffffff8021874e:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80218752:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff80218756:	48 89 f7             	mov    %rsi,%rdi
ffffffff80218759:	48 8b 36             	mov    (%rsi),%rsi
ffffffff8021875c:	49 89 f1             	mov    %rsi,%r9
ffffffff8021875f:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff80218763:	49 83 f9 04          	cmp    $0x4,%r9
ffffffff80218767:	0f 85 e0 00 00 00    	jne    ffffffff8021884d <_RME_Pgtbl_Con+0x19d>
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Child,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Child);
ffffffff8021876d:	f6 c5 80             	test   $0x80,%ch
ffffffff80218770:	0f 85 e2 00 00 00    	jne    ffffffff80218858 <_RME_Pgtbl_Con+0x1a8>
ffffffff80218776:	4c 39 d9             	cmp    %r11,%rcx
ffffffff80218779:	0f 83 41 01 00 00    	jae    ffffffff802188c0 <_RME_Pgtbl_Con+0x210>
ffffffff8021877f:	48 c1 e1 06          	shl    $0x6,%rcx
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff80218783:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Child,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Child);
ffffffff8021878a:	49 89 c9             	mov    %rcx,%r9
ffffffff8021878d:	4d 01 d1             	add    %r10,%r9
ffffffff80218790:	49 8b 09             	mov    (%r9),%rcx
ffffffff80218793:	49 89 ca             	mov    %rcx,%r10
ffffffff80218796:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff8021879a:	49 83 fa 04          	cmp    $0x4,%r10
ffffffff8021879e:	0f 85 ac 00 00 00    	jne    ffffffff80218850 <_RME_Pgtbl_Con+0x1a0>
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgtbl_Parent, RME_PGTBL_FLAG_CON_PARENT);
ffffffff802187a4:	49 ba 00 00 00 00 00 	movabs $0x800000000000,%r10
ffffffff802187ab:	80 00 00 
ffffffff802187ae:	4c 85 d6             	test   %r10,%rsi
ffffffff802187b1:	0f 85 29 01 00 00    	jne    ffffffff802188e0 <_RME_Pgtbl_Con+0x230>
ffffffff802187b7:	48 8b 47 10          	mov    0x10(%rdi),%rax
ffffffff802187bb:	a8 10                	test   $0x10,%al
ffffffff802187bd:	0f 84 0d 01 00 00    	je     ffffffff802188d0 <_RME_Pgtbl_Con+0x220>
    RME_CAP_CHECK(Pgtbl_Child, RME_PGTBL_FLAG_CON_CHILD);
ffffffff802187c3:	4c 85 d1             	test   %r10,%rcx
ffffffff802187c6:	0f 85 14 01 00 00    	jne    ffffffff802188e0 <_RME_Pgtbl_Con+0x230>
ffffffff802187cc:	41 f6 41 10 08       	testb  $0x8,0x10(%r9)
ffffffff802187d1:	0f 84 f9 00 00 00    	je     ffffffff802188d0 <_RME_Pgtbl_Con+0x220>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGTBL_FLAG_HIGH(Pgtbl_Parent->Head.Flags))||
ffffffff802187d7:	48 89 c1             	mov    %rax,%rcx
ffffffff802187da:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff802187de:	48 39 d1             	cmp    %rdx,%rcx
ffffffff802187e1:	0f 82 e9 00 00 00    	jb     ffffffff802188d0 <_RME_Pgtbl_Con+0x220>
ffffffff802187e7:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802187eb:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff802187f0:	48 39 c2             	cmp    %rax,%rdx
ffffffff802187f3:	0f 82 d7 00 00 00    	jb     ffffffff802188d0 <_RME_Pgtbl_Con+0x220>
       (Pos<RME_PGTBL_FLAG_LOW(Pgtbl_Parent->Head.Flags)))
        return RME_ERR_CAP_FLAG;
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Parent->Size_Num_Order))!=0)
ffffffff802187f9:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff802187fd:	48 89 d0             	mov    %rdx,%rax
ffffffff80218800:	48 d3 e8             	shr    %cl,%rax
ffffffff80218803:	48 85 c0             	test   %rax,%rax
ffffffff80218806:	0f 85 e4 00 00 00    	jne    ffffffff802188f0 <_RME_Pgtbl_Con+0x240>
        return RME_ERR_PGT_ADDR;
    
    /* See if the child table falls within one slot of the parent table */
    Child_Size_Ord=RME_PGTBL_NUMORD(Pgtbl_Child->Size_Num_Order)+
ffffffff8021880c:	49 8b 41 28          	mov    0x28(%r9),%rax
    if((Pgtbl_Child->Start_Addr+RME_POW2(Child_Size_Ord))>
       (Parent_Map_Addr+RME_POW2(RME_PGTBL_SIZEORD(Pgtbl_Parent->Size_Num_Order))))
        return RME_ERR_PGT_ADDR;
#else
    /* If this is the case, then we force no path compression */
    if(RME_PGTBL_SIZEORD(Pgtbl_Parent->Size_Num_Order)!=Child_Size_Ord)
ffffffff80218810:	48 c1 e9 20          	shr    $0x20,%rcx
ffffffff80218814:	89 c6                	mov    %eax,%esi
ffffffff80218816:	48 c1 e8 20          	shr    $0x20,%rax
ffffffff8021881a:	48 01 c6             	add    %rax,%rsi
       (Pos<RME_PGTBL_FLAG_LOW(Pgtbl_Parent->Head.Flags)))
        return RME_ERR_CAP_FLAG;
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Parent->Size_Num_Order))!=0)
        return RME_ERR_PGT_ADDR;
ffffffff8021881d:	48 c7 c0 f5 ff ff ff 	mov    $0xfffffffffffffff5,%rax
    if((Pgtbl_Child->Start_Addr+RME_POW2(Child_Size_Ord))>
       (Parent_Map_Addr+RME_POW2(RME_PGTBL_SIZEORD(Pgtbl_Parent->Size_Num_Order))))
        return RME_ERR_PGT_ADDR;
#else
    /* If this is the case, then we force no path compression */
    if(RME_PGTBL_SIZEORD(Pgtbl_Parent->Size_Num_Order)!=Child_Size_Ord)
ffffffff80218824:	48 39 ce             	cmp    %rcx,%rsi
ffffffff80218827:	75 24                	jne    ffffffff8021884d <_RME_Pgtbl_Con+0x19d>
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Pgtbl_Con(struct RME_Cap_Captbl* Captbl,
                     cid_t Cap_Pgtbl_Parent, ptr_t Pos,
                     cid_t Cap_Pgtbl_Child, ptr_t Flags_Child)
{
ffffffff80218829:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff8021882d:	48 89 d6             	mov    %rdx,%rsi
ffffffff80218830:	4c 89 c1             	mov    %r8,%rcx
    if(RME_PGTBL_SIZEORD(Pgtbl_Parent->Size_Num_Order)!=Child_Size_Ord)
        return RME_ERR_PGT_ADDR;
#endif
    /* Actually do the mapping - This work is passed down to the driver layer. 
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Map(Pgtbl_Parent, Pos, Pgtbl_Child, Flags_Child)!=0)
ffffffff80218833:	4c 89 ca             	mov    %r9,%rdx
ffffffff80218836:	e8 e5 bc ff ff       	callq  ffffffff80214520 <__RME_Pgtbl_Pgdir_Map>
        return RME_ERR_PGT_MAP;
ffffffff8021883b:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021883f:	48 19 c0             	sbb    %rax,%rax
    
    return 0;
}
ffffffff80218842:	48 83 c4 08          	add    $0x8,%rsp
        return RME_ERR_PGT_ADDR;
#endif
    /* Actually do the mapping - This work is passed down to the driver layer. 
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Map(Pgtbl_Parent, Pos, Pgtbl_Child, Flags_Child)!=0)
        return RME_ERR_PGT_MAP;
ffffffff80218846:	48 f7 d0             	not    %rax
ffffffff80218849:	48 83 e0 f4          	and    $0xfffffffffffffff4,%rax
    
    return 0;
}
ffffffff8021884d:	f3 c3                	repz retq 
ffffffff8021884f:	90                   	nop
ffffffff80218850:	f3 c3                	repz retq 
ffffffff80218852:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Child,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Child);
ffffffff80218858:	49 89 c9             	mov    %rcx,%r9
ffffffff8021885b:	49 c1 f9 10          	sar    $0x10,%r9
ffffffff8021885f:	4d 39 d9             	cmp    %r11,%r9
ffffffff80218862:	73 5c                	jae    ffffffff802188c0 <_RME_Pgtbl_Con+0x210>
ffffffff80218864:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff80218868:	4d 01 ca             	add    %r9,%r10
ffffffff8021886b:	49 b9 00 00 00 00 00 	movabs $0x800000000000,%r9
ffffffff80218872:	80 00 00 
ffffffff80218875:	49 8b 02             	mov    (%r10),%rax
ffffffff80218878:	4c 85 c8             	test   %r9,%rax
ffffffff8021887b:	75 63                	jne    ffffffff802188e0 <_RME_Pgtbl_Con+0x230>
ffffffff8021887d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218881:	49 89 c1             	mov    %rax,%r9
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff80218884:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Child,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Child);
ffffffff8021888b:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8021888f:	75 bc                	jne    ffffffff8021884d <_RME_Pgtbl_Con+0x19d>
ffffffff80218891:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff80218897:	49 3b 4a 28          	cmp    0x28(%r10),%rcx
ffffffff8021889b:	49 89 c9             	mov    %rcx,%r9
ffffffff8021889e:	73 20                	jae    ffffffff802188c0 <_RME_Pgtbl_Con+0x210>
ffffffff802188a0:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff802188a4:	4d 03 4a 18          	add    0x18(%r10),%r9
ffffffff802188a8:	49 8b 09             	mov    (%r9),%rcx
ffffffff802188ab:	49 89 ca             	mov    %rcx,%r10
ffffffff802188ae:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff802188b2:	49 83 fa 04          	cmp    $0x4,%r10
ffffffff802188b6:	0f 84 e8 fe ff ff    	je     ffffffff802187a4 <_RME_Pgtbl_Con+0xf4>
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Map(Pgtbl_Parent, Pos, Pgtbl_Child, Flags_Child)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff802188bc:	f3 c3                	repz retq 
ffffffff802188be:	66 90                	xchg   %ax,%ax
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff802188c0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff802188c7:	c3                   	retq   
ffffffff802188c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802188cf:	00 
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Child,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Child);
    /* Check if both page table caps are not frozen and allows such operations */
    RME_CAP_CHECK(Pgtbl_Parent, RME_PGTBL_FLAG_CON_PARENT);
ffffffff802188d0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff802188d7:	c3                   	retq   
ffffffff802188d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802188df:	00 
    /* The start mapping address in the parent */
    ptr_t Parent_Map_Addr;
#endif
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl_Parent,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Parent);
ffffffff802188e0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff802188e7:	c3                   	retq   
ffffffff802188e8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802188ef:	00 
       (Pos<RME_PGTBL_FLAG_LOW(Pgtbl_Parent->Head.Flags)))
        return RME_ERR_CAP_FLAG;
    
    /* See if the mapping range is allowed */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Parent->Size_Num_Order))!=0)
        return RME_ERR_PGT_ADDR;
ffffffff802188f0:	48 c7 c0 f5 ff ff ff 	mov    $0xfffffffffffffff5,%rax
ffffffff802188f7:	c3                   	retq   
ffffffff802188f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff802188ff:	00 

ffffffff80218900 <_RME_Pgtbl_Des>:
ret_t _RME_Pgtbl_Des(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, ptr_t Pos)
{
    struct RME_Cap_Pgtbl* Pgtbl_Des;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_CAPTBL,struct RME_Cap_Pgtbl*,Pgtbl_Des);
ffffffff80218900:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80218906:	75 38                	jne    ffffffff80218940 <_RME_Pgtbl_Des+0x40>
ffffffff80218908:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021890c:	0f 86 0e 01 00 00    	jbe    ffffffff80218a20 <_RME_Pgtbl_Des+0x120>
ffffffff80218912:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80218916:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021891a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80218921:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff80218924:	48 89 f7             	mov    %rsi,%rdi
ffffffff80218927:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021892a:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021892e:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80218932:	74 7e                	je     ffffffff802189b2 <_RME_Pgtbl_Des+0xb2>
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Unmap(Pgtbl_Des, Pos)!=0)
        return RME_ERR_PGT_MAP;
    
    return 0;
}
ffffffff80218934:	f3 c3                	repz retq 
ffffffff80218936:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021893d:	00 00 00 
ret_t _RME_Pgtbl_Des(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, ptr_t Pos)
{
    struct RME_Cap_Pgtbl* Pgtbl_Des;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_CAPTBL,struct RME_Cap_Pgtbl*,Pgtbl_Des);
ffffffff80218940:	48 89 f1             	mov    %rsi,%rcx
ffffffff80218943:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff80218947:	48 3b 4f 28          	cmp    0x28(%rdi),%rcx
ffffffff8021894b:	0f 83 cf 00 00 00    	jae    ffffffff80218a20 <_RME_Pgtbl_Des+0x120>
ffffffff80218951:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80218955:	48 03 4f 18          	add    0x18(%rdi),%rcx
ffffffff80218959:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80218960:	80 00 00 
ffffffff80218963:	48 8b 01             	mov    (%rcx),%rax
ffffffff80218966:	48 85 f8             	test   %rdi,%rax
ffffffff80218969:	0f 85 d1 00 00 00    	jne    ffffffff80218a40 <_RME_Pgtbl_Des+0x140>
ffffffff8021896f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80218973:	48 89 c7             	mov    %rax,%rdi
ffffffff80218976:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021897d:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff80218981:	0f 85 93 00 00 00    	jne    ffffffff80218a1a <_RME_Pgtbl_Des+0x11a>
ffffffff80218987:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021898d:	48 3b 71 28          	cmp    0x28(%rcx),%rsi
ffffffff80218991:	0f 83 89 00 00 00    	jae    ffffffff80218a20 <_RME_Pgtbl_Des+0x120>
ffffffff80218997:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021899b:	48 89 f7             	mov    %rsi,%rdi
ffffffff8021899e:	48 03 79 18          	add    0x18(%rcx),%rdi
ffffffff802189a2:	48 8b 0f             	mov    (%rdi),%rcx
ffffffff802189a5:	48 89 ce             	mov    %rcx,%rsi
ffffffff802189a8:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802189ac:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802189b0:	75 68                	jne    ffffffff80218a1a <_RME_Pgtbl_Des+0x11a>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgtbl_Des,RME_PGTBL_FLAG_DES);
ffffffff802189b2:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff802189b9:	80 00 00 
ffffffff802189bc:	48 85 c1             	test   %rax,%rcx
ffffffff802189bf:	75 7f                	jne    ffffffff80218a40 <_RME_Pgtbl_Des+0x140>
ffffffff802189c1:	48 8b 47 10          	mov    0x10(%rdi),%rax
ffffffff802189c5:	a8 20                	test   $0x20,%al
ffffffff802189c7:	74 67                	je     ffffffff80218a30 <_RME_Pgtbl_Des+0x130>
    /* Check the operation range - This is page table specific */
    if((Pos>RME_PGTBL_FLAG_HIGH(Pgtbl_Des->Head.Flags))||
ffffffff802189c9:	48 89 c1             	mov    %rax,%rcx
ffffffff802189cc:	48 c1 e9 24          	shr    $0x24,%rcx
ffffffff802189d0:	48 39 d1             	cmp    %rdx,%rcx
ffffffff802189d3:	72 5b                	jb     ffffffff80218a30 <_RME_Pgtbl_Des+0x130>
ffffffff802189d5:	48 c1 e8 08          	shr    $0x8,%rax
ffffffff802189d9:	25 ff ff ff 0f       	and    $0xfffffff,%eax
ffffffff802189de:	48 39 c2             	cmp    %rax,%rdx
ffffffff802189e1:	72 4d                	jb     ffffffff80218a30 <_RME_Pgtbl_Des+0x130>
       (Pos<RME_PGTBL_FLAG_LOW(Pgtbl_Des->Head.Flags)))
        return RME_ERR_CAP_FLAG;

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Des->Size_Num_Order))!=0)
ffffffff802189e3:	48 8b 4f 28          	mov    0x28(%rdi),%rcx
ffffffff802189e7:	48 89 d0             	mov    %rdx,%rax
ffffffff802189ea:	48 d3 e8             	shr    %cl,%rax
ffffffff802189ed:	48 89 c1             	mov    %rax,%rcx
        return RME_ERR_PGT_ADDR;
ffffffff802189f0:	48 c7 c0 f5 ff ff ff 	mov    $0xfffffffffffffff5,%rax
    if((Pos>RME_PGTBL_FLAG_HIGH(Pgtbl_Des->Head.Flags))||
       (Pos<RME_PGTBL_FLAG_LOW(Pgtbl_Des->Head.Flags)))
        return RME_ERR_CAP_FLAG;

    /* See if the unmapping range is allowed */
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Des->Size_Num_Order))!=0)
ffffffff802189f7:	48 85 c9             	test   %rcx,%rcx
ffffffff802189fa:	75 1e                	jne    ffffffff80218a1a <_RME_Pgtbl_Des+0x11a>
                          table from.
Output      : None.
Return      : ret_t - If the mapping is successful, it will return 0; else error code.
******************************************************************************/
ret_t _RME_Pgtbl_Des(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, ptr_t Pos)
{
ffffffff802189fc:	48 83 ec 08          	sub    $0x8,%rsp
ffffffff80218a00:	48 89 d6             	mov    %rdx,%rsi
    if((Pos>>RME_PGTBL_NUMORD(Pgtbl_Des->Size_Num_Order))!=0)
        return RME_ERR_PGT_ADDR;
    
    /* Actually do the unmapping - This work is passed down to the driver layer.
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Unmap(Pgtbl_Des, Pos)!=0)
ffffffff80218a03:	e8 f8 bb ff ff       	callq  ffffffff80214600 <__RME_Pgtbl_Pgdir_Unmap>
        return RME_ERR_PGT_MAP;
ffffffff80218a08:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff80218a0c:	48 19 c0             	sbb    %rax,%rax
    
    return 0;
}
ffffffff80218a0f:	48 83 c4 08          	add    $0x8,%rsp
        return RME_ERR_PGT_ADDR;
    
    /* Actually do the unmapping - This work is passed down to the driver layer.
     * Successful or not will be determined by the driver layer. */
    if(__RME_Pgtbl_Pgdir_Unmap(Pgtbl_Des, Pos)!=0)
        return RME_ERR_PGT_MAP;
ffffffff80218a13:	48 f7 d0             	not    %rax
ffffffff80218a16:	48 83 e0 f4          	and    $0xfffffffffffffff4,%rax
    
    return 0;
}
ffffffff80218a1a:	f3 c3                	repz retq 
ffffffff80218a1c:	0f 1f 40 00          	nopl   0x0(%rax)
ret_t _RME_Pgtbl_Des(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, ptr_t Pos)
{
    struct RME_Cap_Pgtbl* Pgtbl_Des;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_CAPTBL,struct RME_Cap_Pgtbl*,Pgtbl_Des);
ffffffff80218a20:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff80218a27:	c3                   	retq   
ffffffff80218a28:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80218a2f:	00 
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Pgtbl_Des,RME_PGTBL_FLAG_DES);
ffffffff80218a30:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80218a37:	c3                   	retq   
ffffffff80218a38:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80218a3f:	00 
ret_t _RME_Pgtbl_Des(struct RME_Cap_Captbl* Captbl, cid_t Cap_Pgtbl, ptr_t Pos)
{
    struct RME_Cap_Pgtbl* Pgtbl_Des;
    
    /* Get the cap location that we care about */
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_CAPTBL,struct RME_Cap_Pgtbl*,Pgtbl_Des);
ffffffff80218a40:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80218a47:	c3                   	retq   
ffffffff80218a48:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80218a4f:	00 

ffffffff80218a50 <__RME_List_Crt>:
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff80218a50:	48 89 3f             	mov    %rdi,(%rdi)
    Head->Next=(struct RME_List*)Head;
ffffffff80218a53:	48 89 7f 08          	mov    %rdi,0x8(%rdi)
ffffffff80218a57:	c3                   	retq   
ffffffff80218a58:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80218a5f:	00 

ffffffff80218a60 <__RME_List_Del>:
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff80218a60:	48 89 3e             	mov    %rdi,(%rsi)
    Prev->Next=(struct RME_List*)Next;
ffffffff80218a63:	48 89 77 08          	mov    %rsi,0x8(%rdi)
ffffffff80218a67:	c3                   	retq   
ffffffff80218a68:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80218a6f:	00 

ffffffff80218a70 <__RME_List_Ins>:
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff80218a70:	48 89 3a             	mov    %rdi,(%rdx)
    New->Next=(struct RME_List*)Next;
ffffffff80218a73:	48 89 57 08          	mov    %rdx,0x8(%rdi)
    New->Prev=(struct RME_List*)Prev;
ffffffff80218a77:	48 89 37             	mov    %rsi,(%rdi)
    Prev->Next=(struct RME_List*)New;
ffffffff80218a7a:	48 89 7e 08          	mov    %rdi,0x8(%rsi)
ffffffff80218a7e:	c3                   	retq   
ffffffff80218a7f:	90                   	nop

ffffffff80218a80 <__RME_Thd_Fatal>:
Input       : struct RME_Reg_Struct* Reg - The register set when entering the handler.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : ret_t - Always 0.
******************************************************************************/
ret_t __RME_Thd_Fatal(struct RME_Reg_Struct* Reg)
{
ffffffff80218a80:	41 55                	push   %r13
ffffffff80218a82:	41 54                	push   %r12
    struct RME_Thd_Struct* Thd;
    ptr_t CPUID;
    
    /* Attempt to return from the invocation, from fault */
    if(_RME_Inv_Ret(Reg, 1)!=0)
ffffffff80218a84:	be 01 00 00 00       	mov    $0x1,%esi
Input       : struct RME_Reg_Struct* Reg - The register set when entering the handler.
Output      : struct RME_Reg_Struct* Reg - The register set when exiting the handler.
Return      : ret_t - Always 0.
******************************************************************************/
ret_t __RME_Thd_Fatal(struct RME_Reg_Struct* Reg)
{
ffffffff80218a89:	55                   	push   %rbp
ffffffff80218a8a:	53                   	push   %rbx
ffffffff80218a8b:	49 89 fc             	mov    %rdi,%r12
ffffffff80218a8e:	48 83 ec 08          	sub    $0x8,%rsp
    struct RME_Thd_Struct* Thd;
    ptr_t CPUID;
    
    /* Attempt to return from the invocation, from fault */
    if(_RME_Inv_Ret(Reg, 1)!=0)
ffffffff80218a92:	e8 99 55 00 00       	callq  ffffffff8021e030 <_RME_Inv_Ret>
ffffffff80218a97:	48 85 c0             	test   %rax,%rax
ffffffff80218a9a:	75 14                	jne    ffffffff80218ab0 <__RME_Thd_Fatal+0x30>
        /* Send a signal to the fault receive endpoint. This endpoint is per-core */
        _RME_Kern_Snd(Reg, RME_Fault_Sig[CPUID]);
    }
        
    return 0;
}
ffffffff80218a9c:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80218aa0:	31 c0                	xor    %eax,%eax
ffffffff80218aa2:	5b                   	pop    %rbx
ffffffff80218aa3:	5d                   	pop    %rbp
ffffffff80218aa4:	41 5c                	pop    %r12
ffffffff80218aa6:	41 5d                	pop    %r13
ffffffff80218aa8:	c3                   	retq   
ffffffff80218aa9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ptr_t CPUID;
    
    /* Attempt to return from the invocation, from fault */
    if(_RME_Inv_Ret(Reg, 1)!=0)
    {
        CPUID=RME_CPUID();
ffffffff80218ab0:	e8 8a 2d ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
        /* Return failure, we are not in an invocation. Kill the thread */
        Thd=RME_Cur_Thd[CPUID];
ffffffff80218ab5:	48 8b 1c c5 00 28 22 	mov    -0x7fddd800(,%rax,8),%rbx
ffffffff80218abc:	80 
    ptr_t CPUID;
    
    /* Attempt to return from the invocation, from fault */
    if(_RME_Inv_Ret(Reg, 1)!=0)
    {
        CPUID=RME_CPUID();
ffffffff80218abd:	49 89 c5             	mov    %rax,%r13
        /* Return failure, we are not in an invocation. Kill the thread */
        Thd=RME_Cur_Thd[CPUID];
        /* Are we attempting to kill the init threads? If yes, panic */
        RME_ASSERT(Thd->Sched.Slices!=RME_THD_INIT_TIME);
ffffffff80218ac0:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff80218ac7:	ff ff 7f 
ffffffff80218aca:	48 39 43 30          	cmp    %rax,0x30(%rbx)
ffffffff80218ace:	0f 84 c6 01 00 00    	je     ffffffff80218c9a <__RME_Thd_Fatal+0x21a>
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff80218ad4:	48 8b 43 28          	mov    0x28(%rbx),%rax
    
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80218ad8:	48 8b 73 08          	mov    0x8(%rbx),%rsi
ffffffff80218adc:	48 8b 13             	mov    (%rbx),%rdx
ret_t _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff80218adf:	48 8b 4b 48          	mov    0x48(%rbx),%rcx
        CPUID=RME_CPUID();
        /* Return failure, we are not in an invocation. Kill the thread */
        Thd=RME_Cur_Thd[CPUID];
        /* Are we attempting to kill the init threads? If yes, panic */
        RME_ASSERT(Thd->Sched.Slices!=RME_THD_INIT_TIME);
        Thd->Sched.Slices=0;
ffffffff80218ae3:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff80218aea:	00 
        Thd->Sched.State=RME_THD_FAULT;
ffffffff80218aeb:	48 c7 43 38 05 00 00 	movq   $0x5,0x38(%rbx)
ffffffff80218af2:	00 
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff80218af3:	48 89 16             	mov    %rdx,(%rsi)
    Prev->Next=(struct RME_List*)Next;
ffffffff80218af6:	48 89 72 08          	mov    %rsi,0x8(%rdx)
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
ffffffff80218afa:	48 89 c2             	mov    %rax,%rdx
ffffffff80218afd:	48 c1 e2 0a          	shl    $0xa,%rdx
ffffffff80218b01:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218b04:	48 8d 14 c2          	lea    (%rdx,%rax,8),%rdx
ffffffff80218b08:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80218b0c:	48 8d 94 16 20 30 22 	lea    -0x7fddcfe0(%rsi,%rdx,1),%rdx
ffffffff80218b13:	80 
ffffffff80218b14:	48 8d 72 08          	lea    0x8(%rdx),%rsi
ffffffff80218b18:	48 39 72 10          	cmp    %rsi,0x10(%rdx)
ffffffff80218b1c:	0f 84 11 02 00 00    	je     ffffffff80218d33 <__RME_Thd_Fatal+0x2b3>
    ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=RME_PRIO_WORD_NUM-1;Count>=0;Count--)
    {
        if(RME_Run[CPUID].Bitmap[Count]!=0)
ffffffff80218b22:	4c 89 e8             	mov    %r13,%rax
ffffffff80218b25:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff80218b29:	4a 8d 2c e8          	lea    (%rax,%r13,8),%rbp
ffffffff80218b2d:	48 8b bd 20 30 22 80 	mov    -0x7fddcfe0(%rbp),%rdi
ffffffff80218b34:	48 85 ff             	test   %rdi,%rdi
ffffffff80218b37:	75 6f                	jne    ffffffff80218ba8 <__RME_Thd_Fatal+0x128>
            break;
    }
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);
ffffffff80218b39:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80218b40:	e8 cb e3 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218b45:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff80218b4c:	e8 bf e3 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218b51:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80218b58:	e8 b3 e3 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218b5d:	bf cb 00 00 00       	mov    $0xcb,%edi
ffffffff80218b62:	e8 69 e1 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80218b67:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80218b6e:	e8 9d e3 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218b73:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80218b7a:	e8 91 e3 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218b7f:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80218b86:	e8 85 e3 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218b8b:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff80218b92:	e8 79 e3 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218b97:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80218b9e:	e8 6d e3 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218ba3:	eb fe                	jmp    ffffffff80218ba3 <__RME_Thd_Fatal+0x123>
ffffffff80218ba5:	0f 1f 00             	nopl   (%rax)
    /* Get the first "1"'s position in the word */
    Prio=__RME_MSB_Get(RME_Run[CPUID].Bitmap[Count]);
ffffffff80218ba8:	e8 13 2d ff ff       	callq  ffffffff8020b8c0 <__RME_MSB_Get>
    Prio+=Count<<RME_WORD_ORDER;
    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)RME_Run[CPUID].List[Prio].Next;
ffffffff80218bad:	48 c1 e0 04          	shl    $0x4,%rax
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff80218bb1:	4c 89 e6             	mov    %r12,%rsi
    RME_ASSERT(Count>=0);
    /* Get the first "1"'s position in the word */
    Prio=__RME_MSB_Get(RME_Run[CPUID].Bitmap[Count]);
    Prio+=Count<<RME_WORD_ORDER;
    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)RME_Run[CPUID].List[Prio].Next;
ffffffff80218bb4:	48 8b 84 05 30 30 22 	mov    -0x7fddcfd0(%rbp,%rax,1),%rax
ffffffff80218bbb:	80 
        RME_ASSERT(Thd->Sched.Slices!=RME_THD_INIT_TIME);
        Thd->Sched.Slices=0;
        Thd->Sched.State=RME_THD_FAULT;
        _RME_Run_Del(Thd);
        /* Finally, pick up something else to run */
        RME_Cur_Thd[CPUID]=_RME_Run_High(CPUID);
ffffffff80218bbc:	4a 89 04 ed 00 28 22 	mov    %rax,-0x7fddd800(,%r13,8)
ffffffff80218bc3:	80 
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_RUNNING;
ffffffff80218bc4:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff80218bcb:	00 
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff80218bcc:	48 8b bb 80 00 00 00 	mov    0x80(%rbx),%rdi
        _RME_Run_Del(Thd);
        /* Finally, pick up something else to run */
        RME_Cur_Thd[CPUID]=_RME_Run_High(CPUID);
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_RUNNING;
        /* A solid context switch */
        _RME_Run_Swt(Reg, Thd, RME_Cur_Thd[CPUID]);
ffffffff80218bd3:	4a 8b 2c ed 00 28 22 	mov    -0x7fddd800(,%r13,8),%rbp
ffffffff80218bda:	80 
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff80218bdb:	e8 e0 b1 ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Save(Reg, &(Curr_Thd->Cur_Reg->Cop_Reg));
ffffffff80218be0:	48 8b 83 80 00 00 00 	mov    0x80(%rbx),%rax
ffffffff80218be7:	4c 89 e7             	mov    %r12,%rdi
ffffffff80218bea:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff80218bf1:	e8 ba b2 ff ff       	callq  ffffffff80213eb0 <__RME_Thd_Cop_Save>
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
ffffffff80218bf6:	48 8b b5 80 00 00 00 	mov    0x80(%rbp),%rsi
ffffffff80218bfd:	4c 89 e7             	mov    %r12,%rdi
ffffffff80218c00:	e8 bb b1 ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));
ffffffff80218c05:	48 8b 85 80 00 00 00 	mov    0x80(%rbp),%rax
ffffffff80218c0c:	4c 89 e7             	mov    %r12,%rdi
ffffffff80218c0f:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff80218c16:	e8 a5 b2 ff ff       	callq  ffffffff80213ec0 <__RME_Thd_Cop_Restore>

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff80218c1b:	48 8b 93 c0 09 00 00 	mov    0x9c0(%rbx),%rdx
ffffffff80218c22:	48 8d 83 b8 09 00 00 	lea    0x9b8(%rbx),%rax
ffffffff80218c29:	48 39 c2             	cmp    %rax,%rdx
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff80218c2c:	48 8b 85 c0 09 00 00 	mov    0x9c0(%rbp),%rax
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff80218c33:	0f 84 da 00 00 00    	je     ffffffff80218d13 <__RME_Thd_Fatal+0x293>
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff80218c39:	48 8d 8d b8 09 00 00 	lea    0x9b8(%rbp),%rcx
ffffffff80218c40:	48 39 c8             	cmp    %rcx,%rax
ffffffff80218c43:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff80218c48:	48 0f 44 c1          	cmove  %rcx,%rax
    
    if(Curr_Inv_Top==0)
ffffffff80218c4c:	48 85 d2             	test   %rdx,%rdx
ffffffff80218c4f:	0f 84 d1 00 00 00    	je     ffffffff80218d26 <__RME_Thd_Fatal+0x2a6>
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
ffffffff80218c55:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff80218c59:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    
    if(Next_Inv_Top==0)
ffffffff80218c5d:	48 85 c0             	test   %rax,%rax
ffffffff80218c60:	0f 84 a0 00 00 00    	je     ffffffff80218d06 <__RME_Thd_Fatal+0x286>
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
    else
        Next_Pgtbl=Next_Inv_Top->Proc->Pgtbl;
ffffffff80218c66:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218c6a:	48 8b 40 10          	mov    0x10(%rax),%rax
    
    if(RME_CAP_GETOBJ(Curr_Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Next_Pgtbl,ptr_t))
ffffffff80218c6e:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff80218c72:	48 39 7a 18          	cmp    %rdi,0x18(%rdx)
ffffffff80218c76:	74 05                	je     ffffffff80218c7d <__RME_Thd_Fatal+0x1fd>
        __RME_Pgtbl_Set(RME_CAP_GETOBJ(Next_Pgtbl,ptr_t));
ffffffff80218c78:	e8 63 b6 ff ff       	callq  ffffffff802142e0 <__RME_Pgtbl_Set>
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_RUNNING;
        /* A solid context switch */
        _RME_Run_Swt(Reg, Thd, RME_Cur_Thd[CPUID]);
    
        /* Send a signal to the fault receive endpoint. This endpoint is per-core */
        _RME_Kern_Snd(Reg, RME_Fault_Sig[CPUID]);
ffffffff80218c7d:	4a 8b 34 ed 00 18 22 	mov    -0x7fdde800(,%r13,8),%rsi
ffffffff80218c84:	80 
ffffffff80218c85:	4c 89 e7             	mov    %r12,%rdi
ffffffff80218c88:	e8 73 45 00 00       	callq  ffffffff8021d200 <_RME_Kern_Snd>
    }
        
    return 0;
}
ffffffff80218c8d:	48 83 c4 08          	add    $0x8,%rsp
ffffffff80218c91:	31 c0                	xor    %eax,%eax
ffffffff80218c93:	5b                   	pop    %rbx
ffffffff80218c94:	5d                   	pop    %rbp
ffffffff80218c95:	41 5c                	pop    %r12
ffffffff80218c97:	41 5d                	pop    %r13
ffffffff80218c99:	c3                   	retq   
    {
        CPUID=RME_CPUID();
        /* Return failure, we are not in an invocation. Kill the thread */
        Thd=RME_Cur_Thd[CPUID];
        /* Are we attempting to kill the init threads? If yes, panic */
        RME_ASSERT(Thd->Sched.Slices!=RME_THD_INIT_TIME);
ffffffff80218c9a:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80218ca1:	e8 6a e2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218ca6:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff80218cad:	e8 5e e2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218cb2:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80218cb9:	e8 52 e2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218cbe:	bf 73 00 00 00       	mov    $0x73,%edi
ffffffff80218cc3:	e8 08 e0 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80218cc8:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80218ccf:	e8 3c e2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218cd4:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80218cdb:	e8 30 e2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218ce0:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80218ce7:	e8 24 e2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218cec:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff80218cf3:	e8 18 e2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218cf8:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80218cff:	e8 0c e2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218d04:	eb fe                	jmp    ffffffff80218d04 <__RME_Thd_Fatal+0x284>
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
    
    if(Next_Inv_Top==0)
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
ffffffff80218d06:	48 8b 45 60          	mov    0x60(%rbp),%rax
ffffffff80218d0a:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218d0e:	e9 5b ff ff ff       	jmpq   ffffffff80218c6e <__RME_Thd_Fatal+0x1ee>
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff80218d13:	48 8d 95 b8 09 00 00 	lea    0x9b8(%rbp),%rdx
ffffffff80218d1a:	48 39 d0             	cmp    %rdx,%rax
ffffffff80218d1d:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80218d22:	48 0f 44 c2          	cmove  %rdx,%rax
    
    if(Curr_Inv_Top==0)
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
ffffffff80218d26:	48 8b 53 60          	mov    0x60(%rbx),%rdx
ffffffff80218d2a:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff80218d2e:	e9 2a ff ff ff       	jmpq   ffffffff80218c5d <__RME_Thd_Fatal+0x1dd>
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
        RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]&=~(1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1)));
ffffffff80218d33:	48 89 c6             	mov    %rax,%rsi
ffffffff80218d36:	48 89 ca             	mov    %rcx,%rdx
ffffffff80218d39:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff80218d3d:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff80218d41:	48 01 f0             	add    %rsi,%rax
ffffffff80218d44:	48 01 c2             	add    %rax,%rdx
ffffffff80218d47:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff80218d4c:	d3 e0                	shl    %cl,%eax
ffffffff80218d4e:	f7 d0                	not    %eax
ffffffff80218d50:	48 98                	cltq   
ffffffff80218d52:	48 21 04 d5 20 30 22 	and    %rax,-0x7fddcfe0(,%rdx,8)
ffffffff80218d59:	80 
ffffffff80218d5a:	e9 c3 fd ff ff       	jmpq   ffffffff80218b22 <__RME_Thd_Fatal+0xa2>
ffffffff80218d5f:	90                   	nop

ffffffff80218d60 <_RME_Run_Ins>:
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff80218d60:	48 8b 47 28          	mov    0x28(%rdi),%rax
ret_t _RME_Run_Ins(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff80218d64:	48 8b 4f 48          	mov    0x48(%rdi),%rcx
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
ffffffff80218d68:	48 89 c2             	mov    %rax,%rdx
ffffffff80218d6b:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218d6e:	48 c1 e2 0a          	shl    $0xa,%rdx
ffffffff80218d72:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80218d76:	48 8d 14 c2          	lea    (%rdx,%rax,8),%rdx
ffffffff80218d7a:	48 8d 94 16 20 30 22 	lea    -0x7fddcfe0(%rsi,%rdx,1),%rdx
ffffffff80218d81:	80 
ffffffff80218d82:	48 8b 72 08          	mov    0x8(%rdx),%rsi
ffffffff80218d86:	4c 8d 42 08          	lea    0x8(%rdx),%r8
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff80218d8a:	48 89 7a 08          	mov    %rdi,0x8(%rdx)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff80218d8e:	48 89 ca             	mov    %rcx,%rdx
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
ffffffff80218d91:	4c 89 47 08          	mov    %r8,0x8(%rdi)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff80218d95:	48 c1 ea 06          	shr    $0x6,%rdx
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
    New->Prev=(struct RME_List*)Prev;
ffffffff80218d99:	48 89 37             	mov    %rsi,(%rdi)
    Prev->Next=(struct RME_List*)New;
ffffffff80218d9c:	48 89 7e 08          	mov    %rdi,0x8(%rsi)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff80218da0:	48 89 c6             	mov    %rax,%rsi
ffffffff80218da3:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff80218da7:	48 01 f0             	add    %rsi,%rax
ffffffff80218daa:	48 01 d0             	add    %rdx,%rax
ffffffff80218dad:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80218db2:	d3 e2                	shl    %cl,%edx
ffffffff80218db4:	48 63 d2             	movslq %edx,%rdx
ffffffff80218db7:	48 09 14 c5 20 30 22 	or     %rdx,-0x7fddcfe0(,%rax,8)
ffffffff80218dbe:	80 
    
    return 0;
}
ffffffff80218dbf:	31 c0                	xor    %eax,%eax
ffffffff80218dc1:	c3                   	retq   
ffffffff80218dc2:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff80218dc6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff80218dcd:	00 00 00 

ffffffff80218dd0 <_RME_Run_Del>:
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff80218dd0:	48 8b 47 28          	mov    0x28(%rdi),%rax
    
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff80218dd4:	48 8b 77 08          	mov    0x8(%rdi),%rsi
ffffffff80218dd8:	48 8b 17             	mov    (%rdi),%rdx
ret_t _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff80218ddb:	48 8b 4f 48          	mov    0x48(%rdi),%rcx
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff80218ddf:	48 89 16             	mov    %rdx,(%rsi)
    Prev->Next=(struct RME_List*)Next;
ffffffff80218de2:	48 89 72 08          	mov    %rsi,0x8(%rdx)
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
ffffffff80218de6:	48 89 c2             	mov    %rax,%rdx
ffffffff80218de9:	48 c1 e2 0a          	shl    $0xa,%rdx
ffffffff80218ded:	48 89 ce             	mov    %rcx,%rsi
ffffffff80218df0:	48 8d 14 c2          	lea    (%rdx,%rax,8),%rdx
ffffffff80218df4:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff80218df8:	48 8d 94 16 20 30 22 	lea    -0x7fddcfe0(%rsi,%rdx,1),%rdx
ffffffff80218dff:	80 
ffffffff80218e00:	48 8d 72 08          	lea    0x8(%rdx),%rsi
ffffffff80218e04:	48 39 72 10          	cmp    %rsi,0x10(%rdx)
ffffffff80218e08:	74 06                	je     ffffffff80218e10 <_RME_Run_Del+0x40>
        RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]&=~(1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1)));
    
    return 0;
}
ffffffff80218e0a:	31 c0                	xor    %eax,%eax
ffffffff80218e0c:	c3                   	retq   
ffffffff80218e0d:	0f 1f 00             	nopl   (%rax)
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
        RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]&=~(1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1)));
ffffffff80218e10:	48 89 c6             	mov    %rax,%rsi
ffffffff80218e13:	48 89 ca             	mov    %rcx,%rdx
ffffffff80218e16:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff80218e1a:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff80218e1e:	48 01 f0             	add    %rsi,%rax
ffffffff80218e21:	48 01 d0             	add    %rdx,%rax
ffffffff80218e24:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff80218e29:	d3 e2                	shl    %cl,%edx
ffffffff80218e2b:	f7 d2                	not    %edx
ffffffff80218e2d:	48 63 d2             	movslq %edx,%rdx
ffffffff80218e30:	48 21 14 c5 20 30 22 	and    %rdx,-0x7fddcfe0(,%rax,8)
ffffffff80218e37:	80 
    
    return 0;
}
ffffffff80218e38:	31 c0                	xor    %eax,%eax
ffffffff80218e3a:	c3                   	retq   
ffffffff80218e3b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80218e40 <_RME_Run_High>:
    ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=RME_PRIO_WORD_NUM-1;Count>=0;Count--)
    {
        if(RME_Run[CPUID].Bitmap[Count]!=0)
ffffffff80218e40:	48 89 f8             	mov    %rdi,%rax
Input       : ptr_t CPUID - The CPUID of the queue.
Output      : None.
Return      : struct RME_Thd_Struct* - The thread returned.
******************************************************************************/
struct RME_Thd_Struct* _RME_Run_High(ptr_t CPUID)
{
ffffffff80218e43:	53                   	push   %rbx
    ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=RME_PRIO_WORD_NUM-1;Count>=0;Count--)
    {
        if(RME_Run[CPUID].Bitmap[Count]!=0)
ffffffff80218e44:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff80218e48:	48 8d 1c f8          	lea    (%rax,%rdi,8),%rbx
ffffffff80218e4c:	48 8b bb 20 30 22 80 	mov    -0x7fddcfe0(%rbx),%rdi
ffffffff80218e53:	48 85 ff             	test   %rdi,%rdi
ffffffff80218e56:	75 70                	jne    ffffffff80218ec8 <_RME_Run_High+0x88>
            break;
    }
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);
ffffffff80218e58:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80218e5f:	e8 ac e0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218e64:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff80218e6b:	e8 a0 e0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218e70:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80218e77:	e8 94 e0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218e7c:	bf cb 00 00 00       	mov    $0xcb,%edi
ffffffff80218e81:	e8 4a de ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80218e86:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80218e8d:	e8 7e e0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218e92:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80218e99:	e8 72 e0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218e9e:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80218ea5:	e8 66 e0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218eaa:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff80218eb1:	e8 5a e0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218eb6:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80218ebd:	e8 4e e0 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80218ec2:	eb fe                	jmp    ffffffff80218ec2 <_RME_Run_High+0x82>
ffffffff80218ec4:	0f 1f 40 00          	nopl   0x0(%rax)
    /* Get the first "1"'s position in the word */
    Prio=__RME_MSB_Get(RME_Run[CPUID].Bitmap[Count]);
ffffffff80218ec8:	e8 f3 29 ff ff       	callq  ffffffff8020b8c0 <__RME_MSB_Get>
    Prio+=Count<<RME_WORD_ORDER;
    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)RME_Run[CPUID].List[Prio].Next;
ffffffff80218ecd:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff80218ed1:	48 8b 84 03 30 30 22 	mov    -0x7fddcfd0(%rbx,%rax,1),%rax
ffffffff80218ed8:	80 
}
ffffffff80218ed9:	5b                   	pop    %rbx
ffffffff80218eda:	c3                   	retq   
ffffffff80218edb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff80218ee0 <_RME_Run_Notif>:
Return      : ret_t - Always 0.
******************************************************************************/
ret_t _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff80218ee0:	48 8b 47 18          	mov    0x18(%rdi),%rax
ffffffff80218ee4:	48 8d 57 10          	lea    0x10(%rdi),%rdx
ffffffff80218ee8:	48 39 d0             	cmp    %rdx,%rax
ffffffff80218eeb:	74 03                	je     ffffffff80218ef0 <_RME_Run_Notif+0x10>
                       Thd->Sched.Parent->Sched.Event.Prev,
                       &(Thd->Sched.Parent->Sched.Event));
    }
    
    return 0;
}
ffffffff80218eed:	31 c0                	xor    %eax,%eax
ffffffff80218eef:	c3                   	retq   
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
    {
        __RME_List_Ins(&(Thd->Sched.Notif),
                       Thd->Sched.Parent->Sched.Event.Prev,
                       &(Thd->Sched.Parent->Sched.Event));
ffffffff80218ef0:	48 8b 57 68          	mov    0x68(%rdi),%rdx
ret_t _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
    {
        __RME_List_Ins(&(Thd->Sched.Notif),
ffffffff80218ef4:	48 8b 4a 70          	mov    0x70(%rdx),%rcx
                       Thd->Sched.Parent->Sched.Event.Prev,
                       &(Thd->Sched.Parent->Sched.Event));
ffffffff80218ef8:	48 8d 72 70          	lea    0x70(%rdx),%rsi
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff80218efc:	48 89 42 70          	mov    %rax,0x70(%rdx)
    New->Next=(struct RME_List*)Next;
ffffffff80218f00:	48 89 77 18          	mov    %rsi,0x18(%rdi)
    New->Prev=(struct RME_List*)Prev;
ffffffff80218f04:	48 89 4f 10          	mov    %rcx,0x10(%rdi)
    Prev->Next=(struct RME_List*)New;
ffffffff80218f08:	48 89 41 08          	mov    %rax,0x8(%rcx)
                       Thd->Sched.Parent->Sched.Event.Prev,
                       &(Thd->Sched.Parent->Sched.Event));
    }
    
    return 0;
}
ffffffff80218f0c:	31 c0                	xor    %eax,%eax
ffffffff80218f0e:	c3                   	retq   
ffffffff80218f0f:	90                   	nop

ffffffff80218f10 <_RME_Run_Swt>:
Return      : ret_t - Always 0.
******************************************************************************/
ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
                   struct RME_Thd_Struct* Curr_Thd, 
                   struct RME_Thd_Struct* Next_Thd)
{
ffffffff80218f10:	41 54                	push   %r12
ffffffff80218f12:	49 89 fc             	mov    %rdi,%r12
ffffffff80218f15:	55                   	push   %rbp
ffffffff80218f16:	53                   	push   %rbx
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff80218f17:	48 8b be 80 00 00 00 	mov    0x80(%rsi),%rdi
Return      : ret_t - Always 0.
******************************************************************************/
ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
                   struct RME_Thd_Struct* Curr_Thd, 
                   struct RME_Thd_Struct* Next_Thd)
{
ffffffff80218f1e:	48 89 f5             	mov    %rsi,%rbp
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff80218f21:	4c 89 e6             	mov    %r12,%rsi
Return      : ret_t - Always 0.
******************************************************************************/
ret_t _RME_Run_Swt(struct RME_Reg_Struct* Reg,
                   struct RME_Thd_Struct* Curr_Thd, 
                   struct RME_Thd_Struct* Next_Thd)
{
ffffffff80218f24:	48 89 d3             	mov    %rdx,%rbx
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff80218f27:	e8 94 ae ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Save(Reg, &(Curr_Thd->Cur_Reg->Cop_Reg));
ffffffff80218f2c:	48 8b 85 80 00 00 00 	mov    0x80(%rbp),%rax
ffffffff80218f33:	4c 89 e7             	mov    %r12,%rdi
ffffffff80218f36:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff80218f3d:	e8 6e af ff ff       	callq  ffffffff80213eb0 <__RME_Thd_Cop_Save>
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
ffffffff80218f42:	48 8b b3 80 00 00 00 	mov    0x80(%rbx),%rsi
ffffffff80218f49:	4c 89 e7             	mov    %r12,%rdi
ffffffff80218f4c:	e8 6f ae ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));
ffffffff80218f51:	48 8b 83 80 00 00 00 	mov    0x80(%rbx),%rax
ffffffff80218f58:	4c 89 e7             	mov    %r12,%rdi
ffffffff80218f5b:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff80218f62:	e8 59 af ff ff       	callq  ffffffff80213ec0 <__RME_Thd_Cop_Restore>

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff80218f67:	48 8b 95 c0 09 00 00 	mov    0x9c0(%rbp),%rdx
ffffffff80218f6e:	48 8d 85 b8 09 00 00 	lea    0x9b8(%rbp),%rax
ffffffff80218f75:	48 39 c2             	cmp    %rax,%rdx
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff80218f78:	48 8b 83 c0 09 00 00 	mov    0x9c0(%rbx),%rax
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff80218f7f:	74 47                	je     ffffffff80218fc8 <_RME_Run_Swt+0xb8>
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff80218f81:	48 8d 8b b8 09 00 00 	lea    0x9b8(%rbx),%rcx
ffffffff80218f88:	48 39 c8             	cmp    %rcx,%rax
ffffffff80218f8b:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff80218f90:	48 0f 44 c1          	cmove  %rcx,%rax
    
    if(Curr_Inv_Top==0)
ffffffff80218f94:	48 85 d2             	test   %rdx,%rdx
ffffffff80218f97:	74 42                	je     ffffffff80218fdb <_RME_Run_Swt+0xcb>
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
ffffffff80218f99:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    
    if(Next_Inv_Top==0)
ffffffff80218f9d:	48 85 c0             	test   %rax,%rax
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
    
    if(Curr_Inv_Top==0)
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
ffffffff80218fa0:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    
    if(Next_Inv_Top==0)
ffffffff80218fa4:	74 4a                	je     ffffffff80218ff0 <_RME_Run_Swt+0xe0>
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
    else
        Next_Pgtbl=Next_Inv_Top->Proc->Pgtbl;
ffffffff80218fa6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218faa:	48 8b 40 10          	mov    0x10(%rax),%rax
    
    if(RME_CAP_GETOBJ(Curr_Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Next_Pgtbl,ptr_t))
ffffffff80218fae:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff80218fb2:	48 39 7a 18          	cmp    %rdi,0x18(%rdx)
ffffffff80218fb6:	74 05                	je     ffffffff80218fbd <_RME_Run_Swt+0xad>
        __RME_Pgtbl_Set(RME_CAP_GETOBJ(Next_Pgtbl,ptr_t));
ffffffff80218fb8:	e8 23 b3 ff ff       	callq  ffffffff802142e0 <__RME_Pgtbl_Set>
    
    return 0;
}
ffffffff80218fbd:	5b                   	pop    %rbx
ffffffff80218fbe:	31 c0                	xor    %eax,%eax
ffffffff80218fc0:	5d                   	pop    %rbp
ffffffff80218fc1:	41 5c                	pop    %r12
ffffffff80218fc3:	c3                   	retq   
ffffffff80218fc4:	0f 1f 40 00          	nopl   0x0(%rax)
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff80218fc8:	48 8d 93 b8 09 00 00 	lea    0x9b8(%rbx),%rdx
ffffffff80218fcf:	48 39 d0             	cmp    %rdx,%rax
ffffffff80218fd2:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff80218fd7:	48 0f 44 c2          	cmove  %rdx,%rax
    
    if(Curr_Inv_Top==0)
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
ffffffff80218fdb:	48 8b 55 60          	mov    0x60(%rbp),%rdx
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
    
    if(Next_Inv_Top==0)
ffffffff80218fdf:	48 85 c0             	test   %rax,%rax
    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
    
    if(Curr_Inv_Top==0)
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
ffffffff80218fe2:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
    
    if(Next_Inv_Top==0)
ffffffff80218fe6:	75 be                	jne    ffffffff80218fa6 <_RME_Run_Swt+0x96>
ffffffff80218fe8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff80218fef:	00 
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
ffffffff80218ff0:	48 8b 43 60          	mov    0x60(%rbx),%rax
ffffffff80218ff4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff80218ff8:	eb b4                	jmp    ffffffff80218fae <_RME_Run_Swt+0x9e>
ffffffff80218ffa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

ffffffff80219000 <_RME_Prcthd_Init>:
{
    cnt_t CPU_Cnt;
    cnt_t Prio_Cnt;
    
    /* Initialize counters */
    RME_TID_Inc=0;
ffffffff80219000:	48 c7 05 15 a8 04 00 	movq   $0x0,0x4a815(%rip)        # ffffffff80263820 <RME_TID_Inc>
ffffffff80219007:	00 00 00 00 
ffffffff8021900b:	48 c7 c7 28 30 22 80 	mov    $0xffffffff80223028,%rdi
    
    /* Initialize the per-CPU run-queue and bitmap */
    for(CPU_Cnt=0;CPU_Cnt<RME_CPU_NUM;CPU_Cnt++)
ffffffff80219012:	45 31 c0             	xor    %r8d,%r8d
ffffffff80219015:	0f 1f 00             	nopl   (%rax)
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff80219018:	4c 89 c0             	mov    %r8,%rax
Input       : None.
Output      : None.
Return      : ret_t - Always 0.
******************************************************************************/
ret_t _RME_Prcthd_Init(void)
{
ffffffff8021901b:	48 89 f9             	mov    %rdi,%rcx
ffffffff8021901e:	31 d2                	xor    %edx,%edx
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff80219020:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff80219024:	4a 8d 34 c0          	lea    (%rax,%r8,8),%rsi
ffffffff80219028:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021902f:	00 
ffffffff80219030:	48 89 d0             	mov    %rdx,%rax
    RME_TID_Inc=0;
    
    /* Initialize the per-CPU run-queue and bitmap */
    for(CPU_Cnt=0;CPU_Cnt<RME_CPU_NUM;CPU_Cnt++)
    {
        for(Prio_Cnt=0;Prio_Cnt<RME_MAX_PREEMPT_PRIO;Prio_Cnt++)
ffffffff80219033:	48 83 c2 01          	add    $0x1,%rdx
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff80219037:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021903b:	48 01 f0             	add    %rsi,%rax
ffffffff8021903e:	48 89 88 28 30 22 80 	mov    %rcx,-0x7fddcfd8(%rax)
    Head->Next=(struct RME_List*)Head;
ffffffff80219045:	48 89 88 30 30 22 80 	mov    %rcx,-0x7fddcfd0(%rax)
ffffffff8021904c:	48 83 c1 10          	add    $0x10,%rcx
    RME_TID_Inc=0;
    
    /* Initialize the per-CPU run-queue and bitmap */
    for(CPU_Cnt=0;CPU_Cnt<RME_CPU_NUM;CPU_Cnt++)
    {
        for(Prio_Cnt=0;Prio_Cnt<RME_MAX_PREEMPT_PRIO;Prio_Cnt++)
ffffffff80219050:	48 83 fa 40          	cmp    $0x40,%rdx
ffffffff80219054:	75 da                	jne    ffffffff80219030 <_RME_Prcthd_Init+0x30>
ffffffff80219056:	48 c7 47 f8 00 00 00 	movq   $0x0,-0x8(%rdi)
ffffffff8021905d:	00 
ffffffff8021905e:	48 81 c7 08 04 00 00 	add    $0x408,%rdi
    
    /* Initialize counters */
    RME_TID_Inc=0;
    
    /* Initialize the per-CPU run-queue and bitmap */
    for(CPU_Cnt=0;CPU_Cnt<RME_CPU_NUM;CPU_Cnt++)
ffffffff80219065:	49 83 c0 01          	add    $0x1,%r8
ffffffff80219069:	48 81 ff 28 38 26 80 	cmp    $0xffffffff80263828,%rdi
ffffffff80219070:	75 a6                	jne    ffffffff80219018 <_RME_Prcthd_Init+0x18>
            RME_Run[CPU_Cnt].Bitmap[Prio_Cnt>>RME_WORD_ORDER]=0;
            __RME_List_Crt(&(RME_Run[CPU_Cnt].List[Prio_Cnt]));
        }
    }
    return 0;
}
ffffffff80219072:	31 c0                	xor    %eax,%eax
ffffffff80219074:	c3                   	retq   
ffffffff80219075:	90                   	nop
ffffffff80219076:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021907d:	00 00 00 

ffffffff80219080 <_RME_Proc_Boot_Crt>:
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Proc_Boot_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl_Crt,
                         cid_t Cap_Proc, cid_t Cap_Captbl, cid_t Cap_Pgtbl, ptr_t Vaddr)
{
ffffffff80219080:	41 56                	push   %r14
ffffffff80219082:	41 55                	push   %r13
ffffffff80219084:	49 89 d2             	mov    %rdx,%r10
ffffffff80219087:	41 54                	push   %r12
ffffffff80219089:	55                   	push   %rbp
ffffffff8021908a:	53                   	push   %rbx
ffffffff8021908b:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_Cap_Proc* Proc_Crt;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff8021908f:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80219095:	0f 85 55 02 00 00    	jne    ffffffff802192f0 <_RME_Proc_Boot_Crt+0x270>
ffffffff8021909b:	4c 8b 5f 28          	mov    0x28(%rdi),%r11
ffffffff8021909f:	49 39 f3             	cmp    %rsi,%r11
ffffffff802190a2:	0f 86 bf 03 00 00    	jbe    ffffffff80219467 <_RME_Proc_Boot_Crt+0x3e7>
ffffffff802190a8:	48 8b 57 18          	mov    0x18(%rdi),%rdx
ffffffff802190ac:	48 89 f0             	mov    %rsi,%rax
ffffffff802190af:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802190b3:	48 01 d0             	add    %rdx,%rax
ffffffff802190b6:	48 8b 30             	mov    (%rax),%rsi
ffffffff802190b9:	48 89 f7             	mov    %rsi,%rdi
ffffffff802190bc:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff802190c0:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff802190c4:	0f 85 96 02 00 00    	jne    ffffffff80219360 <_RME_Proc_Boot_Crt+0x2e0>
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff802190ca:	f6 c5 80             	test   $0x80,%ch
ffffffff802190cd:	0f 84 ad 02 00 00    	je     ffffffff80219380 <_RME_Proc_Boot_Crt+0x300>
ffffffff802190d3:	48 89 cf             	mov    %rcx,%rdi
ffffffff802190d6:	48 c1 ff 10          	sar    $0x10,%rdi
ffffffff802190da:	4c 39 df             	cmp    %r11,%rdi
ffffffff802190dd:	0f 83 84 03 00 00    	jae    ffffffff80219467 <_RME_Proc_Boot_Crt+0x3e7>
ffffffff802190e3:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff802190e7:	48 bd 00 00 00 00 00 	movabs $0x800000000000,%rbp
ffffffff802190ee:	80 00 00 
ffffffff802190f1:	48 01 d7             	add    %rdx,%rdi
ffffffff802190f4:	48 8b 1f             	mov    (%rdi),%rbx
ffffffff802190f7:	48 85 eb             	test   %rbp,%rbx
ffffffff802190fa:	0f 85 7e 03 00 00    	jne    ffffffff8021947e <_RME_Proc_Boot_Crt+0x3fe>
ffffffff80219100:	48 c1 eb 30          	shr    $0x30,%rbx
ffffffff80219104:	48 83 fb 03          	cmp    $0x3,%rbx
ffffffff80219108:	0f 85 52 02 00 00    	jne    ffffffff80219360 <_RME_Proc_Boot_Crt+0x2e0>
ffffffff8021910e:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff80219114:	48 3b 4f 28          	cmp    0x28(%rdi),%rcx
ffffffff80219118:	0f 83 49 03 00 00    	jae    ffffffff80219467 <_RME_Proc_Boot_Crt+0x3e7>
ffffffff8021911e:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80219122:	48 89 cd             	mov    %rcx,%rbp
ffffffff80219125:	48 03 6f 18          	add    0x18(%rdi),%rbp
ffffffff80219129:	48 8b 7d 00          	mov    0x0(%rbp),%rdi
ffffffff8021912d:	48 89 f9             	mov    %rdi,%rcx
ffffffff80219130:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80219134:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80219138:	0f 85 22 02 00 00    	jne    ffffffff80219360 <_RME_Proc_Boot_Crt+0x2e0>
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);
ffffffff8021913e:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff80219145:	0f 85 55 02 00 00    	jne    ffffffff802193a0 <_RME_Proc_Boot_Crt+0x320>
ffffffff8021914b:	4d 39 d8             	cmp    %r11,%r8
ffffffff8021914e:	0f 83 13 03 00 00    	jae    ffffffff80219467 <_RME_Proc_Boot_Crt+0x3e7>
ffffffff80219154:	4c 89 c1             	mov    %r8,%rcx
ffffffff80219157:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021915b:	4c 8d 2c 11          	lea    (%rcx,%rdx,1),%r13
ffffffff8021915f:	49 8b 4d 00          	mov    0x0(%r13),%rcx
ffffffff80219163:	48 89 ca             	mov    %rcx,%rdx
ffffffff80219166:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021916a:	48 83 fa 04          	cmp    $0x4,%rdx
ffffffff8021916e:	0f 85 ec 01 00 00    	jne    ffffffff80219360 <_RME_Proc_Boot_Crt+0x2e0>
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Crt,RME_CAPTBL_FLAG_CRT);
ffffffff80219174:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021917b:	80 00 00 
ffffffff8021917e:	48 85 d6             	test   %rdx,%rsi
ffffffff80219181:	0f 85 f7 02 00 00    	jne    ffffffff8021947e <_RME_Proc_Boot_Crt+0x3fe>
ffffffff80219187:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff8021918b:	0f 84 bf 02 00 00    	je     ffffffff80219450 <_RME_Proc_Boot_Crt+0x3d0>
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_PROC_CRT);
ffffffff80219191:	48 85 d7             	test   %rdx,%rdi
ffffffff80219194:	0f 85 e4 02 00 00    	jne    ffffffff8021947e <_RME_Proc_Boot_Crt+0x3fe>
ffffffff8021919a:	f6 45 10 40          	testb  $0x40,0x10(%rbp)
ffffffff8021919e:	0f 84 ac 02 00 00    	je     ffffffff80219450 <_RME_Proc_Boot_Crt+0x3d0>
    RME_CAP_CHECK(Pgtbl_Op,RME_PGTBL_FLAG_PROC_CRT);
ffffffff802191a4:	48 85 d1             	test   %rdx,%rcx
ffffffff802191a7:	0f 85 d1 02 00 00    	jne    ffffffff8021947e <_RME_Proc_Boot_Crt+0x3fe>
ffffffff802191ad:	41 f6 45 10 40       	testb  $0x40,0x10(%r13)
ffffffff802191b2:	0f 84 98 02 00 00    	je     ffffffff80219450 <_RME_Proc_Boot_Crt+0x3d0>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Crt,Cap_Proc,struct RME_Cap_Proc*,Proc_Crt);
ffffffff802191b8:	4c 39 50 28          	cmp    %r10,0x28(%rax)
ffffffff802191bc:	0f 86 a5 02 00 00    	jbe    ffffffff80219467 <_RME_Proc_Boot_Crt+0x3e7>
ffffffff802191c2:	4d 89 d4             	mov    %r10,%r12
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Proc_Crt,Type_Ref);
ffffffff802191c5:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff802191ca:	4d 89 ce             	mov    %r9,%r14
    RME_CAP_CHECK(Captbl_Crt,RME_CAPTBL_FLAG_CRT);
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_PROC_CRT);
    RME_CAP_CHECK(Pgtbl_Op,RME_PGTBL_FLAG_PROC_CRT);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Crt,Cap_Proc,struct RME_Cap_Proc*,Proc_Crt);
ffffffff802191cd:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff802191d1:	4c 03 60 18          	add    0x18(%rax),%r12
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Proc_Crt,Type_Ref);
ffffffff802191d5:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff802191dc:	00 00 
ffffffff802191de:	4c 89 e7             	mov    %r12,%rdi
ffffffff802191e1:	e8 9b 26 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff802191e6:	48 85 c0             	test   %rax,%rax
ffffffff802191e9:	0f 84 80 03 00 00    	je     ffffffff8021956f <_RME_Proc_Boot_Crt+0x4ef>
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_PROC_SIZE)!=0)
ffffffff802191ef:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff802191f4:	4c 89 f7             	mov    %r14,%rdi
ffffffff802191f7:	e8 94 dd ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff802191fc:	48 85 c0             	test   %rax,%rax
ffffffff802191ff:	48 89 c3             	mov    %rax,%rbx
ffffffff80219202:	0f 85 48 03 00 00    	jne    ffffffff80219550 <_RME_Proc_Boot_Crt+0x4d0>
    {
        Proc_Crt->Head.Type_Ref=0;
        return RME_ERR_CAP_KOTBL;
    }
    
    Proc_Crt->Head.Parent=0;
ffffffff80219208:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
ffffffff8021920f:	00 00 
    Proc_Crt->Head.Object=Vaddr;
ffffffff80219211:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
    Proc_Struct=((struct RME_Proc_Struct*)Vaddr);
    /* Reference it to make the process undeletable */
    Proc_Struct->Refcnt=1;
    /* Set the capability table, reference it and check for overflow */
    Proc_Struct->Captbl=Captbl_Op;
    Type_Ref=__RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), 1);
ffffffff80219216:	be 01 00 00 00       	mov    $0x1,%esi
    }
    
    Proc_Crt->Head.Parent=0;
    Proc_Crt->Head.Object=Vaddr;
    /* Does not allow changing page tables and capability tables for it */
    Proc_Crt->Head.Flags=RME_PROC_FLAG_INV|RME_PROC_FLAG_THD;
ffffffff8021921b:	49 c7 44 24 10 03 00 	movq   $0x3,0x10(%r12)
ffffffff80219222:	00 00 
    Proc_Struct=((struct RME_Proc_Struct*)Vaddr);
    /* Reference it to make the process undeletable */
    Proc_Struct->Refcnt=1;
    /* Set the capability table, reference it and check for overflow */
    Proc_Struct->Captbl=Captbl_Op;
    Type_Ref=__RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), 1);
ffffffff80219224:	48 89 ef             	mov    %rbp,%rdi
    Proc_Crt->Head.Object=Vaddr;
    /* Does not allow changing page tables and capability tables for it */
    Proc_Crt->Head.Flags=RME_PROC_FLAG_INV|RME_PROC_FLAG_THD;
    Proc_Struct=((struct RME_Proc_Struct*)Vaddr);
    /* Reference it to make the process undeletable */
    Proc_Struct->Refcnt=1;
ffffffff80219227:	49 c7 06 01 00 00 00 	movq   $0x1,(%r14)
    /* Set the capability table, reference it and check for overflow */
    Proc_Struct->Captbl=Captbl_Op;
ffffffff8021922e:	49 89 6e 08          	mov    %rbp,0x8(%r14)
    Type_Ref=__RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), 1);
ffffffff80219232:	e8 67 26 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff80219237:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffff,%rdx
ffffffff8021923e:	7f 00 00 
    Proc_Struct=((struct RME_Proc_Struct*)Vaddr);
    /* Reference it to make the process undeletable */
    Proc_Struct->Refcnt=1;
    /* Set the capability table, reference it and check for overflow */
    Proc_Struct->Captbl=Captbl_Op;
    Type_Ref=__RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), 1);
ffffffff80219241:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff80219246:	48 21 d0             	and    %rdx,%rax
ffffffff80219249:	48 ba fe ff ff ff ff 	movabs $0x3ffffffffffe,%rdx
ffffffff80219250:	3f 00 00 
ffffffff80219253:	48 39 d0             	cmp    %rdx,%rax
ffffffff80219256:	0f 86 a4 01 00 00    	jbe    ffffffff80219400 <_RME_Proc_Boot_Crt+0x380>
    {
        __RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), -1);
ffffffff8021925c:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80219263:	48 89 ef             	mov    %rbp,%rdi
ffffffff80219266:	e8 33 26 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PROC_SIZE)==0);
ffffffff8021926b:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff80219270:	4c 89 f7             	mov    %r14,%rdi
ffffffff80219273:	e8 48 df ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
ffffffff80219278:	48 85 c0             	test   %rax,%rax
ffffffff8021927b:	0f 84 b0 02 00 00    	je     ffffffff80219531 <_RME_Proc_Boot_Crt+0x4b1>
ffffffff80219281:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80219288:	e8 83 dc ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021928d:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff80219294:	e8 77 dc ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219299:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff802192a0:	e8 6b dc ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802192a5:	bf 6f 01 00 00       	mov    $0x16f,%edi
ffffffff802192aa:	e8 21 da ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff802192af:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802192b6:	e8 55 dc ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802192bb:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff802192c2:	e8 49 dc ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802192c7:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff802192ce:	e8 3d dc ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802192d3:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff802192da:	e8 31 dc ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802192df:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802192e6:	e8 25 dc ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802192eb:	eb fe                	jmp    ffffffff802192eb <_RME_Proc_Boot_Crt+0x26b>
ffffffff802192ed:	0f 1f 00             	nopl   (%rax)
    struct RME_Cap_Proc* Proc_Crt;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff802192f0:	4c 8b 5f 28          	mov    0x28(%rdi),%r11
ffffffff802192f4:	48 89 f3             	mov    %rsi,%rbx
ffffffff802192f7:	48 c1 fb 10          	sar    $0x10,%rbx
ffffffff802192fb:	4c 39 db             	cmp    %r11,%rbx
ffffffff802192fe:	0f 83 63 01 00 00    	jae    ffffffff80219467 <_RME_Proc_Boot_Crt+0x3e7>
ffffffff80219304:	48 8b 57 18          	mov    0x18(%rdi),%rdx
ffffffff80219308:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8021930c:	48 89 df             	mov    %rbx,%rdi
ffffffff8021930f:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff80219316:	80 00 00 
ffffffff80219319:	48 01 d7             	add    %rdx,%rdi
ffffffff8021931c:	48 8b 07             	mov    (%rdi),%rax
ffffffff8021931f:	48 85 d8             	test   %rbx,%rax
ffffffff80219322:	0f 85 56 01 00 00    	jne    ffffffff8021947e <_RME_Proc_Boot_Crt+0x3fe>
ffffffff80219328:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021932c:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff80219330:	75 2e                	jne    ffffffff80219360 <_RME_Proc_Boot_Crt+0x2e0>
ffffffff80219332:	48 89 f0             	mov    %rsi,%rax
ffffffff80219335:	25 ff 7f 00 00       	and    $0x7fff,%eax
ffffffff8021933a:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff8021933e:	0f 83 23 01 00 00    	jae    ffffffff80219467 <_RME_Proc_Boot_Crt+0x3e7>
ffffffff80219344:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219348:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021934c:	48 8b 30             	mov    (%rax),%rsi
ffffffff8021934f:	48 89 f7             	mov    %rsi,%rdi
ffffffff80219352:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff80219356:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021935a:	0f 84 6a fd ff ff    	je     ffffffff802190ca <_RME_Proc_Boot_Crt+0x4a>
    
    /* Creation complete */
    Proc_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PROC,0);
    
    return 0;
}
ffffffff80219360:	48 83 c4 10          	add    $0x10,%rsp
    struct RME_Cap_Proc* Proc_Crt;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff80219364:	48 c7 c3 fe ff ff ff 	mov    $0xfffffffffffffffe,%rbx
    
    /* Creation complete */
    Proc_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PROC,0);
    
    return 0;
}
ffffffff8021936b:	48 89 d8             	mov    %rbx,%rax
ffffffff8021936e:	5b                   	pop    %rbx
ffffffff8021936f:	5d                   	pop    %rbp
ffffffff80219370:	41 5c                	pop    %r12
ffffffff80219372:	41 5d                	pop    %r13
ffffffff80219374:	41 5e                	pop    %r14
ffffffff80219376:	c3                   	retq   
ffffffff80219377:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021937e:	00 00 
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80219380:	4c 39 d9             	cmp    %r11,%rcx
ffffffff80219383:	0f 83 de 00 00 00    	jae    ffffffff80219467 <_RME_Proc_Boot_Crt+0x3e7>
ffffffff80219389:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021938d:	48 8d 2c 11          	lea    (%rcx,%rdx,1),%rbp
ffffffff80219391:	e9 93 fd ff ff       	jmpq   ffffffff80219129 <_RME_Proc_Boot_Crt+0xa9>
ffffffff80219396:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021939d:	00 00 00 
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);
ffffffff802193a0:	4c 89 c1             	mov    %r8,%rcx
ffffffff802193a3:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff802193a7:	4c 39 d9             	cmp    %r11,%rcx
ffffffff802193aa:	0f 83 b7 00 00 00    	jae    ffffffff80219467 <_RME_Proc_Boot_Crt+0x3e7>
ffffffff802193b0:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff802193b4:	49 bb 00 00 00 00 00 	movabs $0x800000000000,%r11
ffffffff802193bb:	80 00 00 
ffffffff802193be:	48 01 ca             	add    %rcx,%rdx
ffffffff802193c1:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff802193c4:	4c 85 d9             	test   %r11,%rcx
ffffffff802193c7:	0f 85 b1 00 00 00    	jne    ffffffff8021947e <_RME_Proc_Boot_Crt+0x3fe>
ffffffff802193cd:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff802193d1:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff802193d5:	75 89                	jne    ffffffff80219360 <_RME_Proc_Boot_Crt+0x2e0>
ffffffff802193d7:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff802193de:	4c 3b 42 28          	cmp    0x28(%rdx),%r8
ffffffff802193e2:	0f 83 7f 00 00 00    	jae    ffffffff80219467 <_RME_Proc_Boot_Crt+0x3e7>
ffffffff802193e8:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff802193ec:	4c 89 c1             	mov    %r8,%rcx
ffffffff802193ef:	48 03 4a 18          	add    0x18(%rdx),%rcx
ffffffff802193f3:	49 89 cd             	mov    %rcx,%r13
ffffffff802193f6:	e9 64 fd ff ff       	jmpq   ffffffff8021915f <_RME_Proc_Boot_Crt+0xdf>
ffffffff802193fb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PROC_SIZE)==0);
        Proc_Crt->Head.Type_Ref=0;
        return RME_ERR_CAP_REFCNT;
    }
    /* Set the page table, reference it and check for overflow */
    Proc_Struct->Pgtbl=Pgtbl_Op;
ffffffff80219400:	4d 89 6e 10          	mov    %r13,0x10(%r14)
    Type_Ref=__RME_Fetch_Add(&(Pgtbl_Op->Head.Type_Ref), 1);
ffffffff80219404:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219409:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021940c:	e8 8d 24 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff80219411:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffff,%rdx
ffffffff80219418:	7f 00 00 
        Proc_Crt->Head.Type_Ref=0;
        return RME_ERR_CAP_REFCNT;
    }
    /* Set the page table, reference it and check for overflow */
    Proc_Struct->Pgtbl=Pgtbl_Op;
    Type_Ref=__RME_Fetch_Add(&(Pgtbl_Op->Head.Type_Ref), 1);
ffffffff8021941b:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff80219420:	48 21 d0             	and    %rdx,%rax
ffffffff80219423:	48 ba fe ff ff ff ff 	movabs $0x3ffffffffffe,%rdx
ffffffff8021942a:	3f 00 00 
ffffffff8021942d:	48 39 d0             	cmp    %rdx,%rax
ffffffff80219430:	77 63                	ja     ffffffff80219495 <_RME_Proc_Boot_Crt+0x415>
        Proc_Crt->Head.Type_Ref=0;
        return RME_ERR_CAP_REFCNT;
    }
    
    /* Creation complete */
    Proc_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PROC,0);
ffffffff80219432:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff80219439:	00 05 00 
ffffffff8021943c:	49 89 04 24          	mov    %rax,(%r12)
    
    return 0;
}
ffffffff80219440:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219444:	48 89 d8             	mov    %rbx,%rax
ffffffff80219447:	5b                   	pop    %rbx
ffffffff80219448:	5d                   	pop    %rbp
ffffffff80219449:	41 5c                	pop    %r12
ffffffff8021944b:	41 5d                	pop    %r13
ffffffff8021944d:	41 5e                	pop    %r14
ffffffff8021944f:	c3                   	retq   
ffffffff80219450:	48 83 c4 10          	add    $0x10,%rsp
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Crt,RME_CAPTBL_FLAG_CRT);
ffffffff80219454:	48 c7 c3 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rbx
    
    /* Creation complete */
    Proc_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PROC,0);
    
    return 0;
}
ffffffff8021945b:	48 89 d8             	mov    %rbx,%rax
ffffffff8021945e:	5b                   	pop    %rbx
ffffffff8021945f:	5d                   	pop    %rbp
ffffffff80219460:	41 5c                	pop    %r12
ffffffff80219462:	41 5d                	pop    %r13
ffffffff80219464:	41 5e                	pop    %r14
ffffffff80219466:	c3                   	retq   
ffffffff80219467:	48 83 c4 10          	add    $0x10,%rsp
    struct RME_Cap_Proc* Proc_Crt;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff8021946b:	48 c7 c3 fd ff ff ff 	mov    $0xfffffffffffffffd,%rbx
    
    /* Creation complete */
    Proc_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PROC,0);
    
    return 0;
}
ffffffff80219472:	48 89 d8             	mov    %rbx,%rax
ffffffff80219475:	5b                   	pop    %rbx
ffffffff80219476:	5d                   	pop    %rbp
ffffffff80219477:	41 5c                	pop    %r12
ffffffff80219479:	41 5d                	pop    %r13
ffffffff8021947b:	41 5e                	pop    %r14
ffffffff8021947d:	c3                   	retq   
ffffffff8021947e:	48 83 c4 10          	add    $0x10,%rsp
    struct RME_Cap_Proc* Proc_Crt;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff80219482:	48 c7 c3 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rbx
    
    /* Creation complete */
    Proc_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PROC,0);
    
    return 0;
}
ffffffff80219489:	48 89 d8             	mov    %rbx,%rax
ffffffff8021948c:	5b                   	pop    %rbx
ffffffff8021948d:	5d                   	pop    %rbp
ffffffff8021948e:	41 5c                	pop    %r12
ffffffff80219490:	41 5d                	pop    %r13
ffffffff80219492:	41 5e                	pop    %r14
ffffffff80219494:	c3                   	retq   
    /* Set the page table, reference it and check for overflow */
    Proc_Struct->Pgtbl=Pgtbl_Op;
    Type_Ref=__RME_Fetch_Add(&(Pgtbl_Op->Head.Type_Ref), 1);
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
    {
        __RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), -1);
ffffffff80219495:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021949c:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021949f:	e8 fa 23 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        __RME_Fetch_Add(&(Pgtbl_Op->Head.Type_Ref), -1);
ffffffff802194a4:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff802194ab:	4c 89 ef             	mov    %r13,%rdi
ffffffff802194ae:	e8 eb 23 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PROC_SIZE)==0);
ffffffff802194b3:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff802194b8:	4c 89 f7             	mov    %r14,%rdi
ffffffff802194bb:	e8 00 dd ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
ffffffff802194c0:	48 85 c0             	test   %rax,%rax
ffffffff802194c3:	74 6c                	je     ffffffff80219531 <_RME_Proc_Boot_Crt+0x4b1>
ffffffff802194c5:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff802194cc:	e8 3f da ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802194d1:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff802194d8:	e8 33 da ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802194dd:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff802194e4:	e8 27 da ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802194e9:	bf 7a 01 00 00       	mov    $0x17a,%edi
ffffffff802194ee:	e8 dd d7 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff802194f3:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802194fa:	e8 11 da ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802194ff:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80219506:	e8 05 da ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021950b:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80219512:	e8 f9 d9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219517:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff8021951e:	e8 ed d9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219523:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021952a:	e8 e1 d9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021952f:	eb fe                	jmp    ffffffff8021952f <_RME_Proc_Boot_Crt+0x4af>
        Proc_Crt->Head.Type_Ref=0;
ffffffff80219531:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffffff80219538:	00 
        return RME_ERR_CAP_REFCNT;
ffffffff80219539:	48 c7 c3 fa ff ff ff 	mov    $0xfffffffffffffffa,%rbx
    
    /* Creation complete */
    Proc_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PROC,0);
    
    return 0;
}
ffffffff80219540:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219544:	48 89 d8             	mov    %rbx,%rax
ffffffff80219547:	5b                   	pop    %rbx
ffffffff80219548:	5d                   	pop    %rbp
ffffffff80219549:	41 5c                	pop    %r12
ffffffff8021954b:	41 5d                	pop    %r13
ffffffff8021954d:	41 5e                	pop    %r14
ffffffff8021954f:	c3                   	retq   
    RME_CAPTBL_OCCUPY(Proc_Crt,Type_Ref);
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_PROC_SIZE)!=0)
    {
        Proc_Crt->Head.Type_Ref=0;
ffffffff80219550:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffffff80219557:	00 
        return RME_ERR_CAP_KOTBL;
ffffffff80219558:	48 c7 c3 fc ff ff ff 	mov    $0xfffffffffffffffc,%rbx
    
    /* Creation complete */
    Proc_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PROC,0);
    
    return 0;
}
ffffffff8021955f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219563:	48 89 d8             	mov    %rbx,%rax
ffffffff80219566:	5b                   	pop    %rbx
ffffffff80219567:	5d                   	pop    %rbp
ffffffff80219568:	41 5c                	pop    %r12
ffffffff8021956a:	41 5d                	pop    %r13
ffffffff8021956c:	41 5e                	pop    %r14
ffffffff8021956e:	c3                   	retq   
ffffffff8021956f:	48 83 c4 10          	add    $0x10,%rsp
    RME_CAP_CHECK(Pgtbl_Op,RME_PGTBL_FLAG_PROC_CRT);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Crt,Cap_Proc,struct RME_Cap_Proc*,Proc_Crt);
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Proc_Crt,Type_Ref);
ffffffff80219573:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx
    
    /* Creation complete */
    Proc_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PROC,0);
    
    return 0;
}
ffffffff8021957a:	48 89 d8             	mov    %rbx,%rax
ffffffff8021957d:	5b                   	pop    %rbx
ffffffff8021957e:	5d                   	pop    %rbp
ffffffff8021957f:	41 5c                	pop    %r12
ffffffff80219581:	41 5d                	pop    %r13
ffffffff80219583:	41 5e                	pop    %r14
ffffffff80219585:	c3                   	retq   
ffffffff80219586:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021958d:	00 00 00 

ffffffff80219590 <_RME_Proc_Crt>:
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Proc_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl_Crt, cid_t Cap_Kmem,
                    cid_t Cap_Proc, cid_t Cap_Captbl, cid_t Cap_Pgtbl, ptr_t Vaddr)
{
ffffffff80219590:	41 57                	push   %r15
ffffffff80219592:	41 56                	push   %r14
ffffffff80219594:	41 55                	push   %r13
ffffffff80219596:	41 54                	push   %r12
ffffffff80219598:	55                   	push   %rbp
ffffffff80219599:	53                   	push   %rbx
ffffffff8021959a:	48 83 ec 28          	sub    $0x28,%rsp
    struct RME_Cap_Proc* Proc_Crt;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff8021959e:	f7 c6 00 80 00 00    	test   $0x8000,%esi
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Proc_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl_Crt, cid_t Cap_Kmem,
                    cid_t Cap_Proc, cid_t Cap_Captbl, cid_t Cap_Pgtbl, ptr_t Vaddr)
{
ffffffff802195a4:	4c 8b 6c 24 60       	mov    0x60(%rsp),%r13
    struct RME_Cap_Proc* Proc_Crt;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff802195a9:	0f 85 61 02 00 00    	jne    ffffffff80219810 <_RME_Proc_Crt+0x280>
ffffffff802195af:	4c 8b 5f 28          	mov    0x28(%rdi),%r11
ffffffff802195b3:	49 39 f3             	cmp    %rsi,%r11
ffffffff802195b6:	0f 86 1b 05 00 00    	jbe    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff802195bc:	4c 8b 57 18          	mov    0x18(%rdi),%r10
ffffffff802195c0:	48 89 f0             	mov    %rsi,%rax
ffffffff802195c3:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff802195c7:	4c 01 d0             	add    %r10,%rax
ffffffff802195ca:	48 8b 38             	mov    (%rax),%rdi
ffffffff802195cd:	48 89 fe             	mov    %rdi,%rsi
ffffffff802195d0:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff802195d4:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff802195d8:	0f 85 a2 02 00 00    	jne    ffffffff80219880 <_RME_Proc_Crt+0x2f0>
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff802195de:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff802195e5:	0f 84 a5 02 00 00    	je     ffffffff80219890 <_RME_Proc_Crt+0x300>
ffffffff802195eb:	4c 89 c6             	mov    %r8,%rsi
ffffffff802195ee:	48 c1 fe 10          	sar    $0x10,%rsi
ffffffff802195f2:	4c 39 de             	cmp    %r11,%rsi
ffffffff802195f5:	0f 83 dc 04 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff802195fb:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802195ff:	48 bd 00 00 00 00 00 	movabs $0x800000000000,%rbp
ffffffff80219606:	80 00 00 
ffffffff80219609:	4c 01 d6             	add    %r10,%rsi
ffffffff8021960c:	48 8b 1e             	mov    (%rsi),%rbx
ffffffff8021960f:	48 85 eb             	test   %rbp,%rbx
ffffffff80219612:	0f 85 cb 04 00 00    	jne    ffffffff80219ae3 <_RME_Proc_Crt+0x553>
ffffffff80219618:	48 c1 eb 30          	shr    $0x30,%rbx
ffffffff8021961c:	48 83 fb 03          	cmp    $0x3,%rbx
ffffffff80219620:	0f 85 5a 02 00 00    	jne    ffffffff80219880 <_RME_Proc_Crt+0x2f0>
ffffffff80219626:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8021962d:	4c 3b 46 28          	cmp    0x28(%rsi),%r8
ffffffff80219631:	0f 83 a0 04 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff80219637:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8021963b:	4c 03 46 18          	add    0x18(%rsi),%r8
ffffffff8021963f:	4c 89 c5             	mov    %r8,%rbp
ffffffff80219642:	4c 8b 45 00          	mov    0x0(%rbp),%r8
ffffffff80219646:	4c 89 c6             	mov    %r8,%rsi
ffffffff80219649:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021964d:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80219651:	0f 85 29 02 00 00    	jne    ffffffff80219880 <_RME_Proc_Crt+0x2f0>
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);
ffffffff80219657:	41 f7 c1 00 80 00 00 	test   $0x8000,%r9d
ffffffff8021965e:	0f 85 ac 02 00 00    	jne    ffffffff80219910 <_RME_Proc_Crt+0x380>
ffffffff80219664:	4d 39 d9             	cmp    %r11,%r9
ffffffff80219667:	0f 83 6a 04 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff8021966d:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff80219671:	4f 8d 24 11          	lea    (%r9,%r10,1),%r12
ffffffff80219675:	4d 8b 0c 24          	mov    (%r12),%r9
ffffffff80219679:	4c 89 ce             	mov    %r9,%rsi
ffffffff8021967c:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80219680:	48 83 fe 04          	cmp    $0x4,%rsi
ffffffff80219684:	0f 85 f6 01 00 00    	jne    ffffffff80219880 <_RME_Proc_Crt+0x2f0>
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021968a:	f6 c6 80             	test   $0x80,%dh
ffffffff8021968d:	0f 85 1d 02 00 00    	jne    ffffffff802198b0 <_RME_Proc_Crt+0x320>
ffffffff80219693:	4c 39 da             	cmp    %r11,%rdx
ffffffff80219696:	0f 83 3b 04 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff8021969c:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802196a0:	4c 01 d2             	add    %r10,%rdx
ffffffff802196a3:	66 83 7a 06 02       	cmpw   $0x2,0x6(%rdx)
ffffffff802196a8:	0f 85 d2 01 00 00    	jne    ffffffff80219880 <_RME_Proc_Crt+0x2f0>
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Crt,RME_CAPTBL_FLAG_CRT);
ffffffff802196ae:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff802196b5:	80 00 00 
ffffffff802196b8:	48 85 f7             	test   %rsi,%rdi
ffffffff802196bb:	0f 85 22 04 00 00    	jne    ffffffff80219ae3 <_RME_Proc_Crt+0x553>
ffffffff802196c1:	f6 40 10 01          	testb  $0x1,0x10(%rax)
ffffffff802196c5:	0f 84 00 04 00 00    	je     ffffffff80219acb <_RME_Proc_Crt+0x53b>
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_PROC_CRT);
ffffffff802196cb:	49 85 f0             	test   %rsi,%r8
ffffffff802196ce:	0f 85 0f 04 00 00    	jne    ffffffff80219ae3 <_RME_Proc_Crt+0x553>
ffffffff802196d4:	f6 45 10 40          	testb  $0x40,0x10(%rbp)
ffffffff802196d8:	0f 84 ed 03 00 00    	je     ffffffff80219acb <_RME_Proc_Crt+0x53b>
    RME_CAP_CHECK(Pgtbl_Op,RME_PGTBL_FLAG_PROC_CRT);
ffffffff802196de:	49 85 f1             	test   %rsi,%r9
ffffffff802196e1:	0f 85 fc 03 00 00    	jne    ffffffff80219ae3 <_RME_Proc_Crt+0x553>
ffffffff802196e7:	41 f6 44 24 10 40    	testb  $0x40,0x10(%r12)
ffffffff802196ed:	0f 84 d8 03 00 00    	je     ffffffff80219acb <_RME_Proc_Crt+0x53b>
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PROC,Vaddr,RME_PROC_SIZE);
ffffffff802196f3:	f6 42 10 04          	testb  $0x4,0x10(%rdx)
ffffffff802196f7:	0f 84 ce 03 00 00    	je     ffffffff80219acb <_RME_Proc_Crt+0x53b>
ffffffff802196fd:	4c 39 6a 28          	cmp    %r13,0x28(%rdx)
ffffffff80219701:	0f 87 c4 03 00 00    	ja     ffffffff80219acb <_RME_Proc_Crt+0x53b>
ffffffff80219707:	49 8d 75 18          	lea    0x18(%r13),%rsi
ffffffff8021970b:	48 39 72 30          	cmp    %rsi,0x30(%rdx)
ffffffff8021970f:	0f 82 b6 03 00 00    	jb     ffffffff80219acb <_RME_Proc_Crt+0x53b>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Crt,Cap_Proc,struct RME_Cap_Proc*,Proc_Crt);
ffffffff80219715:	48 39 48 28          	cmp    %rcx,0x28(%rax)
ffffffff80219719:	0f 86 b8 03 00 00    	jbe    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff8021971f:	49 89 ce             	mov    %rcx,%r14
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Proc_Crt,Type_Ref);
ffffffff80219722:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
ffffffff80219727:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021972e:	80 00 00 
    RME_CAP_CHECK(Pgtbl_Op,RME_PGTBL_FLAG_PROC_CRT);
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PROC,Vaddr,RME_PROC_SIZE);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Crt,Cap_Proc,struct RME_Cap_Proc*,Proc_Crt);
ffffffff80219731:	49 c1 e6 06          	shl    $0x6,%r14
ffffffff80219735:	4c 03 70 18          	add    0x18(%rax),%r14
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Proc_Crt,Type_Ref);
ffffffff80219739:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
ffffffff80219740:	00 00 
ffffffff80219742:	4c 89 f7             	mov    %r14,%rdi
ffffffff80219745:	e8 37 21 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021974a:	48 85 c0             	test   %rax,%rax
ffffffff8021974d:	0f 84 6c 03 00 00    	je     ffffffff80219abf <_RME_Proc_Crt+0x52f>
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_PROC_SIZE)!=0)
ffffffff80219753:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff80219758:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021975b:	e8 30 d8 ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff80219760:	48 85 c0             	test   %rax,%rax
ffffffff80219763:	48 89 c3             	mov    %rax,%rbx
ffffffff80219766:	0f 85 40 03 00 00    	jne    ffffffff80219aac <_RME_Proc_Crt+0x51c>
    {
        Proc_Crt->Head.Type_Ref=0;
        return RME_ERR_CAP_KOTBL;
    }
    
    Proc_Crt->Head.Parent=0;
ffffffff8021976c:	49 c7 46 08 00 00 00 	movq   $0x0,0x8(%r14)
ffffffff80219773:	00 
    Proc_Crt->Head.Object=Vaddr;
ffffffff80219774:	4d 89 6e 18          	mov    %r13,0x18(%r14)
                         RME_PROC_FLAG_CPT|RME_PROC_FLAG_PGT;
    Proc_Struct=((struct RME_Proc_Struct*)Vaddr);
    /* Set the capability table, reference it and check for overflow */
    Proc_Struct->Captbl=Captbl_Op;
    Proc_Struct->Refcnt=0;
    Type_Ref=__RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), 1);
ffffffff80219778:	be 01 00 00 00       	mov    $0x1,%esi
        return RME_ERR_CAP_KOTBL;
    }
    
    Proc_Crt->Head.Parent=0;
    Proc_Crt->Head.Object=Vaddr;
    Proc_Crt->Head.Flags=RME_PROC_FLAG_INV|RME_PROC_FLAG_THD|
ffffffff8021977d:	49 c7 46 10 0f 00 00 	movq   $0xf,0x10(%r14)
ffffffff80219784:	00 
                         RME_PROC_FLAG_CPT|RME_PROC_FLAG_PGT;
    Proc_Struct=((struct RME_Proc_Struct*)Vaddr);
    /* Set the capability table, reference it and check for overflow */
    Proc_Struct->Captbl=Captbl_Op;
    Proc_Struct->Refcnt=0;
    Type_Ref=__RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), 1);
ffffffff80219785:	48 89 ef             	mov    %rbp,%rdi
    Proc_Crt->Head.Object=Vaddr;
    Proc_Crt->Head.Flags=RME_PROC_FLAG_INV|RME_PROC_FLAG_THD|
                         RME_PROC_FLAG_CPT|RME_PROC_FLAG_PGT;
    Proc_Struct=((struct RME_Proc_Struct*)Vaddr);
    /* Set the capability table, reference it and check for overflow */
    Proc_Struct->Captbl=Captbl_Op;
ffffffff80219788:	49 89 6d 08          	mov    %rbp,0x8(%r13)
    Proc_Struct->Refcnt=0;
ffffffff8021978c:	49 c7 45 00 00 00 00 	movq   $0x0,0x0(%r13)
ffffffff80219793:	00 
    Type_Ref=__RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), 1);
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff80219794:	49 bf ff ff ff ff ff 	movabs $0x7fffffffffff,%r15
ffffffff8021979b:	7f 00 00 
                         RME_PROC_FLAG_CPT|RME_PROC_FLAG_PGT;
    Proc_Struct=((struct RME_Proc_Struct*)Vaddr);
    /* Set the capability table, reference it and check for overflow */
    Proc_Struct->Captbl=Captbl_Op;
    Proc_Struct->Refcnt=0;
    Type_Ref=__RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), 1);
ffffffff8021979e:	e8 fb 20 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff802197a3:	48 ba fe ff ff ff ff 	movabs $0x3ffffffffffe,%rdx
ffffffff802197aa:	3f 00 00 
                         RME_PROC_FLAG_CPT|RME_PROC_FLAG_PGT;
    Proc_Struct=((struct RME_Proc_Struct*)Vaddr);
    /* Set the capability table, reference it and check for overflow */
    Proc_Struct->Captbl=Captbl_Op;
    Proc_Struct->Refcnt=0;
    Type_Ref=__RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), 1);
ffffffff802197ad:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff802197b2:	4c 21 f8             	and    %r15,%rax
ffffffff802197b5:	48 39 d0             	cmp    %rdx,%rax
ffffffff802197b8:	0f 87 b2 01 00 00    	ja     ffffffff80219970 <_RME_Proc_Crt+0x3e0>
        RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PROC_SIZE)==0);
        Proc_Crt->Head.Type_Ref=0;
        return RME_ERR_CAP_REFCNT;
    }
    /* Set the page table, reference it and check for overflow */
    Proc_Struct->Pgtbl=Pgtbl_Op;
ffffffff802197be:	4d 89 65 10          	mov    %r12,0x10(%r13)
    Type_Ref=__RME_Fetch_Add(&(Pgtbl_Op->Head.Type_Ref), 1);
ffffffff802197c2:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff802197c7:	4c 89 e7             	mov    %r12,%rdi
ffffffff802197ca:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
ffffffff802197cf:	e8 ca 20 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff802197d4:	48 8b 54 24 08       	mov    0x8(%rsp),%rdx
ffffffff802197d9:	49 21 c7             	and    %rax,%r15
        Proc_Crt->Head.Type_Ref=0;
        return RME_ERR_CAP_REFCNT;
    }
    /* Set the page table, reference it and check for overflow */
    Proc_Struct->Pgtbl=Pgtbl_Op;
    Type_Ref=__RME_Fetch_Add(&(Pgtbl_Op->Head.Type_Ref), 1);
ffffffff802197dc:	48 89 44 24 18       	mov    %rax,0x18(%rsp)
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff802197e1:	49 39 d7             	cmp    %rdx,%r15
ffffffff802197e4:	0f 87 26 02 00 00    	ja     ffffffff80219a10 <_RME_Proc_Crt+0x480>
        Proc_Crt->Head.Type_Ref=0;
        return RME_ERR_CAP_REFCNT;
    }
    
    /* Creation complete */
    Proc_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_PROC,0);
ffffffff802197ea:	48 b8 00 00 00 00 00 	movabs $0x5000000000000,%rax
ffffffff802197f1:	00 05 00 
ffffffff802197f4:	49 89 06             	mov    %rax,(%r14)
    
    return 0;
}
ffffffff802197f7:	48 83 c4 28          	add    $0x28,%rsp
ffffffff802197fb:	48 89 d8             	mov    %rbx,%rax
ffffffff802197fe:	5b                   	pop    %rbx
ffffffff802197ff:	5d                   	pop    %rbp
ffffffff80219800:	41 5c                	pop    %r12
ffffffff80219802:	41 5d                	pop    %r13
ffffffff80219804:	41 5e                	pop    %r14
ffffffff80219806:	41 5f                	pop    %r15
ffffffff80219808:	c3                   	retq   
ffffffff80219809:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    struct RME_Cap_Proc* Proc_Crt;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff80219810:	4c 8b 5f 28          	mov    0x28(%rdi),%r11
ffffffff80219814:	48 89 f0             	mov    %rsi,%rax
ffffffff80219817:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021981b:	4c 39 d8             	cmp    %r11,%rax
ffffffff8021981e:	0f 83 b3 02 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff80219824:	4c 8b 57 18          	mov    0x18(%rdi),%r10
ffffffff80219828:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021982c:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff80219833:	80 00 00 
ffffffff80219836:	4a 8d 3c 10          	lea    (%rax,%r10,1),%rdi
ffffffff8021983a:	48 8b 07             	mov    (%rdi),%rax
ffffffff8021983d:	48 85 d8             	test   %rbx,%rax
ffffffff80219840:	0f 85 9d 02 00 00    	jne    ffffffff80219ae3 <_RME_Proc_Crt+0x553>
ffffffff80219846:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021984a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021984e:	75 30                	jne    ffffffff80219880 <_RME_Proc_Crt+0x2f0>
ffffffff80219850:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80219856:	48 3b 77 28          	cmp    0x28(%rdi),%rsi
ffffffff8021985a:	0f 83 77 02 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff80219860:	48 89 f0             	mov    %rsi,%rax
ffffffff80219863:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219867:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021986b:	48 8b 38             	mov    (%rax),%rdi
ffffffff8021986e:	48 89 fe             	mov    %rdi,%rsi
ffffffff80219871:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80219875:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80219879:	0f 84 5f fd ff ff    	je     ffffffff802195de <_RME_Proc_Crt+0x4e>
ffffffff8021987f:	90                   	nop
ffffffff80219880:	48 c7 c3 fe ff ff ff 	mov    $0xfffffffffffffffe,%rbx
ffffffff80219887:	e9 6b ff ff ff       	jmpq   ffffffff802197f7 <_RME_Proc_Crt+0x267>
ffffffff8021988c:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff80219890:	4d 39 d8             	cmp    %r11,%r8
ffffffff80219893:	0f 83 3e 02 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff80219899:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8021989d:	4b 8d 2c 10          	lea    (%r8,%r10,1),%rbp
ffffffff802198a1:	e9 9c fd ff ff       	jmpq   ffffffff80219642 <_RME_Proc_Crt+0xb2>
ffffffff802198a6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff802198ad:	00 00 00 
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff802198b0:	48 89 d6             	mov    %rdx,%rsi
ffffffff802198b3:	48 c1 fe 10          	sar    $0x10,%rsi
ffffffff802198b7:	4c 39 de             	cmp    %r11,%rsi
ffffffff802198ba:	0f 83 17 02 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff802198c0:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff802198c4:	49 bb 00 00 00 00 00 	movabs $0x800000000000,%r11
ffffffff802198cb:	80 00 00 
ffffffff802198ce:	4c 01 d6             	add    %r10,%rsi
ffffffff802198d1:	4c 8b 16             	mov    (%rsi),%r10
ffffffff802198d4:	4d 85 da             	test   %r11,%r10
ffffffff802198d7:	0f 85 06 02 00 00    	jne    ffffffff80219ae3 <_RME_Proc_Crt+0x553>
ffffffff802198dd:	49 c1 ea 30          	shr    $0x30,%r10
ffffffff802198e1:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff802198e5:	75 99                	jne    ffffffff80219880 <_RME_Proc_Crt+0x2f0>
ffffffff802198e7:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff802198ed:	48 3b 56 28          	cmp    0x28(%rsi),%rdx
ffffffff802198f1:	0f 83 e0 01 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff802198f7:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff802198fb:	48 03 56 18          	add    0x18(%rsi),%rdx
ffffffff802198ff:	66 83 7a 06 02       	cmpw   $0x2,0x6(%rdx)
ffffffff80219904:	0f 84 a4 fd ff ff    	je     ffffffff802196ae <_RME_Proc_Crt+0x11e>
ffffffff8021990a:	e9 71 ff ff ff       	jmpq   ffffffff80219880 <_RME_Proc_Crt+0x2f0>
ffffffff8021990f:	90                   	nop
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);
ffffffff80219910:	4c 89 ce             	mov    %r9,%rsi
ffffffff80219913:	48 c1 fe 10          	sar    $0x10,%rsi
ffffffff80219917:	4c 39 de             	cmp    %r11,%rsi
ffffffff8021991a:	0f 83 b7 01 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff80219920:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80219924:	49 bc 00 00 00 00 00 	movabs $0x800000000000,%r12
ffffffff8021992b:	80 00 00 
ffffffff8021992e:	4c 01 d6             	add    %r10,%rsi
ffffffff80219931:	48 8b 1e             	mov    (%rsi),%rbx
ffffffff80219934:	4c 85 e3             	test   %r12,%rbx
ffffffff80219937:	0f 85 a6 01 00 00    	jne    ffffffff80219ae3 <_RME_Proc_Crt+0x553>
ffffffff8021993d:	48 c1 eb 30          	shr    $0x30,%rbx
ffffffff80219941:	48 83 fb 03          	cmp    $0x3,%rbx
ffffffff80219945:	0f 85 35 ff ff ff    	jne    ffffffff80219880 <_RME_Proc_Crt+0x2f0>
ffffffff8021994b:	41 81 e1 ff 7f 00 00 	and    $0x7fff,%r9d
ffffffff80219952:	4c 3b 4e 28          	cmp    0x28(%rsi),%r9
ffffffff80219956:	0f 83 7b 01 00 00    	jae    ffffffff80219ad7 <_RME_Proc_Crt+0x547>
ffffffff8021995c:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff80219960:	4c 03 4e 18          	add    0x18(%rsi),%r9
ffffffff80219964:	4d 89 cc             	mov    %r9,%r12
ffffffff80219967:	e9 09 fd ff ff       	jmpq   ffffffff80219675 <_RME_Proc_Crt+0xe5>
ffffffff8021996c:	0f 1f 40 00          	nopl   0x0(%rax)
    Proc_Struct->Captbl=Captbl_Op;
    Proc_Struct->Refcnt=0;
    Type_Ref=__RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), 1);
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
    {
        __RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), -1);
ffffffff80219970:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80219977:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021997a:	e8 1f 1f ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PROC_SIZE)==0);
ffffffff8021997f:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff80219984:	4c 89 ef             	mov    %r13,%rdi
ffffffff80219987:	e8 34 d8 ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
ffffffff8021998c:	48 85 c0             	test   %rax,%rax
ffffffff8021998f:	74 6c                	je     ffffffff802199fd <_RME_Proc_Crt+0x46d>
ffffffff80219991:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80219998:	e8 73 d5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021999d:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff802199a4:	e8 67 d5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802199a9:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff802199b0:	e8 5b d5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802199b5:	bf c7 01 00 00       	mov    $0x1c7,%edi
ffffffff802199ba:	e8 11 d3 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff802199bf:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802199c6:	e8 45 d5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802199cb:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff802199d2:	e8 39 d5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802199d7:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff802199de:	e8 2d d5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802199e3:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff802199ea:	e8 21 d5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802199ef:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff802199f6:	e8 15 d5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff802199fb:	eb fe                	jmp    ffffffff802199fb <_RME_Proc_Crt+0x46b>
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
    {
        __RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), -1);
        __RME_Fetch_Add(&(Pgtbl_Op->Head.Type_Ref), -1);
        RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PROC_SIZE)==0);
        Proc_Crt->Head.Type_Ref=0;
ffffffff802199fd:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
        return RME_ERR_CAP_REFCNT;
ffffffff80219a04:	48 c7 c3 fa ff ff ff 	mov    $0xfffffffffffffffa,%rbx
ffffffff80219a0b:	e9 e7 fd ff ff       	jmpq   ffffffff802197f7 <_RME_Proc_Crt+0x267>
    /* Set the page table, reference it and check for overflow */
    Proc_Struct->Pgtbl=Pgtbl_Op;
    Type_Ref=__RME_Fetch_Add(&(Pgtbl_Op->Head.Type_Ref), 1);
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
    {
        __RME_Fetch_Add(&(Captbl_Op->Head.Type_Ref), -1);
ffffffff80219a10:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80219a17:	48 89 ef             	mov    %rbp,%rdi
ffffffff80219a1a:	e8 7f 1e ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        __RME_Fetch_Add(&(Pgtbl_Op->Head.Type_Ref), -1);
ffffffff80219a1f:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80219a26:	4c 89 e7             	mov    %r12,%rdi
ffffffff80219a29:	e8 70 1e ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        RME_ASSERT(_RME_Kotbl_Erase(Vaddr, RME_PROC_SIZE)==0);
ffffffff80219a2e:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff80219a33:	4c 89 ef             	mov    %r13,%rdi
ffffffff80219a36:	e8 85 d7 ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
ffffffff80219a3b:	48 85 c0             	test   %rax,%rax
ffffffff80219a3e:	74 bd                	je     ffffffff802199fd <_RME_Proc_Crt+0x46d>
ffffffff80219a40:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80219a47:	e8 c4 d4 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219a4c:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff80219a53:	e8 b8 d4 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219a58:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80219a5f:	e8 ac d4 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219a64:	bf d2 01 00 00       	mov    $0x1d2,%edi
ffffffff80219a69:	e8 62 d2 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80219a6e:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80219a75:	e8 96 d4 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219a7a:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80219a81:	e8 8a d4 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219a86:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80219a8d:	e8 7e d4 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219a92:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff80219a99:	e8 72 d4 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219a9e:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80219aa5:	e8 66 d4 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219aaa:	eb fe                	jmp    ffffffff80219aaa <_RME_Proc_Crt+0x51a>
    RME_CAPTBL_OCCUPY(Proc_Crt,Type_Ref);
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_PROC_SIZE)!=0)
    {
        Proc_Crt->Head.Type_Ref=0;
ffffffff80219aac:	49 c7 06 00 00 00 00 	movq   $0x0,(%r14)
        return RME_ERR_CAP_KOTBL;
ffffffff80219ab3:	48 c7 c3 fc ff ff ff 	mov    $0xfffffffffffffffc,%rbx
ffffffff80219aba:	e9 38 fd ff ff       	jmpq   ffffffff802197f7 <_RME_Proc_Crt+0x267>
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PROC,Vaddr,RME_PROC_SIZE);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Crt,Cap_Proc,struct RME_Cap_Proc*,Proc_Crt);
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Proc_Crt,Type_Ref);
ffffffff80219abf:	48 c7 c3 fb ff ff ff 	mov    $0xfffffffffffffffb,%rbx
ffffffff80219ac6:	e9 2c fd ff ff       	jmpq   ffffffff802197f7 <_RME_Proc_Crt+0x267>
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Crt,RME_CAPTBL_FLAG_CRT);
ffffffff80219acb:	48 c7 c3 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rbx
ffffffff80219ad2:	e9 20 fd ff ff       	jmpq   ffffffff802197f7 <_RME_Proc_Crt+0x267>
    RME_CAP_CHECK(Pgtbl_Op,RME_PGTBL_FLAG_PROC_CRT);
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_PROC,Vaddr,RME_PROC_SIZE);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Crt,Cap_Proc,struct RME_Cap_Proc*,Proc_Crt);
ffffffff80219ad7:	48 c7 c3 fd ff ff ff 	mov    $0xfffffffffffffffd,%rbx
ffffffff80219ade:	e9 14 fd ff ff       	jmpq   ffffffff802197f7 <_RME_Proc_Crt+0x267>
    struct RME_Cap_Proc* Proc_Crt;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl_Crt,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff80219ae3:	48 c7 c3 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rbx
ffffffff80219aea:	e9 08 fd ff ff       	jmpq   ffffffff802197f7 <_RME_Proc_Crt+0x267>
ffffffff80219aef:	90                   	nop

ffffffff80219af0 <_RME_Proc_Del>:

    /* Used for deletion */
    struct RME_Proc_Struct* Object;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80219af0:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80219af6:	0f 85 24 01 00 00    	jne    ffffffff80219c20 <_RME_Proc_Del+0x130>
ffffffff80219afc:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff80219b00:	0f 86 25 02 00 00    	jbe    ffffffff80219d2b <_RME_Proc_Del+0x23b>
ffffffff80219b06:	48 89 f0             	mov    %rsi,%rax
ffffffff80219b09:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219b0d:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80219b11:	48 8b 08             	mov    (%rax),%rcx
ffffffff80219b14:	48 89 ce             	mov    %rcx,%rsi
ffffffff80219b17:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80219b1b:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80219b1f:	0f 85 63 01 00 00    	jne    ffffffff80219c88 <_RME_Proc_Del+0x198>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff80219b25:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff80219b2c:	80 00 00 
ffffffff80219b2f:	48 85 f1             	test   %rsi,%rcx
ffffffff80219b32:	0f 85 fe 01 00 00    	jne    ffffffff80219d36 <_RME_Proc_Del+0x246>
ffffffff80219b38:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff80219b3c:	0f 84 fd 01 00 00    	je     ffffffff80219d3f <_RME_Proc_Del+0x24f>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Proc,struct RME_Cap_Proc*,Proc_Del);
ffffffff80219b42:	48 39 50 28          	cmp    %rdx,0x28(%rax)
ffffffff80219b46:	0f 86 df 01 00 00    	jbe    ffffffff80219d2b <_RME_Proc_Del+0x23b>
              cid_t Cap_Proc - The capability to the process. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Proc_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Proc)
{
ffffffff80219b4c:	53                   	push   %rbx
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Proc,struct RME_Cap_Proc*,Proc_Del);
ffffffff80219b4d:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80219b51:	48 89 d7             	mov    %rdx,%rdi
              cid_t Cap_Proc - The capability to the process. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Proc_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Proc)
{
ffffffff80219b54:	48 83 ec 10          	sub    $0x10,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Proc,struct RME_Cap_Proc*,Proc_Del);
ffffffff80219b58:	48 03 78 18          	add    0x18(%rax),%rdi
    /* Delete check */
    RME_CAP_DEL_CHECK(Proc_Del,Type_Ref,RME_CAP_PROC);
ffffffff80219b5c:	48 8b 07             	mov    (%rdi),%rax
ffffffff80219b5f:	48 85 f0             	test   %rsi,%rax
ffffffff80219b62:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff80219b67:	0f 85 db 01 00 00    	jne    ffffffff80219d48 <_RME_Proc_Del+0x258>
ffffffff80219b6d:	48 89 c2             	mov    %rax,%rdx
ffffffff80219b70:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff80219b74:	48 85 d2             	test   %rdx,%rdx
ffffffff80219b77:	0f 84 db 01 00 00    	je     ffffffff80219d58 <_RME_Proc_Del+0x268>
ffffffff80219b7d:	48 83 fa 05          	cmp    $0x5,%rdx
ffffffff80219b81:	0f 85 e1 01 00 00    	jne    ffffffff80219d68 <_RME_Proc_Del+0x278>
ffffffff80219b87:	48 8b 15 72 94 00 00 	mov    0x9472(%rip),%rdx        # ffffffff80223000 <RME_Timestamp>
ffffffff80219b8e:	48 2b 57 20          	sub    0x20(%rdi),%rdx
ffffffff80219b92:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff80219b96:	0f 86 dc 01 00 00    	jbe    ffffffff80219d78 <_RME_Proc_Del+0x288>
ffffffff80219b9c:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffff,%rdx
ffffffff80219ba3:	7f 00 00 
ffffffff80219ba6:	48 85 d0             	test   %rdx,%rax
ffffffff80219ba9:	0f 85 d9 01 00 00    	jne    ffffffff80219d88 <_RME_Proc_Del+0x298>
ffffffff80219baf:	48 83 7f 08 00       	cmpq   $0x0,0x8(%rdi)
ffffffff80219bb4:	0f 85 ce 01 00 00    	jne    ffffffff80219d88 <_RME_Proc_Del+0x298>
    
    /* Remember the object location for deletion */
    Object=RME_CAP_GETOBJ(Proc_Del,struct RME_Proc_Struct*);
ffffffff80219bba:	48 8b 5f 18          	mov    0x18(%rdi),%rbx
    
    /* See if the object is referenced by another thread or invocation kernel
     * object. If yes, cannot delete */
     if(Object->Refcnt!=0)
ffffffff80219bbe:	48 83 3b 00          	cmpq   $0x0,(%rbx)
ffffffff80219bc2:	0f 85 3c 01 00 00    	jne    ffffffff80219d04 <_RME_Proc_Del+0x214>
         RME_CAP_DEFROST(Proc_Del,Type_Ref);
         return RME_ERR_PTH_REFCNT;
     }
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Proc_Del,Type_Ref);
ffffffff80219bc8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80219bcd:	31 d2                	xor    %edx,%edx
ffffffff80219bcf:	e8 ad 1c ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80219bd4:	48 85 c0             	test   %rax,%rax
ffffffff80219bd7:	0f 84 7b 01 00 00    	je     ffffffff80219d58 <_RME_Proc_Del+0x268>
    
    /* Decrease the refcnt for the two caps */
    __RME_Fetch_Add(&(Object->Captbl->Head.Type_Ref), -1);
ffffffff80219bdd:	48 8b 7b 08          	mov    0x8(%rbx),%rdi
ffffffff80219be1:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80219be8:	e8 b1 1c ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    __RME_Fetch_Add(&(Object->Pgtbl->Head.Type_Ref), -1);
ffffffff80219bed:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff80219bf1:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff80219bf8:	e8 a1 1c ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Object, RME_PROC_SIZE)!=0);
ffffffff80219bfd:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff80219c02:	48 89 df             	mov    %rbx,%rdi
ffffffff80219c05:	e8 b6 d5 ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
    
    return 0;
ffffffff80219c0a:	31 d2                	xor    %edx,%edx
    /* Decrease the refcnt for the two caps */
    __RME_Fetch_Add(&(Object->Captbl->Head.Type_Ref), -1);
    __RME_Fetch_Add(&(Object->Pgtbl->Head.Type_Ref), -1);
        
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Object, RME_PROC_SIZE)!=0);
ffffffff80219c0c:	48 85 c0             	test   %rax,%rax
ffffffff80219c0f:	0f 84 83 00 00 00    	je     ffffffff80219c98 <_RME_Proc_Del+0x1a8>
    
    return 0;
}
ffffffff80219c15:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219c19:	48 89 d0             	mov    %rdx,%rax
ffffffff80219c1c:	5b                   	pop    %rbx
ffffffff80219c1d:	c3                   	retq   
ffffffff80219c1e:	66 90                	xchg   %ax,%ax

    /* Used for deletion */
    struct RME_Proc_Struct* Object;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80219c20:	48 89 f0             	mov    %rsi,%rax
ffffffff80219c23:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff80219c27:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff80219c2b:	0f 83 fa 00 00 00    	jae    ffffffff80219d2b <_RME_Proc_Del+0x23b>
ffffffff80219c31:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff80219c35:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff80219c39:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff80219c40:	80 00 00 
ffffffff80219c43:	48 8b 08             	mov    (%rax),%rcx
ffffffff80219c46:	48 85 f9             	test   %rdi,%rcx
ffffffff80219c49:	0f 85 e7 00 00 00    	jne    ffffffff80219d36 <_RME_Proc_Del+0x246>
ffffffff80219c4f:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff80219c53:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff80219c57:	75 2f                	jne    ffffffff80219c88 <_RME_Proc_Del+0x198>
ffffffff80219c59:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80219c5f:	48 3b 70 28          	cmp    0x28(%rax),%rsi
ffffffff80219c63:	0f 83 c2 00 00 00    	jae    ffffffff80219d2b <_RME_Proc_Del+0x23b>
ffffffff80219c69:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80219c6d:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff80219c71:	48 89 f0             	mov    %rsi,%rax
ffffffff80219c74:	48 8b 08             	mov    (%rax),%rcx
ffffffff80219c77:	48 89 ce             	mov    %rcx,%rsi
ffffffff80219c7a:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80219c7e:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80219c82:	0f 84 9d fe ff ff    	je     ffffffff80219b25 <_RME_Proc_Del+0x35>
ffffffff80219c88:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
ffffffff80219c8f:	e9 9e 00 00 00       	jmpq   ffffffff80219d32 <_RME_Proc_Del+0x242>
ffffffff80219c94:	0f 1f 40 00          	nopl   0x0(%rax)
    /* Decrease the refcnt for the two caps */
    __RME_Fetch_Add(&(Object->Captbl->Head.Type_Ref), -1);
    __RME_Fetch_Add(&(Object->Pgtbl->Head.Type_Ref), -1);
        
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Object, RME_PROC_SIZE)!=0);
ffffffff80219c98:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff80219c9f:	e8 6c d2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219ca4:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff80219cab:	e8 60 d2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219cb0:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff80219cb7:	e8 54 d2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219cbc:	bf 0c 02 00 00       	mov    $0x20c,%edi
ffffffff80219cc1:	e8 0a d0 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff80219cc6:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80219ccd:	e8 3e d2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219cd2:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff80219cd9:	e8 32 d2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219cde:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff80219ce5:	e8 26 d2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219cea:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff80219cf1:	e8 1a d2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219cf6:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff80219cfd:	e8 0e d2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff80219d02:	eb fe                	jmp    ffffffff80219d02 <_RME_Proc_Del+0x212>
    
    /* See if the object is referenced by another thread or invocation kernel
     * object. If yes, cannot delete */
     if(Object->Refcnt!=0)
     {
         RME_CAP_DEFROST(Proc_Del,Type_Ref);
ffffffff80219d04:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80219d09:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff80219d10:	7f ff ff 
ffffffff80219d13:	48 21 c2             	and    %rax,%rdx
ffffffff80219d16:	e8 66 1b ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
         return RME_ERR_PTH_REFCNT;
ffffffff80219d1b:	48 c7 c2 e6 ff ff ff 	mov    $0xffffffffffffffe6,%rdx
        
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Object, RME_PROC_SIZE)!=0);
    
    return 0;
}
ffffffff80219d22:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219d26:	48 89 d0             	mov    %rdx,%rax
ffffffff80219d29:	5b                   	pop    %rbx
ffffffff80219d2a:	c3                   	retq   

    /* Used for deletion */
    struct RME_Proc_Struct* Object;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80219d2b:	48 c7 c2 fd ff ff ff 	mov    $0xfffffffffffffffd,%rdx
        
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Object, RME_PROC_SIZE)!=0);
    
    return 0;
}
ffffffff80219d32:	48 89 d0             	mov    %rdx,%rax
ffffffff80219d35:	c3                   	retq   

    /* Used for deletion */
    struct RME_Proc_Struct* Object;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80219d36:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
ffffffff80219d3d:	eb f3                	jmp    ffffffff80219d32 <_RME_Proc_Del+0x242>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff80219d3f:	48 c7 c2 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rdx
ffffffff80219d46:	eb ea                	jmp    ffffffff80219d32 <_RME_Proc_Del+0x242>

    /* Used for deletion */
    struct RME_Proc_Struct* Object;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80219d48:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
        
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Object, RME_PROC_SIZE)!=0);
    
    return 0;
}
ffffffff80219d4f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219d53:	48 89 d0             	mov    %rdx,%rax
ffffffff80219d56:	5b                   	pop    %rbx
ffffffff80219d57:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Proc,struct RME_Cap_Proc*,Proc_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Proc_Del,Type_Ref,RME_CAP_PROC);
ffffffff80219d58:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
        
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Object, RME_PROC_SIZE)!=0);
    
    return 0;
}
ffffffff80219d5f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219d63:	48 89 d0             	mov    %rdx,%rax
ffffffff80219d66:	5b                   	pop    %rbx
ffffffff80219d67:	c3                   	retq   

    /* Used for deletion */
    struct RME_Proc_Struct* Object;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff80219d68:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
        
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Object, RME_PROC_SIZE)!=0);
    
    return 0;
}
ffffffff80219d6f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219d73:	48 89 d0             	mov    %rdx,%rax
ffffffff80219d76:	5b                   	pop    %rbx
ffffffff80219d77:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Proc,struct RME_Cap_Proc*,Proc_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Proc_Del,Type_Ref,RME_CAP_PROC);
ffffffff80219d78:	48 c7 c2 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rdx
        
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Object, RME_PROC_SIZE)!=0);
    
    return 0;
}
ffffffff80219d7f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219d83:	48 89 d0             	mov    %rdx,%rax
ffffffff80219d86:	5b                   	pop    %rbx
ffffffff80219d87:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Proc,struct RME_Cap_Proc*,Proc_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Proc_Del,Type_Ref,RME_CAP_PROC);
ffffffff80219d88:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80219d8d:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff80219d94:	7f ff ff 
ffffffff80219d97:	48 21 c2             	and    %rax,%rdx
ffffffff80219d9a:	e8 e2 1a ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80219d9f:	48 c7 c2 fa ff ff ff 	mov    $0xfffffffffffffffa,%rdx
        
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Object, RME_PROC_SIZE)!=0);
    
    return 0;
}
ffffffff80219da6:	48 83 c4 10          	add    $0x10,%rsp
ffffffff80219daa:	48 89 d0             	mov    %rdx,%rax
ffffffff80219dad:	5b                   	pop    %rbx
ffffffff80219dae:	c3                   	retq   
ffffffff80219daf:	90                   	nop

ffffffff80219db0 <_RME_Proc_Cpt>:
                                 this process. 2-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Proc_Cpt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Proc, cid_t Cap_Captbl)
{
ffffffff80219db0:	55                   	push   %rbp
ffffffff80219db1:	53                   	push   %rbx
ffffffff80219db2:	48 83 ec 18          	sub    $0x18,%rsp
    struct RME_Cap_Captbl* Captbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff80219db6:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff80219dbc:	0f 85 be 00 00 00    	jne    ffffffff80219e80 <_RME_Proc_Cpt+0xd0>
ffffffff80219dc2:	4c 8b 47 28          	mov    0x28(%rdi),%r8
ffffffff80219dc6:	49 39 f0             	cmp    %rsi,%r8
ffffffff80219dc9:	0f 86 01 02 00 00    	jbe    ffffffff80219fd0 <_RME_Proc_Cpt+0x220>
ffffffff80219dcf:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80219dd3:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80219dd7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219dde:	48 8d 2c 3e          	lea    (%rsi,%rdi,1),%rbp
ffffffff80219de2:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff80219de6:	48 89 ce             	mov    %rcx,%rsi
ffffffff80219de9:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80219ded:	48 83 fe 05          	cmp    $0x5,%rsi
ffffffff80219df1:	0f 85 cc 01 00 00    	jne    ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_New);     
ffffffff80219df7:	f6 c6 80             	test   $0x80,%dh
ffffffff80219dfa:	0f 84 05 01 00 00    	je     ffffffff80219f05 <_RME_Proc_Cpt+0x155>
ffffffff80219e00:	48 89 d3             	mov    %rdx,%rbx
ffffffff80219e03:	48 c1 fb 10          	sar    $0x10,%rbx
ffffffff80219e07:	4c 39 c3             	cmp    %r8,%rbx
ffffffff80219e0a:	0f 83 c0 01 00 00    	jae    ffffffff80219fd0 <_RME_Proc_Cpt+0x220>
ffffffff80219e10:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff80219e14:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff80219e1b:	80 00 00 
ffffffff80219e1e:	48 01 fb             	add    %rdi,%rbx
ffffffff80219e21:	48 8b 03             	mov    (%rbx),%rax
ffffffff80219e24:	48 85 f0             	test   %rsi,%rax
ffffffff80219e27:	0f 85 b3 01 00 00    	jne    ffffffff80219fe0 <_RME_Proc_Cpt+0x230>
ffffffff80219e2d:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219e31:	48 89 c6             	mov    %rax,%rsi
    struct RME_Cap_Captbl* Captbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff80219e34:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_New);     
ffffffff80219e3b:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80219e3f:	0f 85 7e 01 00 00    	jne    ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
ffffffff80219e45:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff80219e4b:	48 3b 53 28          	cmp    0x28(%rbx),%rdx
ffffffff80219e4f:	0f 83 7b 01 00 00    	jae    ffffffff80219fd0 <_RME_Proc_Cpt+0x220>
ffffffff80219e55:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff80219e59:	48 03 53 18          	add    0x18(%rbx),%rdx
ffffffff80219e5d:	48 89 d3             	mov    %rdx,%rbx
ffffffff80219e60:	48 8b 12             	mov    (%rdx),%rdx
ffffffff80219e63:	48 89 d6             	mov    %rdx,%rsi
ffffffff80219e66:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80219e6a:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80219e6e:	0f 84 bd 00 00 00    	je     ffffffff80219f31 <_RME_Proc_Cpt+0x181>
ffffffff80219e74:	e9 4a 01 00 00       	jmpq   ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
ffffffff80219e79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    struct RME_Cap_Captbl* Captbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff80219e80:	4c 8b 47 28          	mov    0x28(%rdi),%r8
ffffffff80219e84:	48 89 f1             	mov    %rsi,%rcx
ffffffff80219e87:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff80219e8b:	4c 39 c1             	cmp    %r8,%rcx
ffffffff80219e8e:	0f 83 3c 01 00 00    	jae    ffffffff80219fd0 <_RME_Proc_Cpt+0x220>
ffffffff80219e94:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff80219e98:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff80219e9c:	49 b9 00 00 00 00 00 	movabs $0x800000000000,%r9
ffffffff80219ea3:	80 00 00 
ffffffff80219ea6:	48 01 f9             	add    %rdi,%rcx
ffffffff80219ea9:	48 8b 01             	mov    (%rcx),%rax
ffffffff80219eac:	4c 85 c8             	test   %r9,%rax
ffffffff80219eaf:	0f 85 2b 01 00 00    	jne    ffffffff80219fe0 <_RME_Proc_Cpt+0x230>
ffffffff80219eb5:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff80219eb9:	49 89 c1             	mov    %rax,%r9
ffffffff80219ebc:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff80219ec3:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff80219ec7:	0f 85 f6 00 00 00    	jne    ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
ffffffff80219ecd:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff80219ed3:	48 3b 71 28          	cmp    0x28(%rcx),%rsi
ffffffff80219ed7:	0f 83 f3 00 00 00    	jae    ffffffff80219fd0 <_RME_Proc_Cpt+0x220>
ffffffff80219edd:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff80219ee1:	48 03 71 18          	add    0x18(%rcx),%rsi
ffffffff80219ee5:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff80219ee8:	48 89 f5             	mov    %rsi,%rbp
ffffffff80219eeb:	48 89 ce             	mov    %rcx,%rsi
ffffffff80219eee:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80219ef2:	48 83 fe 05          	cmp    $0x5,%rsi
ffffffff80219ef6:	0f 85 c7 00 00 00    	jne    ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_New);     
ffffffff80219efc:	f6 c6 80             	test   $0x80,%dh
ffffffff80219eff:	0f 85 fb fe ff ff    	jne    ffffffff80219e00 <_RME_Proc_Cpt+0x50>
ffffffff80219f05:	4c 39 c2             	cmp    %r8,%rdx
ffffffff80219f08:	0f 83 c2 00 00 00    	jae    ffffffff80219fd0 <_RME_Proc_Cpt+0x220>
ffffffff80219f0e:	48 c1 e2 06          	shl    $0x6,%rdx
    struct RME_Cap_Captbl* Captbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff80219f12:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_New);     
ffffffff80219f19:	48 8d 1c 3a          	lea    (%rdx,%rdi,1),%rbx
ffffffff80219f1d:	48 8b 13             	mov    (%rbx),%rdx
ffffffff80219f20:	48 89 d6             	mov    %rdx,%rsi
ffffffff80219f23:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff80219f27:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff80219f2b:	0f 85 92 00 00 00    	jne    ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_CPT);
ffffffff80219f31:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff80219f38:	80 00 00 
ffffffff80219f3b:	48 85 c1             	test   %rax,%rcx
ffffffff80219f3e:	0f 85 9c 00 00 00    	jne    ffffffff80219fe0 <_RME_Proc_Cpt+0x230>
ffffffff80219f44:	f6 45 10 04          	testb  $0x4,0x10(%rbp)
ffffffff80219f48:	0f 84 a2 00 00 00    	je     ffffffff80219ff0 <_RME_Proc_Cpt+0x240>
    RME_CAP_CHECK(Captbl_New,RME_CAPTBL_FLAG_PROC_CPT);
ffffffff80219f4e:	48 85 c2             	test   %rax,%rdx
ffffffff80219f51:	0f 85 89 00 00 00    	jne    ffffffff80219fe0 <_RME_Proc_Cpt+0x230>
ffffffff80219f57:	f6 43 10 80          	testb  $0x80,0x10(%rbx)
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_New);     
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_CPT);
ffffffff80219f5b:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
    RME_CAP_CHECK(Captbl_New,RME_CAPTBL_FLAG_PROC_CPT);
ffffffff80219f62:	74 5f                	je     ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
    
    /* Increase the reference count of the new cap first - If that fails, we can revert easily */
    Type_Ref=__RME_Fetch_Add(&(Captbl_New->Head.Type_Ref), 1);
ffffffff80219f64:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff80219f69:	48 89 df             	mov    %rbx,%rdi
ffffffff80219f6c:	e8 2d 19 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff80219f71:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffff,%rdx
ffffffff80219f78:	7f 00 00 
ffffffff80219f7b:	48 21 d0             	and    %rdx,%rax
ffffffff80219f7e:	48 ba fe ff ff ff ff 	movabs $0x3ffffffffffe,%rdx
ffffffff80219f85:	3f 00 00 
ffffffff80219f88:	48 39 d0             	cmp    %rdx,%rax
ffffffff80219f8b:	77 73                	ja     ffffffff8021a000 <_RME_Proc_Cpt+0x250>
        __RME_Fetch_Add(&(Captbl_New->Head.Type_Ref), -1);
        return RME_ERR_CAP_REFCNT;
    }
    
    /* Read the old captbl, and do CAS here. If we fail, revert the refcnt */
    Proc_Struct=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
ffffffff80219f8d:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
    Captbl_Old=Proc_Struct->Captbl;
    /* Actually commit the change */
    if(__RME_Comp_Swap((ptr_t*)(&(Proc_Struct->Captbl)),
ffffffff80219f91:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff80219f96:	48 89 da             	mov    %rbx,%rdx
        return RME_ERR_CAP_REFCNT;
    }
    
    /* Read the old captbl, and do CAS here. If we fail, revert the refcnt */
    Proc_Struct=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
    Captbl_Old=Proc_Struct->Captbl;
ffffffff80219f99:	48 8b 47 08          	mov    0x8(%rdi),%rax
    /* Actually commit the change */
    if(__RME_Comp_Swap((ptr_t*)(&(Proc_Struct->Captbl)),
ffffffff80219f9d:	48 83 c7 08          	add    $0x8,%rdi
        return RME_ERR_CAP_REFCNT;
    }
    
    /* Read the old captbl, and do CAS here. If we fail, revert the refcnt */
    Proc_Struct=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
    Captbl_Old=Proc_Struct->Captbl;
ffffffff80219fa1:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    /* Actually commit the change */
    if(__RME_Comp_Swap((ptr_t*)(&(Proc_Struct->Captbl)),
ffffffff80219fa6:	e8 d6 18 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff80219fab:	48 85 c0             	test   %rax,%rax
                              (ptr_t*)(&Captbl_Old),
                              (ptr_t)Captbl_New)==0)
    {
        __RME_Fetch_Add(&(Captbl_New->Head.Type_Ref), -1);
ffffffff80219fae:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
    
    /* Read the old captbl, and do CAS here. If we fail, revert the refcnt */
    Proc_Struct=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
    Captbl_Old=Proc_Struct->Captbl;
    /* Actually commit the change */
    if(__RME_Comp_Swap((ptr_t*)(&(Proc_Struct->Captbl)),
ffffffff80219fb5:	74 69                	je     ffffffff8021a020 <_RME_Proc_Cpt+0x270>
    {
        __RME_Fetch_Add(&(Captbl_New->Head.Type_Ref), -1);
        return RME_ERR_PTH_CONFLICT;
    }
    /* Release the old table */
    __RME_Fetch_Add(&(Captbl_Old->Head.Type_Ref), -1);
ffffffff80219fb7:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff80219fbc:	e8 dd 18 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    
    return 0;
ffffffff80219fc1:	31 c0                	xor    %eax,%eax
}
ffffffff80219fc3:	48 83 c4 18          	add    $0x18,%rsp
ffffffff80219fc7:	5b                   	pop    %rbx
ffffffff80219fc8:	5d                   	pop    %rbp
ffffffff80219fc9:	c3                   	retq   
ffffffff80219fca:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff80219fd0:	48 83 c4 18          	add    $0x18,%rsp
    struct RME_Cap_Captbl* Captbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff80219fd4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    }
    /* Release the old table */
    __RME_Fetch_Add(&(Captbl_Old->Head.Type_Ref), -1);
    
    return 0;
}
ffffffff80219fdb:	5b                   	pop    %rbx
ffffffff80219fdc:	5d                   	pop    %rbp
ffffffff80219fdd:	c3                   	retq   
ffffffff80219fde:	66 90                	xchg   %ax,%ax
    struct RME_Cap_Captbl* Captbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff80219fe0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff80219fe7:	eb da                	jmp    ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
ffffffff80219fe9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_New);     
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_CPT);
ffffffff80219ff0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff80219ff7:	eb ca                	jmp    ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
ffffffff80219ff9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    
    /* Increase the reference count of the new cap first - If that fails, we can revert easily */
    Type_Ref=__RME_Fetch_Add(&(Captbl_New->Head.Type_Ref), 1);
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
    {
        __RME_Fetch_Add(&(Captbl_New->Head.Type_Ref), -1);
ffffffff8021a000:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021a007:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a00a:	e8 8f 18 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        return RME_ERR_CAP_REFCNT;
ffffffff8021a00f:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021a016:	eb ab                	jmp    ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
ffffffff8021a018:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a01f:	00 
    /* Actually commit the change */
    if(__RME_Comp_Swap((ptr_t*)(&(Proc_Struct->Captbl)),
                              (ptr_t*)(&Captbl_Old),
                              (ptr_t)Captbl_New)==0)
    {
        __RME_Fetch_Add(&(Captbl_New->Head.Type_Ref), -1);
ffffffff8021a020:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a023:	e8 76 18 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        return RME_ERR_PTH_CONFLICT;
ffffffff8021a028:	48 c7 c0 ea ff ff ff 	mov    $0xffffffffffffffea,%rax
ffffffff8021a02f:	eb 92                	jmp    ffffffff80219fc3 <_RME_Proc_Cpt+0x213>
ffffffff8021a031:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff8021a036:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021a03d:	00 00 00 

ffffffff8021a040 <_RME_Proc_Pgt>:
                                process. 2-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Proc_Pgt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Proc, cid_t Cap_Pgtbl)
{
ffffffff8021a040:	55                   	push   %rbp
ffffffff8021a041:	53                   	push   %rbx
ffffffff8021a042:	48 83 ec 18          	sub    $0x18,%rsp
    struct RME_Cap_Pgtbl* Pgtbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff8021a046:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021a04c:	0f 85 be 00 00 00    	jne    ffffffff8021a110 <_RME_Proc_Pgt+0xd0>
ffffffff8021a052:	4c 8b 47 28          	mov    0x28(%rdi),%r8
ffffffff8021a056:	49 39 f0             	cmp    %rsi,%r8
ffffffff8021a059:	0f 86 01 02 00 00    	jbe    ffffffff8021a260 <_RME_Proc_Pgt+0x220>
ffffffff8021a05f:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8021a063:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021a067:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a06e:	48 8d 2c 3e          	lea    (%rsi,%rdi,1),%rbp
ffffffff8021a072:	48 8b 4d 00          	mov    0x0(%rbp),%rcx
ffffffff8021a076:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a079:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021a07d:	48 83 fe 05          	cmp    $0x5,%rsi
ffffffff8021a081:	0f 85 cc 01 00 00    	jne    ffffffff8021a253 <_RME_Proc_Pgt+0x213>
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_New);     
ffffffff8021a087:	f6 c6 80             	test   $0x80,%dh
ffffffff8021a08a:	0f 84 05 01 00 00    	je     ffffffff8021a195 <_RME_Proc_Pgt+0x155>
ffffffff8021a090:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021a093:	48 c1 fb 10          	sar    $0x10,%rbx
ffffffff8021a097:	4c 39 c3             	cmp    %r8,%rbx
ffffffff8021a09a:	0f 83 c0 01 00 00    	jae    ffffffff8021a260 <_RME_Proc_Pgt+0x220>
ffffffff8021a0a0:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8021a0a4:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff8021a0ab:	80 00 00 
ffffffff8021a0ae:	48 01 fb             	add    %rdi,%rbx
ffffffff8021a0b1:	48 8b 03             	mov    (%rbx),%rax
ffffffff8021a0b4:	48 85 f0             	test   %rsi,%rax
ffffffff8021a0b7:	0f 85 b3 01 00 00    	jne    ffffffff8021a270 <_RME_Proc_Pgt+0x230>
ffffffff8021a0bd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a0c1:	48 89 c6             	mov    %rax,%rsi
    struct RME_Cap_Pgtbl* Pgtbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff8021a0c4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_New);     
ffffffff8021a0cb:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021a0cf:	0f 85 7e 01 00 00    	jne    ffffffff8021a253 <_RME_Proc_Pgt+0x213>
ffffffff8021a0d5:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021a0db:	48 3b 53 28          	cmp    0x28(%rbx),%rdx
ffffffff8021a0df:	0f 83 7b 01 00 00    	jae    ffffffff8021a260 <_RME_Proc_Pgt+0x220>
ffffffff8021a0e5:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021a0e9:	48 03 53 18          	add    0x18(%rbx),%rdx
ffffffff8021a0ed:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021a0f0:	48 8b 12             	mov    (%rdx),%rdx
ffffffff8021a0f3:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021a0f6:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021a0fa:	48 83 fe 04          	cmp    $0x4,%rsi
ffffffff8021a0fe:	0f 84 bd 00 00 00    	je     ffffffff8021a1c1 <_RME_Proc_Pgt+0x181>
ffffffff8021a104:	e9 4a 01 00 00       	jmpq   ffffffff8021a253 <_RME_Proc_Pgt+0x213>
ffffffff8021a109:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    struct RME_Cap_Pgtbl* Pgtbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff8021a110:	4c 8b 47 28          	mov    0x28(%rdi),%r8
ffffffff8021a114:	48 89 f1             	mov    %rsi,%rcx
ffffffff8021a117:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff8021a11b:	4c 39 c1             	cmp    %r8,%rcx
ffffffff8021a11e:	0f 83 3c 01 00 00    	jae    ffffffff8021a260 <_RME_Proc_Pgt+0x220>
ffffffff8021a124:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8021a128:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021a12c:	49 b9 00 00 00 00 00 	movabs $0x800000000000,%r9
ffffffff8021a133:	80 00 00 
ffffffff8021a136:	48 01 f9             	add    %rdi,%rcx
ffffffff8021a139:	48 8b 01             	mov    (%rcx),%rax
ffffffff8021a13c:	4c 85 c8             	test   %r9,%rax
ffffffff8021a13f:	0f 85 2b 01 00 00    	jne    ffffffff8021a270 <_RME_Proc_Pgt+0x230>
ffffffff8021a145:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a149:	49 89 c1             	mov    %rax,%r9
ffffffff8021a14c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a153:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8021a157:	0f 85 f6 00 00 00    	jne    ffffffff8021a253 <_RME_Proc_Pgt+0x213>
ffffffff8021a15d:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021a163:	48 3b 71 28          	cmp    0x28(%rcx),%rsi
ffffffff8021a167:	0f 83 f3 00 00 00    	jae    ffffffff8021a260 <_RME_Proc_Pgt+0x220>
ffffffff8021a16d:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021a171:	48 03 71 18          	add    0x18(%rcx),%rsi
ffffffff8021a175:	48 8b 0e             	mov    (%rsi),%rcx
ffffffff8021a178:	48 89 f5             	mov    %rsi,%rbp
ffffffff8021a17b:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a17e:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021a182:	48 83 fe 05          	cmp    $0x5,%rsi
ffffffff8021a186:	0f 85 c7 00 00 00    	jne    ffffffff8021a253 <_RME_Proc_Pgt+0x213>
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_New);     
ffffffff8021a18c:	f6 c6 80             	test   $0x80,%dh
ffffffff8021a18f:	0f 85 fb fe ff ff    	jne    ffffffff8021a090 <_RME_Proc_Pgt+0x50>
ffffffff8021a195:	4c 39 c2             	cmp    %r8,%rdx
ffffffff8021a198:	0f 83 c2 00 00 00    	jae    ffffffff8021a260 <_RME_Proc_Pgt+0x220>
ffffffff8021a19e:	48 c1 e2 06          	shl    $0x6,%rdx
    struct RME_Cap_Pgtbl* Pgtbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff8021a1a2:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_New);     
ffffffff8021a1a9:	48 8d 1c 3a          	lea    (%rdx,%rdi,1),%rbx
ffffffff8021a1ad:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8021a1b0:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021a1b3:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021a1b7:	48 83 fe 04          	cmp    $0x4,%rsi
ffffffff8021a1bb:	0f 85 92 00 00 00    	jne    ffffffff8021a253 <_RME_Proc_Pgt+0x213>
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_PGT);
ffffffff8021a1c1:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021a1c8:	80 00 00 
ffffffff8021a1cb:	48 85 c1             	test   %rax,%rcx
ffffffff8021a1ce:	0f 85 9c 00 00 00    	jne    ffffffff8021a270 <_RME_Proc_Pgt+0x230>
ffffffff8021a1d4:	f6 45 10 08          	testb  $0x8,0x10(%rbp)
ffffffff8021a1d8:	0f 84 a2 00 00 00    	je     ffffffff8021a280 <_RME_Proc_Pgt+0x240>
    RME_CAP_CHECK(Pgtbl_New,RME_PGTBL_FLAG_PROC_PGT);
ffffffff8021a1de:	48 85 c2             	test   %rax,%rdx
ffffffff8021a1e1:	0f 85 89 00 00 00    	jne    ffffffff8021a270 <_RME_Proc_Pgt+0x230>
ffffffff8021a1e7:	f6 43 10 80          	testb  $0x80,0x10(%rbx)
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_New);     
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_PGT);
ffffffff8021a1eb:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
    RME_CAP_CHECK(Pgtbl_New,RME_PGTBL_FLAG_PROC_PGT);
ffffffff8021a1f2:	74 5f                	je     ffffffff8021a253 <_RME_Proc_Pgt+0x213>
    
    /* Increase the reference count of the new cap first - If that fails, we can revert easily */
    Type_Ref=__RME_Fetch_Add(&(Pgtbl_New->Head.Type_Ref), 1);
ffffffff8021a1f4:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a1f9:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a1fc:	e8 9d 16 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
ffffffff8021a201:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffff,%rdx
ffffffff8021a208:	7f 00 00 
ffffffff8021a20b:	48 21 d0             	and    %rdx,%rax
ffffffff8021a20e:	48 ba fe ff ff ff ff 	movabs $0x3ffffffffffe,%rdx
ffffffff8021a215:	3f 00 00 
ffffffff8021a218:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021a21b:	77 73                	ja     ffffffff8021a290 <_RME_Proc_Pgt+0x250>
        __RME_Fetch_Add(&(Pgtbl_New->Head.Type_Ref), -1);
        return RME_ERR_CAP_REFCNT;
    }
    
    /* Read the old captbl, and do CAS here. If we fail, revert the refcnt */
    Proc_Struct=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
ffffffff8021a21d:	48 8b 7d 18          	mov    0x18(%rbp),%rdi
    Pgtbl_Old=Proc_Struct->Pgtbl;
    /* Actually commit the change */
    if(__RME_Comp_Swap((ptr_t*)(&(Proc_Struct->Captbl)),
ffffffff8021a221:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021a226:	48 89 da             	mov    %rbx,%rdx
        return RME_ERR_CAP_REFCNT;
    }
    
    /* Read the old captbl, and do CAS here. If we fail, revert the refcnt */
    Proc_Struct=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
    Pgtbl_Old=Proc_Struct->Pgtbl;
ffffffff8021a229:	48 8b 47 10          	mov    0x10(%rdi),%rax
    /* Actually commit the change */
    if(__RME_Comp_Swap((ptr_t*)(&(Proc_Struct->Captbl)),
ffffffff8021a22d:	48 83 c7 08          	add    $0x8,%rdi
        return RME_ERR_CAP_REFCNT;
    }
    
    /* Read the old captbl, and do CAS here. If we fail, revert the refcnt */
    Proc_Struct=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
    Pgtbl_Old=Proc_Struct->Pgtbl;
ffffffff8021a231:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    /* Actually commit the change */
    if(__RME_Comp_Swap((ptr_t*)(&(Proc_Struct->Captbl)),
ffffffff8021a236:	e8 46 16 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021a23b:	48 85 c0             	test   %rax,%rax
                              (ptr_t*)(&Pgtbl_Old),
                              (ptr_t)Pgtbl_New)==0)
    {
        __RME_Fetch_Add(&(Pgtbl_New->Head.Type_Ref), -1);
ffffffff8021a23e:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
    
    /* Read the old captbl, and do CAS here. If we fail, revert the refcnt */
    Proc_Struct=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
    Pgtbl_Old=Proc_Struct->Pgtbl;
    /* Actually commit the change */
    if(__RME_Comp_Swap((ptr_t*)(&(Proc_Struct->Captbl)),
ffffffff8021a245:	74 69                	je     ffffffff8021a2b0 <_RME_Proc_Pgt+0x270>
    {
        __RME_Fetch_Add(&(Pgtbl_New->Head.Type_Ref), -1);
        return RME_ERR_PTH_CONFLICT;
    }
    /* Release the old table */
    __RME_Fetch_Add(&(Pgtbl_Old->Head.Type_Ref), -1);
ffffffff8021a247:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8021a24c:	e8 4d 16 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    
    return 0;
ffffffff8021a251:	31 c0                	xor    %eax,%eax
}
ffffffff8021a253:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021a257:	5b                   	pop    %rbx
ffffffff8021a258:	5d                   	pop    %rbp
ffffffff8021a259:	c3                   	retq   
ffffffff8021a25a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8021a260:	48 83 c4 18          	add    $0x18,%rsp
    struct RME_Cap_Pgtbl* Pgtbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff8021a264:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    }
    /* Release the old table */
    __RME_Fetch_Add(&(Pgtbl_Old->Head.Type_Ref), -1);
    
    return 0;
}
ffffffff8021a26b:	5b                   	pop    %rbx
ffffffff8021a26c:	5d                   	pop    %rbp
ffffffff8021a26d:	c3                   	retq   
ffffffff8021a26e:	66 90                	xchg   %ax,%ax
    struct RME_Cap_Pgtbl* Pgtbl_Old;
    struct RME_Proc_Struct* Proc_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op); 
ffffffff8021a270:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a277:	eb da                	jmp    ffffffff8021a253 <_RME_Proc_Pgt+0x213>
ffffffff8021a279:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAPTBL_GETCAP(Captbl,Cap_Pgtbl,RME_CAP_PGTBL,struct RME_Cap_Pgtbl*,Pgtbl_New);     
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_PGT);
ffffffff8021a280:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a287:	eb ca                	jmp    ffffffff8021a253 <_RME_Proc_Pgt+0x213>
ffffffff8021a289:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    
    /* Increase the reference count of the new cap first - If that fails, we can revert easily */
    Type_Ref=__RME_Fetch_Add(&(Pgtbl_New->Head.Type_Ref), 1);
    if(RME_CAP_REF(Type_Ref)>=RME_CAP_MAXREF)
    {
        __RME_Fetch_Add(&(Pgtbl_New->Head.Type_Ref), -1);
ffffffff8021a290:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021a297:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a29a:	e8 ff 15 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        return RME_ERR_CAP_REFCNT;
ffffffff8021a29f:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
ffffffff8021a2a6:	eb ab                	jmp    ffffffff8021a253 <_RME_Proc_Pgt+0x213>
ffffffff8021a2a8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021a2af:	00 
    /* Actually commit the change */
    if(__RME_Comp_Swap((ptr_t*)(&(Proc_Struct->Captbl)),
                              (ptr_t*)(&Pgtbl_Old),
                              (ptr_t)Pgtbl_New)==0)
    {
        __RME_Fetch_Add(&(Pgtbl_New->Head.Type_Ref), -1);
ffffffff8021a2b0:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a2b3:	e8 e6 15 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
        return RME_ERR_PTH_CONFLICT;
ffffffff8021a2b8:	48 c7 c0 ea ff ff ff 	mov    $0xffffffffffffffea,%rax
ffffffff8021a2bf:	eb 92                	jmp    ffffffff8021a253 <_RME_Proc_Pgt+0x213>
ffffffff8021a2c1:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff8021a2c6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021a2cd:	00 00 00 

ffffffff8021a2d0 <_RME_Thd_Boot_Crt>:
Output      : None.
Return      : ret_t - If successful, the Thread ID; or an error code.
******************************************************************************/
ret_t _RME_Thd_Boot_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Thd,
		                cid_t Cap_Proc, ptr_t Vaddr, ptr_t Prio, ptr_t CPUID)
{
ffffffff8021a2d0:	41 55                	push   %r13
ffffffff8021a2d2:	41 54                	push   %r12
ffffffff8021a2d4:	55                   	push   %rbp
ffffffff8021a2d5:	53                   	push   %rbx
ffffffff8021a2d6:	48 83 ec 18          	sub    $0x18,%rsp
    struct RME_Cap_Thd* Thd_Crt;
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Type_Ref;
    
    /* Check whether the priority level is allowed */
    if(Prio>=RME_MAX_PREEMPT_PRIO)
ffffffff8021a2da:	49 83 f9 3f          	cmp    $0x3f,%r9
ffffffff8021a2de:	0f 87 74 03 00 00    	ja     ffffffff8021a658 <_RME_Thd_Boot_Crt+0x388>
        return RME_ERR_PTH_PRIO;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a2e4:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021a2ea:	0f 84 90 02 00 00    	je     ffffffff8021a580 <_RME_Thd_Boot_Crt+0x2b0>
ffffffff8021a2f0:	4c 8b 5f 28          	mov    0x28(%rdi),%r11
ffffffff8021a2f4:	48 89 f0             	mov    %rsi,%rax
ffffffff8021a2f7:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021a2fb:	4c 39 d8             	cmp    %r11,%rax
ffffffff8021a2fe:	0f 83 24 03 00 00    	jae    ffffffff8021a628 <_RME_Thd_Boot_Crt+0x358>
ffffffff8021a304:	4c 8b 57 18          	mov    0x18(%rdi),%r10
ffffffff8021a308:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021a30c:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff8021a313:	80 00 00 
ffffffff8021a316:	4a 8d 3c 10          	lea    (%rax,%r10,1),%rdi
ffffffff8021a31a:	48 8b 07             	mov    (%rdi),%rax
ffffffff8021a31d:	48 85 d8             	test   %rbx,%rax
ffffffff8021a320:	0f 85 12 03 00 00    	jne    ffffffff8021a638 <_RME_Thd_Boot_Crt+0x368>
ffffffff8021a326:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a32a:	48 89 c3             	mov    %rax,%rbx
ffffffff8021a32d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a334:	48 83 fb 03          	cmp    $0x3,%rbx
ffffffff8021a338:	0f 85 31 02 00 00    	jne    ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
ffffffff8021a33e:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021a344:	48 3b 77 28          	cmp    0x28(%rdi),%rsi
ffffffff8021a348:	0f 83 da 02 00 00    	jae    ffffffff8021a628 <_RME_Thd_Boot_Crt+0x358>
ffffffff8021a34e:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021a352:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021a356:	48 8b 1e             	mov    (%rsi),%rbx
ffffffff8021a359:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a35c:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021a360:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021a364:	0f 85 05 02 00 00    	jne    ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
ffffffff8021a36a:	f6 c5 80             	test   $0x80,%ch
ffffffff8021a36d:	0f 85 45 02 00 00    	jne    ffffffff8021a5b8 <_RME_Thd_Boot_Crt+0x2e8>
ffffffff8021a373:	4c 39 d9             	cmp    %r11,%rcx
ffffffff8021a376:	0f 83 ac 02 00 00    	jae    ffffffff8021a628 <_RME_Thd_Boot_Crt+0x358>
ffffffff8021a37c:	48 c1 e1 06          	shl    $0x6,%rcx
    /* Check whether the priority level is allowed */
    if(Prio>=RME_MAX_PREEMPT_PRIO)
        return RME_ERR_PTH_PRIO;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a380:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
ffffffff8021a387:	4e 8d 2c 11          	lea    (%rcx,%r10,1),%r13
ffffffff8021a38b:	49 8b 7d 00          	mov    0x0(%r13),%rdi
ffffffff8021a38f:	48 89 f9             	mov    %rdi,%rcx
ffffffff8021a392:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021a396:	48 83 f9 05          	cmp    $0x5,%rcx
ffffffff8021a39a:	0f 85 cf 01 00 00    	jne    ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff8021a3a0:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff8021a3a7:	80 00 00 
ffffffff8021a3aa:	48 85 cb             	test   %rcx,%rbx
ffffffff8021a3ad:	0f 85 85 02 00 00    	jne    ffffffff8021a638 <_RME_Thd_Boot_Crt+0x368>
ffffffff8021a3b3:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff8021a3b7:	0f 84 8b 02 00 00    	je     ffffffff8021a648 <_RME_Thd_Boot_Crt+0x378>
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_THD);
ffffffff8021a3bd:	48 85 cf             	test   %rcx,%rdi
ffffffff8021a3c0:	0f 85 72 02 00 00    	jne    ffffffff8021a638 <_RME_Thd_Boot_Crt+0x368>
ffffffff8021a3c6:	41 f6 45 10 02       	testb  $0x2,0x10(%r13)
ffffffff8021a3cb:	0f 84 77 02 00 00    	je     ffffffff8021a648 <_RME_Thd_Boot_Crt+0x378>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8021a3d1:	48 39 56 28          	cmp    %rdx,0x28(%rsi)
    /* Check whether the priority level is allowed */
    if(Prio>=RME_MAX_PREEMPT_PRIO)
        return RME_ERR_PTH_PRIO;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a3d5:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_THD);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8021a3dc:	0f 86 8d 01 00 00    	jbe    ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
ffffffff8021a3e2:	48 89 d5             	mov    %rdx,%rbp
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Thd_Crt,Type_Ref);
ffffffff8021a3e5:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021a3e8:	4d 89 cc             	mov    %r9,%r12
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_THD);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8021a3eb:	48 c1 e5 06          	shl    $0x6,%rbp
ffffffff8021a3ef:	48 03 6e 18          	add    0x18(%rsi),%rbp
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Thd_Crt,Type_Ref);
ffffffff8021a3f3:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021a3f8:	4c 89 c3             	mov    %r8,%rbx
ffffffff8021a3fb:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff8021a402:	00 00 
ffffffff8021a404:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021a407:	e8 75 14 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021a40c:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a40f:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021a416:	48 85 d2             	test   %rdx,%rdx
ffffffff8021a419:	0f 84 50 01 00 00    	je     ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
     
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_THD_SIZE)!=0)
ffffffff8021a41f:	be c8 09 00 00       	mov    $0x9c8,%esi
ffffffff8021a424:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a427:	e8 64 cb ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff8021a42c:	48 85 c0             	test   %rax,%rax
ffffffff8021a42f:	0f 85 33 02 00 00    	jne    ffffffff8021a668 <_RME_Thd_Boot_Crt+0x398>
        return RME_ERR_CAP_KOTBL;
    }
    
    /* Get the thread, and start creation */
    Thd_Struct=(struct RME_Thd_Struct*)Vaddr;
    Thd_Struct->Sched.TID=__RME_Fetch_Add(&RME_TID_Inc, 1);
ffffffff8021a435:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a43a:	48 c7 c7 20 38 26 80 	mov    $0xffffffff80263820,%rdi
ffffffff8021a441:	e8 58 14 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
ffffffff8021a446:	48 89 43 20          	mov    %rax,0x20(%rbx)
    /* Set this initially to 1 to make it virtually unfreeable & undeletable */
    Thd_Struct->Sched.Refcnt=1;
    Thd_Struct->Sched.Slices=RME_THD_INIT_TIME;
ffffffff8021a44a:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff8021a451:	ff ff 7f 
    
    /* Get the thread, and start creation */
    Thd_Struct=(struct RME_Thd_Struct*)Vaddr;
    Thd_Struct->Sched.TID=__RME_Fetch_Add(&RME_TID_Inc, 1);
    /* Set this initially to 1 to make it virtually unfreeable & undeletable */
    Thd_Struct->Sched.Refcnt=1;
ffffffff8021a454:	48 c7 43 40 01 00 00 	movq   $0x1,0x40(%rbx)
ffffffff8021a45b:	00 
    Thd_Struct->Sched.Slices=RME_THD_INIT_TIME;
ffffffff8021a45c:	48 89 43 30          	mov    %rax,0x30(%rbx)
    Thd_Struct->Sched.State=RME_THD_RUNNING;
    Thd_Struct->Sched.Signal=0;
    Thd_Struct->Sched.Prio=Prio;
    Thd_Struct->Sched.Max_Prio=RME_MAX_PREEMPT_PRIO-1;
    /* Bind the thread to the current CPU */
    Thd_Struct->Sched.CPUID_Bind=CPUID;
ffffffff8021a460:	48 8b 44 24 40       	mov    0x40(%rsp),%rax
    Thd_Struct->Cur_Reg=&(Thd_Struct->Def_Reg);
    /* Initialize the invocation stack */
    __RME_List_Crt(&(Thd_Struct->Inv_Stack));
    
    /* Increase the reference count of the process structure(Not the process capability) */
    __RME_Fetch_Add(&(RME_CAP_GETOBJ(Proc_Op, struct RME_Proc_Struct*)->Refcnt), 1);
ffffffff8021a465:	be 01 00 00 00       	mov    $0x1,%esi
    Thd_Struct=(struct RME_Thd_Struct*)Vaddr;
    Thd_Struct->Sched.TID=__RME_Fetch_Add(&RME_TID_Inc, 1);
    /* Set this initially to 1 to make it virtually unfreeable & undeletable */
    Thd_Struct->Sched.Refcnt=1;
    Thd_Struct->Sched.Slices=RME_THD_INIT_TIME;
    Thd_Struct->Sched.State=RME_THD_RUNNING;
ffffffff8021a46a:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff8021a471:	00 
    Thd_Struct->Sched.Signal=0;
ffffffff8021a472:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
ffffffff8021a479:	00 
    Thd_Struct->Sched.Prio=Prio;
ffffffff8021a47a:	4c 89 63 48          	mov    %r12,0x48(%rbx)
    Thd_Struct->Sched.Max_Prio=RME_MAX_PREEMPT_PRIO-1;
ffffffff8021a47e:	48 c7 43 50 3f 00 00 	movq   $0x3f,0x50(%rbx)
ffffffff8021a485:	00 
    /* Bind the thread to the current CPU */
    Thd_Struct->Sched.CPUID_Bind=CPUID;
ffffffff8021a486:	48 89 43 28          	mov    %rax,0x28(%rbx)
    /* This is a marking that this thread haven't sent any notifications */
    __RME_List_Crt(&(Thd_Struct->Sched.Notif));
ffffffff8021a48a:	48 8d 43 10          	lea    0x10(%rbx),%rax
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff8021a48e:	48 89 43 10          	mov    %rax,0x10(%rbx)
    Head->Next=(struct RME_List*)Head;
ffffffff8021a492:	48 89 43 18          	mov    %rax,0x18(%rbx)
    Thd_Struct->Sched.Max_Prio=RME_MAX_PREEMPT_PRIO-1;
    /* Bind the thread to the current CPU */
    Thd_Struct->Sched.CPUID_Bind=CPUID;
    /* This is a marking that this thread haven't sent any notifications */
    __RME_List_Crt(&(Thd_Struct->Sched.Notif));
    __RME_List_Crt(&(Thd_Struct->Sched.Event));
ffffffff8021a496:	48 8d 43 70          	lea    0x70(%rbx),%rax
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff8021a49a:	48 89 43 70          	mov    %rax,0x70(%rbx)
    Head->Next=(struct RME_List*)Head;
ffffffff8021a49e:	48 89 43 78          	mov    %rax,0x78(%rbx)
    Thd_Struct->Sched.CPUID_Bind=CPUID;
    /* This is a marking that this thread haven't sent any notifications */
    __RME_List_Crt(&(Thd_Struct->Sched.Notif));
    __RME_List_Crt(&(Thd_Struct->Sched.Event));
    /* RME_List_Crt(&(Thd_Struct->Sched.Run)); */
    Thd_Struct->Sched.Proc=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
ffffffff8021a4a2:	49 8b 45 18          	mov    0x18(%r13),%rax
ffffffff8021a4a6:	48 89 43 60          	mov    %rax,0x60(%rbx)
    /* Point its pointer to itself - this will never be a hypervisor thread */
    Thd_Struct->Cur_Reg=&(Thd_Struct->Def_Reg);
ffffffff8021a4aa:	48 8d 83 88 00 00 00 	lea    0x88(%rbx),%rax
ffffffff8021a4b1:	48 89 83 80 00 00 00 	mov    %rax,0x80(%rbx)
    /* Initialize the invocation stack */
    __RME_List_Crt(&(Thd_Struct->Inv_Stack));
ffffffff8021a4b8:	48 8d 83 b8 09 00 00 	lea    0x9b8(%rbx),%rax
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff8021a4bf:	48 89 83 b8 09 00 00 	mov    %rax,0x9b8(%rbx)
    Head->Next=(struct RME_List*)Head;
ffffffff8021a4c6:	48 89 83 c0 09 00 00 	mov    %rax,0x9c0(%rbx)
    Thd_Struct->Cur_Reg=&(Thd_Struct->Def_Reg);
    /* Initialize the invocation stack */
    __RME_List_Crt(&(Thd_Struct->Inv_Stack));
    
    /* Increase the reference count of the process structure(Not the process capability) */
    __RME_Fetch_Add(&(RME_CAP_GETOBJ(Proc_Op, struct RME_Proc_Struct*)->Refcnt), 1);
ffffffff8021a4cd:	49 8b 7d 18          	mov    0x18(%r13),%rdi
ffffffff8021a4d1:	e8 c8 13 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    
    /* Set the cap's parameters according to what we have just created */
    Thd_Crt->Head.Parent=0;
ffffffff8021a4d6:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8021a4dd:	00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff8021a4de:	48 89 5d 18          	mov    %rbx,0x18(%rbp)
    /* This can only be a parent, and not a child, and cannot be freed. Additionally,
     * this should not be blocked on any endpoint. Any attempt to block this thread will fail.
     * Setting execution information for this is also prohibited. */
    Thd_Crt->Head.Flags=RME_THD_FLAG_SCHED_PRIO|RME_THD_FLAG_SCHED_PARENT|
ffffffff8021a4e2:	48 c7 45 10 d8 03 00 	movq   $0x3d8,0x10(%rbp)
ffffffff8021a4e9:	00 
                        RME_THD_FLAG_XFER_DST|RME_THD_FLAG_XFER_SRC|
                        RME_THD_FLAG_SCHED_RCV|RME_THD_FLAG_SWT;
    Thd_Crt->TID=Thd_Struct->Sched.TID;
ffffffff8021a4ea:	48 8b 43 20          	mov    0x20(%rbx),%rax
ffffffff8021a4ee:	48 89 45 28          	mov    %rax,0x28(%rbp)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021a4f2:	48 8b 43 28          	mov    0x28(%rbx),%rax
ret_t _RME_Run_Ins(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff8021a4f6:	48 8b 4b 48          	mov    0x48(%rbx),%rcx
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
ffffffff8021a4fa:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a4fd:	48 c1 e2 0a          	shl    $0xa,%rdx
ffffffff8021a501:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021a504:	48 8d 14 c2          	lea    (%rdx,%rax,8),%rdx
ffffffff8021a508:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8021a50c:	48 8d 94 16 20 30 22 	lea    -0x7fddcfe0(%rsi,%rdx,1),%rdx
ffffffff8021a513:	80 
ffffffff8021a514:	48 8b 72 08          	mov    0x8(%rdx),%rsi
ffffffff8021a518:	48 8d 7a 08          	lea    0x8(%rdx),%rdi
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff8021a51c:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021a520:	48 89 ca             	mov    %rcx,%rdx
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
ffffffff8021a523:	48 89 7b 08          	mov    %rdi,0x8(%rbx)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021a527:	48 c1 ea 06          	shr    $0x6,%rdx
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
    New->Prev=(struct RME_List*)Prev;
ffffffff8021a52b:	48 89 33             	mov    %rsi,(%rbx)
    Prev->Next=(struct RME_List*)New;
ffffffff8021a52e:	48 89 5e 08          	mov    %rbx,0x8(%rsi)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021a532:	48 89 c6             	mov    %rax,%rsi
ffffffff8021a535:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff8021a539:	48 01 f0             	add    %rsi,%rax
ffffffff8021a53c:	48 01 d0             	add    %rdx,%rax
ffffffff8021a53f:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021a544:	d3 e2                	shl    %cl,%edx
ffffffff8021a546:	48 63 d2             	movslq %edx,%rdx
ffffffff8021a549:	48 09 14 c5 20 30 22 	or     %rdx,-0x7fddcfe0(,%rax,8)
ffffffff8021a550:	80 
                        RME_THD_FLAG_SCHED_RCV|RME_THD_FLAG_SWT;
    Thd_Crt->TID=Thd_Struct->Sched.TID;
    
    /* Insert this into the runqueue, and set current thread to it */
    _RME_Run_Ins(Thd_Struct);
    RME_Cur_Thd[Thd_Struct->Sched.CPUID_Bind]=Thd_Struct;
ffffffff8021a551:	48 8b 43 28          	mov    0x28(%rbx),%rax
ffffffff8021a555:	48 89 1c c5 00 28 22 	mov    %rbx,-0x7fddd800(,%rax,8)
ffffffff8021a55c:	80 
    
    /* Creation complete */
    Thd_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_THD,0);
ffffffff8021a55d:	48 b8 00 00 00 00 00 	movabs $0x6000000000000,%rax
ffffffff8021a564:	00 06 00 
ffffffff8021a567:	48 89 45 00          	mov    %rax,0x0(%rbp)
    
    return Thd_Crt->TID;
ffffffff8021a56b:	48 8b 45 28          	mov    0x28(%rbp),%rax
}
ffffffff8021a56f:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021a573:	5b                   	pop    %rbx
ffffffff8021a574:	5d                   	pop    %rbp
ffffffff8021a575:	41 5c                	pop    %r12
ffffffff8021a577:	41 5d                	pop    %r13
ffffffff8021a579:	c3                   	retq   
ffffffff8021a57a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    /* Check whether the priority level is allowed */
    if(Prio>=RME_MAX_PREEMPT_PRIO)
        return RME_ERR_PTH_PRIO;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a580:	4c 8b 5f 28          	mov    0x28(%rdi),%r11
ffffffff8021a584:	49 39 f3             	cmp    %rsi,%r11
ffffffff8021a587:	0f 86 9b 00 00 00    	jbe    ffffffff8021a628 <_RME_Thd_Boot_Crt+0x358>
ffffffff8021a58d:	4c 8b 57 18          	mov    0x18(%rdi),%r10
ffffffff8021a591:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021a595:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a59c:	4c 01 d6             	add    %r10,%rsi
ffffffff8021a59f:	48 8b 1e             	mov    (%rsi),%rbx
ffffffff8021a5a2:	48 89 df             	mov    %rbx,%rdi
ffffffff8021a5a5:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021a5a9:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021a5ad:	75 c0                	jne    ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
ffffffff8021a5af:	f6 c5 80             	test   $0x80,%ch
ffffffff8021a5b2:	0f 84 bb fd ff ff    	je     ffffffff8021a373 <_RME_Thd_Boot_Crt+0xa3>
ffffffff8021a5b8:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021a5bb:	48 c1 ff 10          	sar    $0x10,%rdi
ffffffff8021a5bf:	4c 39 df             	cmp    %r11,%rdi
ffffffff8021a5c2:	73 64                	jae    ffffffff8021a628 <_RME_Thd_Boot_Crt+0x358>
ffffffff8021a5c4:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff8021a5c8:	4c 01 d7             	add    %r10,%rdi
ffffffff8021a5cb:	49 ba 00 00 00 00 00 	movabs $0x800000000000,%r10
ffffffff8021a5d2:	80 00 00 
ffffffff8021a5d5:	48 8b 07             	mov    (%rdi),%rax
ffffffff8021a5d8:	4c 85 d0             	test   %r10,%rax
ffffffff8021a5db:	75 5b                	jne    ffffffff8021a638 <_RME_Thd_Boot_Crt+0x368>
ffffffff8021a5dd:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a5e1:	49 89 c2             	mov    %rax,%r10
    /* Check whether the priority level is allowed */
    if(Prio>=RME_MAX_PREEMPT_PRIO)
        return RME_ERR_PTH_PRIO;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a5e4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
ffffffff8021a5eb:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8021a5ef:	0f 85 7a ff ff ff    	jne    ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
ffffffff8021a5f5:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff8021a5fb:	48 3b 4f 28          	cmp    0x28(%rdi),%rcx
ffffffff8021a5ff:	73 27                	jae    ffffffff8021a628 <_RME_Thd_Boot_Crt+0x358>
ffffffff8021a601:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021a605:	48 03 4f 18          	add    0x18(%rdi),%rcx
ffffffff8021a609:	48 8b 39             	mov    (%rcx),%rdi
ffffffff8021a60c:	49 89 cd             	mov    %rcx,%r13
ffffffff8021a60f:	48 89 f9             	mov    %rdi,%rcx
ffffffff8021a612:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021a616:	48 83 f9 05          	cmp    $0x5,%rcx
ffffffff8021a61a:	0f 84 80 fd ff ff    	je     ffffffff8021a3a0 <_RME_Thd_Boot_Crt+0xd0>
ffffffff8021a620:	e9 4a ff ff ff       	jmpq   ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
ffffffff8021a625:	0f 1f 00             	nopl   (%rax)
    /* Check whether the priority level is allowed */
    if(Prio>=RME_MAX_PREEMPT_PRIO)
        return RME_ERR_PTH_PRIO;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a628:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021a62f:	e9 3b ff ff ff       	jmpq   ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
ffffffff8021a634:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8021a638:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021a63f:	e9 2b ff ff ff       	jmpq   ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
ffffffff8021a644:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff8021a648:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021a64f:	e9 1b ff ff ff       	jmpq   ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
ffffffff8021a654:	0f 1f 40 00          	nopl   0x0(%rax)
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Type_Ref;
    
    /* Check whether the priority level is allowed */
    if(Prio>=RME_MAX_PREEMPT_PRIO)
        return RME_ERR_PTH_PRIO;
ffffffff8021a658:	48 c7 c0 e7 ff ff ff 	mov    $0xffffffffffffffe7,%rax
ffffffff8021a65f:	e9 0b ff ff ff       	jmpq   ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
ffffffff8021a664:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAPTBL_OCCUPY(Thd_Crt,Type_Ref);
     
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_THD_SIZE)!=0)
    {
        Thd_Crt->Head.Type_Ref=0;
ffffffff8021a668:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8021a66f:	00 
        return RME_ERR_CAP_KOTBL;
ffffffff8021a670:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8021a677:	e9 f3 fe ff ff       	jmpq   ffffffff8021a56f <_RME_Thd_Boot_Crt+0x29f>
ffffffff8021a67c:	0f 1f 40 00          	nopl   0x0(%rax)

ffffffff8021a680 <_RME_Thd_Crt>:
Output      : None.
Return      : ret_t - If successful, the Thread ID; or an error code.
******************************************************************************/
ret_t _RME_Thd_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Kmem,
                   cid_t Cap_Thd, cid_t Cap_Proc, ptr_t Max_Prio, ptr_t Vaddr)
{
ffffffff8021a680:	41 57                	push   %r15
ffffffff8021a682:	41 56                	push   %r14
ffffffff8021a684:	49 89 d7             	mov    %rdx,%r15
ffffffff8021a687:	41 55                	push   %r13
ffffffff8021a689:	41 54                	push   %r12
ffffffff8021a68b:	4d 89 c5             	mov    %r8,%r13
ffffffff8021a68e:	55                   	push   %rbp
ffffffff8021a68f:	53                   	push   %rbx
ffffffff8021a690:	4c 89 cd             	mov    %r9,%rbp
ffffffff8021a693:	48 89 f3             	mov    %rsi,%rbx
ffffffff8021a696:	49 89 cc             	mov    %rcx,%r12
ffffffff8021a699:	48 83 ec 28          	sub    $0x28,%rsp
ffffffff8021a69d:	48 89 7c 24 08       	mov    %rdi,0x8(%rsp)
ffffffff8021a6a2:	4c 8b 74 24 60       	mov    0x60(%rsp),%r14
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Type_Ref;
    
    /* See if the maximum priority relationship is correct - a thread can never create
     * a thread with higher maximum priority */
    if(RME_Cur_Thd[RME_CPUID()]->Sched.Max_Prio<Max_Prio)
ffffffff8021a6a7:	e8 93 11 ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
ffffffff8021a6ac:	48 8b 04 c5 00 28 22 	mov    -0x7fddd800(,%rax,8),%rax
ffffffff8021a6b3:	80 
ffffffff8021a6b4:	48 39 68 50          	cmp    %rbp,0x50(%rax)
ffffffff8021a6b8:	0f 82 e2 03 00 00    	jb     ffffffff8021aaa0 <_RME_Thd_Crt+0x420>
        return RME_ERR_PTH_PRIO;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a6be:	f6 c7 80             	test   $0x80,%bh
ffffffff8021a6c1:	48 8b 7c 24 08       	mov    0x8(%rsp),%rdi
ffffffff8021a6c6:	0f 84 6c 02 00 00    	je     ffffffff8021a938 <_RME_Thd_Crt+0x2b8>
ffffffff8021a6cc:	48 8b 57 28          	mov    0x28(%rdi),%rdx
ffffffff8021a6d0:	48 89 de             	mov    %rbx,%rsi
ffffffff8021a6d3:	48 c1 fe 10          	sar    $0x10,%rsi
ffffffff8021a6d7:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8021a6da:	0f 83 80 03 00 00    	jae    ffffffff8021aa60 <_RME_Thd_Crt+0x3e0>
ffffffff8021a6e0:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff8021a6e4:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021a6e8:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021a6ef:	80 00 00 
ffffffff8021a6f2:	48 01 ce             	add    %rcx,%rsi
ffffffff8021a6f5:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021a6f8:	48 85 f8             	test   %rdi,%rax
ffffffff8021a6fb:	0f 85 8f 03 00 00    	jne    ffffffff8021aa90 <_RME_Thd_Crt+0x410>
ffffffff8021a701:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a705:	48 89 c7             	mov    %rax,%rdi
ffffffff8021a708:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a70f:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021a713:	0f 85 09 02 00 00    	jne    ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
ffffffff8021a719:	81 e3 ff 7f 00 00    	and    $0x7fff,%ebx
ffffffff8021a71f:	48 3b 5e 28          	cmp    0x28(%rsi),%rbx
ffffffff8021a723:	0f 83 37 03 00 00    	jae    ffffffff8021aa60 <_RME_Thd_Crt+0x3e0>
ffffffff8021a729:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8021a72d:	48 03 5e 18          	add    0x18(%rsi),%rbx
ffffffff8021a731:	4c 8b 0b             	mov    (%rbx),%r9
ffffffff8021a734:	4c 89 ce             	mov    %r9,%rsi
ffffffff8021a737:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021a73b:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021a73f:	0f 85 dd 01 00 00    	jne    ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
ffffffff8021a745:	41 f7 c5 00 80 00 00 	test   $0x8000,%r13d
ffffffff8021a74c:	0f 85 22 02 00 00    	jne    ffffffff8021a974 <_RME_Thd_Crt+0x2f4>
ffffffff8021a752:	49 39 d5             	cmp    %rdx,%r13
ffffffff8021a755:	0f 83 05 03 00 00    	jae    ffffffff8021aa60 <_RME_Thd_Crt+0x3e0>
ffffffff8021a75b:	49 c1 e5 06          	shl    $0x6,%r13
     * a thread with higher maximum priority */
    if(RME_Cur_Thd[RME_CPUID()]->Sched.Max_Prio<Max_Prio)
        return RME_ERR_PTH_PRIO;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a75f:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
ffffffff8021a766:	49 01 cd             	add    %rcx,%r13
ffffffff8021a769:	4d 8b 45 00          	mov    0x0(%r13),%r8
ffffffff8021a76d:	4c 89 c6             	mov    %r8,%rsi
ffffffff8021a770:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021a774:	48 83 fe 05          	cmp    $0x5,%rsi
ffffffff8021a778:	0f 85 a4 01 00 00    	jne    ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021a77e:	41 f7 c7 00 80 00 00 	test   $0x8000,%r15d
ffffffff8021a785:	0f 85 69 02 00 00    	jne    ffffffff8021a9f4 <_RME_Thd_Crt+0x374>
ffffffff8021a78b:	49 39 d7             	cmp    %rdx,%r15
ffffffff8021a78e:	0f 83 cc 02 00 00    	jae    ffffffff8021aa60 <_RME_Thd_Crt+0x3e0>
ffffffff8021a794:	49 c1 e7 06          	shl    $0x6,%r15
     * a thread with higher maximum priority */
    if(RME_Cur_Thd[RME_CPUID()]->Sched.Max_Prio<Max_Prio)
        return RME_ERR_PTH_PRIO;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a798:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021a79f:	49 8d 34 0f          	lea    (%r15,%rcx,1),%rsi
ffffffff8021a7a3:	66 83 7e 06 02       	cmpw   $0x2,0x6(%rsi)
ffffffff8021a7a8:	0f 85 74 01 00 00    	jne    ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff8021a7ae:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021a7b5:	80 00 00 
ffffffff8021a7b8:	49 85 d1             	test   %rdx,%r9
ffffffff8021a7bb:	0f 85 cf 02 00 00    	jne    ffffffff8021aa90 <_RME_Thd_Crt+0x410>
ffffffff8021a7c1:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8021a7c5:	0f 84 b5 02 00 00    	je     ffffffff8021aa80 <_RME_Thd_Crt+0x400>
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_THD);
ffffffff8021a7cb:	49 85 d0             	test   %rdx,%r8
ffffffff8021a7ce:	0f 85 bc 02 00 00    	jne    ffffffff8021aa90 <_RME_Thd_Crt+0x410>
ffffffff8021a7d4:	41 f6 45 10 02       	testb  $0x2,0x10(%r13)
ffffffff8021a7d9:	0f 84 a1 02 00 00    	je     ffffffff8021aa80 <_RME_Thd_Crt+0x400>
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_THD,Vaddr,RME_THD_SIZE);
ffffffff8021a7df:	f6 46 10 08          	testb  $0x8,0x10(%rsi)
ffffffff8021a7e3:	0f 84 97 02 00 00    	je     ffffffff8021aa80 <_RME_Thd_Crt+0x400>
ffffffff8021a7e9:	4c 39 76 28          	cmp    %r14,0x28(%rsi)
ffffffff8021a7ed:	0f 87 8d 02 00 00    	ja     ffffffff8021aa80 <_RME_Thd_Crt+0x400>
ffffffff8021a7f3:	49 8d 86 c8 09 00 00 	lea    0x9c8(%r14),%rax
ffffffff8021a7fa:	48 39 46 30          	cmp    %rax,0x30(%rsi)
ffffffff8021a7fe:	0f 82 7c 02 00 00    	jb     ffffffff8021aa80 <_RME_Thd_Crt+0x400>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8021a804:	4c 39 63 28          	cmp    %r12,0x28(%rbx)
     * a thread with higher maximum priority */
    if(RME_Cur_Thd[RME_CPUID()]->Sched.Max_Prio<Max_Prio)
        return RME_ERR_PTH_PRIO;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a808:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_THD);
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_THD,Vaddr,RME_THD_SIZE);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Crt);
ffffffff8021a80f:	0f 86 0d 01 00 00    	jbe    ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
ffffffff8021a815:	49 c1 e4 06          	shl    $0x6,%r12
ffffffff8021a819:	4c 03 63 18          	add    0x18(%rbx),%r12
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Thd_Crt,Type_Ref);
ffffffff8021a81d:	48 8d 74 24 18       	lea    0x18(%rsp),%rsi
ffffffff8021a822:	48 c7 44 24 18 00 00 	movq   $0x0,0x18(%rsp)
ffffffff8021a829:	00 00 
ffffffff8021a82b:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021a82e:	e8 4e 10 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021a833:	48 89 c2             	mov    %rax,%rdx
ffffffff8021a836:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021a83d:	48 85 d2             	test   %rdx,%rdx
ffffffff8021a840:	0f 84 dc 00 00 00    	je     ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
     
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_THD_SIZE)!=0)
ffffffff8021a846:	be c8 09 00 00       	mov    $0x9c8,%esi
ffffffff8021a84b:	4c 89 f7             	mov    %r14,%rdi
ffffffff8021a84e:	e8 3d c7 ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff8021a853:	48 85 c0             	test   %rax,%rax
ffffffff8021a856:	0f 85 54 02 00 00    	jne    ffffffff8021aab0 <_RME_Thd_Crt+0x430>
        return RME_ERR_CAP_KOTBL;
    }

    /* Get the thread, and start creation */
    Thd_Struct=(struct RME_Thd_Struct*)Vaddr;
    Thd_Struct->Sched.TID=__RME_Fetch_Add(&RME_TID_Inc, 1);
ffffffff8021a85c:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021a861:	48 c7 c7 20 38 26 80 	mov    $0xffffffff80263820,%rdi
ffffffff8021a868:	e8 31 10 ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
ffffffff8021a86d:	49 89 46 20          	mov    %rax,0x20(%r14)
    Thd_Struct->Sched.Slices=0;
    Thd_Struct->Sched.State=RME_THD_TIMEOUT;
    Thd_Struct->Sched.Signal=0;
    Thd_Struct->Sched.Max_Prio=Max_Prio;
    /* Currently the thread is not binded to any particular CPU */
    Thd_Struct->Sched.CPUID_Bind=RME_THD_UNBIND;
ffffffff8021a871:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff8021a878:	00 00 80 
    }

    /* Get the thread, and start creation */
    Thd_Struct=(struct RME_Thd_Struct*)Vaddr;
    Thd_Struct->Sched.TID=__RME_Fetch_Add(&RME_TID_Inc, 1);
    Thd_Struct->Sched.Refcnt=0;
ffffffff8021a87b:	49 c7 46 40 00 00 00 	movq   $0x0,0x40(%r14)
ffffffff8021a882:	00 
    Thd_Struct->Sched.Slices=0;
    Thd_Struct->Sched.State=RME_THD_TIMEOUT;
    Thd_Struct->Sched.Signal=0;
    Thd_Struct->Sched.Max_Prio=Max_Prio;
    /* Currently the thread is not binded to any particular CPU */
    Thd_Struct->Sched.CPUID_Bind=RME_THD_UNBIND;
ffffffff8021a883:	49 89 46 28          	mov    %rax,0x28(%r14)
    /* This is a marking that this thread haven't sent any notifications */
    __RME_List_Crt(&(Thd_Struct->Sched.Notif));
ffffffff8021a887:	49 8d 46 10          	lea    0x10(%r14),%rax

    /* Get the thread, and start creation */
    Thd_Struct=(struct RME_Thd_Struct*)Vaddr;
    Thd_Struct->Sched.TID=__RME_Fetch_Add(&RME_TID_Inc, 1);
    Thd_Struct->Sched.Refcnt=0;
    Thd_Struct->Sched.Slices=0;
ffffffff8021a88b:	49 c7 46 30 00 00 00 	movq   $0x0,0x30(%r14)
ffffffff8021a892:	00 
    Thd_Struct->Sched.State=RME_THD_TIMEOUT;
ffffffff8021a893:	49 c7 46 38 03 00 00 	movq   $0x3,0x38(%r14)
ffffffff8021a89a:	00 
    Thd_Struct->Sched.Signal=0;
ffffffff8021a89b:	49 c7 46 58 00 00 00 	movq   $0x0,0x58(%r14)
ffffffff8021a8a2:	00 
    Thd_Struct->Cur_Reg=&(Thd_Struct->Def_Reg);
    /* Initialize the invocation stack */
    __RME_List_Crt(&(Thd_Struct->Inv_Stack));
    
    /* Increase the reference count of the process structure(Not the process capability) */
    __RME_Fetch_Add(&(RME_CAP_GETOBJ(Proc_Op, struct RME_Proc_Struct*)->Refcnt), 1);
ffffffff8021a8a3:	be 01 00 00 00       	mov    $0x1,%esi
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff8021a8a8:	49 89 46 10          	mov    %rax,0x10(%r14)
    Head->Next=(struct RME_List*)Head;
ffffffff8021a8ac:	49 89 46 18          	mov    %rax,0x18(%r14)
    Thd_Struct->Sched.Max_Prio=Max_Prio;
    /* Currently the thread is not binded to any particular CPU */
    Thd_Struct->Sched.CPUID_Bind=RME_THD_UNBIND;
    /* This is a marking that this thread haven't sent any notifications */
    __RME_List_Crt(&(Thd_Struct->Sched.Notif));
    __RME_List_Crt(&(Thd_Struct->Sched.Event));
ffffffff8021a8b0:	49 8d 46 70          	lea    0x70(%r14),%rax
    Thd_Struct->Sched.TID=__RME_Fetch_Add(&RME_TID_Inc, 1);
    Thd_Struct->Sched.Refcnt=0;
    Thd_Struct->Sched.Slices=0;
    Thd_Struct->Sched.State=RME_THD_TIMEOUT;
    Thd_Struct->Sched.Signal=0;
    Thd_Struct->Sched.Max_Prio=Max_Prio;
ffffffff8021a8b4:	49 89 6e 50          	mov    %rbp,0x50(%r14)
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff8021a8b8:	49 89 46 70          	mov    %rax,0x70(%r14)
    Head->Next=(struct RME_List*)Head;
ffffffff8021a8bc:	49 89 46 78          	mov    %rax,0x78(%r14)
    Thd_Struct->Sched.CPUID_Bind=RME_THD_UNBIND;
    /* This is a marking that this thread haven't sent any notifications */
    __RME_List_Crt(&(Thd_Struct->Sched.Notif));
    __RME_List_Crt(&(Thd_Struct->Sched.Event));
    /* RME_List_Crt(&(Thd_Struct->Sched.Run)); */
    Thd_Struct->Sched.Proc=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
ffffffff8021a8c0:	49 8b 45 18          	mov    0x18(%r13),%rax
ffffffff8021a8c4:	49 89 46 60          	mov    %rax,0x60(%r14)
    /* Point its pointer to itself - this is not a hypervisor thread yet */
    Thd_Struct->Cur_Reg=&(Thd_Struct->Def_Reg);
ffffffff8021a8c8:	49 8d 86 88 00 00 00 	lea    0x88(%r14),%rax
ffffffff8021a8cf:	49 89 86 80 00 00 00 	mov    %rax,0x80(%r14)
    /* Initialize the invocation stack */
    __RME_List_Crt(&(Thd_Struct->Inv_Stack));
ffffffff8021a8d6:	49 8d 86 b8 09 00 00 	lea    0x9b8(%r14),%rax
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff8021a8dd:	49 89 86 b8 09 00 00 	mov    %rax,0x9b8(%r14)
    Head->Next=(struct RME_List*)Head;
ffffffff8021a8e4:	49 89 86 c0 09 00 00 	mov    %rax,0x9c0(%r14)
    Thd_Struct->Cur_Reg=&(Thd_Struct->Def_Reg);
    /* Initialize the invocation stack */
    __RME_List_Crt(&(Thd_Struct->Inv_Stack));
    
    /* Increase the reference count of the process structure(Not the process capability) */
    __RME_Fetch_Add(&(RME_CAP_GETOBJ(Proc_Op, struct RME_Proc_Struct*)->Refcnt), 1);
ffffffff8021a8eb:	49 8b 7d 18          	mov    0x18(%r13),%rdi
ffffffff8021a8ef:	e8 aa 0f ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    
    /* Set the cap's parameters according to what we have just created */
    Thd_Crt->Head.Parent=0;
ffffffff8021a8f4:	49 c7 44 24 08 00 00 	movq   $0x0,0x8(%r12)
ffffffff8021a8fb:	00 00 
    Thd_Crt->Head.Object=Vaddr;
ffffffff8021a8fd:	4d 89 74 24 18       	mov    %r14,0x18(%r12)
                        RME_THD_FLAG_SCHED_RCV|RME_THD_FLAG_SWT|
                        RME_THD_FLAG_XFER_SRC|RME_THD_FLAG_XFER_DST;
    Thd_Crt->TID=Thd_Struct->Sched.TID;
    
    /* Creation complete */
    Thd_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_THD,0);
ffffffff8021a902:	48 b9 00 00 00 00 00 	movabs $0x6000000000000,%rcx
ffffffff8021a909:	00 06 00 
    __RME_Fetch_Add(&(RME_CAP_GETOBJ(Proc_Op, struct RME_Proc_Struct*)->Refcnt), 1);
    
    /* Set the cap's parameters according to what we have just created */
    Thd_Crt->Head.Parent=0;
    Thd_Crt->Head.Object=Vaddr;
    Thd_Crt->Head.Flags=RME_THD_FLAG_EXEC_SET|RME_THD_FLAG_HYP_SET|
ffffffff8021a90c:	49 c7 44 24 10 ff 03 	movq   $0x3ff,0x10(%r12)
ffffffff8021a913:	00 00 
                        RME_THD_FLAG_SCHED_CHILD|RME_THD_FLAG_SCHED_PARENT|
                        RME_THD_FLAG_SCHED_PRIO|RME_THD_FLAG_SCHED_FREE|
                        RME_THD_FLAG_SCHED_RCV|RME_THD_FLAG_SWT|
                        RME_THD_FLAG_XFER_SRC|RME_THD_FLAG_XFER_DST;
    Thd_Crt->TID=Thd_Struct->Sched.TID;
ffffffff8021a915:	49 8b 46 20          	mov    0x20(%r14),%rax
    
    /* Creation complete */
    Thd_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_THD,0);
ffffffff8021a919:	49 89 0c 24          	mov    %rcx,(%r12)
    Thd_Crt->Head.Flags=RME_THD_FLAG_EXEC_SET|RME_THD_FLAG_HYP_SET|
                        RME_THD_FLAG_SCHED_CHILD|RME_THD_FLAG_SCHED_PARENT|
                        RME_THD_FLAG_SCHED_PRIO|RME_THD_FLAG_SCHED_FREE|
                        RME_THD_FLAG_SCHED_RCV|RME_THD_FLAG_SWT|
                        RME_THD_FLAG_XFER_SRC|RME_THD_FLAG_XFER_DST;
    Thd_Crt->TID=Thd_Struct->Sched.TID;
ffffffff8021a91d:	49 89 44 24 28       	mov    %rax,0x28(%r12)
    
    /* Creation complete */
    Thd_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_THD,0);

    return Thd_Crt->TID;
}
ffffffff8021a922:	48 83 c4 28          	add    $0x28,%rsp
ffffffff8021a926:	5b                   	pop    %rbx
ffffffff8021a927:	5d                   	pop    %rbp
ffffffff8021a928:	41 5c                	pop    %r12
ffffffff8021a92a:	41 5d                	pop    %r13
ffffffff8021a92c:	41 5e                	pop    %r14
ffffffff8021a92e:	41 5f                	pop    %r15
ffffffff8021a930:	c3                   	retq   
ffffffff8021a931:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
     * a thread with higher maximum priority */
    if(RME_Cur_Thd[RME_CPUID()]->Sched.Max_Prio<Max_Prio)
        return RME_ERR_PTH_PRIO;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a938:	48 8b 57 28          	mov    0x28(%rdi),%rdx
ffffffff8021a93c:	48 39 da             	cmp    %rbx,%rdx
ffffffff8021a93f:	0f 86 1b 01 00 00    	jbe    ffffffff8021aa60 <_RME_Thd_Crt+0x3e0>
ffffffff8021a945:	48 8b 4f 18          	mov    0x18(%rdi),%rcx
ffffffff8021a949:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8021a94d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021a954:	48 01 cb             	add    %rcx,%rbx
ffffffff8021a957:	4c 8b 0b             	mov    (%rbx),%r9
ffffffff8021a95a:	4c 89 ce             	mov    %r9,%rsi
ffffffff8021a95d:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021a961:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021a965:	75 bb                	jne    ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
ffffffff8021a967:	41 f7 c5 00 80 00 00 	test   $0x8000,%r13d
ffffffff8021a96e:	0f 84 de fd ff ff    	je     ffffffff8021a752 <_RME_Thd_Crt+0xd2>
ffffffff8021a974:	4c 89 ee             	mov    %r13,%rsi
ffffffff8021a977:	48 c1 fe 10          	sar    $0x10,%rsi
ffffffff8021a97b:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8021a97e:	0f 83 dc 00 00 00    	jae    ffffffff8021aa60 <_RME_Thd_Crt+0x3e0>
ffffffff8021a984:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021a988:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021a98f:	80 00 00 
ffffffff8021a992:	48 01 ce             	add    %rcx,%rsi
ffffffff8021a995:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021a998:	48 85 f8             	test   %rdi,%rax
ffffffff8021a99b:	0f 85 ef 00 00 00    	jne    ffffffff8021aa90 <_RME_Thd_Crt+0x410>
ffffffff8021a9a1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021a9a5:	48 89 c7             	mov    %rax,%rdi
     * a thread with higher maximum priority */
    if(RME_Cur_Thd[RME_CPUID()]->Sched.Max_Prio<Max_Prio)
        return RME_ERR_PTH_PRIO;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021a9a8:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
ffffffff8021a9af:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021a9b3:	0f 85 69 ff ff ff    	jne    ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
ffffffff8021a9b9:	41 81 e5 ff 7f 00 00 	and    $0x7fff,%r13d
ffffffff8021a9c0:	4c 3b 6e 28          	cmp    0x28(%rsi),%r13
ffffffff8021a9c4:	0f 83 96 00 00 00    	jae    ffffffff8021aa60 <_RME_Thd_Crt+0x3e0>
ffffffff8021a9ca:	49 c1 e5 06          	shl    $0x6,%r13
ffffffff8021a9ce:	4c 03 6e 18          	add    0x18(%rsi),%r13
ffffffff8021a9d2:	4d 8b 45 00          	mov    0x0(%r13),%r8
ffffffff8021a9d6:	4c 89 c6             	mov    %r8,%rsi
ffffffff8021a9d9:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021a9dd:	48 83 fe 05          	cmp    $0x5,%rsi
ffffffff8021a9e1:	0f 85 3b ff ff ff    	jne    ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021a9e7:	41 f7 c7 00 80 00 00 	test   $0x8000,%r15d
ffffffff8021a9ee:	0f 84 97 fd ff ff    	je     ffffffff8021a78b <_RME_Thd_Crt+0x10b>
ffffffff8021a9f4:	4c 89 ff             	mov    %r15,%rdi
ffffffff8021a9f7:	48 c1 ff 10          	sar    $0x10,%rdi
ffffffff8021a9fb:	48 39 d7             	cmp    %rdx,%rdi
ffffffff8021a9fe:	73 60                	jae    ffffffff8021aa60 <_RME_Thd_Crt+0x3e0>
ffffffff8021aa00:	48 c1 e7 06          	shl    $0x6,%rdi
ffffffff8021aa04:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021aa0b:	80 00 00 
ffffffff8021aa0e:	48 01 cf             	add    %rcx,%rdi
ffffffff8021aa11:	48 8b 07             	mov    (%rdi),%rax
ffffffff8021aa14:	48 85 d0             	test   %rdx,%rax
ffffffff8021aa17:	75 77                	jne    ffffffff8021aa90 <_RME_Thd_Crt+0x410>
ffffffff8021aa19:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021aa1d:	48 89 c2             	mov    %rax,%rdx
     * a thread with higher maximum priority */
    if(RME_Cur_Thd[RME_CPUID()]->Sched.Max_Prio<Max_Prio)
        return RME_ERR_PTH_PRIO;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021aa20:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021aa27:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021aa2b:	0f 85 f1 fe ff ff    	jne    ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
ffffffff8021aa31:	41 81 e7 ff 7f 00 00 	and    $0x7fff,%r15d
ffffffff8021aa38:	4c 3b 7f 28          	cmp    0x28(%rdi),%r15
ffffffff8021aa3c:	73 22                	jae    ffffffff8021aa60 <_RME_Thd_Crt+0x3e0>
ffffffff8021aa3e:	49 c1 e7 06          	shl    $0x6,%r15
ffffffff8021aa42:	4c 89 fe             	mov    %r15,%rsi
ffffffff8021aa45:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021aa49:	66 83 7e 06 02       	cmpw   $0x2,0x6(%rsi)
ffffffff8021aa4e:	0f 84 5a fd ff ff    	je     ffffffff8021a7ae <_RME_Thd_Crt+0x12e>
ffffffff8021aa54:	e9 c9 fe ff ff       	jmpq   ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
ffffffff8021aa59:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    
    /* Creation complete */
    Thd_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_THD,0);

    return Thd_Crt->TID;
}
ffffffff8021aa60:	48 83 c4 28          	add    $0x28,%rsp
     * a thread with higher maximum priority */
    if(RME_Cur_Thd[RME_CPUID()]->Sched.Max_Prio<Max_Prio)
        return RME_ERR_PTH_PRIO;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021aa64:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    
    /* Creation complete */
    Thd_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_THD,0);

    return Thd_Crt->TID;
}
ffffffff8021aa6b:	5b                   	pop    %rbx
ffffffff8021aa6c:	5d                   	pop    %rbp
ffffffff8021aa6d:	41 5c                	pop    %r12
ffffffff8021aa6f:	41 5d                	pop    %r13
ffffffff8021aa71:	41 5e                	pop    %r14
ffffffff8021aa73:	41 5f                	pop    %r15
ffffffff8021aa75:	c3                   	retq   
ffffffff8021aa76:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021aa7d:	00 00 00 
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);   
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
    /* Check if the target caps is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff8021aa80:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021aa87:	e9 96 fe ff ff       	jmpq   ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
ffffffff8021aa8c:	0f 1f 40 00          	nopl   0x0(%rax)
     * a thread with higher maximum priority */
    if(RME_Cur_Thd[RME_CPUID()]->Sched.Max_Prio<Max_Prio)
        return RME_ERR_PTH_PRIO;

    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op); 
ffffffff8021aa90:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021aa97:	e9 86 fe ff ff       	jmpq   ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
ffffffff8021aa9c:	0f 1f 40 00          	nopl   0x0(%rax)
    ptr_t Type_Ref;
    
    /* See if the maximum priority relationship is correct - a thread can never create
     * a thread with higher maximum priority */
    if(RME_Cur_Thd[RME_CPUID()]->Sched.Max_Prio<Max_Prio)
        return RME_ERR_PTH_PRIO;
ffffffff8021aaa0:	48 c7 c0 e7 ff ff ff 	mov    $0xffffffffffffffe7,%rax
ffffffff8021aaa7:	e9 76 fe ff ff       	jmpq   ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
ffffffff8021aaac:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAPTBL_OCCUPY(Thd_Crt,Type_Ref);
     
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_THD_SIZE)!=0)
    {
        Thd_Crt->Head.Type_Ref=0;
ffffffff8021aab0:	49 c7 04 24 00 00 00 	movq   $0x0,(%r12)
ffffffff8021aab7:	00 
        return RME_ERR_CAP_KOTBL;
ffffffff8021aab8:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8021aabf:	e9 5e fe ff ff       	jmpq   ffffffff8021a922 <_RME_Thd_Crt+0x2a2>
ffffffff8021aac4:	66 90                	xchg   %ax,%ax
ffffffff8021aac6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021aacd:	00 00 00 

ffffffff8021aad0 <_RME_Thd_Del>:
    /* These are for deletion */
    struct RME_Thd_Struct* Thd_Struct;
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021aad0:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021aad6:	0f 85 54 01 00 00    	jne    ffffffff8021ac30 <_RME_Thd_Del+0x160>
ffffffff8021aadc:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021aae0:	0f 86 4a 02 00 00    	jbe    ffffffff8021ad30 <_RME_Thd_Del+0x260>
ffffffff8021aae6:	48 89 f0             	mov    %rsi,%rax
ffffffff8021aae9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021aaed:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021aaf1:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021aaf4:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021aaf7:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021aafb:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021aaff:	0f 85 93 01 00 00    	jne    ffffffff8021ac98 <_RME_Thd_Del+0x1c8>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff8021ab05:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff8021ab0c:	80 00 00 
ffffffff8021ab0f:	48 85 f1             	test   %rsi,%rcx
ffffffff8021ab12:	0f 85 20 02 00 00    	jne    ffffffff8021ad38 <_RME_Thd_Del+0x268>
ffffffff8021ab18:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8021ab1c:	0f 84 1e 02 00 00    	je     ffffffff8021ad40 <_RME_Thd_Del+0x270>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff8021ab22:	48 39 50 28          	cmp    %rdx,0x28(%rax)
ffffffff8021ab26:	0f 86 04 02 00 00    	jbe    ffffffff8021ad30 <_RME_Thd_Del+0x260>
              cid_t Cap_Thd - The capability to the thread in the captbl. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Thd_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Thd)
{
ffffffff8021ab2c:	53                   	push   %rbx
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff8021ab2d:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021ab31:	48 89 d7             	mov    %rdx,%rdi
              cid_t Cap_Thd - The capability to the thread in the captbl. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Thd_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Thd)
{
ffffffff8021ab34:	48 83 ec 10          	sub    $0x10,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
ffffffff8021ab38:	48 03 78 18          	add    0x18(%rax),%rdi
    /* Delete check */
    RME_CAP_DEL_CHECK(Thd_Del,Type_Ref,RME_CAP_THD);
ffffffff8021ab3c:	48 8b 07             	mov    (%rdi),%rax
ffffffff8021ab3f:	48 85 f0             	test   %rsi,%rax
ffffffff8021ab42:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8021ab47:	0f 85 fb 01 00 00    	jne    ffffffff8021ad48 <_RME_Thd_Del+0x278>
ffffffff8021ab4d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ab50:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021ab54:	48 85 d2             	test   %rdx,%rdx
ffffffff8021ab57:	0f 84 f8 01 00 00    	je     ffffffff8021ad55 <_RME_Thd_Del+0x285>
ffffffff8021ab5d:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8021ab61:	0f 85 fb 01 00 00    	jne    ffffffff8021ad62 <_RME_Thd_Del+0x292>
ffffffff8021ab67:	48 8b 15 92 84 00 00 	mov    0x8492(%rip),%rdx        # ffffffff80223000 <RME_Timestamp>
ffffffff8021ab6e:	48 2b 57 20          	sub    0x20(%rdi),%rdx
ffffffff8021ab72:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021ab76:	0f 86 f3 01 00 00    	jbe    ffffffff8021ad6f <_RME_Thd_Del+0x29f>
ffffffff8021ab7c:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffff,%rdx
ffffffff8021ab83:	7f 00 00 
ffffffff8021ab86:	48 85 d0             	test   %rdx,%rax
ffffffff8021ab89:	0f 85 ed 01 00 00    	jne    ffffffff8021ad7c <_RME_Thd_Del+0x2ac>
ffffffff8021ab8f:	48 83 7f 08 00       	cmpq   $0x0,0x8(%rdi)
ffffffff8021ab94:	0f 85 e2 01 00 00    	jne    ffffffff8021ad7c <_RME_Thd_Del+0x2ac>
    
    /* Get the thread */
    Thd_Struct=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
ffffffff8021ab9a:	48 8b 5f 18          	mov    0x18(%rdi),%rbx
    
    /* See if the thread is unbinded. If not, we cannot proceed to deletion */
    if(Thd_Struct->Sched.CPUID_Bind!=RME_THD_UNBIND)
ffffffff8021ab9e:	48 ba 00 00 00 00 00 	movabs $0x8000000000000000,%rdx
ffffffff8021aba5:	00 00 80 
ffffffff8021aba8:	48 39 53 28          	cmp    %rdx,0x28(%rbx)
ffffffff8021abac:	0f 85 5a 01 00 00    	jne    ffffffff8021ad0c <_RME_Thd_Del+0x23c>
        RME_CAP_DEFROST(Thd_Del,Type_Ref);
        return RME_ERR_PTH_INVSTATE;
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Thd_Del,Type_Ref);
ffffffff8021abb2:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021abb7:	31 d2                	xor    %edx,%edx
ffffffff8021abb9:	e8 c3 0c ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021abbe:	48 85 c0             	test   %rax,%rax
ffffffff8021abc1:	0f 84 8e 01 00 00    	je     ffffffff8021ad55 <_RME_Thd_Del+0x285>
    
    /* Is the thread using any invocation? If yes, just pop the invocation
     * stack to empty, and free all the invocation stubs. This can be virtually
     * unbounded if the invocation stack is just too deep. This is left to the
     * user; if this is what he or she wants, be our guest. */
    while(Thd_Struct->Inv_Stack.Next!=&(Thd_Struct->Inv_Stack))
ffffffff8021abc7:	48 8b 83 c0 09 00 00 	mov    0x9c0(%rbx),%rax
ffffffff8021abce:	48 8d b3 b8 09 00 00 	lea    0x9b8(%rbx),%rsi
ffffffff8021abd5:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021abd8:	74 28                	je     ffffffff8021ac02 <_RME_Thd_Del+0x132>
ffffffff8021abda:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    {
        Inv_Struct=(struct RME_Inv_Struct*)(Thd_Struct->Inv_Stack.Next);
        __RME_List_Del(Inv_Struct->Head.Prev,Inv_Struct->Head.Next);
ffffffff8021abe0:	48 8b 48 08          	mov    0x8(%rax),%rcx
ffffffff8021abe4:	48 8b 10             	mov    (%rax),%rdx
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff8021abe7:	48 89 11             	mov    %rdx,(%rcx)
    Prev->Next=(struct RME_List*)Next;
ffffffff8021abea:	48 89 4a 08          	mov    %rcx,0x8(%rdx)
     * user; if this is what he or she wants, be our guest. */
    while(Thd_Struct->Inv_Stack.Next!=&(Thd_Struct->Inv_Stack))
    {
        Inv_Struct=(struct RME_Inv_Struct*)(Thd_Struct->Inv_Stack.Next);
        __RME_List_Del(Inv_Struct->Head.Prev,Inv_Struct->Head.Next);
        Inv_Struct->Active=0;
ffffffff8021abee:	48 c7 40 18 00 00 00 	movq   $0x0,0x18(%rax)
ffffffff8021abf5:	00 
    
    /* Is the thread using any invocation? If yes, just pop the invocation
     * stack to empty, and free all the invocation stubs. This can be virtually
     * unbounded if the invocation stack is just too deep. This is left to the
     * user; if this is what he or she wants, be our guest. */
    while(Thd_Struct->Inv_Stack.Next!=&(Thd_Struct->Inv_Stack))
ffffffff8021abf6:	48 8b 83 c0 09 00 00 	mov    0x9c0(%rbx),%rax
ffffffff8021abfd:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021ac00:	75 de                	jne    ffffffff8021abe0 <_RME_Thd_Del+0x110>
        __RME_List_Del(Inv_Struct->Head.Prev,Inv_Struct->Head.Next);
        Inv_Struct->Active=0;
    }
    
    /* Dereference the process */
    __RME_Fetch_Add(&(Thd_Struct->Sched.Proc->Refcnt), -1);
ffffffff8021ac02:	48 8b 7b 60          	mov    0x60(%rbx),%rdi
ffffffff8021ac06:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021ac0d:	e8 8c 0c ff ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
ffffffff8021ac12:	be c8 09 00 00       	mov    $0x9c8,%esi
ffffffff8021ac17:	48 89 df             	mov    %rbx,%rdi
ffffffff8021ac1a:	e8 a1 c5 ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
ffffffff8021ac1f:	48 85 c0             	test   %rax,%rax
ffffffff8021ac22:	74 7c                	je     ffffffff8021aca0 <_RME_Thd_Del+0x1d0>
    
    return 0;
}
ffffffff8021ac24:	48 83 c4 10          	add    $0x10,%rsp
    __RME_Fetch_Add(&(Thd_Struct->Sched.Proc->Refcnt), -1);
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
ffffffff8021ac28:	31 c0                	xor    %eax,%eax
}
ffffffff8021ac2a:	5b                   	pop    %rbx
ffffffff8021ac2b:	c3                   	retq   
ffffffff8021ac2c:	0f 1f 40 00          	nopl   0x0(%rax)
    /* These are for deletion */
    struct RME_Thd_Struct* Thd_Struct;
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021ac30:	48 89 f0             	mov    %rsi,%rax
ffffffff8021ac33:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021ac37:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff8021ac3b:	0f 83 ef 00 00 00    	jae    ffffffff8021ad30 <_RME_Thd_Del+0x260>
ffffffff8021ac41:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021ac45:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021ac49:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021ac50:	80 00 00 
ffffffff8021ac53:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021ac56:	48 85 f9             	test   %rdi,%rcx
ffffffff8021ac59:	0f 85 d9 00 00 00    	jne    ffffffff8021ad38 <_RME_Thd_Del+0x268>
ffffffff8021ac5f:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021ac63:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021ac67:	75 2f                	jne    ffffffff8021ac98 <_RME_Thd_Del+0x1c8>
ffffffff8021ac69:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021ac6f:	48 3b 70 28          	cmp    0x28(%rax),%rsi
ffffffff8021ac73:	0f 83 b7 00 00 00    	jae    ffffffff8021ad30 <_RME_Thd_Del+0x260>
ffffffff8021ac79:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021ac7d:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff8021ac81:	48 89 f0             	mov    %rsi,%rax
ffffffff8021ac84:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021ac87:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021ac8a:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021ac8e:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021ac92:	0f 84 6d fe ff ff    	je     ffffffff8021ab05 <_RME_Thd_Del+0x35>
ffffffff8021ac98:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ac9f:	c3                   	retq   
    
    /* Dereference the process */
    __RME_Fetch_Add(&(Thd_Struct->Sched.Proc->Refcnt), -1);
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
ffffffff8021aca0:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021aca7:	e8 64 c2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021acac:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff8021acb3:	e8 58 c2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021acb8:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021acbf:	e8 4c c2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021acc4:	bf 6f 03 00 00       	mov    $0x36f,%edi
ffffffff8021acc9:	e8 02 c0 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021acce:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021acd5:	e8 36 c2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021acda:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8021ace1:	e8 2a c2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021ace6:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021aced:	e8 1e c2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021acf2:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff8021acf9:	e8 12 c2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021acfe:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021ad05:	e8 06 c2 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021ad0a:	eb fe                	jmp    ffffffff8021ad0a <_RME_Thd_Del+0x23a>
    Thd_Struct=RME_CAP_GETOBJ(Thd_Del,struct RME_Thd_Struct*);
    
    /* See if the thread is unbinded. If not, we cannot proceed to deletion */
    if(Thd_Struct->Sched.CPUID_Bind!=RME_THD_UNBIND)
    {
        RME_CAP_DEFROST(Thd_Del,Type_Ref);
ffffffff8021ad0c:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021ad11:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff8021ad18:	7f ff ff 
ffffffff8021ad1b:	48 21 c2             	and    %rax,%rdx
ffffffff8021ad1e:	e8 5e 0b ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ad23:	48 83 c4 10          	add    $0x10,%rsp
    
    /* See if the thread is unbinded. If not, we cannot proceed to deletion */
    if(Thd_Struct->Sched.CPUID_Bind!=RME_THD_UNBIND)
    {
        RME_CAP_DEFROST(Thd_Del,Type_Ref);
        return RME_ERR_PTH_INVSTATE;
ffffffff8021ad27:	48 c7 c0 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rax
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ad2e:	5b                   	pop    %rbx
ffffffff8021ad2f:	c3                   	retq   
    /* These are for deletion */
    struct RME_Thd_Struct* Thd_Struct;
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021ad30:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021ad37:	c3                   	retq   
ffffffff8021ad38:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ad3f:	c3                   	retq   
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff8021ad40:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021ad47:	c3                   	retq   
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ad48:	48 83 c4 10          	add    $0x10,%rsp
    /* These are for deletion */
    struct RME_Thd_Struct* Thd_Struct;
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021ad4c:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ad53:	5b                   	pop    %rbx
ffffffff8021ad54:	c3                   	retq   
ffffffff8021ad55:	48 83 c4 10          	add    $0x10,%rsp
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Thd_Del,Type_Ref,RME_CAP_THD);
ffffffff8021ad59:	48 c7 c0 ff ff ff ff 	mov    $0xffffffffffffffff,%rax
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ad60:	5b                   	pop    %rbx
ffffffff8021ad61:	c3                   	retq   
ffffffff8021ad62:	48 83 c4 10          	add    $0x10,%rsp
    /* These are for deletion */
    struct RME_Thd_Struct* Thd_Struct;
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021ad66:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ad6d:	5b                   	pop    %rbx
ffffffff8021ad6e:	c3                   	retq   
ffffffff8021ad6f:	48 83 c4 10          	add    $0x10,%rsp
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Thd_Del,Type_Ref,RME_CAP_THD);
ffffffff8021ad73:	48 c7 c0 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rax
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ad7a:	5b                   	pop    %rbx
ffffffff8021ad7b:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Thd_Del,Type_Ref,RME_CAP_THD);
ffffffff8021ad7c:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021ad81:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff8021ad88:	7f ff ff 
ffffffff8021ad8b:	48 21 c2             	and    %rax,%rdx
ffffffff8021ad8e:	e8 ee 0a ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ad93:	48 83 c4 10          	add    $0x10,%rsp
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Thd,struct RME_Cap_Thd*,Thd_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Thd_Del,Type_Ref,RME_CAP_THD);
ffffffff8021ad97:	48 c7 c0 fa ff ff ff 	mov    $0xfffffffffffffffa,%rax
    
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Thd_Struct,RME_THD_SIZE)!=0);
    
    return 0;
}
ffffffff8021ad9e:	5b                   	pop    %rbx
ffffffff8021ad9f:	c3                   	retq   

ffffffff8021ada0 <_RME_Thd_Exec_Set>:
{
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021ada0:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021ada6:	75 38                	jne    ffffffff8021ade0 <_RME_Thd_Exec_Set+0x40>
ffffffff8021ada8:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021adac:	0f 86 56 01 00 00    	jbe    ffffffff8021af08 <_RME_Thd_Exec_Set+0x168>
ffffffff8021adb2:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021adb6:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021adba:	49 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%r10
ffffffff8021adc1:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021adc4:	49 89 f0             	mov    %rsi,%r8
ffffffff8021adc7:	48 89 c6             	mov    %rax,%rsi
ffffffff8021adca:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021adce:	48 83 fe 06          	cmp    $0x6,%rsi
ffffffff8021add2:	74 77                	je     ffffffff8021ae4b <_RME_Thd_Exec_Set+0xab>
        __RME_Thd_Reg_Init(Entry, Stack, &(Thd_Struct->Cur_Reg->Reg));
        __RME_Thd_Cop_Init(Entry, Stack, &(Thd_Struct->Cur_Reg->Cop_Reg));
    }
    
    return 0;
}
ffffffff8021add4:	4c 89 d0             	mov    %r10,%rax
ffffffff8021add7:	c3                   	retq   
ffffffff8021add8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021addf:	00 
{
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021ade0:	49 89 f1             	mov    %rsi,%r9
ffffffff8021ade3:	49 c1 f9 10          	sar    $0x10,%r9
ffffffff8021ade7:	4c 3b 4f 28          	cmp    0x28(%rdi),%r9
ffffffff8021adeb:	0f 83 17 01 00 00    	jae    ffffffff8021af08 <_RME_Thd_Exec_Set+0x168>
ffffffff8021adf1:	49 c1 e1 06          	shl    $0x6,%r9
ffffffff8021adf5:	4c 03 4f 18          	add    0x18(%rdi),%r9
ffffffff8021adf9:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021ae00:	80 00 00 
ffffffff8021ae03:	49 8b 01             	mov    (%r9),%rax
ffffffff8021ae06:	48 85 f8             	test   %rdi,%rax
ffffffff8021ae09:	0f 85 19 01 00 00    	jne    ffffffff8021af28 <_RME_Thd_Exec_Set+0x188>
ffffffff8021ae0f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021ae13:	49 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%r10
ffffffff8021ae1a:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021ae1e:	75 b4                	jne    ffffffff8021add4 <_RME_Thd_Exec_Set+0x34>
ffffffff8021ae20:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021ae26:	49 3b 71 28          	cmp    0x28(%r9),%rsi
ffffffff8021ae2a:	49 89 f0             	mov    %rsi,%r8
ffffffff8021ae2d:	0f 83 d5 00 00 00    	jae    ffffffff8021af08 <_RME_Thd_Exec_Set+0x168>
ffffffff8021ae33:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8021ae37:	4d 03 41 18          	add    0x18(%r9),%r8
ffffffff8021ae3b:	49 8b 00             	mov    (%r8),%rax
ffffffff8021ae3e:	48 89 c6             	mov    %rax,%rsi
ffffffff8021ae41:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021ae45:	48 83 fe 06          	cmp    $0x6,%rsi
ffffffff8021ae49:	75 89                	jne    ffffffff8021add4 <_RME_Thd_Exec_Set+0x34>
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
ffffffff8021ae4b:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff8021ae52:	80 00 00 
ffffffff8021ae55:	48 85 f0             	test   %rsi,%rax
ffffffff8021ae58:	0f 85 ca 00 00 00    	jne    ffffffff8021af28 <_RME_Thd_Exec_Set+0x188>
ffffffff8021ae5e:	41 f6 40 10 01       	testb  $0x1,0x10(%r8)
ffffffff8021ae63:	49 c7 c2 f9 ff ff ff 	mov    $0xfffffffffffffff9,%r10
ffffffff8021ae6a:	0f 84 64 ff ff ff    	je     ffffffff8021add4 <_RME_Thd_Exec_Set+0x34>
              ptr_t Stack - The stack address to use for execution. An address.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Thd_Exec_Set(struct RME_Cap_Captbl* Captbl, cid_t Cap_Thd, ptr_t Entry, ptr_t Stack)
{
ffffffff8021ae70:	41 55                	push   %r13
ffffffff8021ae72:	41 54                	push   %r12
ffffffff8021ae74:	49 89 cc             	mov    %rcx,%r12
ffffffff8021ae77:	55                   	push   %rbp
ffffffff8021ae78:	53                   	push   %rbx
ffffffff8021ae79:	48 89 d5             	mov    %rdx,%rbp
ffffffff8021ae7c:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
    
    /* See if the target thread is already binded. If no or incorrect, we just quit */
    Thd_Struct=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff8021ae80:	49 8b 58 18          	mov    0x18(%r8),%rbx
    if(Thd_Struct->Sched.CPUID_Bind!=RME_CPUID())
ffffffff8021ae84:	4c 8b 6b 28          	mov    0x28(%rbx),%r13
ffffffff8021ae88:	e8 b2 09 ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
        return RME_ERR_PTH_INVSTATE;
ffffffff8021ae8d:	49 c7 c2 e8 ff ff ff 	mov    $0xffffffffffffffe8,%r10
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_EXEC_SET);
    
    /* See if the target thread is already binded. If no or incorrect, we just quit */
    Thd_Struct=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
    if(Thd_Struct->Sched.CPUID_Bind!=RME_CPUID())
ffffffff8021ae94:	49 39 c5             	cmp    %rax,%r13
ffffffff8021ae97:	75 3f                	jne    ffffffff8021aed8 <_RME_Thd_Exec_Set+0x138>
        return RME_ERR_PTH_INVSTATE;
    
    /* See if there is a fault pending. If yes, we clear it */
    if(Thd_Struct->Sched.State==RME_THD_FAULT)
ffffffff8021ae99:	48 83 7b 38 05       	cmpq   $0x5,0x38(%rbx)
ffffffff8021ae9e:	74 78                	je     ffffffff8021af18 <_RME_Thd_Exec_Set+0x178>
        Thd_Struct->Sched.State=RME_THD_TIMEOUT;
    
    /* Commit the change if both values are non-zero. If both are zero we are just
     * clearing the error flag and continue execution from where it faulted */
    if((Entry!=0)&&(Stack!=0))
ffffffff8021aea0:	48 85 ed             	test   %rbp,%rbp
ffffffff8021aea3:	74 4b                	je     ffffffff8021aef0 <_RME_Thd_Exec_Set+0x150>
ffffffff8021aea5:	4d 85 e4             	test   %r12,%r12
ffffffff8021aea8:	74 46                	je     ffffffff8021aef0 <_RME_Thd_Exec_Set+0x150>
    {
        __RME_Thd_Reg_Init(Entry, Stack, &(Thd_Struct->Cur_Reg->Reg));
ffffffff8021aeaa:	48 8b 93 80 00 00 00 	mov    0x80(%rbx),%rdx
ffffffff8021aeb1:	4c 89 e6             	mov    %r12,%rsi
ffffffff8021aeb4:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021aeb7:	e8 b4 8e ff ff       	callq  ffffffff80213d70 <__RME_Thd_Reg_Init>
        __RME_Thd_Cop_Init(Entry, Stack, &(Thd_Struct->Cur_Reg->Cop_Reg));
ffffffff8021aebc:	48 8b 93 80 00 00 00 	mov    0x80(%rbx),%rdx
ffffffff8021aec3:	4c 89 e6             	mov    %r12,%rsi
ffffffff8021aec6:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021aec9:	48 81 c2 b0 00 00 00 	add    $0xb0,%rdx
ffffffff8021aed0:	e8 cb 8f ff ff       	callq  ffffffff80213ea0 <__RME_Thd_Cop_Init>
    }
    
    return 0;
ffffffff8021aed5:	45 31 d2             	xor    %r10d,%r10d
}
ffffffff8021aed8:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021aedc:	4c 89 d0             	mov    %r10,%rax
ffffffff8021aedf:	5b                   	pop    %rbx
ffffffff8021aee0:	5d                   	pop    %rbp
ffffffff8021aee1:	41 5c                	pop    %r12
ffffffff8021aee3:	41 5d                	pop    %r13
ffffffff8021aee5:	c3                   	retq   
ffffffff8021aee6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021aeed:	00 00 00 
ffffffff8021aef0:	48 83 c4 08          	add    $0x8,%rsp
    {
        __RME_Thd_Reg_Init(Entry, Stack, &(Thd_Struct->Cur_Reg->Reg));
        __RME_Thd_Cop_Init(Entry, Stack, &(Thd_Struct->Cur_Reg->Cop_Reg));
    }
    
    return 0;
ffffffff8021aef4:	45 31 d2             	xor    %r10d,%r10d
}
ffffffff8021aef7:	5b                   	pop    %rbx
ffffffff8021aef8:	4c 89 d0             	mov    %r10,%rax
ffffffff8021aefb:	5d                   	pop    %rbp
ffffffff8021aefc:	41 5c                	pop    %r12
ffffffff8021aefe:	41 5d                	pop    %r13
ffffffff8021af00:	c3                   	retq   
ffffffff8021af01:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
{
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021af08:	49 c7 c2 fd ff ff ff 	mov    $0xfffffffffffffffd,%r10
ffffffff8021af0f:	e9 c0 fe ff ff       	jmpq   ffffffff8021add4 <_RME_Thd_Exec_Set+0x34>
ffffffff8021af14:	0f 1f 40 00          	nopl   0x0(%rax)
    if(Thd_Struct->Sched.CPUID_Bind!=RME_CPUID())
        return RME_ERR_PTH_INVSTATE;
    
    /* See if there is a fault pending. If yes, we clear it */
    if(Thd_Struct->Sched.State==RME_THD_FAULT)
        Thd_Struct->Sched.State=RME_THD_TIMEOUT;
ffffffff8021af18:	48 c7 43 38 03 00 00 	movq   $0x3,0x38(%rbx)
ffffffff8021af1f:	00 
ffffffff8021af20:	e9 7b ff ff ff       	jmpq   ffffffff8021aea0 <_RME_Thd_Exec_Set+0x100>
ffffffff8021af25:	0f 1f 00             	nopl   (%rax)
{
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021af28:	49 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%r10
ffffffff8021af2f:	e9 a0 fe ff ff       	jmpq   ffffffff8021add4 <_RME_Thd_Exec_Set+0x34>
ffffffff8021af34:	66 90                	xchg   %ax,%ax
ffffffff8021af36:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021af3d:	00 00 00 

ffffffff8021af40 <_RME_Thd_Hyp_Set>:
{
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021af40:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021af46:	75 30                	jne    ffffffff8021af78 <_RME_Thd_Hyp_Set+0x38>
ffffffff8021af48:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021af4c:	0f 86 ee 00 00 00    	jbe    ffffffff8021b040 <_RME_Thd_Hyp_Set+0x100>
ffffffff8021af52:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021af56:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021af5a:	48 c7 c7 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdi
ffffffff8021af61:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021af64:	48 89 c1             	mov    %rax,%rcx
ffffffff8021af67:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021af6b:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff8021af6f:	74 6b                	je     ffffffff8021afdc <_RME_Thd_Hyp_Set+0x9c>
        else
            return RME_ERR_PTH_PGTBL;
    }
    
    return 0;
}
ffffffff8021af71:	48 89 f8             	mov    %rdi,%rax
ffffffff8021af74:	c3                   	retq   
ffffffff8021af75:	0f 1f 00             	nopl   (%rax)
{
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021af78:	48 89 f1             	mov    %rsi,%rcx
ffffffff8021af7b:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff8021af7f:	48 3b 4f 28          	cmp    0x28(%rdi),%rcx
ffffffff8021af83:	0f 83 b7 00 00 00    	jae    ffffffff8021b040 <_RME_Thd_Hyp_Set+0x100>
ffffffff8021af89:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021af8d:	48 03 4f 18          	add    0x18(%rdi),%rcx
ffffffff8021af91:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021af98:	80 00 00 
ffffffff8021af9b:	48 8b 01             	mov    (%rcx),%rax
ffffffff8021af9e:	48 85 f8             	test   %rdi,%rax
ffffffff8021afa1:	0f 85 a9 00 00 00    	jne    ffffffff8021b050 <_RME_Thd_Hyp_Set+0x110>
ffffffff8021afa7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021afab:	48 c7 c7 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdi
ffffffff8021afb2:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021afb6:	75 b9                	jne    ffffffff8021af71 <_RME_Thd_Hyp_Set+0x31>
ffffffff8021afb8:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021afbe:	48 3b 71 28          	cmp    0x28(%rcx),%rsi
ffffffff8021afc2:	73 7c                	jae    ffffffff8021b040 <_RME_Thd_Hyp_Set+0x100>
ffffffff8021afc4:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021afc8:	48 03 71 18          	add    0x18(%rcx),%rsi
ffffffff8021afcc:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021afcf:	48 89 c1             	mov    %rax,%rcx
ffffffff8021afd2:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021afd6:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff8021afda:	75 95                	jne    ffffffff8021af71 <_RME_Thd_Hyp_Set+0x31>
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_HYP_SET);
ffffffff8021afdc:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff8021afe3:	80 00 00 
ffffffff8021afe6:	48 85 c8             	test   %rcx,%rax
ffffffff8021afe9:	75 65                	jne    ffffffff8021b050 <_RME_Thd_Hyp_Set+0x110>
ffffffff8021afeb:	f6 46 10 02          	testb  $0x2,0x10(%rsi)
ffffffff8021afef:	48 c7 c7 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rdi
ffffffff8021aff6:	0f 84 75 ff ff ff    	je     ffffffff8021af71 <_RME_Thd_Hyp_Set+0x31>
              ptr_t Kaddr - The kernel-accessible virtual address to save the register set to.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Thd_Hyp_Set(struct RME_Cap_Captbl* Captbl, cid_t Cap_Thd, ptr_t Kaddr)
{
ffffffff8021affc:	41 54                	push   %r12
ffffffff8021affe:	55                   	push   %rbp
ffffffff8021afff:	53                   	push   %rbx
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_HYP_SET);
    
    /* See if the target thread is already binded. If no or incorrect, we just quit */
    Thd_Struct=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff8021b000:	48 8b 6e 18          	mov    0x18(%rsi),%rbp
ffffffff8021b004:	48 89 d3             	mov    %rdx,%rbx
    if(Thd_Struct->Sched.CPUID_Bind!=RME_CPUID())
ffffffff8021b007:	4c 8b 65 28          	mov    0x28(%rbp),%r12
ffffffff8021b00b:	e8 2f 08 ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
        return RME_ERR_PTH_INVSTATE;
ffffffff8021b010:	48 c7 c7 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rdi
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_HYP_SET);
    
    /* See if the target thread is already binded. If no or incorrect, we just quit */
    Thd_Struct=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
    if(Thd_Struct->Sched.CPUID_Bind!=RME_CPUID())
ffffffff8021b017:	49 39 c4             	cmp    %rax,%r12
ffffffff8021b01a:	75 15                	jne    ffffffff8021b031 <_RME_Thd_Hyp_Set+0xf1>
        return RME_ERR_PTH_INVSTATE;
    
    /* Set the thread's register storage back to default if the address passed in is null */
    if(Kaddr==0)
ffffffff8021b01c:	48 85 db             	test   %rbx,%rbx
ffffffff8021b01f:	75 3f                	jne    ffffffff8021b060 <_RME_Thd_Hyp_Set+0x120>
        Thd_Struct->Cur_Reg=&(Thd_Struct->Def_Reg);
ffffffff8021b021:	48 8d 85 88 00 00 00 	lea    0x88(%rbp),%rax
            Thd_Struct->Cur_Reg=(struct RME_Thd_Regs*)Kaddr;
        else
            return RME_ERR_PTH_PGTBL;
    }
    
    return 0;
ffffffff8021b028:	31 ff                	xor    %edi,%edi
    if(Thd_Struct->Sched.CPUID_Bind!=RME_CPUID())
        return RME_ERR_PTH_INVSTATE;
    
    /* Set the thread's register storage back to default if the address passed in is null */
    if(Kaddr==0)
        Thd_Struct->Cur_Reg=&(Thd_Struct->Def_Reg);
ffffffff8021b02a:	48 89 85 80 00 00 00 	mov    %rax,0x80(%rbp)
        else
            return RME_ERR_PTH_PGTBL;
    }
    
    return 0;
}
ffffffff8021b031:	5b                   	pop    %rbx
ffffffff8021b032:	48 89 f8             	mov    %rdi,%rax
ffffffff8021b035:	5d                   	pop    %rbp
ffffffff8021b036:	41 5c                	pop    %r12
ffffffff8021b038:	c3                   	retq   
ffffffff8021b039:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
{
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b040:	48 c7 c7 fd ff ff ff 	mov    $0xfffffffffffffffd,%rdi
ffffffff8021b047:	e9 25 ff ff ff       	jmpq   ffffffff8021af71 <_RME_Thd_Hyp_Set+0x31>
ffffffff8021b04c:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8021b050:	48 c7 c7 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdi
ffffffff8021b057:	e9 15 ff ff ff       	jmpq   ffffffff8021af71 <_RME_Thd_Hyp_Set+0x31>
ffffffff8021b05c:	0f 1f 40 00          	nopl   0x0(%rax)
        /* Register external save area must be aligned to word boundary and accessible to the kernel */
        if(RME_IS_ALIGNED(Kaddr)&&(Kaddr>=RME_HYP_VA_START)&&
           ((Kaddr+sizeof(struct RME_Thd_Regs))<(RME_HYP_VA_START+RME_HYP_SIZE)))
            Thd_Struct->Cur_Reg=(struct RME_Thd_Regs*)Kaddr;
        else
            return RME_ERR_PTH_PGTBL;
ffffffff8021b060:	48 c7 c7 eb ff ff ff 	mov    $0xffffffffffffffeb,%rdi
ffffffff8021b067:	eb c8                	jmp    ffffffff8021b031 <_RME_Thd_Hyp_Set+0xf1>
ffffffff8021b069:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021b070 <_RME_Thd_Sched_Bind>:
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Thd_Sched_Bind(struct RME_Cap_Captbl* Captbl, 
                          cid_t Cap_Thd, cid_t Cap_Thd_Sched, ptr_t Prio)
{
ffffffff8021b070:	41 54                	push   %r12
ffffffff8021b072:	55                   	push   %rbp
ffffffff8021b073:	53                   	push   %rbx
ffffffff8021b074:	48 83 ec 10          	sub    $0x10,%rsp
    struct RME_Thd_Struct* Thd_Sched_Struct;
    ptr_t Old_CPUID;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b078:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021b07e:	0f 85 bc 00 00 00    	jne    ffffffff8021b140 <_RME_Thd_Sched_Bind+0xd0>
ffffffff8021b084:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
ffffffff8021b088:	49 39 f1             	cmp    %rsi,%r9
ffffffff8021b08b:	0f 86 ff 01 00 00    	jbe    ffffffff8021b290 <_RME_Thd_Sched_Bind+0x220>
ffffffff8021b091:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8021b095:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021b099:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021b0a0:	48 01 fe             	add    %rdi,%rsi
ffffffff8021b0a3:	4c 8b 16             	mov    (%rsi),%r10
ffffffff8021b0a6:	4d 89 d0             	mov    %r10,%r8
ffffffff8021b0a9:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8021b0ad:	49 83 f8 06          	cmp    $0x6,%r8
ffffffff8021b0b1:	0f 85 c6 01 00 00    	jne    ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Sched,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Sched);
ffffffff8021b0b7:	f6 c6 80             	test   $0x80,%dh
ffffffff8021b0ba:	0f 84 02 01 00 00    	je     ffffffff8021b1c2 <_RME_Thd_Sched_Bind+0x152>
ffffffff8021b0c0:	49 89 d0             	mov    %rdx,%r8
ffffffff8021b0c3:	49 c1 f8 10          	sar    $0x10,%r8
ffffffff8021b0c7:	4d 39 c8             	cmp    %r9,%r8
ffffffff8021b0ca:	0f 83 c0 01 00 00    	jae    ffffffff8021b290 <_RME_Thd_Sched_Bind+0x220>
ffffffff8021b0d0:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8021b0d4:	49 01 f8             	add    %rdi,%r8
ffffffff8021b0d7:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021b0de:	80 00 00 
ffffffff8021b0e1:	49 8b 00             	mov    (%r8),%rax
ffffffff8021b0e4:	48 85 f8             	test   %rdi,%rax
ffffffff8021b0e7:	0f 85 c3 01 00 00    	jne    ffffffff8021b2b0 <_RME_Thd_Sched_Bind+0x240>
ffffffff8021b0ed:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021b0f1:	48 89 c7             	mov    %rax,%rdi
    struct RME_Thd_Struct* Thd_Sched_Struct;
    ptr_t Old_CPUID;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b0f4:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Sched,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Sched);
ffffffff8021b0fb:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021b0ff:	0f 85 78 01 00 00    	jne    ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
ffffffff8021b105:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021b10b:	49 3b 50 28          	cmp    0x28(%r8),%rdx
ffffffff8021b10f:	0f 83 7b 01 00 00    	jae    ffffffff8021b290 <_RME_Thd_Sched_Bind+0x220>
ffffffff8021b115:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021b119:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021b11c:	49 03 58 18          	add    0x18(%r8),%rbx
ffffffff8021b120:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8021b123:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021b126:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021b12a:	48 83 ff 06          	cmp    $0x6,%rdi
ffffffff8021b12e:	0f 84 ba 00 00 00    	je     ffffffff8021b1ee <_RME_Thd_Sched_Bind+0x17e>
ffffffff8021b134:	e9 44 01 00 00       	jmpq   ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
ffffffff8021b139:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    struct RME_Thd_Struct* Thd_Sched_Struct;
    ptr_t Old_CPUID;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b140:	4c 8b 4f 28          	mov    0x28(%rdi),%r9
ffffffff8021b144:	49 89 f0             	mov    %rsi,%r8
ffffffff8021b147:	49 c1 f8 10          	sar    $0x10,%r8
ffffffff8021b14b:	4d 39 c8             	cmp    %r9,%r8
ffffffff8021b14e:	0f 83 3c 01 00 00    	jae    ffffffff8021b290 <_RME_Thd_Sched_Bind+0x220>
ffffffff8021b154:	48 8b 7f 18          	mov    0x18(%rdi),%rdi
ffffffff8021b158:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8021b15c:	49 ba 00 00 00 00 00 	movabs $0x800000000000,%r10
ffffffff8021b163:	80 00 00 
ffffffff8021b166:	49 01 f8             	add    %rdi,%r8
ffffffff8021b169:	49 8b 00             	mov    (%r8),%rax
ffffffff8021b16c:	4c 85 d0             	test   %r10,%rax
ffffffff8021b16f:	0f 85 3b 01 00 00    	jne    ffffffff8021b2b0 <_RME_Thd_Sched_Bind+0x240>
ffffffff8021b175:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021b179:	49 89 c2             	mov    %rax,%r10
ffffffff8021b17c:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021b183:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8021b187:	0f 85 f0 00 00 00    	jne    ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
ffffffff8021b18d:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021b193:	49 3b 70 28          	cmp    0x28(%r8),%rsi
ffffffff8021b197:	0f 83 f3 00 00 00    	jae    ffffffff8021b290 <_RME_Thd_Sched_Bind+0x220>
ffffffff8021b19d:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021b1a1:	49 03 70 18          	add    0x18(%r8),%rsi
ffffffff8021b1a5:	4c 8b 16             	mov    (%rsi),%r10
ffffffff8021b1a8:	4d 89 d0             	mov    %r10,%r8
ffffffff8021b1ab:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8021b1af:	49 83 f8 06          	cmp    $0x6,%r8
ffffffff8021b1b3:	0f 85 c4 00 00 00    	jne    ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Sched,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Sched);
ffffffff8021b1b9:	f6 c6 80             	test   $0x80,%dh
ffffffff8021b1bc:	0f 85 fe fe ff ff    	jne    ffffffff8021b0c0 <_RME_Thd_Sched_Bind+0x50>
ffffffff8021b1c2:	4c 39 ca             	cmp    %r9,%rdx
ffffffff8021b1c5:	0f 83 c5 00 00 00    	jae    ffffffff8021b290 <_RME_Thd_Sched_Bind+0x220>
ffffffff8021b1cb:	48 c1 e2 06          	shl    $0x6,%rdx
    struct RME_Thd_Struct* Thd_Sched_Struct;
    ptr_t Old_CPUID;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b1cf:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Sched,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Sched);
ffffffff8021b1d6:	48 8d 1c 3a          	lea    (%rdx,%rdi,1),%rbx
ffffffff8021b1da:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8021b1dd:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021b1e0:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021b1e4:	48 83 ff 06          	cmp    $0x6,%rdi
ffffffff8021b1e8:	0f 85 8f 00 00 00    	jne    ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8021b1ee:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021b1f5:	80 00 00 
ffffffff8021b1f8:	49 85 c2             	test   %rax,%r10
ffffffff8021b1fb:	0f 85 af 00 00 00    	jne    ffffffff8021b2b0 <_RME_Thd_Sched_Bind+0x240>
ffffffff8021b201:	f6 46 10 04          	testb  $0x4,0x10(%rsi)
ffffffff8021b205:	0f 84 b5 00 00 00    	je     ffffffff8021b2c0 <_RME_Thd_Sched_Bind+0x250>
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
ffffffff8021b20b:	48 85 c2             	test   %rax,%rdx
ffffffff8021b20e:	0f 85 9c 00 00 00    	jne    ffffffff8021b2b0 <_RME_Thd_Sched_Bind+0x240>
ffffffff8021b214:	f6 43 10 08          	testb  $0x8,0x10(%rbx)
ffffffff8021b218:	0f 84 a2 00 00 00    	je     ffffffff8021b2c0 <_RME_Thd_Sched_Bind+0x250>
    
    /* See if the target thread is already binded. If yes, we just quit */
    Thd_Op_Struct=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
ffffffff8021b21e:	48 8b 6e 18          	mov    0x18(%rsi),%rbp
    Old_CPUID=Thd_Op_Struct->Sched.CPUID_Bind;
ffffffff8021b222:	48 8b 45 28          	mov    0x28(%rbp),%rax
    if((Old_CPUID&RME_THD_UNBIND)==0)
ffffffff8021b226:	48 85 c0             	test   %rax,%rax
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
    RME_CAP_CHECK(Thd_Sched,RME_THD_FLAG_SCHED_PARENT);
    
    /* See if the target thread is already binded. If yes, we just quit */
    Thd_Op_Struct=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
    Old_CPUID=Thd_Op_Struct->Sched.CPUID_Bind;
ffffffff8021b229:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    if((Old_CPUID&RME_THD_UNBIND)==0)
ffffffff8021b22e:	79 70                	jns    ffffffff8021b2a0 <_RME_Thd_Sched_Bind+0x230>
ffffffff8021b230:	49 89 cc             	mov    %rcx,%r12
        return RME_ERR_PTH_INVSTATE;
    
    /* See if the parent thread is on the same core with the current processor */
    CPUID=RME_CPUID();
ffffffff8021b233:	e8 07 06 ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
    Thd_Sched_Struct=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
ffffffff8021b238:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
    Old_CPUID=Thd_Op_Struct->Sched.CPUID_Bind;
    if((Old_CPUID&RME_THD_UNBIND)==0)
        return RME_ERR_PTH_INVSTATE;
    
    /* See if the parent thread is on the same core with the current processor */
    CPUID=RME_CPUID();
ffffffff8021b23c:	48 89 c2             	mov    %rax,%rdx
    Thd_Sched_Struct=RME_CAP_GETOBJ(Thd_Sched,struct RME_Thd_Struct*);
    if(Thd_Sched_Struct->Sched.CPUID_Bind!=CPUID)
ffffffff8021b23f:	48 3b 43 28          	cmp    0x28(%rbx),%rax
ffffffff8021b243:	75 5b                	jne    ffffffff8021b2a0 <_RME_Thd_Sched_Bind+0x230>
        return RME_ERR_PTH_INVSTATE;

    /* See if we are trying to bind to ourself. This is prohibited */
    if(Thd_Op_Struct==Thd_Sched_Struct)
ffffffff8021b245:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8021b248:	0f 84 8b 00 00 00    	je     ffffffff8021b2d9 <_RME_Thd_Sched_Bind+0x269>
        return RME_ERR_PTH_NOTIF;
    
    /* See if the priority relationship is correct */
    if(Thd_Sched_Struct->Sched.Max_Prio<Prio)
ffffffff8021b24e:	4c 39 63 50          	cmp    %r12,0x50(%rbx)
        return RME_ERR_PTH_PRIO;
ffffffff8021b252:	48 c7 c0 e7 ff ff ff 	mov    $0xffffffffffffffe7,%rax
    /* See if we are trying to bind to ourself. This is prohibited */
    if(Thd_Op_Struct==Thd_Sched_Struct)
        return RME_ERR_PTH_NOTIF;
    
    /* See if the priority relationship is correct */
    if(Thd_Sched_Struct->Sched.Max_Prio<Prio)
ffffffff8021b259:	72 22                	jb     ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
        return RME_ERR_PTH_PRIO;
    
    /* Yes, it is on the current processor. Try to bind the thread */
    if(__RME_Comp_Swap(&(Thd_Op_Struct->Sched.CPUID_Bind), &Old_CPUID, CPUID)==0)
ffffffff8021b25b:	48 8d 7d 28          	lea    0x28(%rbp),%rdi
ffffffff8021b25f:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021b264:	e8 18 06 ff ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021b269:	48 85 c0             	test   %rax,%rax
ffffffff8021b26c:	74 62                	je     ffffffff8021b2d0 <_RME_Thd_Sched_Bind+0x260>
        return RME_ERR_PTH_CONFLICT;
    
    /* Binding successful. Do operations to finish this. There's no need to worry about
     * other cores' operations on this thread because this thread is already binded
     * to this core */
    Thd_Op_Struct->Sched.Parent=Thd_Sched_Struct;
ffffffff8021b26e:	48 89 5d 68          	mov    %rbx,0x68(%rbp)
    Thd_Op_Struct->Sched.Prio=Prio;
ffffffff8021b272:	4c 89 65 48          	mov    %r12,0x48(%rbp)
    Thd_Sched_Struct->Sched.Refcnt++;
    
    return 0;
ffffffff8021b276:	31 c0                	xor    %eax,%eax
    /* Binding successful. Do operations to finish this. There's no need to worry about
     * other cores' operations on this thread because this thread is already binded
     * to this core */
    Thd_Op_Struct->Sched.Parent=Thd_Sched_Struct;
    Thd_Op_Struct->Sched.Prio=Prio;
    Thd_Sched_Struct->Sched.Refcnt++;
ffffffff8021b278:	48 83 43 40 01       	addq   $0x1,0x40(%rbx)
    
    return 0;
}
ffffffff8021b27d:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021b281:	5b                   	pop    %rbx
ffffffff8021b282:	5d                   	pop    %rbp
ffffffff8021b283:	41 5c                	pop    %r12
ffffffff8021b285:	c3                   	retq   
ffffffff8021b286:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021b28d:	00 00 00 
ffffffff8021b290:	48 83 c4 10          	add    $0x10,%rsp
    struct RME_Thd_Struct* Thd_Sched_Struct;
    ptr_t Old_CPUID;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b294:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    Thd_Op_Struct->Sched.Parent=Thd_Sched_Struct;
    Thd_Op_Struct->Sched.Prio=Prio;
    Thd_Sched_Struct->Sched.Refcnt++;
    
    return 0;
}
ffffffff8021b29b:	5b                   	pop    %rbx
ffffffff8021b29c:	5d                   	pop    %rbp
ffffffff8021b29d:	41 5c                	pop    %r12
ffffffff8021b29f:	c3                   	retq   
ffffffff8021b2a0:	48 83 c4 10          	add    $0x10,%rsp
    
    /* See if the target thread is already binded. If yes, we just quit */
    Thd_Op_Struct=RME_CAP_GETOBJ(Thd_Op,struct RME_Thd_Struct*);
    Old_CPUID=Thd_Op_Struct->Sched.CPUID_Bind;
    if((Old_CPUID&RME_THD_UNBIND)==0)
        return RME_ERR_PTH_INVSTATE;
ffffffff8021b2a4:	48 c7 c0 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rax
    Thd_Op_Struct->Sched.Parent=Thd_Sched_Struct;
    Thd_Op_Struct->Sched.Prio=Prio;
    Thd_Sched_Struct->Sched.Refcnt++;
    
    return 0;
}
ffffffff8021b2ab:	5b                   	pop    %rbx
ffffffff8021b2ac:	5d                   	pop    %rbp
ffffffff8021b2ad:	41 5c                	pop    %r12
ffffffff8021b2af:	c3                   	retq   
    struct RME_Thd_Struct* Thd_Sched_Struct;
    ptr_t Old_CPUID;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b2b0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021b2b7:	eb c4                	jmp    ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
ffffffff8021b2b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Sched,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Sched);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_CHILD);
ffffffff8021b2c0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021b2c7:	eb b4                	jmp    ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
ffffffff8021b2c9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    if(Thd_Sched_Struct->Sched.Max_Prio<Prio)
        return RME_ERR_PTH_PRIO;
    
    /* Yes, it is on the current processor. Try to bind the thread */
    if(__RME_Comp_Swap(&(Thd_Op_Struct->Sched.CPUID_Bind), &Old_CPUID, CPUID)==0)
        return RME_ERR_PTH_CONFLICT;
ffffffff8021b2d0:	48 c7 c0 ea ff ff ff 	mov    $0xffffffffffffffea,%rax
ffffffff8021b2d7:	eb a4                	jmp    ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
    if(Thd_Sched_Struct->Sched.CPUID_Bind!=CPUID)
        return RME_ERR_PTH_INVSTATE;

    /* See if we are trying to bind to ourself. This is prohibited */
    if(Thd_Op_Struct==Thd_Sched_Struct)
        return RME_ERR_PTH_NOTIF;
ffffffff8021b2d9:	48 c7 c0 e5 ff ff ff 	mov    $0xffffffffffffffe5,%rax
ffffffff8021b2e0:	eb 9b                	jmp    ffffffff8021b27d <_RME_Thd_Sched_Bind+0x20d>
ffffffff8021b2e2:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8021b2e6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021b2ed:	00 00 00 

ffffffff8021b2f0 <_RME_Thd_Sched_Prio>:
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Thd_Sched_Prio(struct RME_Cap_Captbl* Captbl,
                          struct RME_Reg_Struct* Reg,
                          cid_t Cap_Thd, ptr_t Prio)
{
ffffffff8021b2f0:	41 55                	push   %r13
ffffffff8021b2f2:	41 54                	push   %r12
ffffffff8021b2f4:	55                   	push   %rbp
ffffffff8021b2f5:	53                   	push   %rbx
ffffffff8021b2f6:	48 83 ec 08          	sub    $0x8,%rsp
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b2fa:	f6 c6 80             	test   $0x80,%dh
ffffffff8021b2fd:	0f 85 95 00 00 00    	jne    ffffffff8021b398 <_RME_Thd_Sched_Prio+0xa8>
ffffffff8021b303:	48 39 57 28          	cmp    %rdx,0x28(%rdi)
ffffffff8021b307:	0f 86 e6 03 00 00    	jbe    ffffffff8021b6f3 <_RME_Thd_Sched_Prio+0x403>
ffffffff8021b30d:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021b311:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021b314:	48 03 5f 18          	add    0x18(%rdi),%rbx
ffffffff8021b318:	48 8b 03             	mov    (%rbx),%rax
ffffffff8021b31b:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b31e:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021b322:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8021b326:	0f 85 d4 00 00 00    	jne    ffffffff8021b400 <_RME_Thd_Sched_Prio+0x110>
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_PRIO);
ffffffff8021b32c:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021b333:	80 00 00 
ffffffff8021b336:	48 85 d0             	test   %rdx,%rax
ffffffff8021b339:	0f 85 01 03 00 00    	jne    ffffffff8021b640 <_RME_Thd_Sched_Prio+0x350>
ffffffff8021b33f:	f6 43 10 10          	testb  $0x10,0x10(%rbx)
ffffffff8021b343:	0f 84 0f 03 00 00    	je     ffffffff8021b658 <_RME_Thd_Sched_Prio+0x368>
ffffffff8021b349:	48 89 cd             	mov    %rcx,%rbp
ffffffff8021b34c:	49 89 f5             	mov    %rsi,%r13
    
    /* See if the target thread is already binded to this core. If no, we just quit */
    CPUID=RME_CPUID();
ffffffff8021b34f:	e8 eb 04 ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
    Thd_Struct=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff8021b354:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_PRIO);
    
    /* See if the target thread is already binded to this core. If no, we just quit */
    CPUID=RME_CPUID();
ffffffff8021b358:	49 89 c4             	mov    %rax,%r12
    Thd_Struct=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
    if(Thd_Struct->Sched.CPUID_Bind!=CPUID)
ffffffff8021b35b:	48 3b 43 28          	cmp    0x28(%rbx),%rax
ffffffff8021b35f:	0f 85 0b 03 00 00    	jne    ffffffff8021b670 <_RME_Thd_Sched_Prio+0x380>
        return RME_ERR_PTH_INVSTATE;
    
    /* See if the priority relationship is correct */
    if(Thd_Struct->Sched.Max_Prio<Prio)
ffffffff8021b365:	48 39 6b 50          	cmp    %rbp,0x50(%rbx)
ffffffff8021b369:	0f 82 19 03 00 00    	jb     ffffffff8021b688 <_RME_Thd_Sched_Prio+0x398>
        return RME_ERR_PTH_PRIO;
    
    /* Now save the system call return value to the caller stack */
    __RME_Set_Syscall_Retval(Reg,0);
ffffffff8021b36f:	31 f6                	xor    %esi,%esi
ffffffff8021b371:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021b374:	e8 c7 89 ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
    
    /* See if this thread is currently running, or is runnable. If yes, it must be
     * in the run queue. Remove it from there and change priority, after changing
     * priority, put it back, and see if we need a reschedule. */
    if((Thd_Struct->Sched.State==RME_THD_RUNNING)||(Thd_Struct->Sched.State==RME_THD_READY))
ffffffff8021b379:	48 83 7b 38 01       	cmpq   $0x1,0x38(%rbx)
ffffffff8021b37e:	0f 86 94 00 00 00    	jbe    ffffffff8021b418 <_RME_Thd_Sched_Prio+0x128>
            Thd_Struct->Sched.State=RME_THD_RUNNING;
            RME_Cur_Thd[CPUID]=Thd_Struct;
        }
    }
    else
        Thd_Struct->Sched.Prio=Prio;
ffffffff8021b384:	48 89 6b 48          	mov    %rbp,0x48(%rbx)
    
    return 0;
ffffffff8021b388:	31 c0                	xor    %eax,%eax
}
ffffffff8021b38a:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021b38e:	5b                   	pop    %rbx
ffffffff8021b38f:	5d                   	pop    %rbp
ffffffff8021b390:	41 5c                	pop    %r12
ffffffff8021b392:	41 5d                	pop    %r13
ffffffff8021b394:	c3                   	retq   
ffffffff8021b395:	0f 1f 00             	nopl   (%rax)
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b398:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b39b:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021b39f:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff8021b3a3:	0f 83 4a 03 00 00    	jae    ffffffff8021b6f3 <_RME_Thd_Sched_Prio+0x403>
ffffffff8021b3a9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021b3ad:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021b3b1:	49 b8 00 00 00 00 00 	movabs $0x800000000000,%r8
ffffffff8021b3b8:	80 00 00 
ffffffff8021b3bb:	48 8b 38             	mov    (%rax),%rdi
ffffffff8021b3be:	4c 85 c7             	test   %r8,%rdi
ffffffff8021b3c1:	0f 85 79 02 00 00    	jne    ffffffff8021b640 <_RME_Thd_Sched_Prio+0x350>
ffffffff8021b3c7:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021b3cb:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021b3cf:	75 2f                	jne    ffffffff8021b400 <_RME_Thd_Sched_Prio+0x110>
ffffffff8021b3d1:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021b3d7:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021b3db:	0f 83 12 03 00 00    	jae    ffffffff8021b6f3 <_RME_Thd_Sched_Prio+0x403>
ffffffff8021b3e1:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021b3e5:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021b3e8:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8021b3ec:	48 8b 03             	mov    (%rbx),%rax
ffffffff8021b3ef:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b3f2:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021b3f6:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8021b3fa:	0f 84 2c ff ff ff    	je     ffffffff8021b32c <_RME_Thd_Sched_Prio+0x3c>
    }
    else
        Thd_Struct->Sched.Prio=Prio;
    
    return 0;
}
ffffffff8021b400:	48 83 c4 08          	add    $0x8,%rsp
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b404:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    }
    else
        Thd_Struct->Sched.Prio=Prio;
    
    return 0;
}
ffffffff8021b40b:	5b                   	pop    %rbx
ffffffff8021b40c:	5d                   	pop    %rbp
ffffffff8021b40d:	41 5c                	pop    %r12
ffffffff8021b40f:	41 5d                	pop    %r13
ffffffff8021b411:	c3                   	retq   
ffffffff8021b412:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021b418:	48 8b 43 28          	mov    0x28(%rbx),%rax
    
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021b41c:	48 8b 73 08          	mov    0x8(%rbx),%rsi
ffffffff8021b420:	48 8b 13             	mov    (%rbx),%rdx
ret_t _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff8021b423:	48 8b 4b 48          	mov    0x48(%rbx),%rcx
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff8021b427:	48 89 16             	mov    %rdx,(%rsi)
    Prev->Next=(struct RME_List*)Next;
ffffffff8021b42a:	48 89 72 08          	mov    %rsi,0x8(%rdx)
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
ffffffff8021b42e:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b431:	48 c1 e2 0a          	shl    $0xa,%rdx
ffffffff8021b435:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b438:	48 8d 14 c2          	lea    (%rdx,%rax,8),%rdx
ffffffff8021b43c:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8021b440:	48 8d 94 16 20 30 22 	lea    -0x7fddcfe0(%rsi,%rdx,1),%rdx
ffffffff8021b447:	80 
ffffffff8021b448:	48 8d 72 08          	lea    0x8(%rdx),%rsi
ffffffff8021b44c:	48 39 72 10          	cmp    %rsi,0x10(%rdx)
ffffffff8021b450:	0f 84 71 02 00 00    	je     ffffffff8021b6c7 <_RME_Thd_Sched_Prio+0x3d7>
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021b456:	48 8b 43 28          	mov    0x28(%rbx),%rax
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
ffffffff8021b45a:	48 89 e9             	mov    %rbp,%rcx
     * in the run queue. Remove it from there and change priority, after changing
     * priority, put it back, and see if we need a reschedule. */
    if((Thd_Struct->Sched.State==RME_THD_RUNNING)||(Thd_Struct->Sched.State==RME_THD_READY))
    {
        _RME_Run_Del(Thd_Struct);
        Thd_Struct->Sched.Prio=Prio;
ffffffff8021b45d:	48 89 6b 48          	mov    %rbp,0x48(%rbx)
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
ffffffff8021b461:	48 c1 e1 04          	shl    $0x4,%rcx
ffffffff8021b465:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b468:	48 c1 e2 0a          	shl    $0xa,%rdx
ffffffff8021b46c:	48 8d 14 c2          	lea    (%rdx,%rax,8),%rdx
ffffffff8021b470:	48 8d 94 11 20 30 22 	lea    -0x7fddcfe0(%rcx,%rdx,1),%rdx
ffffffff8021b477:	80 
ffffffff8021b478:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff8021b47c:	48 8d 72 08          	lea    0x8(%rdx),%rsi
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff8021b480:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021b484:	48 89 ea             	mov    %rbp,%rdx
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
ffffffff8021b487:	48 89 73 08          	mov    %rsi,0x8(%rbx)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021b48b:	48 c1 ea 06          	shr    $0x6,%rdx
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
    New->Prev=(struct RME_List*)Prev;
ffffffff8021b48f:	48 89 0b             	mov    %rcx,(%rbx)
    Prev->Next=(struct RME_List*)New;
ffffffff8021b492:	48 89 59 08          	mov    %rbx,0x8(%rcx)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021b496:	48 89 c1             	mov    %rax,%rcx
ffffffff8021b499:	48 c1 e1 07          	shl    $0x7,%rcx
ffffffff8021b49d:	48 01 c8             	add    %rcx,%rax
ffffffff8021b4a0:	89 e9                	mov    %ebp,%ecx
ffffffff8021b4a2:	48 01 d0             	add    %rdx,%rax
ffffffff8021b4a5:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021b4aa:	d3 e2                	shl    %cl,%edx
ffffffff8021b4ac:	48 63 d2             	movslq %edx,%rdx
ffffffff8021b4af:	48 09 14 c5 20 30 22 	or     %rdx,-0x7fddcfe0(,%rax,8)
ffffffff8021b4b6:	80 
    ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=RME_PRIO_WORD_NUM-1;Count>=0;Count--)
    {
        if(RME_Run[CPUID].Bitmap[Count]!=0)
ffffffff8021b4b7:	4c 89 e0             	mov    %r12,%rax
ffffffff8021b4ba:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff8021b4be:	4a 8d 1c e0          	lea    (%rax,%r12,8),%rbx
ffffffff8021b4c2:	48 8b bb 20 30 22 80 	mov    -0x7fddcfe0(%rbx),%rdi
ffffffff8021b4c9:	48 85 ff             	test   %rdi,%rdi
ffffffff8021b4cc:	75 72                	jne    ffffffff8021b540 <_RME_Thd_Sched_Prio+0x250>
            break;
    }
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);
ffffffff8021b4ce:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021b4d5:	e8 36 ba ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b4da:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff8021b4e1:	e8 2a ba ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b4e6:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021b4ed:	e8 1e ba ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b4f2:	bf cb 00 00 00       	mov    $0xcb,%edi
ffffffff8021b4f7:	e8 d4 b7 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021b4fc:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021b503:	e8 08 ba ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b508:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8021b50f:	e8 fc b9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b514:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021b51b:	e8 f0 b9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b520:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff8021b527:	e8 e4 b9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b52c:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021b533:	e8 d8 b9 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b538:	eb fe                	jmp    ffffffff8021b538 <_RME_Thd_Sched_Prio+0x248>
ffffffff8021b53a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    /* Get the first "1"'s position in the word */
    Prio=__RME_MSB_Get(RME_Run[CPUID].Bitmap[Count]);
ffffffff8021b540:	e8 7b 03 ff ff       	callq  ffffffff8020b8c0 <__RME_MSB_Get>
    Prio+=Count<<RME_WORD_ORDER;
    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)RME_Run[CPUID].List[Prio].Next;
ffffffff8021b545:	48 c1 e0 04          	shl    $0x4,%rax
        _RME_Run_Ins(Thd_Struct);
        
        /* Get the current highest-priority running thread */
        Thd_Struct=_RME_Run_High(CPUID);
        /* See if we need a context seitch */
        if(Thd_Struct!=RME_Cur_Thd[CPUID])
ffffffff8021b549:	4a 8b 2c e5 00 28 22 	mov    -0x7fddd800(,%r12,8),%rbp
ffffffff8021b550:	80 
    RME_ASSERT(Count>=0);
    /* Get the first "1"'s position in the word */
    Prio=__RME_MSB_Get(RME_Run[CPUID].Bitmap[Count]);
    Prio+=Count<<RME_WORD_ORDER;
    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)RME_Run[CPUID].List[Prio].Next;
ffffffff8021b551:	48 8b 9c 03 30 30 22 	mov    -0x7fddcfd0(%rbx,%rax,1),%rbx
ffffffff8021b558:	80 
        }
    }
    else
        Thd_Struct->Sched.Prio=Prio;
    
    return 0;
ffffffff8021b559:	31 c0                	xor    %eax,%eax
        _RME_Run_Ins(Thd_Struct);
        
        /* Get the current highest-priority running thread */
        Thd_Struct=_RME_Run_High(CPUID);
        /* See if we need a context seitch */
        if(Thd_Struct!=RME_Cur_Thd[CPUID])
ffffffff8021b55b:	48 39 dd             	cmp    %rbx,%rbp
ffffffff8021b55e:	0f 84 26 fe ff ff    	je     ffffffff8021b38a <_RME_Thd_Sched_Prio+0x9a>
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff8021b564:	48 8b bd 80 00 00 00 	mov    0x80(%rbp),%rdi
ffffffff8021b56b:	4c 89 ee             	mov    %r13,%rsi
ffffffff8021b56e:	e8 4d 88 ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Save(Reg, &(Curr_Thd->Cur_Reg->Cop_Reg));
ffffffff8021b573:	48 8b 85 80 00 00 00 	mov    0x80(%rbp),%rax
ffffffff8021b57a:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021b57d:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff8021b584:	e8 27 89 ff ff       	callq  ffffffff80213eb0 <__RME_Thd_Cop_Save>
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
ffffffff8021b589:	48 8b b3 80 00 00 00 	mov    0x80(%rbx),%rsi
ffffffff8021b590:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021b593:	e8 28 88 ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));
ffffffff8021b598:	48 8b 83 80 00 00 00 	mov    0x80(%rbx),%rax
ffffffff8021b59f:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021b5a2:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff8021b5a9:	e8 12 89 ff ff       	callq  ffffffff80213ec0 <__RME_Thd_Cop_Restore>

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff8021b5ae:	48 8b 95 c0 09 00 00 	mov    0x9c0(%rbp),%rdx
ffffffff8021b5b5:	48 8d 85 b8 09 00 00 	lea    0x9b8(%rbp),%rax
ffffffff8021b5bc:	48 39 c2             	cmp    %rax,%rdx
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021b5bf:	48 8b 83 c0 09 00 00 	mov    0x9c0(%rbx),%rax
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff8021b5c6:	0f 84 db 00 00 00    	je     ffffffff8021b6a7 <_RME_Thd_Sched_Prio+0x3b7>
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021b5cc:	48 8d 8b b8 09 00 00 	lea    0x9b8(%rbx),%rcx
ffffffff8021b5d3:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021b5d6:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff8021b5db:	48 0f 44 c1          	cmove  %rcx,%rax
    
    if(Curr_Inv_Top==0)
ffffffff8021b5df:	48 85 d2             	test   %rdx,%rdx
ffffffff8021b5e2:	0f 84 d2 00 00 00    	je     ffffffff8021b6ba <_RME_Thd_Sched_Prio+0x3ca>
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
ffffffff8021b5e8:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021b5ec:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    
    if(Next_Inv_Top==0)
ffffffff8021b5f0:	48 85 c0             	test   %rax,%rax
ffffffff8021b5f3:	0f 84 a1 00 00 00    	je     ffffffff8021b69a <_RME_Thd_Sched_Prio+0x3aa>
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
    else
        Next_Pgtbl=Next_Inv_Top->Proc->Pgtbl;
ffffffff8021b5f9:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b5fd:	48 8b 40 10          	mov    0x10(%rax),%rax
    
    if(RME_CAP_GETOBJ(Curr_Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Next_Pgtbl,ptr_t))
ffffffff8021b601:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8021b605:	48 39 7a 18          	cmp    %rdi,0x18(%rdx)
ffffffff8021b609:	74 05                	je     ffffffff8021b610 <_RME_Thd_Sched_Prio+0x320>
        __RME_Pgtbl_Set(RME_CAP_GETOBJ(Next_Pgtbl,ptr_t));
ffffffff8021b60b:	e8 d0 8c ff ff       	callq  ffffffff802142e0 <__RME_Pgtbl_Set>
        if(Thd_Struct!=RME_Cur_Thd[CPUID])
        {
            /* This will cause a solid context switch - The current thread will be set to ready,
             * and we will set the thread that we switch to to be running. */
            _RME_Run_Swt(Reg,RME_Cur_Thd[CPUID],Thd_Struct);
            RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
ffffffff8021b610:	4a 8b 04 e5 00 28 22 	mov    -0x7fddd800(,%r12,8),%rax
ffffffff8021b617:	80 
ffffffff8021b618:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff8021b61f:	00 
            Thd_Struct->Sched.State=RME_THD_RUNNING;
ffffffff8021b620:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff8021b627:	00 
        }
    }
    else
        Thd_Struct->Sched.Prio=Prio;
    
    return 0;
ffffffff8021b628:	31 c0                	xor    %eax,%eax
            /* This will cause a solid context switch - The current thread will be set to ready,
             * and we will set the thread that we switch to to be running. */
            _RME_Run_Swt(Reg,RME_Cur_Thd[CPUID],Thd_Struct);
            RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
            Thd_Struct->Sched.State=RME_THD_RUNNING;
            RME_Cur_Thd[CPUID]=Thd_Struct;
ffffffff8021b62a:	4a 89 1c e5 00 28 22 	mov    %rbx,-0x7fddd800(,%r12,8)
ffffffff8021b631:	80 
    }
    else
        Thd_Struct->Sched.Prio=Prio;
    
    return 0;
}
ffffffff8021b632:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021b636:	5b                   	pop    %rbx
ffffffff8021b637:	5d                   	pop    %rbp
ffffffff8021b638:	41 5c                	pop    %r12
ffffffff8021b63a:	41 5d                	pop    %r13
ffffffff8021b63c:	c3                   	retq   
ffffffff8021b63d:	0f 1f 00             	nopl   (%rax)
ffffffff8021b640:	48 83 c4 08          	add    $0x8,%rsp
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b644:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
    }
    else
        Thd_Struct->Sched.Prio=Prio;
    
    return 0;
}
ffffffff8021b64b:	5b                   	pop    %rbx
ffffffff8021b64c:	5d                   	pop    %rbp
ffffffff8021b64d:	41 5c                	pop    %r12
ffffffff8021b64f:	41 5d                	pop    %r13
ffffffff8021b651:	c3                   	retq   
ffffffff8021b652:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8021b658:	48 83 c4 08          	add    $0x8,%rsp
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_PRIO);
ffffffff8021b65c:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
    }
    else
        Thd_Struct->Sched.Prio=Prio;
    
    return 0;
}
ffffffff8021b663:	5b                   	pop    %rbx
ffffffff8021b664:	5d                   	pop    %rbp
ffffffff8021b665:	41 5c                	pop    %r12
ffffffff8021b667:	41 5d                	pop    %r13
ffffffff8021b669:	c3                   	retq   
ffffffff8021b66a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8021b670:	48 83 c4 08          	add    $0x8,%rsp
    
    /* See if the target thread is already binded to this core. If no, we just quit */
    CPUID=RME_CPUID();
    Thd_Struct=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
    if(Thd_Struct->Sched.CPUID_Bind!=CPUID)
        return RME_ERR_PTH_INVSTATE;
ffffffff8021b674:	48 c7 c0 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rax
    }
    else
        Thd_Struct->Sched.Prio=Prio;
    
    return 0;
}
ffffffff8021b67b:	5b                   	pop    %rbx
ffffffff8021b67c:	5d                   	pop    %rbp
ffffffff8021b67d:	41 5c                	pop    %r12
ffffffff8021b67f:	41 5d                	pop    %r13
ffffffff8021b681:	c3                   	retq   
ffffffff8021b682:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8021b688:	48 83 c4 08          	add    $0x8,%rsp
    if(Thd_Struct->Sched.CPUID_Bind!=CPUID)
        return RME_ERR_PTH_INVSTATE;
    
    /* See if the priority relationship is correct */
    if(Thd_Struct->Sched.Max_Prio<Prio)
        return RME_ERR_PTH_PRIO;
ffffffff8021b68c:	48 c7 c0 e7 ff ff ff 	mov    $0xffffffffffffffe7,%rax
    }
    else
        Thd_Struct->Sched.Prio=Prio;
    
    return 0;
}
ffffffff8021b693:	5b                   	pop    %rbx
ffffffff8021b694:	5d                   	pop    %rbp
ffffffff8021b695:	41 5c                	pop    %r12
ffffffff8021b697:	41 5d                	pop    %r13
ffffffff8021b699:	c3                   	retq   
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
    
    if(Next_Inv_Top==0)
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
ffffffff8021b69a:	48 8b 43 60          	mov    0x60(%rbx),%rax
ffffffff8021b69e:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021b6a2:	e9 5a ff ff ff       	jmpq   ffffffff8021b601 <_RME_Thd_Sched_Prio+0x311>
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021b6a7:	48 8d 93 b8 09 00 00 	lea    0x9b8(%rbx),%rdx
ffffffff8021b6ae:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021b6b1:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8021b6b6:	48 0f 44 c2          	cmove  %rdx,%rax
    
    if(Curr_Inv_Top==0)
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
ffffffff8021b6ba:	48 8b 55 60          	mov    0x60(%rbp),%rdx
ffffffff8021b6be:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021b6c2:	e9 29 ff ff ff       	jmpq   ffffffff8021b5f0 <_RME_Thd_Sched_Prio+0x300>
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
        RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]&=~(1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1)));
ffffffff8021b6c7:	48 89 c6             	mov    %rax,%rsi
ffffffff8021b6ca:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021b6cd:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff8021b6d1:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff8021b6d5:	48 01 f0             	add    %rsi,%rax
ffffffff8021b6d8:	48 01 c2             	add    %rax,%rdx
ffffffff8021b6db:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021b6e0:	d3 e0                	shl    %cl,%eax
ffffffff8021b6e2:	f7 d0                	not    %eax
ffffffff8021b6e4:	48 98                	cltq   
ffffffff8021b6e6:	48 21 04 d5 20 30 22 	and    %rax,-0x7fddcfe0(,%rdx,8)
ffffffff8021b6ed:	80 
ffffffff8021b6ee:	e9 63 fd ff ff       	jmpq   ffffffff8021b456 <_RME_Thd_Sched_Prio+0x166>
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b6f3:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021b6fa:	e9 8b fc ff ff       	jmpq   ffffffff8021b38a <_RME_Thd_Sched_Prio+0x9a>
ffffffff8021b6ff:	90                   	nop

ffffffff8021b700 <_RME_Thd_Sched_Free>:
    struct RME_Thd_Struct* Thd_Struct;
    /* These are used to free the thread */
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b700:	f6 c6 80             	test   $0x80,%dh
ffffffff8021b703:	75 33                	jne    ffffffff8021b738 <_RME_Thd_Sched_Free+0x38>
ffffffff8021b705:	48 39 57 28          	cmp    %rdx,0x28(%rdi)
ffffffff8021b709:	0f 86 61 01 00 00    	jbe    ffffffff8021b870 <_RME_Thd_Sched_Free+0x170>
ffffffff8021b70f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021b713:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b716:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021b71a:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021b71d:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021b720:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021b724:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff8021b728:	74 72                	je     ffffffff8021b79c <_RME_Thd_Sched_Free+0x9c>
ffffffff8021b72a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021b731:	c3                   	retq   
ffffffff8021b732:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8021b738:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b73b:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021b73f:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff8021b743:	0f 83 27 01 00 00    	jae    ffffffff8021b870 <_RME_Thd_Sched_Free+0x170>
ffffffff8021b749:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021b74d:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021b751:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021b758:	80 00 00 
ffffffff8021b75b:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021b75e:	48 85 f9             	test   %rdi,%rcx
ffffffff8021b761:	0f 85 39 02 00 00    	jne    ffffffff8021b9a0 <_RME_Thd_Sched_Free+0x2a0>
ffffffff8021b767:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021b76b:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021b76f:	75 b9                	jne    ffffffff8021b72a <_RME_Thd_Sched_Free+0x2a>
ffffffff8021b771:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021b777:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021b77b:	0f 83 ef 00 00 00    	jae    ffffffff8021b870 <_RME_Thd_Sched_Free+0x170>
ffffffff8021b781:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021b785:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8021b789:	48 89 d0             	mov    %rdx,%rax
ffffffff8021b78c:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021b78f:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021b792:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021b796:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff8021b79a:	75 8e                	jne    ffffffff8021b72a <_RME_Thd_Sched_Free+0x2a>
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff8021b79c:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff8021b7a3:	80 00 00 
ffffffff8021b7a6:	48 85 ca             	test   %rcx,%rdx
ffffffff8021b7a9:	0f 85 f1 01 00 00    	jne    ffffffff8021b9a0 <_RME_Thd_Sched_Free+0x2a0>
ffffffff8021b7af:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff8021b7b3:	0f 84 47 03 00 00    	je     ffffffff8021bb00 <_RME_Thd_Sched_Free+0x400>
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Thd_Sched_Free(struct RME_Cap_Captbl* Captbl, 
                          struct RME_Reg_Struct* Reg, cid_t Cap_Thd)
{
ffffffff8021b7b9:	41 55                	push   %r13
ffffffff8021b7bb:	41 54                	push   %r12
ffffffff8021b7bd:	55                   	push   %rbp
ffffffff8021b7be:	53                   	push   %rbx
ffffffff8021b7bf:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
    
    /* See if the target thread is already binded. If no or binded to other cores, we just quit */
    Thd_Struct=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff8021b7c3:	48 8b 58 18          	mov    0x18(%rax),%rbx
    if((Thd_Struct->Sched.CPUID_Bind&RME_THD_UNBIND)!=0)
ffffffff8021b7c7:	48 8b 6b 28          	mov    0x28(%rbx),%rbp
ffffffff8021b7cb:	48 85 ed             	test   %rbp,%rbp
ffffffff8021b7ce:	0f 88 fc 00 00 00    	js     ffffffff8021b8d0 <_RME_Thd_Sched_Free+0x1d0>
ffffffff8021b7d4:	49 89 f4             	mov    %rsi,%r12
        return RME_ERR_PTH_INVSTATE;
    if(Thd_Struct->Sched.CPUID_Bind!=RME_CPUID())
ffffffff8021b7d7:	e8 63 00 ff ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
ffffffff8021b7dc:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021b7df:	0f 85 eb 00 00 00    	jne    ffffffff8021b8d0 <_RME_Thd_Sched_Free+0x1d0>
        return RME_ERR_PTH_INVSTATE;
    
    /* Am I referenced by someone as a scheduler? If yes, we cannot unbind. Because
     * boot-time thread's refcnt will never be 0, thus they will never pass this checking */
    if(Thd_Struct->Sched.Refcnt!=0)
ffffffff8021b7e5:	48 83 7b 40 00       	cmpq   $0x0,0x40(%rbx)
ffffffff8021b7ea:	0f 85 00 03 00 00    	jne    ffffffff8021baf0 <_RME_Thd_Sched_Free+0x3f0>
        return RME_ERR_PTH_REFCNT;
    
    /* Decrease the parent's reference count */
    Thd_Struct->Sched.Parent->Sched.Refcnt--;
ffffffff8021b7f0:	48 8b 43 68          	mov    0x68(%rbx),%rax
ffffffff8021b7f4:	48 83 68 40 01       	subq   $0x1,0x40(%rax)
    
    /* See if we have any events sent to the parent. If yes, remove that event */
    if(Thd_Struct->Sched.Notif.Next!=&(Thd_Struct->Sched.Notif))
ffffffff8021b7f9:	48 8d 43 10          	lea    0x10(%rbx),%rax
ffffffff8021b7fd:	48 8b 53 18          	mov    0x18(%rbx),%rdx
ffffffff8021b801:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021b804:	74 13                	je     ffffffff8021b819 <_RME_Thd_Sched_Free+0x119>
    {
        __RME_List_Del(Thd_Struct->Sched.Notif.Prev,Thd_Struct->Sched.Notif.Next);
ffffffff8021b806:	48 8b 4b 10          	mov    0x10(%rbx),%rcx
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff8021b80a:	48 89 0a             	mov    %rcx,(%rdx)
    Prev->Next=(struct RME_List*)Next;
ffffffff8021b80d:	48 89 51 08          	mov    %rdx,0x8(%rcx)
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff8021b811:	48 89 43 10          	mov    %rax,0x10(%rbx)
    Head->Next=(struct RME_List*)Head;
ffffffff8021b815:	48 89 43 18          	mov    %rax,0x18(%rbx)
        __RME_List_Del(Thd_Struct->Sched.Notif.Prev,Thd_Struct->Sched.Notif.Next);
        __RME_List_Crt(&(Thd_Struct->Sched.Notif));
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Set_Syscall_Retval(Reg,0);  
ffffffff8021b819:	31 f6                	xor    %esi,%esi
ffffffff8021b81b:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021b81e:	e8 1d 85 ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
    
    /* If the thread is running, or ready to run, kick it out of the run queue.
     * If it is blocked on some endpoint, end the blocking and set the return
     * value to RME_ERR_SIV_FREE. If the thread is killed due to a fault, we will
     * not clear the fault here */
    if(Thd_Struct->Sched.State!=RME_THD_BLOCKED)
ffffffff8021b823:	48 8b 43 38          	mov    0x38(%rbx),%rax
ffffffff8021b827:	48 83 f8 02          	cmp    $0x2,%rax
ffffffff8021b82b:	0f 84 b7 00 00 00    	je     ffffffff8021b8e8 <_RME_Thd_Sched_Free+0x1e8>
    {
        if((Thd_Struct->Sched.State==RME_THD_RUNNING)||(Thd_Struct->Sched.State==RME_THD_READY))
ffffffff8021b831:	48 83 f8 01          	cmp    $0x1,%rax
ffffffff8021b835:	76 49                	jbe    ffffffff8021b880 <_RME_Thd_Sched_Free+0x180>
        Thd_Struct->Sched.Signal->Thd=0;
        Thd_Struct->Sched.Signal=0;
        Thd_Struct->Sched.State=RME_THD_TIMEOUT;
    }
    /* Delete all slices on it */
    Thd_Struct->Sched.Slices=0;
ffffffff8021b837:	48 c7 43 30 00 00 00 	movq   $0x0,0x30(%rbx)
ffffffff8021b83e:	00 
    
    CPUID=RME_CPUID();
ffffffff8021b83f:	e8 fb ff fe ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
    /* See if this thread is the current thread. If yes, then there will be a context switch */
    if(RME_Cur_Thd[CPUID]==Thd_Struct)
ffffffff8021b844:	48 3b 1c c5 00 28 22 	cmp    -0x7fddd800(,%rax,8),%rbx
ffffffff8021b84b:	80 
        Thd_Struct->Sched.State=RME_THD_TIMEOUT;
    }
    /* Delete all slices on it */
    Thd_Struct->Sched.Slices=0;
    
    CPUID=RME_CPUID();
ffffffff8021b84c:	48 89 c5             	mov    %rax,%rbp
    /* See if this thread is the current thread. If yes, then there will be a context switch */
    if(RME_Cur_Thd[CPUID]==Thd_Struct)
ffffffff8021b84f:	0f 84 c3 00 00 00    	je     ffffffff8021b918 <_RME_Thd_Sched_Free+0x218>
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_RUNNING;
        _RME_Run_Swt(Reg,Thd_Struct,RME_Cur_Thd[CPUID]);
    }
    
    /* Set the state to unbinded so other cores can bind */
    Thd_Struct->Sched.CPUID_Bind=RME_THD_UNBIND;
ffffffff8021b855:	48 b8 00 00 00 00 00 	movabs $0x8000000000000000,%rax
ffffffff8021b85c:	00 00 80 
ffffffff8021b85f:	48 89 43 28          	mov    %rax,0x28(%rbx)
    return 0;
ffffffff8021b863:	31 c0                	xor    %eax,%eax
}
ffffffff8021b865:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021b869:	5b                   	pop    %rbx
ffffffff8021b86a:	5d                   	pop    %rbp
ffffffff8021b86b:	41 5c                	pop    %r12
ffffffff8021b86d:	41 5d                	pop    %r13
ffffffff8021b86f:	c3                   	retq   
    struct RME_Thd_Struct* Thd_Struct;
    /* These are used to free the thread */
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b870:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021b877:	c3                   	retq   
ffffffff8021b878:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021b87f:	00 
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021b880:	48 8b 43 28          	mov    0x28(%rbx),%rax
    
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021b884:	48 8b 73 08          	mov    0x8(%rbx),%rsi
ffffffff8021b888:	48 8b 13             	mov    (%rbx),%rdx
ret_t _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff8021b88b:	48 8b 4b 48          	mov    0x48(%rbx),%rcx
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff8021b88f:	48 89 16             	mov    %rdx,(%rsi)
    Prev->Next=(struct RME_List*)Next;
ffffffff8021b892:	48 89 72 08          	mov    %rsi,0x8(%rdx)
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
ffffffff8021b896:	48 89 c2             	mov    %rax,%rdx
ffffffff8021b899:	48 c1 e2 0a          	shl    $0xa,%rdx
ffffffff8021b89d:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021b8a0:	48 8d 14 c2          	lea    (%rdx,%rax,8),%rdx
ffffffff8021b8a4:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8021b8a8:	48 8d 94 16 20 30 22 	lea    -0x7fddcfe0(%rsi,%rdx,1),%rdx
ffffffff8021b8af:	80 
ffffffff8021b8b0:	48 8d 72 08          	lea    0x8(%rdx),%rsi
ffffffff8021b8b4:	48 39 72 10          	cmp    %rsi,0x10(%rdx)
ffffffff8021b8b8:	0f 84 52 02 00 00    	je     ffffffff8021bb10 <_RME_Thd_Sched_Free+0x410>
        /* If it got here, the thread that is operated on cannot be the current thread, so
         * we are not overwriting the return value of the caller thread */
        __RME_Set_Syscall_Retval(&(Thd_Struct->Cur_Reg->Reg),RME_ERR_SIV_FREE);
        Thd_Struct->Sched.Signal->Thd=0;
        Thd_Struct->Sched.Signal=0;
        Thd_Struct->Sched.State=RME_THD_TIMEOUT;
ffffffff8021b8be:	48 c7 43 38 03 00 00 	movq   $0x3,0x38(%rbx)
ffffffff8021b8c5:	00 
ffffffff8021b8c6:	e9 6c ff ff ff       	jmpq   ffffffff8021b837 <_RME_Thd_Sched_Free+0x137>
ffffffff8021b8cb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    }
    
    /* Set the state to unbinded so other cores can bind */
    Thd_Struct->Sched.CPUID_Bind=RME_THD_UNBIND;
    return 0;
}
ffffffff8021b8d0:	48 83 c4 08          	add    $0x8,%rsp
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
    
    /* See if the target thread is already binded. If no or binded to other cores, we just quit */
    Thd_Struct=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
    if((Thd_Struct->Sched.CPUID_Bind&RME_THD_UNBIND)!=0)
        return RME_ERR_PTH_INVSTATE;
ffffffff8021b8d4:	48 c7 c0 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rax
    }
    
    /* Set the state to unbinded so other cores can bind */
    Thd_Struct->Sched.CPUID_Bind=RME_THD_UNBIND;
    return 0;
}
ffffffff8021b8db:	5b                   	pop    %rbx
ffffffff8021b8dc:	5d                   	pop    %rbp
ffffffff8021b8dd:	41 5c                	pop    %r12
ffffffff8021b8df:	41 5d                	pop    %r13
ffffffff8021b8e1:	c3                   	retq   
ffffffff8021b8e2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    }
    else
    {
        /* If it got here, the thread that is operated on cannot be the current thread, so
         * we are not overwriting the return value of the caller thread */
        __RME_Set_Syscall_Retval(&(Thd_Struct->Cur_Reg->Reg),RME_ERR_SIV_FREE);
ffffffff8021b8e8:	48 8b bb 80 00 00 00 	mov    0x80(%rbx),%rdi
ffffffff8021b8ef:	48 c7 c6 dc ff ff ff 	mov    $0xffffffffffffffdc,%rsi
ffffffff8021b8f6:	e8 45 84 ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
        Thd_Struct->Sched.Signal->Thd=0;
ffffffff8021b8fb:	48 8b 43 58          	mov    0x58(%rbx),%rax
ffffffff8021b8ff:	48 c7 40 10 00 00 00 	movq   $0x0,0x10(%rax)
ffffffff8021b906:	00 
        Thd_Struct->Sched.Signal=0;
ffffffff8021b907:	48 c7 43 58 00 00 00 	movq   $0x0,0x58(%rbx)
ffffffff8021b90e:	00 
ffffffff8021b90f:	eb ad                	jmp    ffffffff8021b8be <_RME_Thd_Sched_Free+0x1be>
ffffffff8021b911:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=RME_PRIO_WORD_NUM-1;Count>=0;Count--)
    {
        if(RME_Run[CPUID].Bitmap[Count]!=0)
ffffffff8021b918:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff8021b91c:	4c 8d 2c e8          	lea    (%rax,%rbp,8),%r13
ffffffff8021b920:	49 8b bd 20 30 22 80 	mov    -0x7fddcfe0(%r13),%rdi
ffffffff8021b927:	48 85 ff             	test   %rdi,%rdi
ffffffff8021b92a:	75 7c                	jne    ffffffff8021b9a8 <_RME_Thd_Sched_Free+0x2a8>
            break;
    }
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);
ffffffff8021b92c:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021b933:	e8 d8 b5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b938:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff8021b93f:	e8 cc b5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b944:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021b94b:	e8 c0 b5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b950:	bf cb 00 00 00       	mov    $0xcb,%edi
ffffffff8021b955:	e8 76 b3 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021b95a:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021b961:	e8 aa b5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b966:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8021b96d:	e8 9e b5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b972:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021b979:	e8 92 b5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b97e:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff8021b985:	e8 86 b5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b98a:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021b991:	e8 7a b5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021b996:	eb fe                	jmp    ffffffff8021b996 <_RME_Thd_Sched_Free+0x296>
ffffffff8021b998:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021b99f:	00 
    struct RME_Thd_Struct* Thd_Struct;
    /* These are used to free the thread */
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021b9a0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021b9a7:	c3                   	retq   
            break;
    }
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);
    /* Get the first "1"'s position in the word */
    Prio=__RME_MSB_Get(RME_Run[CPUID].Bitmap[Count]);
ffffffff8021b9a8:	e8 13 ff fe ff       	callq  ffffffff8020b8c0 <__RME_MSB_Get>
    Prio+=Count<<RME_WORD_ORDER;
    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)RME_Run[CPUID].List[Prio].Next;
ffffffff8021b9ad:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021b9b1:	49 8b 84 05 30 30 22 	mov    -0x7fddcfd0(%r13,%rax,1),%rax
ffffffff8021b9b8:	80 
    
    CPUID=RME_CPUID();
    /* See if this thread is the current thread. If yes, then there will be a context switch */
    if(RME_Cur_Thd[CPUID]==Thd_Struct)
    {
        RME_Cur_Thd[CPUID]=_RME_Run_High(CPUID);
ffffffff8021b9b9:	48 89 04 ed 00 28 22 	mov    %rax,-0x7fddd800(,%rbp,8)
ffffffff8021b9c0:	80 
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021b9c1:	48 8b 50 28          	mov    0x28(%rax),%rdx
ret_t _RME_Run_Ins(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff8021b9c5:	48 8b 48 48          	mov    0x48(%rax),%rcx
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
ffffffff8021b9c9:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021b9cc:	48 c1 e6 0a          	shl    $0xa,%rsi
ffffffff8021b9d0:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021b9d3:	48 8d 34 d6          	lea    (%rsi,%rdx,8),%rsi
ffffffff8021b9d7:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff8021b9db:	48 8d b4 37 20 30 22 	lea    -0x7fddcfe0(%rdi,%rsi,1),%rsi
ffffffff8021b9e2:	80 
ffffffff8021b9e3:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
ffffffff8021b9e7:	4c 8d 46 08          	lea    0x8(%rsi),%r8
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff8021b9eb:	48 89 46 08          	mov    %rax,0x8(%rsi)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021b9ef:	48 89 d6             	mov    %rdx,%rsi
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
ffffffff8021b9f2:	4c 89 40 08          	mov    %r8,0x8(%rax)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021b9f6:	48 c1 e6 07          	shl    $0x7,%rsi
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
    New->Prev=(struct RME_List*)Prev;
ffffffff8021b9fa:	48 89 38             	mov    %rdi,(%rax)
    Prev->Next=(struct RME_List*)New;
ffffffff8021b9fd:	48 89 47 08          	mov    %rax,0x8(%rdi)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021ba01:	48 89 c8             	mov    %rcx,%rax
ffffffff8021ba04:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff8021ba08:	48 01 f2             	add    %rsi,%rdx
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff8021ba0b:	4c 89 e6             	mov    %r12,%rsi
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021ba0e:	48 01 c2             	add    %rax,%rdx
ffffffff8021ba11:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021ba16:	d3 e0                	shl    %cl,%eax
ffffffff8021ba18:	48 98                	cltq   
ffffffff8021ba1a:	48 09 04 d5 20 30 22 	or     %rax,-0x7fddcfe0(,%rdx,8)
ffffffff8021ba21:	80 
    /* See if this thread is the current thread. If yes, then there will be a context switch */
    if(RME_Cur_Thd[CPUID]==Thd_Struct)
    {
        RME_Cur_Thd[CPUID]=_RME_Run_High(CPUID);
        _RME_Run_Ins(RME_Cur_Thd[CPUID]);
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_RUNNING;
ffffffff8021ba22:	48 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rax
ffffffff8021ba29:	80 
ffffffff8021ba2a:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8021ba31:	00 
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff8021ba32:	48 8b bb 80 00 00 00 	mov    0x80(%rbx),%rdi
    if(RME_Cur_Thd[CPUID]==Thd_Struct)
    {
        RME_Cur_Thd[CPUID]=_RME_Run_High(CPUID);
        _RME_Run_Ins(RME_Cur_Thd[CPUID]);
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_RUNNING;
        _RME_Run_Swt(Reg,Thd_Struct,RME_Cur_Thd[CPUID]);
ffffffff8021ba39:	48 8b 2c ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rbp
ffffffff8021ba40:	80 
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff8021ba41:	e8 7a 83 ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Save(Reg, &(Curr_Thd->Cur_Reg->Cop_Reg));
ffffffff8021ba46:	48 8b 83 80 00 00 00 	mov    0x80(%rbx),%rax
ffffffff8021ba4d:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021ba50:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff8021ba57:	e8 54 84 ff ff       	callq  ffffffff80213eb0 <__RME_Thd_Cop_Save>
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
ffffffff8021ba5c:	48 8b b5 80 00 00 00 	mov    0x80(%rbp),%rsi
ffffffff8021ba63:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021ba66:	e8 55 83 ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));
ffffffff8021ba6b:	48 8b 85 80 00 00 00 	mov    0x80(%rbp),%rax
ffffffff8021ba72:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021ba75:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff8021ba7c:	e8 3f 84 ff ff       	callq  ffffffff80213ec0 <__RME_Thd_Cop_Restore>

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff8021ba81:	48 8b 93 c0 09 00 00 	mov    0x9c0(%rbx),%rdx
ffffffff8021ba88:	48 8d 83 b8 09 00 00 	lea    0x9b8(%rbx),%rax
ffffffff8021ba8f:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021ba92:	0f 84 ae 00 00 00    	je     ffffffff8021bb46 <_RME_Thd_Sched_Free+0x446>
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021ba98:	48 8b 85 c0 09 00 00 	mov    0x9c0(%rbp),%rax
ffffffff8021ba9f:	48 8d 8d b8 09 00 00 	lea    0x9b8(%rbp),%rcx
ffffffff8021baa6:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021baa9:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff8021baae:	48 0f 44 c1          	cmove  %rcx,%rax
    
    if(Curr_Inv_Top==0)
ffffffff8021bab2:	48 85 d2             	test   %rdx,%rdx
ffffffff8021bab5:	0f 84 a5 00 00 00    	je     ffffffff8021bb60 <_RME_Thd_Sched_Free+0x460>
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
ffffffff8021babb:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021babf:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    
    if(Next_Inv_Top==0)
ffffffff8021bac3:	48 85 c0             	test   %rax,%rax
ffffffff8021bac6:	74 74                	je     ffffffff8021bb3c <_RME_Thd_Sched_Free+0x43c>
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
    else
        Next_Pgtbl=Next_Inv_Top->Proc->Pgtbl;
ffffffff8021bac8:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021bacc:	48 8b 40 10          	mov    0x10(%rax),%rax
    
    if(RME_CAP_GETOBJ(Curr_Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Next_Pgtbl,ptr_t))
ffffffff8021bad0:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8021bad4:	48 39 7a 18          	cmp    %rdi,0x18(%rdx)
ffffffff8021bad8:	0f 84 77 fd ff ff    	je     ffffffff8021b855 <_RME_Thd_Sched_Free+0x155>
        __RME_Pgtbl_Set(RME_CAP_GETOBJ(Next_Pgtbl,ptr_t));
ffffffff8021bade:	e8 fd 87 ff ff       	callq  ffffffff802142e0 <__RME_Pgtbl_Set>
ffffffff8021bae3:	e9 6d fd ff ff       	jmpq   ffffffff8021b855 <_RME_Thd_Sched_Free+0x155>
ffffffff8021bae8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021baef:	00 
        return RME_ERR_PTH_INVSTATE;
    
    /* Am I referenced by someone as a scheduler? If yes, we cannot unbind. Because
     * boot-time thread's refcnt will never be 0, thus they will never pass this checking */
    if(Thd_Struct->Sched.Refcnt!=0)
        return RME_ERR_PTH_REFCNT;
ffffffff8021baf0:	48 c7 c0 e6 ff ff ff 	mov    $0xffffffffffffffe6,%rax
ffffffff8021baf7:	e9 69 fd ff ff       	jmpq   ffffffff8021b865 <_RME_Thd_Sched_Free+0x165>
ffffffff8021bafc:	0f 1f 40 00          	nopl   0x0(%rax)
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_FREE);
ffffffff8021bb00:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
    }
    
    /* Set the state to unbinded so other cores can bind */
    Thd_Struct->Sched.CPUID_Bind=RME_THD_UNBIND;
    return 0;
}
ffffffff8021bb07:	c3                   	retq   
ffffffff8021bb08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021bb0f:	00 
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
        RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]&=~(1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1)));
ffffffff8021bb10:	48 89 c6             	mov    %rax,%rsi
ffffffff8021bb13:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021bb16:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff8021bb1a:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff8021bb1e:	48 01 f0             	add    %rsi,%rax
ffffffff8021bb21:	48 01 c2             	add    %rax,%rdx
ffffffff8021bb24:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021bb29:	d3 e0                	shl    %cl,%eax
ffffffff8021bb2b:	f7 d0                	not    %eax
ffffffff8021bb2d:	48 98                	cltq   
ffffffff8021bb2f:	48 21 04 d5 20 30 22 	and    %rax,-0x7fddcfe0(,%rdx,8)
ffffffff8021bb36:	80 
ffffffff8021bb37:	e9 82 fd ff ff       	jmpq   ffffffff8021b8be <_RME_Thd_Sched_Free+0x1be>
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
    
    if(Next_Inv_Top==0)
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
ffffffff8021bb3c:	48 8b 45 60          	mov    0x60(%rbp),%rax
ffffffff8021bb40:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021bb44:	eb 8a                	jmp    ffffffff8021bad0 <_RME_Thd_Sched_Free+0x3d0>
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021bb46:	48 8b 85 c0 09 00 00 	mov    0x9c0(%rbp),%rax
ffffffff8021bb4d:	48 8d 95 b8 09 00 00 	lea    0x9b8(%rbp),%rdx
ffffffff8021bb54:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021bb57:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8021bb5c:	48 0f 44 c2          	cmove  %rdx,%rax
    
    if(Curr_Inv_Top==0)
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
ffffffff8021bb60:	48 8b 53 60          	mov    0x60(%rbx),%rdx
ffffffff8021bb64:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021bb68:	e9 56 ff ff ff       	jmpq   ffffffff8021bac3 <_RME_Thd_Sched_Free+0x3c3>
ffffffff8021bb6d:	0f 1f 00             	nopl   (%rax)

ffffffff8021bb70 <_RME_Thd_Sched_Rcv>:
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    struct RME_Thd_Struct* Thd_Child;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021bb70:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021bb76:	75 30                	jne    ffffffff8021bba8 <_RME_Thd_Sched_Rcv+0x38>
ffffffff8021bb78:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021bb7c:	0f 86 0e 01 00 00    	jbe    ffffffff8021bc90 <_RME_Thd_Sched_Rcv+0x120>
ffffffff8021bb82:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021bb86:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021bb8a:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
ffffffff8021bb91:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021bb94:	48 89 c1             	mov    %rax,%rcx
ffffffff8021bb97:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021bb9b:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff8021bb9f:	74 72                	je     ffffffff8021bc13 <_RME_Thd_Sched_Rcv+0xa3>
    if(Thd_Child->Sched.State==RME_THD_FAULT)
        return Thd_Child->Sched.TID|RME_THD_FAULT_FLAG;

    /* Return the notification TID */
    return Thd_Child->Sched.TID;
}
ffffffff8021bba1:	48 89 d0             	mov    %rdx,%rax
ffffffff8021bba4:	c3                   	retq   
ffffffff8021bba5:	0f 1f 00             	nopl   (%rax)
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    struct RME_Thd_Struct* Thd_Child;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021bba8:	48 89 f0             	mov    %rsi,%rax
ffffffff8021bbab:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021bbaf:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff8021bbb3:	0f 83 d7 00 00 00    	jae    ffffffff8021bc90 <_RME_Thd_Sched_Rcv+0x120>
ffffffff8021bbb9:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021bbbd:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021bbc1:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff8021bbc8:	80 00 00 
ffffffff8021bbcb:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021bbce:	48 85 ca             	test   %rcx,%rdx
ffffffff8021bbd1:	0f 85 e9 00 00 00    	jne    ffffffff8021bcc0 <_RME_Thd_Sched_Rcv+0x150>
ffffffff8021bbd7:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021bbda:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
ffffffff8021bbe1:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021bbe5:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021bbe9:	75 b6                	jne    ffffffff8021bba1 <_RME_Thd_Sched_Rcv+0x31>
ffffffff8021bbeb:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021bbf1:	48 3b 70 28          	cmp    0x28(%rax),%rsi
ffffffff8021bbf5:	0f 83 95 00 00 00    	jae    ffffffff8021bc90 <_RME_Thd_Sched_Rcv+0x120>
ffffffff8021bbfb:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021bbff:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff8021bc03:	48 8b 06             	mov    (%rsi),%rax
ffffffff8021bc06:	48 89 c1             	mov    %rax,%rcx
ffffffff8021bc09:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021bc0d:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff8021bc11:	75 8e                	jne    ffffffff8021bba1 <_RME_Thd_Sched_Rcv+0x31>
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
ffffffff8021bc13:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021bc1a:	80 00 00 
ffffffff8021bc1d:	48 85 d0             	test   %rdx,%rax
ffffffff8021bc20:	0f 85 9a 00 00 00    	jne    ffffffff8021bcc0 <_RME_Thd_Sched_Rcv+0x150>
ffffffff8021bc26:	f6 46 10 40          	testb  $0x40,0x10(%rsi)
ffffffff8021bc2a:	48 c7 c2 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rdx
ffffffff8021bc31:	0f 84 6a ff ff ff    	je     ffffffff8021bba1 <_RME_Thd_Sched_Rcv+0x31>
                              is simply not allowed. 2-Level.
Output      : None.
Return      : ret_t - If successful, the thread ID; or an error code.
******************************************************************************/
ret_t _RME_Thd_Sched_Rcv(struct RME_Cap_Captbl* Captbl, cid_t Cap_Thd)
{
ffffffff8021bc37:	55                   	push   %rbp
ffffffff8021bc38:	53                   	push   %rbx
ffffffff8021bc39:	48 83 ec 08          	sub    $0x8,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
    
    /* Check if the CPUID is correct. Only if yes can we proceed */
    Thd_Struct=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
ffffffff8021bc3d:	48 8b 5e 18          	mov    0x18(%rsi),%rbx
    if(Thd_Struct->Sched.CPUID_Bind!=RME_CPUID())
ffffffff8021bc41:	48 8b 6b 28          	mov    0x28(%rbx),%rbp
ffffffff8021bc45:	e8 f5 fb fe ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
        return RME_ERR_PTH_INVSTATE;
ffffffff8021bc4a:	48 c7 c2 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rdx
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Op,RME_THD_FLAG_SCHED_RCV);
    
    /* Check if the CPUID is correct. Only if yes can we proceed */
    Thd_Struct=(struct RME_Thd_Struct*)Thd_Op->Head.Object;
    if(Thd_Struct->Sched.CPUID_Bind!=RME_CPUID())
ffffffff8021bc51:	48 39 c5             	cmp    %rax,%rbp
ffffffff8021bc54:	75 2d                	jne    ffffffff8021bc83 <_RME_Thd_Sched_Rcv+0x113>
        return RME_ERR_PTH_INVSTATE;
    
    /* Are there any notifications? */
    if(Thd_Struct->Sched.Event.Next==&(Thd_Struct->Sched.Event))
ffffffff8021bc56:	48 8b 53 78          	mov    0x78(%rbx),%rdx
ffffffff8021bc5a:	48 83 c3 70          	add    $0x70,%rbx
ffffffff8021bc5e:	48 39 da             	cmp    %rbx,%rdx
ffffffff8021bc61:	74 69                	je     ffffffff8021bccc <_RME_Thd_Sched_Rcv+0x15c>
        return RME_ERR_PTH_NOTIF;
    }
    
    /* Return one notification and delete it from the notification list */
    Thd_Child=(struct RME_Thd_Struct*)(Thd_Struct->Sched.Event.Next-1);
    __RME_List_Del(Thd_Child->Sched.Notif.Prev,Thd_Child->Sched.Notif.Next);
ffffffff8021bc63:	48 8b 4a 08          	mov    0x8(%rdx),%rcx
ffffffff8021bc67:	48 8b 02             	mov    (%rdx),%rax
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff8021bc6a:	48 89 01             	mov    %rax,(%rcx)
    Prev->Next=(struct RME_List*)Next;
ffffffff8021bc6d:	48 89 48 08          	mov    %rcx,0x8(%rax)
    __RME_List_Del(Thd_Child->Sched.Notif.Prev,Thd_Child->Sched.Notif.Next);
    /* We need to do this because we are using this to detect whether the notification is sent */
    __RME_List_Crt(&(Thd_Child->Sched.Notif));
    
    /* See if the child is in a faulty state. If yes, we return a fault notification with that TID */
    if(Thd_Child->Sched.State==RME_THD_FAULT)
ffffffff8021bc71:	48 83 7a 28 05       	cmpq   $0x5,0x28(%rdx)
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Crt(volatile struct RME_List* Head)
{
    Head->Prev=(struct RME_List*)Head;
ffffffff8021bc76:	48 89 12             	mov    %rdx,(%rdx)
    Head->Next=(struct RME_List*)Head;
ffffffff8021bc79:	48 89 52 08          	mov    %rdx,0x8(%rdx)
    __RME_List_Del(Thd_Child->Sched.Notif.Prev,Thd_Child->Sched.Notif.Next);
    /* We need to do this because we are using this to detect whether the notification is sent */
    __RME_List_Crt(&(Thd_Child->Sched.Notif));
    
    /* See if the child is in a faulty state. If yes, we return a fault notification with that TID */
    if(Thd_Child->Sched.State==RME_THD_FAULT)
ffffffff8021bc7d:	74 21                	je     ffffffff8021bca0 <_RME_Thd_Sched_Rcv+0x130>
        return Thd_Child->Sched.TID|RME_THD_FAULT_FLAG;

    /* Return the notification TID */
    return Thd_Child->Sched.TID;
ffffffff8021bc7f:	48 8b 52 10          	mov    0x10(%rdx),%rdx
}
ffffffff8021bc83:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021bc87:	48 89 d0             	mov    %rdx,%rax
ffffffff8021bc8a:	5b                   	pop    %rbx
ffffffff8021bc8b:	5d                   	pop    %rbp
ffffffff8021bc8c:	c3                   	retq   
ffffffff8021bc8d:	0f 1f 00             	nopl   (%rax)
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    struct RME_Thd_Struct* Thd_Child;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021bc90:	48 c7 c2 fd ff ff ff 	mov    $0xfffffffffffffffd,%rdx
ffffffff8021bc97:	e9 05 ff ff ff       	jmpq   ffffffff8021bba1 <_RME_Thd_Sched_Rcv+0x31>
ffffffff8021bc9c:	0f 1f 40 00          	nopl   0x0(%rax)
    /* We need to do this because we are using this to detect whether the notification is sent */
    __RME_List_Crt(&(Thd_Child->Sched.Notif));
    
    /* See if the child is in a faulty state. If yes, we return a fault notification with that TID */
    if(Thd_Child->Sched.State==RME_THD_FAULT)
        return Thd_Child->Sched.TID|RME_THD_FAULT_FLAG;
ffffffff8021bca0:	48 b8 00 00 00 00 00 	movabs $0x4000000000000000,%rax
ffffffff8021bca7:	00 00 40 
ffffffff8021bcaa:	48 0b 42 10          	or     0x10(%rdx),%rax

    /* Return the notification TID */
    return Thd_Child->Sched.TID;
}
ffffffff8021bcae:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021bcb2:	5b                   	pop    %rbx
ffffffff8021bcb3:	5d                   	pop    %rbp
    /* We need to do this because we are using this to detect whether the notification is sent */
    __RME_List_Crt(&(Thd_Child->Sched.Notif));
    
    /* See if the child is in a faulty state. If yes, we return a fault notification with that TID */
    if(Thd_Child->Sched.State==RME_THD_FAULT)
        return Thd_Child->Sched.TID|RME_THD_FAULT_FLAG;
ffffffff8021bcb4:	48 89 c2             	mov    %rax,%rdx

    /* Return the notification TID */
    return Thd_Child->Sched.TID;
}
ffffffff8021bcb7:	48 89 d0             	mov    %rdx,%rax
ffffffff8021bcba:	c3                   	retq   
ffffffff8021bcbb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    struct RME_Cap_Thd* Thd_Op;
    struct RME_Thd_Struct* Thd_Struct;
    struct RME_Thd_Struct* Thd_Child;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Op);
ffffffff8021bcc0:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
ffffffff8021bcc7:	e9 d5 fe ff ff       	jmpq   ffffffff8021bba1 <_RME_Thd_Sched_Rcv+0x31>
    
    /* Are there any notifications? */
    if(Thd_Struct->Sched.Event.Next==&(Thd_Struct->Sched.Event))
    {
        /* Check the blocking flag to see whether we need to block the thread */
        return RME_ERR_PTH_NOTIF;
ffffffff8021bccc:	48 c7 c2 e5 ff ff ff 	mov    $0xffffffffffffffe5,%rdx
ffffffff8021bcd3:	eb ae                	jmp    ffffffff8021bc83 <_RME_Thd_Sched_Rcv+0x113>
ffffffff8021bcd5:	90                   	nop
ffffffff8021bcd6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021bcdd:	00 00 00 

ffffffff8021bce0 <_RME_Thd_Time_Xfer>:
    struct RME_Thd_Struct* Thd_Src_Struct;
    ptr_t CPUID;
    ptr_t Time_Xfer;
    
    /* We may allow transferring infinite time here */
    if(Time==0)
ffffffff8021bce0:	4d 85 c0             	test   %r8,%r8
ffffffff8021bce3:	0f 84 07 06 00 00    	je     ffffffff8021c2f0 <_RME_Thd_Time_Xfer+0x610>
Output      : None.
Return      : ret_t - If successful, the destination time amount; or an error code.
******************************************************************************/
ret_t _RME_Thd_Time_Xfer(struct RME_Cap_Captbl* Captbl, struct RME_Reg_Struct* Reg,
                         cid_t Cap_Thd_Dst, cid_t Cap_Thd_Src, ptr_t Time)
{
ffffffff8021bce9:	41 55                	push   %r13
ffffffff8021bceb:	41 54                	push   %r12
ffffffff8021bced:	55                   	push   %rbp
ffffffff8021bcee:	53                   	push   %rbx
ffffffff8021bcef:	48 89 f5             	mov    %rsi,%rbp
ffffffff8021bcf2:	48 83 ec 18          	sub    $0x18,%rsp
    /* We may allow transferring infinite time here */
    if(Time==0)
        return RME_ERR_PTH_INVSTATE;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Dst,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Dst);
ffffffff8021bcf6:	f6 c6 80             	test   $0x80,%dh
ffffffff8021bcf9:	0f 84 a1 02 00 00    	je     ffffffff8021bfa0 <_RME_Thd_Time_Xfer+0x2c0>
ffffffff8021bcff:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff8021bd03:	48 89 d0             	mov    %rdx,%rax
ffffffff8021bd06:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021bd0a:	48 39 f0             	cmp    %rsi,%rax
ffffffff8021bd0d:	0f 83 25 04 00 00    	jae    ffffffff8021c138 <_RME_Thd_Time_Xfer+0x458>
ffffffff8021bd13:	48 8b 5f 18          	mov    0x18(%rdi),%rbx
ffffffff8021bd17:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021bd1b:	49 b9 00 00 00 00 00 	movabs $0x800000000000,%r9
ffffffff8021bd22:	80 00 00 
ffffffff8021bd25:	48 01 d8             	add    %rbx,%rax
ffffffff8021bd28:	48 8b 38             	mov    (%rax),%rdi
ffffffff8021bd2b:	4c 85 cf             	test   %r9,%rdi
ffffffff8021bd2e:	0f 85 bc 04 00 00    	jne    ffffffff8021c1f0 <_RME_Thd_Time_Xfer+0x510>
ffffffff8021bd34:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021bd38:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021bd3c:	0f 85 de 02 00 00    	jne    ffffffff8021c020 <_RME_Thd_Time_Xfer+0x340>
ffffffff8021bd42:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021bd48:	48 3b 50 28          	cmp    0x28(%rax),%rdx
ffffffff8021bd4c:	0f 83 e6 03 00 00    	jae    ffffffff8021c138 <_RME_Thd_Time_Xfer+0x458>
ffffffff8021bd52:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021bd56:	48 03 50 18          	add    0x18(%rax),%rdx
ffffffff8021bd5a:	49 89 d4             	mov    %rdx,%r12
ffffffff8021bd5d:	49 8b 04 24          	mov    (%r12),%rax
ffffffff8021bd61:	48 89 c2             	mov    %rax,%rdx
ffffffff8021bd64:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021bd68:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8021bd6c:	0f 85 ae 02 00 00    	jne    ffffffff8021c020 <_RME_Thd_Time_Xfer+0x340>
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Src,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Src);
ffffffff8021bd72:	f6 c5 80             	test   $0x80,%ch
ffffffff8021bd75:	0f 85 45 02 00 00    	jne    ffffffff8021bfc0 <_RME_Thd_Time_Xfer+0x2e0>
ffffffff8021bd7b:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021bd7e:	0f 83 b4 03 00 00    	jae    ffffffff8021c138 <_RME_Thd_Time_Xfer+0x458>
ffffffff8021bd84:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021bd88:	48 01 cb             	add    %rcx,%rbx
ffffffff8021bd8b:	48 8b 0b             	mov    (%rbx),%rcx
ffffffff8021bd8e:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021bd91:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021bd95:	48 83 fa 06          	cmp    $0x6,%rdx
ffffffff8021bd99:	0f 85 81 02 00 00    	jne    ffffffff8021c020 <_RME_Thd_Time_Xfer+0x340>
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Dst,RME_THD_FLAG_XFER_DST);
ffffffff8021bd9f:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021bda6:	80 00 00 
ffffffff8021bda9:	4c 89 44 24 08       	mov    %r8,0x8(%rsp)
ffffffff8021bdae:	48 85 d0             	test   %rdx,%rax
ffffffff8021bdb1:	0f 85 39 04 00 00    	jne    ffffffff8021c1f0 <_RME_Thd_Time_Xfer+0x510>
ffffffff8021bdb7:	41 f6 44 24 11 01    	testb  $0x1,0x11(%r12)
ffffffff8021bdbd:	0f 84 3d 04 00 00    	je     ffffffff8021c200 <_RME_Thd_Time_Xfer+0x520>
    RME_CAP_CHECK(Thd_Src,RME_THD_FLAG_XFER_SRC);
ffffffff8021bdc3:	48 85 d1             	test   %rdx,%rcx
ffffffff8021bdc6:	0f 85 24 04 00 00    	jne    ffffffff8021c1f0 <_RME_Thd_Time_Xfer+0x510>
ffffffff8021bdcc:	f6 43 10 80          	testb  $0x80,0x10(%rbx)
ffffffff8021bdd0:	0f 84 2a 04 00 00    	je     ffffffff8021c200 <_RME_Thd_Time_Xfer+0x520>

    /* Check if the two threads are on the core that is accordance with what we are on */
    CPUID=RME_CPUID();
ffffffff8021bdd6:	e8 64 fa fe ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
ffffffff8021bddb:	49 89 c5             	mov    %rax,%r13
    Thd_Src_Struct=RME_CAP_GETOBJ(Thd_Src,struct RME_Thd_Struct*);
ffffffff8021bdde:	48 8b 43 18          	mov    0x18(%rbx),%rax
    if(Thd_Src_Struct->Sched.CPUID_Bind!=CPUID)
ffffffff8021bde2:	4c 3b 68 28          	cmp    0x28(%rax),%r13
ffffffff8021bde6:	0f 85 34 03 00 00    	jne    ffffffff8021c120 <_RME_Thd_Time_Xfer+0x440>
        return RME_ERR_PTH_INVSTATE;
    /* Do we have slices to transfer? - slices == 0 implies TIMEOUT, or BLOCKED */
    if(Thd_Src_Struct->Sched.Slices==0)
ffffffff8021bdec:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8021bdf0:	48 85 d2             	test   %rdx,%rdx
ffffffff8021bdf3:	0f 84 27 03 00 00    	je     ffffffff8021c120 <_RME_Thd_Time_Xfer+0x440>
        return RME_ERR_PTH_INVSTATE;
    Thd_Dst_Struct=RME_CAP_GETOBJ(Thd_Dst,struct RME_Thd_Struct*);
ffffffff8021bdf9:	49 8b 5c 24 18       	mov    0x18(%r12),%rbx
    if(Thd_Dst_Struct->Sched.CPUID_Bind!=CPUID)
ffffffff8021bdfe:	4c 3b 6b 28          	cmp    0x28(%rbx),%r13
ffffffff8021be02:	0f 85 18 03 00 00    	jne    ffffffff8021c120 <_RME_Thd_Time_Xfer+0x440>
        return RME_ERR_PTH_INVSTATE;
    /* See if the destination is in a fault. If yes, cancel the transfer */
    if(Thd_Dst_Struct->Sched.State==RME_THD_FAULT)
ffffffff8021be08:	48 83 7b 38 05       	cmpq   $0x5,0x38(%rbx)
ffffffff8021be0d:	0f 84 20 06 00 00    	je     ffffffff8021c433 <_RME_Thd_Time_Xfer+0x753>
        return RME_ERR_PTH_FAULT;
    
    /* Delegating from a normal thread */
    if(Thd_Src_Struct->Sched.Slices<RME_THD_INF_TIME)
ffffffff8021be13:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff8021be1a:	ff ff 7f 
ffffffff8021be1d:	4c 8b 44 24 08       	mov    0x8(%rsp),%r8
ffffffff8021be22:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021be25:	0f 87 15 02 00 00    	ja     ffffffff8021c040 <_RME_Thd_Time_Xfer+0x360>
        if(Time>=RME_THD_INF_TIME)
            Time_Xfer=Thd_Src_Struct->Sched.Slices;
        /* Delegate some time, if not sufficient, clean up the source time */
        else
        {
            if(Thd_Src_Struct->Sched.Slices>Time)
ffffffff8021be2b:	49 39 d0             	cmp    %rdx,%r8
ffffffff8021be2e:	0f 83 04 02 00 00    	jae    ffffffff8021c038 <_RME_Thd_Time_Xfer+0x358>
ffffffff8021be34:	49 39 c8             	cmp    %rcx,%r8
ffffffff8021be37:	0f 87 fb 01 00 00    	ja     ffffffff8021c038 <_RME_Thd_Time_Xfer+0x358>
                Time_Xfer=Thd_Src_Struct->Sched.Slices;
        }
        
        /* See if we are transferring to an infinite budget thread. If yes, we
         * are revoking timeslices; If not, this is a finite transfer */
        if(Thd_Dst_Struct->Sched.Slices<RME_THD_INF_TIME)
ffffffff8021be3d:	48 8b 4b 30          	mov    0x30(%rbx),%rcx
ffffffff8021be41:	48 be fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rsi
ffffffff8021be48:	ff ff 7f 
ffffffff8021be4b:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021be4e:	77 1a                	ja     ffffffff8021be6a <_RME_Thd_Time_Xfer+0x18a>
        {
            RME_TIME_CHECK(Thd_Dst_Struct->Sched.Slices,Time_Xfer);
ffffffff8021be50:	4c 01 c1             	add    %r8,%rcx
ffffffff8021be53:	0f 82 e6 05 00 00    	jb     ffffffff8021c43f <_RME_Thd_Time_Xfer+0x75f>
ffffffff8021be59:	48 39 f1             	cmp    %rsi,%rcx
ffffffff8021be5c:	0f 87 dd 05 00 00    	ja     ffffffff8021c43f <_RME_Thd_Time_Xfer+0x75f>
            Thd_Dst_Struct->Sched.Slices+=Time_Xfer;
ffffffff8021be62:	48 89 4b 30          	mov    %rcx,0x30(%rbx)
ffffffff8021be66:	48 8b 50 30          	mov    0x30(%rax),%rdx
        }
        
        Thd_Src_Struct->Sched.Slices-=Time_Xfer;
ffffffff8021be6a:	4c 29 c2             	sub    %r8,%rdx
ffffffff8021be6d:	48 89 50 30          	mov    %rdx,0x30(%rax)
    }
    
    /* Is the source time used up? If yes, delete it from the run queue, and notify its 
     * parent. If it is not in the run queue, The state of the source must be BLOCKED. We
     * notify its parent when we are waking it up in the future, so do nothing here */
    if(Thd_Src_Struct->Sched.Slices==0)
ffffffff8021be71:	48 85 d2             	test   %rdx,%rdx
ffffffff8021be74:	0f 84 1e 02 00 00    	je     ffffffff8021c098 <_RME_Thd_Time_Xfer+0x3b8>
ffffffff8021be7a:	48 8b 73 30          	mov    0x30(%rbx),%rsi
            _RME_Run_Notif(Thd_Src_Struct);
        }
    }
    
    /* Now save the system call return value to the caller stack - how much time the destination have now */
    __RME_Set_Syscall_Retval(Reg,Thd_Dst_Struct->Sched.Slices);  
ffffffff8021be7e:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021be81:	e8 ba 7e ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
    
    /* See what was the state of the destination thread. If it is timeout, then
     * activate it. If it is other state, then leave it alone */
    if(Thd_Dst_Struct->Sched.State==RME_THD_TIMEOUT)
ffffffff8021be86:	48 83 7b 38 03       	cmpq   $0x3,0x38(%rbx)
ffffffff8021be8b:	0f 84 bf 02 00 00    	je     ffffffff8021c150 <_RME_Thd_Time_Xfer+0x470>
    }
    
    /* See we are timeout because we did this delegation(If the current thread
     * is timeout, it is sure that it became timeout in this function). It is not
     * possible that the current thread be BLOCKED here */
    if(RME_Cur_Thd[CPUID]->Sched.State==RME_THD_TIMEOUT)
ffffffff8021be91:	4e 8b 24 ed 00 28 22 	mov    -0x7fddd800(,%r13,8),%r12
ffffffff8021be98:	80 
ffffffff8021be99:	49 83 7c 24 38 03    	cmpq   $0x3,0x38(%r12)
ffffffff8021be9f:	0f 84 6b 03 00 00    	je     ffffffff8021c210 <_RME_Thd_Time_Xfer+0x530>
        Thd_Dst_Struct->Sched.State=RME_THD_RUNNING;
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
        RME_Cur_Thd[CPUID]=Thd_Dst_Struct;
    }
    
    return 0;
ffffffff8021bea5:	31 c0                	xor    %eax,%eax
        Thd_Dst_Struct->Sched.State=RME_THD_RUNNING;
        RME_Cur_Thd[CPUID]=Thd_Dst_Struct;
    }
    /* See if the delegated thread have a higher priority and is ready, thus it
     * will preempt us */
    else if((Thd_Dst_Struct->Sched.State==RME_THD_READY)&&
ffffffff8021bea7:	48 83 7b 38 01       	cmpq   $0x1,0x38(%rbx)
ffffffff8021beac:	0f 85 75 01 00 00    	jne    ffffffff8021c027 <_RME_Thd_Time_Xfer+0x347>
ffffffff8021beb2:	49 8b 7c 24 48       	mov    0x48(%r12),%rdi
ffffffff8021beb7:	48 39 7b 48          	cmp    %rdi,0x48(%rbx)
ffffffff8021bebb:	0f 86 66 01 00 00    	jbe    ffffffff8021c027 <_RME_Thd_Time_Xfer+0x347>
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff8021bec1:	49 8b bc 24 80 00 00 	mov    0x80(%r12),%rdi
ffffffff8021bec8:	00 
ffffffff8021bec9:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021becc:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8021bed1:	e8 ea 7e ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Save(Reg, &(Curr_Thd->Cur_Reg->Cop_Reg));
ffffffff8021bed6:	49 8b 84 24 80 00 00 	mov    0x80(%r12),%rax
ffffffff8021bedd:	00 
ffffffff8021bede:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021bee1:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff8021bee8:	e8 c3 7f ff ff       	callq  ffffffff80213eb0 <__RME_Thd_Cop_Save>
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
ffffffff8021beed:	48 8b b3 80 00 00 00 	mov    0x80(%rbx),%rsi
ffffffff8021bef4:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021bef7:	e8 c4 7e ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));
ffffffff8021befc:	48 8b 83 80 00 00 00 	mov    0x80(%rbx),%rax
ffffffff8021bf03:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021bf06:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff8021bf0d:	e8 ae 7f ff ff       	callq  ffffffff80213ec0 <__RME_Thd_Cop_Restore>

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff8021bf12:	49 8b 8c 24 c0 09 00 	mov    0x9c0(%r12),%rcx
ffffffff8021bf19:	00 
ffffffff8021bf1a:	49 8d 94 24 b8 09 00 	lea    0x9b8(%r12),%rdx
ffffffff8021bf21:	00 
ffffffff8021bf22:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8021bf27:	48 39 d1             	cmp    %rdx,%rcx
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021bf2a:	48 8b 93 c0 09 00 00 	mov    0x9c0(%rbx),%rdx
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff8021bf31:	0f 84 99 03 00 00    	je     ffffffff8021c2d0 <_RME_Thd_Time_Xfer+0x5f0>
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021bf37:	48 8d b3 b8 09 00 00 	lea    0x9b8(%rbx),%rsi
ffffffff8021bf3e:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021bf41:	48 0f 44 d0          	cmove  %rax,%rdx
    
    if(Curr_Inv_Top==0)
ffffffff8021bf45:	48 85 c9             	test   %rcx,%rcx
ffffffff8021bf48:	0f 84 90 03 00 00    	je     ffffffff8021c2de <_RME_Thd_Time_Xfer+0x5fe>
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
ffffffff8021bf4e:	48 8b 41 10          	mov    0x10(%rcx),%rax
ffffffff8021bf52:	48 8b 40 10          	mov    0x10(%rax),%rax
    
    if(Next_Inv_Top==0)
ffffffff8021bf56:	48 85 d2             	test   %rdx,%rdx
ffffffff8021bf59:	0f 84 79 04 00 00    	je     ffffffff8021c3d8 <_RME_Thd_Time_Xfer+0x6f8>
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
    else
        Next_Pgtbl=Next_Inv_Top->Proc->Pgtbl;
ffffffff8021bf5f:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021bf63:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    
    if(RME_CAP_GETOBJ(Curr_Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Next_Pgtbl,ptr_t))
ffffffff8021bf67:	48 8b 7a 18          	mov    0x18(%rdx),%rdi
ffffffff8021bf6b:	48 39 78 18          	cmp    %rdi,0x18(%rax)
ffffffff8021bf6f:	74 05                	je     ffffffff8021bf76 <_RME_Thd_Time_Xfer+0x296>
        __RME_Pgtbl_Set(RME_CAP_GETOBJ(Next_Pgtbl,ptr_t));
ffffffff8021bf71:	e8 6a 83 ff ff       	callq  ffffffff802142e0 <__RME_Pgtbl_Set>
     * will preempt us */
    else if((Thd_Dst_Struct->Sched.State==RME_THD_READY)&&
            (Thd_Dst_Struct->Sched.Prio>RME_Cur_Thd[CPUID]->Sched.Prio))
    {
        _RME_Run_Swt(Reg, RME_Cur_Thd[CPUID], Thd_Dst_Struct);
        Thd_Dst_Struct->Sched.State=RME_THD_RUNNING;
ffffffff8021bf76:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff8021bf7d:	00 
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
ffffffff8021bf7e:	4a 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%r13,8),%rax
ffffffff8021bf85:	80 
ffffffff8021bf86:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff8021bf8d:	00 
        RME_Cur_Thd[CPUID]=Thd_Dst_Struct;
ffffffff8021bf8e:	4a 89 1c ed 00 28 22 	mov    %rbx,-0x7fddd800(,%r13,8)
ffffffff8021bf95:	80 
    }
    
    return 0;
ffffffff8021bf96:	31 c0                	xor    %eax,%eax
ffffffff8021bf98:	e9 8a 00 00 00       	jmpq   ffffffff8021c027 <_RME_Thd_Time_Xfer+0x347>
ffffffff8021bf9d:	0f 1f 00             	nopl   (%rax)
    /* We may allow transferring infinite time here */
    if(Time==0)
        return RME_ERR_PTH_INVSTATE;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Dst,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Dst);
ffffffff8021bfa0:	48 8b 77 28          	mov    0x28(%rdi),%rsi
ffffffff8021bfa4:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8021bfa7:	0f 86 8b 01 00 00    	jbe    ffffffff8021c138 <_RME_Thd_Time_Xfer+0x458>
ffffffff8021bfad:	48 8b 5f 18          	mov    0x18(%rdi),%rbx
ffffffff8021bfb1:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021bfb5:	4c 8d 24 1a          	lea    (%rdx,%rbx,1),%r12
ffffffff8021bfb9:	e9 9f fd ff ff       	jmpq   ffffffff8021bd5d <_RME_Thd_Time_Xfer+0x7d>
ffffffff8021bfbe:	66 90                	xchg   %ax,%ax
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Src,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Src);
ffffffff8021bfc0:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021bfc3:	48 c1 fa 10          	sar    $0x10,%rdx
ffffffff8021bfc7:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021bfca:	0f 83 68 01 00 00    	jae    ffffffff8021c138 <_RME_Thd_Time_Xfer+0x458>
ffffffff8021bfd0:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021bfd4:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff8021bfdb:	80 00 00 
ffffffff8021bfde:	48 01 d3             	add    %rdx,%rbx
ffffffff8021bfe1:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8021bfe4:	48 85 f2             	test   %rsi,%rdx
ffffffff8021bfe7:	0f 85 03 02 00 00    	jne    ffffffff8021c1f0 <_RME_Thd_Time_Xfer+0x510>
ffffffff8021bfed:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021bff1:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021bff5:	75 29                	jne    ffffffff8021c020 <_RME_Thd_Time_Xfer+0x340>
ffffffff8021bff7:	81 e1 ff 7f 00 00    	and    $0x7fff,%ecx
ffffffff8021bffd:	48 3b 4b 28          	cmp    0x28(%rbx),%rcx
ffffffff8021c001:	0f 83 31 01 00 00    	jae    ffffffff8021c138 <_RME_Thd_Time_Xfer+0x458>
ffffffff8021c007:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021c00b:	48 03 4b 18          	add    0x18(%rbx),%rcx
ffffffff8021c00f:	48 89 cb             	mov    %rcx,%rbx
ffffffff8021c012:	e9 74 fd ff ff       	jmpq   ffffffff8021bd8b <_RME_Thd_Time_Xfer+0xab>
ffffffff8021c017:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021c01e:	00 00 
    /* We may allow transferring infinite time here */
    if(Time==0)
        return RME_ERR_PTH_INVSTATE;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Dst,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Dst);
ffffffff8021c020:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
        RME_Cur_Thd[CPUID]=Thd_Dst_Struct;
    }
    
    return 0;
}
ffffffff8021c027:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021c02b:	5b                   	pop    %rbx
ffffffff8021c02c:	5d                   	pop    %rbp
ffffffff8021c02d:	41 5c                	pop    %r12
ffffffff8021c02f:	41 5d                	pop    %r13
ffffffff8021c031:	c3                   	retq   
ffffffff8021c032:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
        if(Time>=RME_THD_INF_TIME)
            Time_Xfer=Thd_Src_Struct->Sched.Slices;
        /* Delegate some time, if not sufficient, clean up the source time */
        else
        {
            if(Thd_Src_Struct->Sched.Slices>Time)
ffffffff8021c038:	49 89 d0             	mov    %rdx,%r8
ffffffff8021c03b:	e9 fd fd ff ff       	jmpq   ffffffff8021be3d <_RME_Thd_Time_Xfer+0x15d>
    }
    /* Delegating from init or infinite thread */
    else
    {
        /* Infinite transfer to the destination */
        if(Time>=RME_THD_INF_TIME)
ffffffff8021c040:	49 39 c8             	cmp    %rcx,%r8
ffffffff8021c043:	0f 86 77 01 00 00    	jbe    ffffffff8021c1c0 <_RME_Thd_Time_Xfer+0x4e0>
        {
            /* This transfer will revoke the infinite budget */
            if(Time==RME_THD_INIT_TIME)
            {
                /* Will not revoke, source is an init thread */
                if(Thd_Src_Struct->Sched.Slices!=RME_THD_INIT_TIME)
ffffffff8021c049:	48 b9 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rcx
ffffffff8021c050:	ff ff 7f 
ffffffff8021c053:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021c056:	0f 84 89 03 00 00    	je     ffffffff8021c3e5 <_RME_Thd_Time_Xfer+0x705>
ffffffff8021c05c:	49 39 c8             	cmp    %rcx,%r8
ffffffff8021c05f:	0f 85 80 03 00 00    	jne    ffffffff8021c3e5 <_RME_Thd_Time_Xfer+0x705>
                    Thd_Src_Struct->Sched.Slices=0;
ffffffff8021c065:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021c06c:	00 
            }
            /* Set destination to infinite if it is not an init thread */
            if(Thd_Dst_Struct->Sched.Slices<RME_THD_INF_TIME)
ffffffff8021c06d:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8021c074:	ff ff 7f 
ffffffff8021c077:	48 39 53 30          	cmp    %rdx,0x30(%rbx)
ffffffff8021c07b:	77 1b                	ja     ffffffff8021c098 <_RME_Thd_Time_Xfer+0x3b8>
                Thd_Dst_Struct->Sched.Slices=RME_THD_INF_TIME;
ffffffff8021c07d:	48 bf fe ff ff ff ff 	movabs $0x7ffffffffffffffe,%rdi
ffffffff8021c084:	ff ff 7f 
ffffffff8021c087:	48 89 7b 30          	mov    %rdi,0x30(%rbx)
ffffffff8021c08b:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8021c08f:	e9 dd fd ff ff       	jmpq   ffffffff8021be71 <_RME_Thd_Time_Xfer+0x191>
ffffffff8021c094:	0f 1f 40 00          	nopl   0x0(%rax)
    /* Is the source time used up? If yes, delete it from the run queue, and notify its 
     * parent. If it is not in the run queue, The state of the source must be BLOCKED. We
     * notify its parent when we are waking it up in the future, so do nothing here */
    if(Thd_Src_Struct->Sched.Slices==0)
    {
        if((Thd_Src_Struct->Sched.State==RME_THD_RUNNING)||(Thd_Src_Struct->Sched.State==RME_THD_READY))
ffffffff8021c098:	48 83 78 38 01       	cmpq   $0x1,0x38(%rax)
ffffffff8021c09d:	0f 87 d7 fd ff ff    	ja     ffffffff8021be7a <_RME_Thd_Time_Xfer+0x19a>
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021c0a3:	48 8b 50 28          	mov    0x28(%rax),%rdx
    
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021c0a7:	48 8b 78 08          	mov    0x8(%rax),%rdi
ffffffff8021c0ab:	48 8b 30             	mov    (%rax),%rsi
ret_t _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff8021c0ae:	48 8b 48 48          	mov    0x48(%rax),%rcx
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff8021c0b2:	48 89 37             	mov    %rsi,(%rdi)
    Prev->Next=(struct RME_List*)Next;
ffffffff8021c0b5:	48 89 7e 08          	mov    %rdi,0x8(%rsi)
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
ffffffff8021c0b9:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021c0bc:	48 c1 e6 0a          	shl    $0xa,%rsi
ffffffff8021c0c0:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021c0c3:	48 8d 34 d6          	lea    (%rsi,%rdx,8),%rsi
ffffffff8021c0c7:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff8021c0cb:	48 8d b4 37 20 30 22 	lea    -0x7fddcfe0(%rdi,%rsi,1),%rsi
ffffffff8021c0d2:	80 
ffffffff8021c0d3:	48 8d 7e 08          	lea    0x8(%rsi),%rdi
ffffffff8021c0d7:	48 39 7e 10          	cmp    %rdi,0x10(%rsi)
ffffffff8021c0db:	0f 84 bf 01 00 00    	je     ffffffff8021c2a0 <_RME_Thd_Time_Xfer+0x5c0>
Return      : ret_t - Always 0.
******************************************************************************/
ret_t _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8021c0e1:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8021c0e5:	48 8d 48 10          	lea    0x10(%rax),%rcx
    if(Thd_Src_Struct->Sched.Slices==0)
    {
        if((Thd_Src_Struct->Sched.State==RME_THD_RUNNING)||(Thd_Src_Struct->Sched.State==RME_THD_READY))
        {
            _RME_Run_Del(Thd_Src_Struct);
            Thd_Src_Struct->Sched.State=RME_THD_TIMEOUT;
ffffffff8021c0e9:	48 c7 40 38 03 00 00 	movq   $0x3,0x38(%rax)
ffffffff8021c0f0:	00 
Return      : ret_t - Always 0.
******************************************************************************/
ret_t _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8021c0f1:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021c0f4:	0f 85 80 fd ff ff    	jne    ffffffff8021be7a <_RME_Thd_Time_Xfer+0x19a>
    {
        __RME_List_Ins(&(Thd->Sched.Notif),
                       Thd->Sched.Parent->Sched.Event.Prev,
                       &(Thd->Sched.Parent->Sched.Event));
ffffffff8021c0fa:	48 8b 48 68          	mov    0x68(%rax),%rcx
ret_t _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
    {
        __RME_List_Ins(&(Thd->Sched.Notif),
ffffffff8021c0fe:	48 8b 71 70          	mov    0x70(%rcx),%rsi
                       Thd->Sched.Parent->Sched.Event.Prev,
                       &(Thd->Sched.Parent->Sched.Event));
ffffffff8021c102:	48 8d 79 70          	lea    0x70(%rcx),%rdi
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff8021c106:	48 89 51 70          	mov    %rdx,0x70(%rcx)
    New->Next=(struct RME_List*)Next;
ffffffff8021c10a:	48 89 78 18          	mov    %rdi,0x18(%rax)
    New->Prev=(struct RME_List*)Prev;
ffffffff8021c10e:	48 89 70 10          	mov    %rsi,0x10(%rax)
    Prev->Next=(struct RME_List*)New;
ffffffff8021c112:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8021c116:	e9 5f fd ff ff       	jmpq   ffffffff8021be7a <_RME_Thd_Time_Xfer+0x19a>
ffffffff8021c11b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
        RME_Cur_Thd[CPUID]=Thd_Dst_Struct;
    }
    
    return 0;
}
ffffffff8021c120:	48 83 c4 18          	add    $0x18,%rsp

    /* Check if the two threads are on the core that is accordance with what we are on */
    CPUID=RME_CPUID();
    Thd_Src_Struct=RME_CAP_GETOBJ(Thd_Src,struct RME_Thd_Struct*);
    if(Thd_Src_Struct->Sched.CPUID_Bind!=CPUID)
        return RME_ERR_PTH_INVSTATE;
ffffffff8021c124:	48 c7 c0 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rax
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
        RME_Cur_Thd[CPUID]=Thd_Dst_Struct;
    }
    
    return 0;
}
ffffffff8021c12b:	5b                   	pop    %rbx
ffffffff8021c12c:	5d                   	pop    %rbp
ffffffff8021c12d:	41 5c                	pop    %r12
ffffffff8021c12f:	41 5d                	pop    %r13
ffffffff8021c131:	c3                   	retq   
ffffffff8021c132:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
ffffffff8021c138:	48 83 c4 18          	add    $0x18,%rsp
    /* We may allow transferring infinite time here */
    if(Time==0)
        return RME_ERR_PTH_INVSTATE;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Dst,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Dst);
ffffffff8021c13c:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
        RME_Cur_Thd[CPUID]=Thd_Dst_Struct;
    }
    
    return 0;
}
ffffffff8021c143:	5b                   	pop    %rbx
ffffffff8021c144:	5d                   	pop    %rbp
ffffffff8021c145:	41 5c                	pop    %r12
ffffffff8021c147:	41 5d                	pop    %r13
ffffffff8021c149:	c3                   	retq   
ffffffff8021c14a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021c150:	48 8b 43 28          	mov    0x28(%rbx),%rax
ret_t _RME_Run_Ins(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff8021c154:	48 8b 4b 48          	mov    0x48(%rbx),%rcx
    
    /* See what was the state of the destination thread. If it is timeout, then
     * activate it. If it is other state, then leave it alone */
    if(Thd_Dst_Struct->Sched.State==RME_THD_TIMEOUT)
    {
        Thd_Dst_Struct->Sched.State=RME_THD_READY;
ffffffff8021c158:	48 c7 43 38 01 00 00 	movq   $0x1,0x38(%rbx)
ffffffff8021c15f:	00 
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
ffffffff8021c160:	48 89 c2             	mov    %rax,%rdx
ffffffff8021c163:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021c166:	48 c1 e2 0a          	shl    $0xa,%rdx
ffffffff8021c16a:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8021c16e:	48 8d 14 c2          	lea    (%rdx,%rax,8),%rdx
ffffffff8021c172:	48 8d 94 16 20 30 22 	lea    -0x7fddcfe0(%rsi,%rdx,1),%rdx
ffffffff8021c179:	80 
ffffffff8021c17a:	48 8b 72 08          	mov    0x8(%rdx),%rsi
ffffffff8021c17e:	48 8d 7a 08          	lea    0x8(%rdx),%rdi
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff8021c182:	48 89 5a 08          	mov    %rbx,0x8(%rdx)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021c186:	48 89 ca             	mov    %rcx,%rdx
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
ffffffff8021c189:	48 89 7b 08          	mov    %rdi,0x8(%rbx)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021c18d:	48 c1 ea 06          	shr    $0x6,%rdx
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
    New->Prev=(struct RME_List*)Prev;
ffffffff8021c191:	48 89 33             	mov    %rsi,(%rbx)
    Prev->Next=(struct RME_List*)New;
ffffffff8021c194:	48 89 5e 08          	mov    %rbx,0x8(%rsi)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021c198:	48 89 c6             	mov    %rax,%rsi
ffffffff8021c19b:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff8021c19f:	48 01 f0             	add    %rsi,%rax
ffffffff8021c1a2:	48 01 d0             	add    %rdx,%rax
ffffffff8021c1a5:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021c1aa:	d3 e2                	shl    %cl,%edx
ffffffff8021c1ac:	48 63 d2             	movslq %edx,%rdx
ffffffff8021c1af:	48 09 14 c5 20 30 22 	or     %rdx,-0x7fddcfe0(,%rax,8)
ffffffff8021c1b6:	80 
ffffffff8021c1b7:	e9 d5 fc ff ff       	jmpq   ffffffff8021be91 <_RME_Thd_Time_Xfer+0x1b1>
ffffffff8021c1bc:	0f 1f 40 00          	nopl   0x0(%rax)
                Thd_Dst_Struct->Sched.Slices=RME_THD_INF_TIME;
        }
        else
        {
            /* Just increase the budget of the other thread - check first */
            RME_TIME_CHECK(Thd_Dst_Struct->Sched.Slices,Time);
ffffffff8021c1c0:	48 8b 53 30          	mov    0x30(%rbx),%rdx
ffffffff8021c1c4:	48 b9 fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rcx
ffffffff8021c1cb:	ff ff 7f 
ffffffff8021c1ce:	49 01 d0             	add    %rdx,%r8
ffffffff8021c1d1:	49 39 c8             	cmp    %rcx,%r8
ffffffff8021c1d4:	0f 87 65 02 00 00    	ja     ffffffff8021c43f <_RME_Thd_Time_Xfer+0x75f>
ffffffff8021c1da:	4c 39 c2             	cmp    %r8,%rdx
ffffffff8021c1dd:	0f 87 5c 02 00 00    	ja     ffffffff8021c43f <_RME_Thd_Time_Xfer+0x75f>
            Thd_Dst_Struct->Sched.Slices+=Time;
ffffffff8021c1e3:	4c 89 43 30          	mov    %r8,0x30(%rbx)
ffffffff8021c1e7:	48 8b 50 30          	mov    0x30(%rax),%rdx
ffffffff8021c1eb:	e9 81 fc ff ff       	jmpq   ffffffff8021be71 <_RME_Thd_Time_Xfer+0x191>
    /* We may allow transferring infinite time here */
    if(Time==0)
        return RME_ERR_PTH_INVSTATE;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Dst,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Dst);
ffffffff8021c1f0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021c1f7:	e9 2b fe ff ff       	jmpq   ffffffff8021c027 <_RME_Thd_Time_Xfer+0x347>
ffffffff8021c1fc:	0f 1f 40 00          	nopl   0x0(%rax)
    RME_CAPTBL_GETCAP(Captbl,Cap_Thd_Src,RME_CAP_THD,struct RME_Cap_Thd*,Thd_Src);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Thd_Dst,RME_THD_FLAG_XFER_DST);
ffffffff8021c200:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021c207:	e9 1b fe ff ff       	jmpq   ffffffff8021c027 <_RME_Thd_Time_Xfer+0x347>
ffffffff8021c20c:	0f 1f 40 00          	nopl   0x0(%rax)
    ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=RME_PRIO_WORD_NUM-1;Count>=0;Count--)
    {
        if(RME_Run[CPUID].Bitmap[Count]!=0)
ffffffff8021c210:	4c 89 e8             	mov    %r13,%rax
ffffffff8021c213:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff8021c217:	4a 8d 1c e8          	lea    (%rax,%r13,8),%rbx
ffffffff8021c21b:	48 8b bb 20 30 22 80 	mov    -0x7fddcfe0(%rbx),%rdi
ffffffff8021c222:	48 85 ff             	test   %rdi,%rdi
ffffffff8021c225:	0f 85 cd 00 00 00    	jne    ffffffff8021c2f8 <_RME_Thd_Time_Xfer+0x618>
            break;
    }
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);
ffffffff8021c22b:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021c232:	e8 d9 ac ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c237:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff8021c23e:	e8 cd ac ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c243:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021c24a:	e8 c1 ac ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c24f:	bf cb 00 00 00       	mov    $0xcb,%edi
ffffffff8021c254:	e8 77 aa ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021c259:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021c260:	e8 ab ac ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c265:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8021c26c:	e8 9f ac ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c271:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021c278:	e8 93 ac ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c27d:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff8021c284:	e8 87 ac ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c289:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021c290:	e8 7b ac ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c295:	eb fe                	jmp    ffffffff8021c295 <_RME_Thd_Time_Xfer+0x5b5>
ffffffff8021c297:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021c29e:	00 00 
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
        RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]&=~(1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1)));
ffffffff8021c2a0:	48 89 d7             	mov    %rdx,%rdi
ffffffff8021c2a3:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021c2a6:	48 c1 e7 07          	shl    $0x7,%rdi
ffffffff8021c2aa:	48 c1 ee 06          	shr    $0x6,%rsi
ffffffff8021c2ae:	48 01 fa             	add    %rdi,%rdx
ffffffff8021c2b1:	48 01 d6             	add    %rdx,%rsi
ffffffff8021c2b4:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021c2b9:	d3 e2                	shl    %cl,%edx
ffffffff8021c2bb:	f7 d2                	not    %edx
ffffffff8021c2bd:	48 63 d2             	movslq %edx,%rdx
ffffffff8021c2c0:	48 21 14 f5 20 30 22 	and    %rdx,-0x7fddcfe0(,%rsi,8)
ffffffff8021c2c7:	80 
ffffffff8021c2c8:	e9 14 fe ff ff       	jmpq   ffffffff8021c0e1 <_RME_Thd_Time_Xfer+0x401>
ffffffff8021c2cd:	0f 1f 00             	nopl   (%rax)
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021c2d0:	48 8d 8b b8 09 00 00 	lea    0x9b8(%rbx),%rcx
ffffffff8021c2d7:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021c2da:	48 0f 44 d0          	cmove  %rax,%rdx
    
    if(Curr_Inv_Top==0)
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
ffffffff8021c2de:	49 8b 44 24 60       	mov    0x60(%r12),%rax
ffffffff8021c2e3:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021c2e7:	e9 6a fc ff ff       	jmpq   ffffffff8021bf56 <_RME_Thd_Time_Xfer+0x276>
ffffffff8021c2ec:	0f 1f 40 00          	nopl   0x0(%rax)
    ptr_t CPUID;
    ptr_t Time_Xfer;
    
    /* We may allow transferring infinite time here */
    if(Time==0)
        return RME_ERR_PTH_INVSTATE;
ffffffff8021c2f0:	48 c7 c0 e8 ff ff ff 	mov    $0xffffffffffffffe8,%rax
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
        RME_Cur_Thd[CPUID]=Thd_Dst_Struct;
    }
    
    return 0;
}
ffffffff8021c2f7:	c3                   	retq   
            break;
    }
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);
    /* Get the first "1"'s position in the word */
    Prio=__RME_MSB_Get(RME_Run[CPUID].Bitmap[Count]);
ffffffff8021c2f8:	e8 c3 f5 fe ff       	callq  ffffffff8020b8c0 <__RME_MSB_Get>
     * is timeout, it is sure that it became timeout in this function). It is not
     * possible that the current thread be BLOCKED here */
    if(RME_Cur_Thd[CPUID]->Sched.State==RME_THD_TIMEOUT)
    {
        Thd_Dst_Struct=_RME_Run_High(CPUID);
        _RME_Run_Swt(Reg, RME_Cur_Thd[CPUID], Thd_Dst_Struct);
ffffffff8021c2fd:	4e 8b 24 ed 00 28 22 	mov    -0x7fddd800(,%r13,8),%r12
ffffffff8021c304:	80 
    RME_ASSERT(Count>=0);
    /* Get the first "1"'s position in the word */
    Prio=__RME_MSB_Get(RME_Run[CPUID].Bitmap[Count]);
    Prio+=Count<<RME_WORD_ORDER;
    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)RME_Run[CPUID].List[Prio].Next;
ffffffff8021c305:	48 c1 e0 04          	shl    $0x4,%rax
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff8021c309:	48 89 ee             	mov    %rbp,%rsi
    RME_ASSERT(Count>=0);
    /* Get the first "1"'s position in the word */
    Prio=__RME_MSB_Get(RME_Run[CPUID].Bitmap[Count]);
    Prio+=Count<<RME_WORD_ORDER;
    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)RME_Run[CPUID].List[Prio].Next;
ffffffff8021c30c:	48 8b 9c 03 30 30 22 	mov    -0x7fddcfd0(%rbx,%rax,1),%rbx
ffffffff8021c313:	80 
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff8021c314:	49 8b bc 24 80 00 00 	mov    0x80(%r12),%rdi
ffffffff8021c31b:	00 
ffffffff8021c31c:	e8 9f 7a ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Save(Reg, &(Curr_Thd->Cur_Reg->Cop_Reg));
ffffffff8021c321:	49 8b 84 24 80 00 00 	mov    0x80(%r12),%rax
ffffffff8021c328:	00 
ffffffff8021c329:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021c32c:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff8021c333:	e8 78 7b ff ff       	callq  ffffffff80213eb0 <__RME_Thd_Cop_Save>
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
ffffffff8021c338:	48 8b b3 80 00 00 00 	mov    0x80(%rbx),%rsi
ffffffff8021c33f:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021c342:	e8 79 7a ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));
ffffffff8021c347:	48 8b 83 80 00 00 00 	mov    0x80(%rbx),%rax
ffffffff8021c34e:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021c351:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff8021c358:	e8 63 7b ff ff       	callq  ffffffff80213ec0 <__RME_Thd_Cop_Restore>

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff8021c35d:	49 8b 94 24 c0 09 00 	mov    0x9c0(%r12),%rdx
ffffffff8021c364:	00 
ffffffff8021c365:	49 8d 84 24 b8 09 00 	lea    0x9b8(%r12),%rax
ffffffff8021c36c:	00 
ffffffff8021c36d:	48 39 c2             	cmp    %rax,%rdx
ffffffff8021c370:	0f 84 95 00 00 00    	je     ffffffff8021c40b <_RME_Thd_Time_Xfer+0x72b>
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021c376:	48 8b 83 c0 09 00 00 	mov    0x9c0(%rbx),%rax
ffffffff8021c37d:	48 8d 8b b8 09 00 00 	lea    0x9b8(%rbx),%rcx
ffffffff8021c384:	48 39 c8             	cmp    %rcx,%rax
ffffffff8021c387:	b9 00 00 00 00       	mov    $0x0,%ecx
ffffffff8021c38c:	48 0f 44 c1          	cmove  %rcx,%rax
    
    if(Curr_Inv_Top==0)
ffffffff8021c390:	48 85 d2             	test   %rdx,%rdx
ffffffff8021c393:	0f 84 8c 00 00 00    	je     ffffffff8021c425 <_RME_Thd_Time_Xfer+0x745>
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
ffffffff8021c399:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021c39d:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    
    if(Next_Inv_Top==0)
ffffffff8021c3a1:	48 85 c0             	test   %rax,%rax
ffffffff8021c3a4:	74 5b                	je     ffffffff8021c401 <_RME_Thd_Time_Xfer+0x721>
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
    else
        Next_Pgtbl=Next_Inv_Top->Proc->Pgtbl;
ffffffff8021c3a6:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021c3aa:	48 8b 40 10          	mov    0x10(%rax),%rax
    
    if(RME_CAP_GETOBJ(Curr_Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Next_Pgtbl,ptr_t))
ffffffff8021c3ae:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8021c3b2:	48 39 7a 18          	cmp    %rdi,0x18(%rdx)
ffffffff8021c3b6:	74 05                	je     ffffffff8021c3bd <_RME_Thd_Time_Xfer+0x6dd>
        __RME_Pgtbl_Set(RME_CAP_GETOBJ(Next_Pgtbl,ptr_t));
ffffffff8021c3b8:	e8 23 7f ff ff       	callq  ffffffff802142e0 <__RME_Pgtbl_Set>
     * possible that the current thread be BLOCKED here */
    if(RME_Cur_Thd[CPUID]->Sched.State==RME_THD_TIMEOUT)
    {
        Thd_Dst_Struct=_RME_Run_High(CPUID);
        _RME_Run_Swt(Reg, RME_Cur_Thd[CPUID], Thd_Dst_Struct);
        Thd_Dst_Struct->Sched.State=RME_THD_RUNNING;
ffffffff8021c3bd:	48 c7 43 38 00 00 00 	movq   $0x0,0x38(%rbx)
ffffffff8021c3c4:	00 
        Thd_Dst_Struct->Sched.State=RME_THD_RUNNING;
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
        RME_Cur_Thd[CPUID]=Thd_Dst_Struct;
    }
    
    return 0;
ffffffff8021c3c5:	31 c0                	xor    %eax,%eax
    if(RME_Cur_Thd[CPUID]->Sched.State==RME_THD_TIMEOUT)
    {
        Thd_Dst_Struct=_RME_Run_High(CPUID);
        _RME_Run_Swt(Reg, RME_Cur_Thd[CPUID], Thd_Dst_Struct);
        Thd_Dst_Struct->Sched.State=RME_THD_RUNNING;
        RME_Cur_Thd[CPUID]=Thd_Dst_Struct;
ffffffff8021c3c7:	4a 89 1c ed 00 28 22 	mov    %rbx,-0x7fddd800(,%r13,8)
ffffffff8021c3ce:	80 
ffffffff8021c3cf:	e9 53 fc ff ff       	jmpq   ffffffff8021c027 <_RME_Thd_Time_Xfer+0x347>
ffffffff8021c3d4:	0f 1f 40 00          	nopl   0x0(%rax)
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
    
    if(Next_Inv_Top==0)
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
ffffffff8021c3d8:	48 8b 53 60          	mov    0x60(%rbx),%rdx
ffffffff8021c3dc:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021c3e0:	e9 82 fb ff ff       	jmpq   ffffffff8021bf67 <_RME_Thd_Time_Xfer+0x287>
                /* Will not revoke, source is an init thread */
                if(Thd_Src_Struct->Sched.Slices!=RME_THD_INIT_TIME)
                    Thd_Src_Struct->Sched.Slices=0;
            }
            /* Set destination to infinite if it is not an init thread */
            if(Thd_Dst_Struct->Sched.Slices<RME_THD_INF_TIME)
ffffffff8021c3e5:	48 8b 73 30          	mov    0x30(%rbx),%rsi
ffffffff8021c3e9:	48 ba fd ff ff ff ff 	movabs $0x7ffffffffffffffd,%rdx
ffffffff8021c3f0:	ff ff 7f 
ffffffff8021c3f3:	48 39 d6             	cmp    %rdx,%rsi
ffffffff8021c3f6:	0f 87 82 fa ff ff    	ja     ffffffff8021be7e <_RME_Thd_Time_Xfer+0x19e>
ffffffff8021c3fc:	e9 7c fc ff ff       	jmpq   ffffffff8021c07d <_RME_Thd_Time_Xfer+0x39d>
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
    
    if(Next_Inv_Top==0)
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
ffffffff8021c401:	48 8b 43 60          	mov    0x60(%rbx),%rax
ffffffff8021c405:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021c409:	eb a3                	jmp    ffffffff8021c3ae <_RME_Thd_Time_Xfer+0x6ce>
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021c40b:	48 8b 83 c0 09 00 00 	mov    0x9c0(%rbx),%rax
ffffffff8021c412:	48 8d 93 b8 09 00 00 	lea    0x9b8(%rbx),%rdx
ffffffff8021c419:	48 39 d0             	cmp    %rdx,%rax
ffffffff8021c41c:	ba 00 00 00 00       	mov    $0x0,%edx
ffffffff8021c421:	48 0f 44 c2          	cmove  %rdx,%rax
    
    if(Curr_Inv_Top==0)
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
ffffffff8021c425:	49 8b 54 24 60       	mov    0x60(%r12),%rdx
ffffffff8021c42a:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021c42e:	e9 6e ff ff ff       	jmpq   ffffffff8021c3a1 <_RME_Thd_Time_Xfer+0x6c1>
    Thd_Dst_Struct=RME_CAP_GETOBJ(Thd_Dst,struct RME_Thd_Struct*);
    if(Thd_Dst_Struct->Sched.CPUID_Bind!=CPUID)
        return RME_ERR_PTH_INVSTATE;
    /* See if the destination is in a fault. If yes, cancel the transfer */
    if(Thd_Dst_Struct->Sched.State==RME_THD_FAULT)
        return RME_ERR_PTH_FAULT;
ffffffff8021c433:	48 c7 c0 e3 ff ff ff 	mov    $0xffffffffffffffe3,%rax
ffffffff8021c43a:	e9 e8 fb ff ff       	jmpq   ffffffff8021c027 <_RME_Thd_Time_Xfer+0x347>
        
        /* See if we are transferring to an infinite budget thread. If yes, we
         * are revoking timeslices; If not, this is a finite transfer */
        if(Thd_Dst_Struct->Sched.Slices<RME_THD_INF_TIME)
        {
            RME_TIME_CHECK(Thd_Dst_Struct->Sched.Slices,Time_Xfer);
ffffffff8021c43f:	48 c7 c0 e4 ff ff ff 	mov    $0xffffffffffffffe4,%rax
ffffffff8021c446:	e9 dc fb ff ff       	jmpq   ffffffff8021c027 <_RME_Thd_Time_Xfer+0x347>
ffffffff8021c44b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff8021c450 <_RME_Thd_Swt>:
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Thd_Swt(struct RME_Cap_Captbl* Captbl, struct RME_Reg_Struct* Reg,
                   cid_t Cap_Thd, ptr_t Full_Yield)
{
ffffffff8021c450:	41 56                	push   %r14
ffffffff8021c452:	41 55                	push   %r13
ffffffff8021c454:	49 89 d6             	mov    %rdx,%r14
ffffffff8021c457:	41 54                	push   %r12
ffffffff8021c459:	55                   	push   %rbp
ffffffff8021c45a:	49 89 fc             	mov    %rdi,%r12
ffffffff8021c45d:	53                   	push   %rbx
ffffffff8021c45e:	49 89 cd             	mov    %rcx,%r13
ffffffff8021c461:	48 89 f3             	mov    %rsi,%rbx
    struct RME_Cap_Thd* Next_Thd_Cap;
    struct RME_Thd_Struct* Next_Thd;
    ptr_t CPUID;
    
    /* See if the scheduler is given the right to pick a thread to run */
    CPUID=RME_CPUID();                                                   
ffffffff8021c464:	e8 d6 f3 fe ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
    if(Cap_Thd!=RME_THD_ARBITRARY)
ffffffff8021c469:	49 83 fe ff          	cmp    $0xffffffffffffffff,%r14
    struct RME_Cap_Thd* Next_Thd_Cap;
    struct RME_Thd_Struct* Next_Thd;
    ptr_t CPUID;
    
    /* See if the scheduler is given the right to pick a thread to run */
    CPUID=RME_CPUID();                                                   
ffffffff8021c46d:	48 89 c5             	mov    %rax,%rbp
    if(Cap_Thd!=RME_THD_ARBITRARY)
ffffffff8021c470:	0f 84 42 03 00 00    	je     ffffffff8021c7b8 <_RME_Thd_Swt+0x368>
    {
        RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Next_Thd_Cap);
ffffffff8021c476:	41 f7 c6 00 80 00 00 	test   $0x8000,%r14d
ffffffff8021c47d:	0f 84 fd 01 00 00    	je     ffffffff8021c680 <_RME_Thd_Swt+0x230>
ffffffff8021c483:	4c 89 f0             	mov    %r14,%rax
ffffffff8021c486:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021c48a:	49 3b 44 24 28       	cmp    0x28(%r12),%rax
ffffffff8021c48f:	0f 83 24 06 00 00    	jae    ffffffff8021cab9 <_RME_Thd_Swt+0x669>
ffffffff8021c495:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021c499:	49 03 44 24 18       	add    0x18(%r12),%rax
ffffffff8021c49e:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff8021c4a5:	80 00 00 
ffffffff8021c4a8:	48 89 c6             	mov    %rax,%rsi
ffffffff8021c4ab:	48 8b 00             	mov    (%rax),%rax
ffffffff8021c4ae:	48 85 c8             	test   %rcx,%rax
ffffffff8021c4b1:	0f 85 f6 05 00 00    	jne    ffffffff8021caad <_RME_Thd_Swt+0x65d>
ffffffff8021c4b7:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021c4bb:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021c4bf:	0f 85 e6 01 00 00    	jne    ffffffff8021c6ab <_RME_Thd_Swt+0x25b>
ffffffff8021c4c5:	4c 89 f2             	mov    %r14,%rdx
ffffffff8021c4c8:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021c4ce:	48 3b 56 28          	cmp    0x28(%rsi),%rdx
ffffffff8021c4d2:	0f 83 e1 05 00 00    	jae    ffffffff8021cab9 <_RME_Thd_Swt+0x669>
ffffffff8021c4d8:	48 89 d0             	mov    %rdx,%rax
ffffffff8021c4db:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021c4df:	48 03 46 18          	add    0x18(%rsi),%rax
ffffffff8021c4e3:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021c4e6:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021c4e9:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021c4ed:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff8021c4f1:	0f 85 b4 01 00 00    	jne    ffffffff8021c6ab <_RME_Thd_Swt+0x25b>
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Next_Thd_Cap,RME_THD_FLAG_SWT);
ffffffff8021c4f7:	48 b9 00 00 00 00 00 	movabs $0x800000000000,%rcx
ffffffff8021c4fe:	80 00 00 
ffffffff8021c501:	48 85 ca             	test   %rcx,%rdx
ffffffff8021c504:	0f 85 a3 05 00 00    	jne    ffffffff8021caad <_RME_Thd_Swt+0x65d>
ffffffff8021c50a:	f6 40 11 02          	testb  $0x2,0x11(%rax)
ffffffff8021c50e:	0f 84 8d 05 00 00    	je     ffffffff8021caa1 <_RME_Thd_Swt+0x651>
        /* See if we can do operation on this core */
        Next_Thd=RME_CAP_GETOBJ(Next_Thd_Cap, struct RME_Thd_Struct*);
ffffffff8021c514:	4c 8b 60 18          	mov    0x18(%rax),%r12
        if(Next_Thd->Sched.CPUID_Bind!=CPUID)
ffffffff8021c518:	49 3b 6c 24 28       	cmp    0x28(%r12),%rbp
ffffffff8021c51d:	0f 85 72 05 00 00    	jne    ffffffff8021ca95 <_RME_Thd_Swt+0x645>
            return RME_ERR_PTH_INVSTATE;
        /* See if we can yield to the thread */
        if(RME_Cur_Thd[CPUID]->Sched.Prio!=Next_Thd->Sched.Prio)
ffffffff8021c523:	48 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rax
ffffffff8021c52a:	80 
ffffffff8021c52b:	48 8b 48 48          	mov    0x48(%rax),%rcx
ffffffff8021c52f:	49 3b 4c 24 48       	cmp    0x48(%r12),%rcx
ffffffff8021c534:	0f 85 4f 05 00 00    	jne    ffffffff8021ca89 <_RME_Thd_Swt+0x639>
            return RME_ERR_PTH_PRIO;
        /* See if the state will allow us to do this */
        if((Next_Thd->Sched.State==RME_THD_BLOCKED)||
ffffffff8021c53a:	49 8b 54 24 38       	mov    0x38(%r12),%rdx
ffffffff8021c53f:	48 8d 72 fe          	lea    -0x2(%rdx),%rsi
ffffffff8021c543:	48 83 fe 01          	cmp    $0x1,%rsi
ffffffff8021c547:	0f 86 48 05 00 00    	jbe    ffffffff8021ca95 <_RME_Thd_Swt+0x645>
           (Next_Thd->Sched.State==RME_THD_TIMEOUT))
            return RME_ERR_PTH_INVSTATE;
        /* See if the target is in a faulty state */
        if(Next_Thd->Sched.State==RME_THD_FAULT)
ffffffff8021c54d:	48 83 fa 05          	cmp    $0x5,%rdx
ffffffff8021c551:	0f 84 26 05 00 00    	je     ffffffff8021ca7d <_RME_Thd_Swt+0x62d>
            return RME_ERR_PTH_FAULT;
        
        /* See if we need to give up all our timeslices in this yield */
        if((Full_Yield!=0)&&(RME_Cur_Thd[CPUID]->Sched.Slices!=RME_THD_INIT_TIME))
ffffffff8021c557:	4d 85 ed             	test   %r13,%r13
ffffffff8021c55a:	0f 84 60 01 00 00    	je     ffffffff8021c6c0 <_RME_Thd_Swt+0x270>
ffffffff8021c560:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff8021c567:	ff ff 7f 
ffffffff8021c56a:	48 39 50 30          	cmp    %rdx,0x30(%rax)
ffffffff8021c56e:	0f 84 4c 01 00 00    	je     ffffffff8021c6c0 <_RME_Thd_Swt+0x270>
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021c574:	48 8b 50 28          	mov    0x28(%rax),%rdx
    
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021c578:	48 8b 70 08          	mov    0x8(%rax),%rsi
ffffffff8021c57c:	48 8b 00             	mov    (%rax),%rax
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff8021c57f:	48 89 06             	mov    %rax,(%rsi)
    Prev->Next=(struct RME_List*)Next;
ffffffff8021c582:	48 89 70 08          	mov    %rsi,0x8(%rax)
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
ffffffff8021c586:	48 89 d0             	mov    %rdx,%rax
ffffffff8021c589:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff8021c58d:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021c590:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
ffffffff8021c594:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8021c598:	48 8d 84 06 20 30 22 	lea    -0x7fddcfe0(%rsi,%rax,1),%rax
ffffffff8021c59f:	80 
ffffffff8021c5a0:	48 8d 70 08          	lea    0x8(%rax),%rsi
ffffffff8021c5a4:	48 39 70 10          	cmp    %rsi,0x10(%rax)
ffffffff8021c5a8:	0f 84 a3 04 00 00    	je     ffffffff8021ca51 <_RME_Thd_Swt+0x601>
        
        /* See if we need to give up all our timeslices in this yield */
        if((Full_Yield!=0)&&(RME_Cur_Thd[CPUID]->Sched.Slices!=RME_THD_INIT_TIME))
        {
            _RME_Run_Del(RME_Cur_Thd[CPUID]);
            RME_Cur_Thd[CPUID]->Sched.Slices=0;
ffffffff8021c5ae:	48 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rax
ffffffff8021c5b5:	80 
ffffffff8021c5b6:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021c5bd:	00 
            RME_Cur_Thd[CPUID]->Sched.State=RME_THD_TIMEOUT;
ffffffff8021c5be:	48 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rax
ffffffff8021c5c5:	80 
ffffffff8021c5c6:	48 c7 40 38 03 00 00 	movq   $0x3,0x38(%rax)
ffffffff8021c5cd:	00 
            /* Notify the parent about this */
            _RME_Run_Notif(RME_Cur_Thd[CPUID]);
ffffffff8021c5ce:	48 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rax
ffffffff8021c5d5:	80 
Return      : ret_t - Always 0.
******************************************************************************/
ret_t _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8021c5d6:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8021c5da:	48 8d 48 10          	lea    0x10(%rax),%rcx
ffffffff8021c5de:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021c5e1:	0f 84 41 04 00 00    	je     ffffffff8021ca28 <_RME_Thd_Swt+0x5d8>
            RME_Cur_Thd[CPUID]->Sched.Slices=0;
            RME_Cur_Thd[CPUID]->Sched.State=RME_THD_TIMEOUT;
            /* Notify the parent about this */
            _RME_Run_Notif(RME_Cur_Thd[CPUID]);
            /* See if it is the current thread. If yes, we choose another guy */
            if(RME_Cur_Thd[CPUID]==Next_Thd)
ffffffff8021c5e7:	49 39 c4             	cmp    %rax,%r12
ffffffff8021c5ea:	0f 85 d8 00 00 00    	jne    ffffffff8021c6c8 <_RME_Thd_Swt+0x278>
    ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=RME_PRIO_WORD_NUM-1;Count>=0;Count--)
    {
        if(RME_Run[CPUID].Bitmap[Count]!=0)
ffffffff8021c5f0:	48 89 e8             	mov    %rbp,%rax
ffffffff8021c5f3:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff8021c5f7:	4c 8d 24 e8          	lea    (%rax,%rbp,8),%r12
ffffffff8021c5fb:	49 8b bc 24 20 30 22 	mov    -0x7fddcfe0(%r12),%rdi
ffffffff8021c602:	80 
ffffffff8021c603:	48 85 ff             	test   %rdi,%rdi
ffffffff8021c606:	0f 85 ac 03 00 00    	jne    ffffffff8021c9b8 <_RME_Thd_Swt+0x568>
            break;
    }
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);
ffffffff8021c60c:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021c613:	e8 f8 a8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c618:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff8021c61f:	e8 ec a8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c624:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021c62b:	e8 e0 a8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c630:	bf cb 00 00 00       	mov    $0xcb,%edi
ffffffff8021c635:	e8 96 a6 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021c63a:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021c641:	e8 ca a8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c646:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8021c64d:	e8 be a8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c652:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021c659:	e8 b2 a8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c65e:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff8021c665:	e8 a6 a8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c66a:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021c671:	e8 9a a8 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c676:	eb fe                	jmp    ffffffff8021c676 <_RME_Thd_Swt+0x226>
ffffffff8021c678:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021c67f:	00 
    
    /* See if the scheduler is given the right to pick a thread to run */
    CPUID=RME_CPUID();                                                   
    if(Cap_Thd!=RME_THD_ARBITRARY)
    {
        RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Next_Thd_Cap);
ffffffff8021c680:	4d 39 74 24 28       	cmp    %r14,0x28(%r12)
ffffffff8021c685:	0f 86 2e 04 00 00    	jbe    ffffffff8021cab9 <_RME_Thd_Swt+0x669>
ffffffff8021c68b:	4c 89 f0             	mov    %r14,%rax
ffffffff8021c68e:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021c692:	49 03 44 24 18       	add    0x18(%r12),%rax
ffffffff8021c697:	48 8b 10             	mov    (%rax),%rdx
ffffffff8021c69a:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021c69d:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021c6a1:	48 83 f9 06          	cmp    $0x6,%rcx
ffffffff8021c6a5:	0f 84 4c fe ff ff    	je     ffffffff8021c4f7 <_RME_Thd_Swt+0xa7>
ffffffff8021c6ab:	49 c7 c6 fe ff ff ff 	mov    $0xfffffffffffffffe,%r14
ffffffff8021c6b2:	e9 ee 00 00 00       	jmpq   ffffffff8021c7a5 <_RME_Thd_Swt+0x355>
ffffffff8021c6b7:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
ffffffff8021c6be:	00 00 
            /* See if it is the current thread. If yes, we choose another guy */
            if(RME_Cur_Thd[CPUID]==Next_Thd)
                Next_Thd=_RME_Run_High(CPUID);
        }
        else
            RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
ffffffff8021c6c0:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff8021c6c7:	00 
        }
        Next_Thd=_RME_Run_High(CPUID);
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Set_Syscall_Retval(Reg,0);
ffffffff8021c6c8:	31 f6                	xor    %esi,%esi
ffffffff8021c6ca:	48 89 df             	mov    %rbx,%rdi
    
    /* Set the next thread's state first */
    Next_Thd->Sched.State=RME_THD_RUNNING;
    /* Are we switching to ourself? If yes, skip all the next operations */
    if(RME_Cur_Thd[CPUID]==Next_Thd)
        return 0;
ffffffff8021c6cd:	45 31 f6             	xor    %r14d,%r14d
        }
        Next_Thd=_RME_Run_High(CPUID);
    }
    
    /* Now save the system call return value to the caller stack */
    __RME_Set_Syscall_Retval(Reg,0);
ffffffff8021c6d0:	e8 6b 76 ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
    
    /* Set the next thread's state first */
    Next_Thd->Sched.State=RME_THD_RUNNING;
ffffffff8021c6d5:	49 c7 44 24 38 00 00 	movq   $0x0,0x38(%r12)
ffffffff8021c6dc:	00 00 
    /* Are we switching to ourself? If yes, skip all the next operations */
    if(RME_Cur_Thd[CPUID]==Next_Thd)
ffffffff8021c6de:	4c 8b 2c ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%r13
ffffffff8021c6e5:	80 
ffffffff8021c6e6:	4d 39 ec             	cmp    %r13,%r12
ffffffff8021c6e9:	0f 84 b6 00 00 00    	je     ffffffff8021c7a5 <_RME_Thd_Swt+0x355>
    struct RME_Cap_Pgtbl* Curr_Pgtbl;
    struct RME_Inv_Struct* Next_Inv_Top;
    struct RME_Cap_Pgtbl* Next_Pgtbl;
    
    /* Save current context */
    __RME_Thd_Reg_Copy(&(Curr_Thd->Cur_Reg->Reg), Reg);
ffffffff8021c6ef:	49 8b bd 80 00 00 00 	mov    0x80(%r13),%rdi
ffffffff8021c6f6:	48 89 de             	mov    %rbx,%rsi
ffffffff8021c6f9:	e8 c2 76 ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Save(Reg, &(Curr_Thd->Cur_Reg->Cop_Reg));
ffffffff8021c6fe:	49 8b 85 80 00 00 00 	mov    0x80(%r13),%rax
ffffffff8021c705:	48 89 df             	mov    %rbx,%rdi
ffffffff8021c708:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff8021c70f:	e8 9c 77 ff ff       	callq  ffffffff80213eb0 <__RME_Thd_Cop_Save>
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
ffffffff8021c714:	49 8b b4 24 80 00 00 	mov    0x80(%r12),%rsi
ffffffff8021c71b:	00 
ffffffff8021c71c:	48 89 df             	mov    %rbx,%rdi
ffffffff8021c71f:	e8 9c 76 ff ff       	callq  ffffffff80213dc0 <__RME_Thd_Reg_Copy>
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));
ffffffff8021c724:	49 8b 84 24 80 00 00 	mov    0x80(%r12),%rax
ffffffff8021c72b:	00 
ffffffff8021c72c:	48 89 df             	mov    %rbx,%rdi
ffffffff8021c72f:	48 8d b0 b0 00 00 00 	lea    0xb0(%rax),%rsi
ffffffff8021c736:	e8 85 77 ff ff       	callq  ffffffff80213ec0 <__RME_Thd_Cop_Restore>

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff8021c73b:	49 8b 8d c0 09 00 00 	mov    0x9c0(%r13),%rcx
ffffffff8021c742:	49 8d 95 b8 09 00 00 	lea    0x9b8(%r13),%rdx
ffffffff8021c749:	48 39 d1             	cmp    %rdx,%rcx
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021c74c:	49 8b 94 24 c0 09 00 	mov    0x9c0(%r12),%rdx
ffffffff8021c753:	00 
    /* Restore next context */
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
ffffffff8021c754:	0f 84 86 02 00 00    	je     ffffffff8021c9e0 <_RME_Thd_Swt+0x590>
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021c75a:	49 8d b4 24 b8 09 00 	lea    0x9b8(%r12),%rsi
ffffffff8021c761:	00 
ffffffff8021c762:	48 39 f2             	cmp    %rsi,%rdx
ffffffff8021c765:	49 0f 44 d6          	cmove  %r14,%rdx
    
    if(Curr_Inv_Top==0)
ffffffff8021c769:	48 85 c9             	test   %rcx,%rcx
ffffffff8021c76c:	0f 84 7d 02 00 00    	je     ffffffff8021c9ef <_RME_Thd_Swt+0x59f>
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
ffffffff8021c772:	48 8b 41 10          	mov    0x10(%rcx),%rax
ffffffff8021c776:	48 8b 40 10          	mov    0x10(%rax),%rax
    
    if(Next_Inv_Top==0)
ffffffff8021c77a:	48 85 d2             	test   %rdx,%rdx
ffffffff8021c77d:	0f 84 4d 02 00 00    	je     ffffffff8021c9d0 <_RME_Thd_Swt+0x580>
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
    else
        Next_Pgtbl=Next_Inv_Top->Proc->Pgtbl;
ffffffff8021c783:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021c787:	48 8b 52 10          	mov    0x10(%rdx),%rdx
    
    if(RME_CAP_GETOBJ(Curr_Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Next_Pgtbl,ptr_t))
ffffffff8021c78b:	48 8b 7a 18          	mov    0x18(%rdx),%rdi
ffffffff8021c78f:	48 39 78 18          	cmp    %rdi,0x18(%rax)
ffffffff8021c793:	74 05                	je     ffffffff8021c79a <_RME_Thd_Swt+0x34a>
        __RME_Pgtbl_Set(RME_CAP_GETOBJ(Next_Pgtbl,ptr_t));
ffffffff8021c795:	e8 46 7b ff ff       	callq  ffffffff802142e0 <__RME_Pgtbl_Set>
    if(RME_Cur_Thd[CPUID]==Next_Thd)
        return 0;

    /* We have a solid context switch */
    _RME_Run_Swt(Reg, RME_Cur_Thd[CPUID], Next_Thd);
    RME_Cur_Thd[CPUID]=Next_Thd;
ffffffff8021c79a:	4c 89 24 ed 00 28 22 	mov    %r12,-0x7fddd800(,%rbp,8)
ffffffff8021c7a1:	80 

    return 0;
ffffffff8021c7a2:	45 31 f6             	xor    %r14d,%r14d
}
ffffffff8021c7a5:	5b                   	pop    %rbx
ffffffff8021c7a6:	4c 89 f0             	mov    %r14,%rax
ffffffff8021c7a9:	5d                   	pop    %rbp
ffffffff8021c7aa:	41 5c                	pop    %r12
ffffffff8021c7ac:	41 5d                	pop    %r13
ffffffff8021c7ae:	41 5e                	pop    %r14
ffffffff8021c7b0:	c3                   	retq   
ffffffff8021c7b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
            RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
    }
    else
    {
        /* See if we need to give up all our timeslices in this yield */
        if((Full_Yield!=0)&&(RME_Cur_Thd[CPUID]->Sched.Slices!=RME_THD_INIT_TIME))
ffffffff8021c7b8:	4d 85 ed             	test   %r13,%r13
ffffffff8021c7bb:	48 8b 04 c5 00 28 22 	mov    -0x7fddd800(,%rax,8),%rax
ffffffff8021c7c2:	80 
ffffffff8021c7c3:	0f 84 af 00 00 00    	je     ffffffff8021c878 <_RME_Thd_Swt+0x428>
ffffffff8021c7c9:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rdx
ffffffff8021c7d0:	ff ff 7f 
ffffffff8021c7d3:	48 39 50 30          	cmp    %rdx,0x30(%rax)
ffffffff8021c7d7:	0f 84 9b 00 00 00    	je     ffffffff8021c878 <_RME_Thd_Swt+0x428>
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021c7dd:	48 8b 50 28          	mov    0x28(%rax),%rdx
    
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021c7e1:	48 8b 70 08          	mov    0x8(%rax),%rsi
ret_t _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff8021c7e5:	48 8b 48 48          	mov    0x48(%rax),%rcx
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021c7e9:	48 8b 00             	mov    (%rax),%rax
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff8021c7ec:	48 89 06             	mov    %rax,(%rsi)
    Prev->Next=(struct RME_List*)Next;
ffffffff8021c7ef:	48 89 70 08          	mov    %rsi,0x8(%rax)
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
ffffffff8021c7f3:	48 89 d0             	mov    %rdx,%rax
ffffffff8021c7f6:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff8021c7fa:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021c7fd:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
ffffffff8021c801:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8021c805:	48 8d 84 06 20 30 22 	lea    -0x7fddcfe0(%rsi,%rax,1),%rax
ffffffff8021c80c:	80 
ffffffff8021c80d:	48 8d 70 08          	lea    0x8(%rax),%rsi
ffffffff8021c811:	48 39 70 10          	cmp    %rsi,0x10(%rax)
ffffffff8021c815:	0f 84 e1 01 00 00    	je     ffffffff8021c9fc <_RME_Thd_Swt+0x5ac>
    {
        /* See if we need to give up all our timeslices in this yield */
        if((Full_Yield!=0)&&(RME_Cur_Thd[CPUID]->Sched.Slices!=RME_THD_INIT_TIME))
        {
            _RME_Run_Del(RME_Cur_Thd[CPUID]);
            RME_Cur_Thd[CPUID]->Sched.Slices=0;
ffffffff8021c81b:	48 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rax
ffffffff8021c822:	80 
ffffffff8021c823:	48 c7 40 30 00 00 00 	movq   $0x0,0x30(%rax)
ffffffff8021c82a:	00 
            RME_Cur_Thd[CPUID]->Sched.State=RME_THD_TIMEOUT;
ffffffff8021c82b:	48 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rax
ffffffff8021c832:	80 
ffffffff8021c833:	48 c7 40 38 03 00 00 	movq   $0x3,0x38(%rax)
ffffffff8021c83a:	00 
            /* Notify the parent about this */
            _RME_Run_Notif(RME_Cur_Thd[CPUID]);
ffffffff8021c83b:	48 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rax
ffffffff8021c842:	80 
Return      : ret_t - Always 0.
******************************************************************************/
ret_t _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
ffffffff8021c843:	48 8b 50 18          	mov    0x18(%rax),%rdx
ffffffff8021c847:	48 8d 48 10          	lea    0x10(%rax),%rcx
ffffffff8021c84b:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021c84e:	0f 85 d9 00 00 00    	jne    ffffffff8021c92d <_RME_Thd_Swt+0x4dd>
    {
        __RME_List_Ins(&(Thd->Sched.Notif),
                       Thd->Sched.Parent->Sched.Event.Prev,
                       &(Thd->Sched.Parent->Sched.Event));
ffffffff8021c854:	48 8b 48 68          	mov    0x68(%rax),%rcx
ret_t _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
    {
        __RME_List_Ins(&(Thd->Sched.Notif),
ffffffff8021c858:	48 8b 71 70          	mov    0x70(%rcx),%rsi
                       Thd->Sched.Parent->Sched.Event.Prev,
                       &(Thd->Sched.Parent->Sched.Event));
ffffffff8021c85c:	48 8d 79 70          	lea    0x70(%rcx),%rdi
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff8021c860:	48 89 51 70          	mov    %rdx,0x70(%rcx)
    New->Next=(struct RME_List*)Next;
ffffffff8021c864:	48 89 78 18          	mov    %rdi,0x18(%rax)
    New->Prev=(struct RME_List*)Prev;
ffffffff8021c868:	48 89 70 10          	mov    %rsi,0x10(%rax)
    Prev->Next=(struct RME_List*)New;
ffffffff8021c86c:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8021c870:	e9 b8 00 00 00       	jmpq   ffffffff8021c92d <_RME_Thd_Swt+0x4dd>
ffffffff8021c875:	0f 1f 00             	nopl   (%rax)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021c878:	48 8b 50 28          	mov    0x28(%rax),%rdx
    
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021c87c:	48 8b 70 08          	mov    0x8(%rax),%rsi
ret_t _RME_Run_Del(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff8021c880:	48 8b 48 48          	mov    0x48(%rax),%rcx
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
ffffffff8021c884:	48 8b 00             	mov    (%rax),%rax
Output      : None.
Return      : None.
******************************************************************************/
void __RME_List_Del(volatile struct RME_List* Prev,volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)Prev;
ffffffff8021c887:	48 89 06             	mov    %rax,(%rsi)
    Prev->Next=(struct RME_List*)Next;
ffffffff8021c88a:	48 89 70 08          	mov    %rsi,0x8(%rax)
    /* Delete this thread from the runqueue */
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
ffffffff8021c88e:	48 89 d0             	mov    %rdx,%rax
ffffffff8021c891:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff8021c895:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021c898:	48 8d 04 d0          	lea    (%rax,%rdx,8),%rax
ffffffff8021c89c:	48 c1 e6 04          	shl    $0x4,%rsi
ffffffff8021c8a0:	48 8d 84 06 20 30 22 	lea    -0x7fddcfe0(%rsi,%rax,1),%rax
ffffffff8021c8a7:	80 
ffffffff8021c8a8:	48 8d 70 08          	lea    0x8(%rax),%rsi
ffffffff8021c8ac:	48 39 70 10          	cmp    %rsi,0x10(%rax)
ffffffff8021c8b0:	0f 84 0f 02 00 00    	je     ffffffff8021cac5 <_RME_Thd_Swt+0x675>
        else
        {
            /* This operation is just to make sure that there are any other thread
             * at the same priviledge level, we're not switching to ourself */
            _RME_Run_Del(RME_Cur_Thd[CPUID]);
            _RME_Run_Ins(RME_Cur_Thd[CPUID]);
ffffffff8021c8b6:	48 8b 14 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rdx
ffffffff8021c8bd:	80 
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
    CPUID=Thd->Sched.CPUID_Bind;
ffffffff8021c8be:	48 8b 42 28          	mov    0x28(%rdx),%rax
ret_t _RME_Run_Ins(struct RME_Thd_Struct* Thd)
{
    ptr_t Prio;
    ptr_t CPUID;
    
    Prio=Thd->Sched.Prio;
ffffffff8021c8c2:	48 8b 4a 48          	mov    0x48(%rdx),%rcx
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
ffffffff8021c8c6:	48 89 c6             	mov    %rax,%rsi
ffffffff8021c8c9:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021c8cc:	48 c1 e6 0a          	shl    $0xa,%rsi
ffffffff8021c8d0:	48 c1 e7 04          	shl    $0x4,%rdi
ffffffff8021c8d4:	48 8d 34 c6          	lea    (%rsi,%rax,8),%rsi
ffffffff8021c8d8:	48 8d b4 37 20 30 22 	lea    -0x7fddcfe0(%rdi,%rsi,1),%rsi
ffffffff8021c8df:	80 
ffffffff8021c8e0:	48 8b 7e 08          	mov    0x8(%rsi),%rdi
ffffffff8021c8e4:	4c 8d 46 08          	lea    0x8(%rsi),%r8
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff8021c8e8:	48 89 56 08          	mov    %rdx,0x8(%rsi)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021c8ec:	48 89 c6             	mov    %rax,%rsi
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
ffffffff8021c8ef:	4c 89 42 08          	mov    %r8,0x8(%rdx)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021c8f3:	48 c1 e6 07          	shl    $0x7,%rsi
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
    New->Next=(struct RME_List*)Next;
    New->Prev=(struct RME_List*)Prev;
ffffffff8021c8f7:	48 89 3a             	mov    %rdi,(%rdx)
    Prev->Next=(struct RME_List*)New;
ffffffff8021c8fa:	48 89 57 08          	mov    %rdx,0x8(%rdi)
    CPUID=Thd->Sched.CPUID_Bind;
    
    /* Insert this thread into the runqueue */
    __RME_List_Ins(&(Thd->Sched.Run),RME_Run[CPUID].List[Prio].Prev,&(RME_Run[CPUID].List[Prio]));
    /* Set the bit in the bitmap */
    RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]|=1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1));
ffffffff8021c8fe:	48 89 ca             	mov    %rcx,%rdx
ffffffff8021c901:	48 c1 ea 06          	shr    $0x6,%rdx
ffffffff8021c905:	48 01 f0             	add    %rsi,%rax
ffffffff8021c908:	48 01 d0             	add    %rdx,%rax
ffffffff8021c90b:	ba 01 00 00 00       	mov    $0x1,%edx
ffffffff8021c910:	d3 e2                	shl    %cl,%edx
ffffffff8021c912:	48 63 d2             	movslq %edx,%rdx
ffffffff8021c915:	48 09 14 c5 20 30 22 	or     %rdx,-0x7fddcfe0(,%rax,8)
ffffffff8021c91c:	80 
        {
            /* This operation is just to make sure that there are any other thread
             * at the same priviledge level, we're not switching to ourself */
            _RME_Run_Del(RME_Cur_Thd[CPUID]);
            _RME_Run_Ins(RME_Cur_Thd[CPUID]);
            RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
ffffffff8021c91d:	48 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rax
ffffffff8021c924:	80 
ffffffff8021c925:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff8021c92c:	00 
    ptr_t Prio;
    
    /* We start looking for preemption priority levels from the highest */
    for(Count=RME_PRIO_WORD_NUM-1;Count>=0;Count--)
    {
        if(RME_Run[CPUID].Bitmap[Count]!=0)
ffffffff8021c92d:	48 89 e8             	mov    %rbp,%rax
ffffffff8021c930:	48 c1 e0 0a          	shl    $0xa,%rax
ffffffff8021c934:	4c 8d 24 e8          	lea    (%rax,%rbp,8),%r12
ffffffff8021c938:	49 8b bc 24 20 30 22 	mov    -0x7fddcfe0(%r12),%rdi
ffffffff8021c93f:	80 
ffffffff8021c940:	48 85 ff             	test   %rdi,%rdi
ffffffff8021c943:	75 73                	jne    ffffffff8021c9b8 <_RME_Thd_Swt+0x568>
            break;
    }
    /* It must be possible to find one thread per core */
    RME_ASSERT(Count>=0);
ffffffff8021c945:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021c94c:	e8 bf a5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c951:	48 c7 c7 c0 ef 21 80 	mov    $0xffffffff8021efc0,%rdi
ffffffff8021c958:	e8 b3 a5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c95d:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021c964:	e8 a7 a5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c969:	bf cb 00 00 00       	mov    $0xcb,%edi
ffffffff8021c96e:	e8 5d a3 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021c973:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021c97a:	e8 91 a5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c97f:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8021c986:	e8 85 a5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c98b:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021c992:	e8 79 a5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c997:	48 c7 c7 f1 ed 21 80 	mov    $0xffffffff8021edf1,%rdi
ffffffff8021c99e:	e8 6d a5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c9a3:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021c9aa:	e8 61 a5 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021c9af:	eb fe                	jmp    ffffffff8021c9af <_RME_Thd_Swt+0x55f>
ffffffff8021c9b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    /* Get the first "1"'s position in the word */
    Prio=__RME_MSB_Get(RME_Run[CPUID].Bitmap[Count]);
ffffffff8021c9b8:	e8 03 ef fe ff       	callq  ffffffff8020b8c0 <__RME_MSB_Get>
    Prio+=Count<<RME_WORD_ORDER;
    /* Now there is something at this priority level. Get it and start to run */
    return (struct RME_Thd_Struct*)RME_Run[CPUID].List[Prio].Next;
ffffffff8021c9bd:	48 c1 e0 04          	shl    $0x4,%rax
ffffffff8021c9c1:	4d 8b a4 04 30 30 22 	mov    -0x7fddcfd0(%r12,%rax,1),%r12
ffffffff8021c9c8:	80 
ffffffff8021c9c9:	e9 fa fc ff ff       	jmpq   ffffffff8021c6c8 <_RME_Thd_Swt+0x278>
ffffffff8021c9ce:	66 90                	xchg   %ax,%ax
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
    else
        Curr_Pgtbl=Curr_Inv_Top->Proc->Pgtbl;
    
    if(Next_Inv_Top==0)
        Next_Pgtbl=Next_Thd->Sched.Proc->Pgtbl;
ffffffff8021c9d0:	49 8b 54 24 60       	mov    0x60(%r12),%rdx
ffffffff8021c9d5:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021c9d9:	e9 ad fd ff ff       	jmpq   ffffffff8021c78b <_RME_Thd_Swt+0x33b>
ffffffff8021c9de:	66 90                	xchg   %ax,%ax
    __RME_Thd_Reg_Copy(Reg, &(Next_Thd->Cur_Reg->Reg));
    __RME_Thd_Cop_Restore(Reg, &(Next_Thd->Cur_Reg->Cop_Reg));

    /* Are we going to switch page tables? If yes, we change it now */
    Curr_Inv_Top=RME_INVSTK_TOP(Curr_Thd);
    Next_Inv_Top=RME_INVSTK_TOP(Next_Thd);
ffffffff8021c9e0:	49 8d 8c 24 b8 09 00 	lea    0x9b8(%r12),%rcx
ffffffff8021c9e7:	00 
ffffffff8021c9e8:	48 39 ca             	cmp    %rcx,%rdx
ffffffff8021c9eb:	49 0f 44 d6          	cmove  %r14,%rdx
    
    if(Curr_Inv_Top==0)
        Curr_Pgtbl=Curr_Thd->Sched.Proc->Pgtbl;
ffffffff8021c9ef:	49 8b 45 60          	mov    0x60(%r13),%rax
ffffffff8021c9f3:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021c9f7:	e9 7e fd ff ff       	jmpq   ffffffff8021c77a <_RME_Thd_Swt+0x32a>
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
        RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]&=~(1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1)));
ffffffff8021c9fc:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021c9ff:	48 89 c8             	mov    %rcx,%rax
ffffffff8021ca02:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff8021ca06:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff8021ca0a:	48 01 f2             	add    %rsi,%rdx
ffffffff8021ca0d:	48 01 c2             	add    %rax,%rdx
ffffffff8021ca10:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021ca15:	d3 e0                	shl    %cl,%eax
ffffffff8021ca17:	f7 d0                	not    %eax
ffffffff8021ca19:	48 98                	cltq   
ffffffff8021ca1b:	48 21 04 d5 20 30 22 	and    %rax,-0x7fddcfe0(,%rdx,8)
ffffffff8021ca22:	80 
ffffffff8021ca23:	e9 f3 fd ff ff       	jmpq   ffffffff8021c81b <_RME_Thd_Swt+0x3cb>
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
    {
        __RME_List_Ins(&(Thd->Sched.Notif),
                       Thd->Sched.Parent->Sched.Event.Prev,
                       &(Thd->Sched.Parent->Sched.Event));
ffffffff8021ca28:	48 8b 48 68          	mov    0x68(%rax),%rcx
ret_t _RME_Run_Notif(struct RME_Thd_Struct* Thd)
{
    /* See if there is already a notification. If yes, do not do the send again */
    if(Thd->Sched.Notif.Next==&(Thd->Sched.Notif))
    {
        __RME_List_Ins(&(Thd->Sched.Notif),
ffffffff8021ca2c:	48 8b 71 70          	mov    0x70(%rcx),%rsi
                       Thd->Sched.Parent->Sched.Event.Prev,
                       &(Thd->Sched.Parent->Sched.Event));
ffffffff8021ca30:	48 8d 79 70          	lea    0x70(%rcx),%rdi
******************************************************************************/
void __RME_List_Ins(volatile struct RME_List* New,
                    volatile struct RME_List* Prev,
                    volatile struct RME_List* Next)
{
    Next->Prev=(struct RME_List*)New;
ffffffff8021ca34:	48 89 51 70          	mov    %rdx,0x70(%rcx)
    New->Next=(struct RME_List*)Next;
ffffffff8021ca38:	48 89 78 18          	mov    %rdi,0x18(%rax)
    New->Prev=(struct RME_List*)Prev;
ffffffff8021ca3c:	48 89 70 10          	mov    %rsi,0x10(%rax)
    Prev->Next=(struct RME_List*)New;
ffffffff8021ca40:	48 89 56 08          	mov    %rdx,0x8(%rsi)
ffffffff8021ca44:	48 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%rbp,8),%rax
ffffffff8021ca4b:	80 
ffffffff8021ca4c:	e9 96 fb ff ff       	jmpq   ffffffff8021c5e7 <_RME_Thd_Swt+0x197>
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
        RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]&=~(1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1)));
ffffffff8021ca51:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021ca54:	48 89 c8             	mov    %rcx,%rax
ffffffff8021ca57:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff8021ca5b:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff8021ca5f:	48 01 f2             	add    %rsi,%rdx
ffffffff8021ca62:	48 01 c2             	add    %rax,%rdx
ffffffff8021ca65:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021ca6a:	d3 e0                	shl    %cl,%eax
ffffffff8021ca6c:	f7 d0                	not    %eax
ffffffff8021ca6e:	48 98                	cltq   
ffffffff8021ca70:	48 21 04 d5 20 30 22 	and    %rax,-0x7fddcfe0(,%rdx,8)
ffffffff8021ca77:	80 
ffffffff8021ca78:	e9 31 fb ff ff       	jmpq   ffffffff8021c5ae <_RME_Thd_Swt+0x15e>
        if((Next_Thd->Sched.State==RME_THD_BLOCKED)||
           (Next_Thd->Sched.State==RME_THD_TIMEOUT))
            return RME_ERR_PTH_INVSTATE;
        /* See if the target is in a faulty state */
        if(Next_Thd->Sched.State==RME_THD_FAULT)
            return RME_ERR_PTH_FAULT;
ffffffff8021ca7d:	49 c7 c6 e3 ff ff ff 	mov    $0xffffffffffffffe3,%r14
ffffffff8021ca84:	e9 1c fd ff ff       	jmpq   ffffffff8021c7a5 <_RME_Thd_Swt+0x355>
        Next_Thd=RME_CAP_GETOBJ(Next_Thd_Cap, struct RME_Thd_Struct*);
        if(Next_Thd->Sched.CPUID_Bind!=CPUID)
            return RME_ERR_PTH_INVSTATE;
        /* See if we can yield to the thread */
        if(RME_Cur_Thd[CPUID]->Sched.Prio!=Next_Thd->Sched.Prio)
            return RME_ERR_PTH_PRIO;
ffffffff8021ca89:	49 c7 c6 e7 ff ff ff 	mov    $0xffffffffffffffe7,%r14
ffffffff8021ca90:	e9 10 fd ff ff       	jmpq   ffffffff8021c7a5 <_RME_Thd_Swt+0x355>
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Next_Thd_Cap,RME_THD_FLAG_SWT);
        /* See if we can do operation on this core */
        Next_Thd=RME_CAP_GETOBJ(Next_Thd_Cap, struct RME_Thd_Struct*);
        if(Next_Thd->Sched.CPUID_Bind!=CPUID)
            return RME_ERR_PTH_INVSTATE;
ffffffff8021ca95:	49 c7 c6 e8 ff ff ff 	mov    $0xffffffffffffffe8,%r14
ffffffff8021ca9c:	e9 04 fd ff ff       	jmpq   ffffffff8021c7a5 <_RME_Thd_Swt+0x355>
    CPUID=RME_CPUID();                                                   
    if(Cap_Thd!=RME_THD_ARBITRARY)
    {
        RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Next_Thd_Cap);
        /* Check if the target cap is not frozen and allows such operations */
        RME_CAP_CHECK(Next_Thd_Cap,RME_THD_FLAG_SWT);
ffffffff8021caa1:	49 c7 c6 f9 ff ff ff 	mov    $0xfffffffffffffff9,%r14
ffffffff8021caa8:	e9 f8 fc ff ff       	jmpq   ffffffff8021c7a5 <_RME_Thd_Swt+0x355>
    
    /* See if the scheduler is given the right to pick a thread to run */
    CPUID=RME_CPUID();                                                   
    if(Cap_Thd!=RME_THD_ARBITRARY)
    {
        RME_CAPTBL_GETCAP(Captbl,Cap_Thd,RME_CAP_THD,struct RME_Cap_Thd*,Next_Thd_Cap);
ffffffff8021caad:	49 c7 c6 f7 ff ff ff 	mov    $0xfffffffffffffff7,%r14
ffffffff8021cab4:	e9 ec fc ff ff       	jmpq   ffffffff8021c7a5 <_RME_Thd_Swt+0x355>
ffffffff8021cab9:	49 c7 c6 fd ff ff ff 	mov    $0xfffffffffffffffd,%r14
ffffffff8021cac0:	e9 e0 fc ff ff       	jmpq   ffffffff8021c7a5 <_RME_Thd_Swt+0x355>
    __RME_List_Del(Thd->Sched.Run.Prev,Thd->Sched.Run.Next);
    /* __RME_List_Crt(&(Thd->Sched.Run)); */
    
    /* See if there are any thread on this peiority level. If no, clear the bit */
    if(RME_Run[CPUID].List[Prio].Next==&(RME_Run[CPUID].List[Prio]))
        RME_Run[CPUID].Bitmap[Prio>>RME_WORD_ORDER]&=~(1<<(Prio&RME_MASK_END(RME_WORD_ORDER-1)));
ffffffff8021cac5:	48 89 d6             	mov    %rdx,%rsi
ffffffff8021cac8:	48 89 c8             	mov    %rcx,%rax
ffffffff8021cacb:	48 c1 e6 07          	shl    $0x7,%rsi
ffffffff8021cacf:	48 c1 e8 06          	shr    $0x6,%rax
ffffffff8021cad3:	48 01 f2             	add    %rsi,%rdx
ffffffff8021cad6:	48 01 c2             	add    %rax,%rdx
ffffffff8021cad9:	b8 01 00 00 00       	mov    $0x1,%eax
ffffffff8021cade:	d3 e0                	shl    %cl,%eax
ffffffff8021cae0:	f7 d0                	not    %eax
ffffffff8021cae2:	48 98                	cltq   
ffffffff8021cae4:	48 21 04 d5 20 30 22 	and    %rax,-0x7fddcfe0(,%rdx,8)
ffffffff8021caeb:	80 
ffffffff8021caec:	e9 c5 fd ff ff       	jmpq   ffffffff8021c8b6 <_RME_Thd_Swt+0x466>
ffffffff8021caf1:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021caf8:	00 00 00 
ffffffff8021cafb:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

ffffffff8021cb00 <_RME_Sig_Boot_Crt>:
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Sig_Boot_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl,
                        cid_t Cap_Sig, ptr_t Vaddr)
{
ffffffff8021cb00:	55                   	push   %rbp
ffffffff8021cb01:	53                   	push   %rbx
ffffffff8021cb02:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021cb05:	48 83 ec 18          	sub    $0x18,%rsp
    struct RME_Cap_Sig* Sig_Crt;
    struct RME_Sig_Struct* Sig_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff8021cb09:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021cb0f:	75 2f                	jne    ffffffff8021cb40 <_RME_Sig_Boot_Crt+0x40>
ffffffff8021cb11:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021cb15:	0f 86 45 01 00 00    	jbe    ffffffff8021cc60 <_RME_Sig_Boot_Crt+0x160>
ffffffff8021cb1b:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021cb1f:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021cb23:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021cb2a:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8021cb2d:	48 89 fa             	mov    %rdi,%rdx
ffffffff8021cb30:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021cb34:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021cb38:	74 79                	je     ffffffff8021cbb3 <_RME_Sig_Boot_Crt+0xb3>
ffffffff8021cb3a:	e9 19 01 00 00       	jmpq   ffffffff8021cc58 <_RME_Sig_Boot_Crt+0x158>
ffffffff8021cb3f:	90                   	nop
ffffffff8021cb40:	48 89 f2             	mov    %rsi,%rdx
ffffffff8021cb43:	48 c1 fa 10          	sar    $0x10,%rdx
ffffffff8021cb47:	48 3b 57 28          	cmp    0x28(%rdi),%rdx
ffffffff8021cb4b:	0f 83 0f 01 00 00    	jae    ffffffff8021cc60 <_RME_Sig_Boot_Crt+0x160>
ffffffff8021cb51:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021cb55:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8021cb59:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021cb60:	80 00 00 
ffffffff8021cb63:	48 8b 02             	mov    (%rdx),%rax
ffffffff8021cb66:	48 85 f8             	test   %rdi,%rax
ffffffff8021cb69:	0f 85 01 01 00 00    	jne    ffffffff8021cc70 <_RME_Sig_Boot_Crt+0x170>
ffffffff8021cb6f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021cb73:	48 89 c7             	mov    %rax,%rdi
ffffffff8021cb76:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021cb7d:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021cb81:	0f 85 d1 00 00 00    	jne    ffffffff8021cc58 <_RME_Sig_Boot_Crt+0x158>
ffffffff8021cb87:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021cb8d:	48 3b 72 28          	cmp    0x28(%rdx),%rsi
ffffffff8021cb91:	0f 83 c9 00 00 00    	jae    ffffffff8021cc60 <_RME_Sig_Boot_Crt+0x160>
ffffffff8021cb97:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021cb9b:	48 03 72 18          	add    0x18(%rdx),%rsi
ffffffff8021cb9f:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8021cba2:	48 89 fa             	mov    %rdi,%rdx
ffffffff8021cba5:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021cba9:	48 83 fa 03          	cmp    $0x3,%rdx
ffffffff8021cbad:	0f 85 a5 00 00 00    	jne    ffffffff8021cc58 <_RME_Sig_Boot_Crt+0x158>
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Crt,RME_CAPTBL_FLAG_CRT);
ffffffff8021cbb3:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021cbba:	80 00 00 
ffffffff8021cbbd:	48 85 d7             	test   %rdx,%rdi
ffffffff8021cbc0:	0f 85 aa 00 00 00    	jne    ffffffff8021cc70 <_RME_Sig_Boot_Crt+0x170>
ffffffff8021cbc6:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff8021cbca:	0f 84 b0 00 00 00    	je     ffffffff8021cc80 <_RME_Sig_Boot_Crt+0x180>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff8021cbd0:	48 39 5e 28          	cmp    %rbx,0x28(%rsi)
    struct RME_Cap_Sig* Sig_Crt;
    struct RME_Sig_Struct* Sig_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff8021cbd4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Crt,RME_CAPTBL_FLAG_CRT);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Crt,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff8021cbdb:	76 7b                	jbe    ffffffff8021cc58 <_RME_Sig_Boot_Crt+0x158>
ffffffff8021cbdd:	48 c1 e3 06          	shl    $0x6,%rbx
ffffffff8021cbe1:	48 03 5e 18          	add    0x18(%rsi),%rbx
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Sig_Crt,Type_Ref);
ffffffff8021cbe5:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021cbea:	48 89 cd             	mov    %rcx,%rbp
ffffffff8021cbed:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff8021cbf4:	00 00 
ffffffff8021cbf6:	48 89 df             	mov    %rbx,%rdi
ffffffff8021cbf9:	e8 83 ec fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021cbfe:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cc01:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021cc08:	48 85 d2             	test   %rdx,%rdx
ffffffff8021cc0b:	74 4b                	je     ffffffff8021cc58 <_RME_Sig_Boot_Crt+0x158>
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_SIG_SIZE)!=0)
ffffffff8021cc0d:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff8021cc12:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021cc15:	e8 76 a3 ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff8021cc1a:	48 85 c0             	test   %rax,%rax
ffffffff8021cc1d:	75 71                	jne    ffffffff8021cc90 <_RME_Sig_Boot_Crt+0x190>
    Sig_Crt->Head.Object=Vaddr;
    /* Receive only because this is from kernel */
    Sig_Crt->Head.Flags=RME_SIG_FLAG_RCV;
    
    /* Creation complete */
    Sig_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_SIG,0);
ffffffff8021cc1f:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff8021cc26:	00 08 00 
        return RME_ERR_CAP_KOTBL;
    }
    
    /* Fill in the structure */
    Sig_Struct=(struct RME_Sig_Struct*)Vaddr;
    Sig_Struct->Kernel_Flag=1;
ffffffff8021cc29:	48 c7 45 00 01 00 00 	movq   $0x1,0x0(%rbp)
ffffffff8021cc30:	00 
    Sig_Struct->Signal_Num=0;
ffffffff8021cc31:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8021cc38:	00 
    Sig_Struct->Thd=0;
ffffffff8021cc39:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
ffffffff8021cc40:	00 
    
    /* Fill in the header part */
    Sig_Crt->Head.Parent=0;
ffffffff8021cc41:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff8021cc48:	00 
    Sig_Crt->Head.Object=Vaddr;
ffffffff8021cc49:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
    /* Receive only because this is from kernel */
    Sig_Crt->Head.Flags=RME_SIG_FLAG_RCV;
ffffffff8021cc4d:	48 c7 43 10 02 00 00 	movq   $0x2,0x10(%rbx)
ffffffff8021cc54:	00 
    
    /* Creation complete */
    Sig_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_SIG,0);
ffffffff8021cc55:	48 89 0b             	mov    %rcx,(%rbx)
    
    return 0;
}
ffffffff8021cc58:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021cc5c:	5b                   	pop    %rbx
ffffffff8021cc5d:	5d                   	pop    %rbp
ffffffff8021cc5e:	c3                   	retq   
ffffffff8021cc5f:	90                   	nop
    struct RME_Cap_Sig* Sig_Crt;
    struct RME_Sig_Struct* Sig_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Crt);
ffffffff8021cc60:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021cc67:	eb ef                	jmp    ffffffff8021cc58 <_RME_Sig_Boot_Crt+0x158>
ffffffff8021cc69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8021cc70:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021cc77:	eb df                	jmp    ffffffff8021cc58 <_RME_Sig_Boot_Crt+0x158>
ffffffff8021cc79:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Crt,RME_CAPTBL_FLAG_CRT);
ffffffff8021cc80:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021cc87:	eb cf                	jmp    ffffffff8021cc58 <_RME_Sig_Boot_Crt+0x158>
ffffffff8021cc89:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAPTBL_OCCUPY(Sig_Crt,Type_Ref);
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_SIG_SIZE)!=0)
    {
        Sig_Crt->Head.Type_Ref=0;
ffffffff8021cc90:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CAP_KOTBL;
ffffffff8021cc97:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8021cc9e:	eb b8                	jmp    ffffffff8021cc58 <_RME_Sig_Boot_Crt+0x158>

ffffffff8021cca0 <_RME_Sig_Crt>:
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Sig_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl,
                   cid_t Cap_Kmem, cid_t Cap_Sig, ptr_t Vaddr)
{
ffffffff8021cca0:	55                   	push   %rbp
ffffffff8021cca1:	53                   	push   %rbx
ffffffff8021cca2:	48 83 ec 18          	sub    $0x18,%rsp
    struct RME_Cap_Sig* Sig_Crt;
    struct RME_Sig_Struct* Sig_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021cca6:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021ccac:	0f 85 ae 00 00 00    	jne    ffffffff8021cd60 <_RME_Sig_Crt+0xc0>
ffffffff8021ccb2:	48 8b 5f 28          	mov    0x28(%rdi),%rbx
ffffffff8021ccb6:	48 39 f3             	cmp    %rsi,%rbx
ffffffff8021ccb9:	0f 86 21 02 00 00    	jbe    ffffffff8021cee0 <_RME_Sig_Crt+0x240>
ffffffff8021ccbf:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
ffffffff8021ccc3:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021ccc7:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021ccce:	4c 01 de             	add    %r11,%rsi
ffffffff8021ccd1:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8021ccd4:	49 89 f9             	mov    %rdi,%r9
ffffffff8021ccd7:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8021ccdb:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8021ccdf:	0f 85 ed 01 00 00    	jne    ffffffff8021ced2 <_RME_Sig_Crt+0x232>
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021cce5:	f6 c6 80             	test   $0x80,%dh
ffffffff8021cce8:	0f 84 f5 00 00 00    	je     ffffffff8021cde3 <_RME_Sig_Crt+0x143>
ffffffff8021ccee:	49 89 d2             	mov    %rdx,%r10
ffffffff8021ccf1:	49 c1 fa 10          	sar    $0x10,%r10
ffffffff8021ccf5:	49 39 da             	cmp    %rbx,%r10
ffffffff8021ccf8:	0f 83 e2 01 00 00    	jae    ffffffff8021cee0 <_RME_Sig_Crt+0x240>
ffffffff8021ccfe:	49 c1 e2 06          	shl    $0x6,%r10
ffffffff8021cd02:	49 b9 00 00 00 00 00 	movabs $0x800000000000,%r9
ffffffff8021cd09:	80 00 00 
ffffffff8021cd0c:	4d 01 da             	add    %r11,%r10
ffffffff8021cd0f:	49 8b 02             	mov    (%r10),%rax
ffffffff8021cd12:	4c 85 c8             	test   %r9,%rax
ffffffff8021cd15:	0f 85 e5 01 00 00    	jne    ffffffff8021cf00 <_RME_Sig_Crt+0x260>
ffffffff8021cd1b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021cd1f:	49 89 c1             	mov    %rax,%r9
    struct RME_Cap_Sig* Sig_Crt;
    struct RME_Sig_Struct* Sig_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021cd22:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021cd29:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8021cd2d:	0f 85 9f 01 00 00    	jne    ffffffff8021ced2 <_RME_Sig_Crt+0x232>
ffffffff8021cd33:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021cd39:	49 3b 52 28          	cmp    0x28(%r10),%rdx
ffffffff8021cd3d:	0f 83 9d 01 00 00    	jae    ffffffff8021cee0 <_RME_Sig_Crt+0x240>
ffffffff8021cd43:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021cd47:	49 03 52 18          	add    0x18(%r10),%rdx
ffffffff8021cd4b:	66 83 7a 06 02       	cmpw   $0x2,0x6(%rdx)
ffffffff8021cd50:	49 89 d1             	mov    %rdx,%r9
ffffffff8021cd53:	0f 84 ae 00 00 00    	je     ffffffff8021ce07 <_RME_Sig_Crt+0x167>
ffffffff8021cd59:	e9 74 01 00 00       	jmpq   ffffffff8021ced2 <_RME_Sig_Crt+0x232>
ffffffff8021cd5e:	66 90                	xchg   %ax,%ax
    struct RME_Cap_Sig* Sig_Crt;
    struct RME_Sig_Struct* Sig_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021cd60:	48 8b 5f 28          	mov    0x28(%rdi),%rbx
ffffffff8021cd64:	48 89 f0             	mov    %rsi,%rax
ffffffff8021cd67:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021cd6b:	48 39 d8             	cmp    %rbx,%rax
ffffffff8021cd6e:	0f 83 6c 01 00 00    	jae    ffffffff8021cee0 <_RME_Sig_Crt+0x240>
ffffffff8021cd74:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
ffffffff8021cd78:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021cd7c:	49 b9 00 00 00 00 00 	movabs $0x800000000000,%r9
ffffffff8021cd83:	80 00 00 
ffffffff8021cd86:	4a 8d 3c 18          	lea    (%rax,%r11,1),%rdi
ffffffff8021cd8a:	48 8b 07             	mov    (%rdi),%rax
ffffffff8021cd8d:	4c 85 c8             	test   %r9,%rax
ffffffff8021cd90:	0f 85 6a 01 00 00    	jne    ffffffff8021cf00 <_RME_Sig_Crt+0x260>
ffffffff8021cd96:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021cd9a:	49 89 c1             	mov    %rax,%r9
ffffffff8021cd9d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021cda4:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8021cda8:	0f 85 24 01 00 00    	jne    ffffffff8021ced2 <_RME_Sig_Crt+0x232>
ffffffff8021cdae:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021cdb4:	48 3b 77 28          	cmp    0x28(%rdi),%rsi
ffffffff8021cdb8:	0f 83 22 01 00 00    	jae    ffffffff8021cee0 <_RME_Sig_Crt+0x240>
ffffffff8021cdbe:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021cdc2:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021cdc6:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8021cdc9:	49 89 f9             	mov    %rdi,%r9
ffffffff8021cdcc:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8021cdd0:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8021cdd4:	0f 85 f8 00 00 00    	jne    ffffffff8021ced2 <_RME_Sig_Crt+0x232>
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021cdda:	f6 c6 80             	test   $0x80,%dh
ffffffff8021cddd:	0f 85 0b ff ff ff    	jne    ffffffff8021ccee <_RME_Sig_Crt+0x4e>
ffffffff8021cde3:	48 39 da             	cmp    %rbx,%rdx
ffffffff8021cde6:	0f 83 f4 00 00 00    	jae    ffffffff8021cee0 <_RME_Sig_Crt+0x240>
ffffffff8021cdec:	48 c1 e2 06          	shl    $0x6,%rdx
    struct RME_Cap_Sig* Sig_Crt;
    struct RME_Sig_Struct* Sig_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021cdf0:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021cdf7:	4e 8d 0c 1a          	lea    (%rdx,%r11,1),%r9
ffffffff8021cdfb:	66 41 83 79 06 02    	cmpw   $0x2,0x6(%r9)
ffffffff8021ce01:	0f 85 cb 00 00 00    	jne    ffffffff8021ced2 <_RME_Sig_Crt+0x232>
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff8021ce07:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021ce0e:	80 00 00 
ffffffff8021ce11:	48 85 d7             	test   %rdx,%rdi
ffffffff8021ce14:	0f 85 e6 00 00 00    	jne    ffffffff8021cf00 <_RME_Sig_Crt+0x260>
ffffffff8021ce1a:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff8021ce1e:	0f 84 cc 00 00 00    	je     ffffffff8021cef0 <_RME_Sig_Crt+0x250>
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_SIG,Vaddr,RME_SIG_SIZE);
ffffffff8021ce24:	41 f6 41 10 10       	testb  $0x10,0x10(%r9)
ffffffff8021ce29:	0f 84 c1 00 00 00    	je     ffffffff8021cef0 <_RME_Sig_Crt+0x250>
ffffffff8021ce2f:	4d 39 41 28          	cmp    %r8,0x28(%r9)
ffffffff8021ce33:	0f 87 b7 00 00 00    	ja     ffffffff8021cef0 <_RME_Sig_Crt+0x250>
ffffffff8021ce39:	49 8d 40 18          	lea    0x18(%r8),%rax
ffffffff8021ce3d:	49 39 41 30          	cmp    %rax,0x30(%r9)
ffffffff8021ce41:	0f 82 a9 00 00 00    	jb     ffffffff8021cef0 <_RME_Sig_Crt+0x250>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff8021ce47:	48 39 4e 28          	cmp    %rcx,0x28(%rsi)
    struct RME_Cap_Sig* Sig_Crt;
    struct RME_Sig_Struct* Sig_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021ce4b:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_SIG,Vaddr,RME_SIG_SIZE);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff8021ce52:	76 7e                	jbe    ffffffff8021ced2 <_RME_Sig_Crt+0x232>
ffffffff8021ce54:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021ce58:	48 03 4e 18          	add    0x18(%rsi),%rcx
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Sig_Crt,Type_Ref);
ffffffff8021ce5c:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021ce61:	4c 89 c5             	mov    %r8,%rbp
ffffffff8021ce64:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff8021ce6b:	00 00 
ffffffff8021ce6d:	48 89 cf             	mov    %rcx,%rdi
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_SIG,Vaddr,RME_SIG_SIZE);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Crt);
ffffffff8021ce70:	48 89 cb             	mov    %rcx,%rbx
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Sig_Crt,Type_Ref);
ffffffff8021ce73:	e8 09 ea fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021ce78:	48 89 c2             	mov    %rax,%rdx
ffffffff8021ce7b:	48 c7 c0 fb ff ff ff 	mov    $0xfffffffffffffffb,%rax
ffffffff8021ce82:	48 85 d2             	test   %rdx,%rdx
ffffffff8021ce85:	74 4b                	je     ffffffff8021ced2 <_RME_Sig_Crt+0x232>
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_SIG_SIZE)!=0)
ffffffff8021ce87:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff8021ce8c:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021ce8f:	e8 fc a0 ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff8021ce94:	48 85 c0             	test   %rax,%rax
ffffffff8021ce97:	75 77                	jne    ffffffff8021cf10 <_RME_Sig_Crt+0x270>
    Sig_Crt->Head.Parent=0;
    Sig_Crt->Head.Object=Vaddr;
    Sig_Crt->Head.Flags=RME_SIG_FLAG_SND|RME_SIG_FLAG_RCV;
    
    /* Creation complete */
    Sig_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_SIG,0);
ffffffff8021ce99:	48 b9 00 00 00 00 00 	movabs $0x8000000000000,%rcx
ffffffff8021cea0:	00 08 00 
        return RME_ERR_CAP_KOTBL;
    }
    
    /* Fill in the structure */
    Sig_Struct=(struct RME_Sig_Struct*)Vaddr;
    Sig_Struct->Kernel_Flag=0;
ffffffff8021cea3:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8021ceaa:	00 
    Sig_Struct->Signal_Num=0;
ffffffff8021ceab:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8021ceb2:	00 
    Sig_Struct->Thd=0;
ffffffff8021ceb3:	48 c7 45 10 00 00 00 	movq   $0x0,0x10(%rbp)
ffffffff8021ceba:	00 
    
    /* Fill in the header part */
    Sig_Crt->Head.Parent=0;
ffffffff8021cebb:	48 c7 43 08 00 00 00 	movq   $0x0,0x8(%rbx)
ffffffff8021cec2:	00 
    Sig_Crt->Head.Object=Vaddr;
ffffffff8021cec3:	48 89 6b 18          	mov    %rbp,0x18(%rbx)
    Sig_Crt->Head.Flags=RME_SIG_FLAG_SND|RME_SIG_FLAG_RCV;
ffffffff8021cec7:	48 c7 43 10 03 00 00 	movq   $0x3,0x10(%rbx)
ffffffff8021cece:	00 
    
    /* Creation complete */
    Sig_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_SIG,0);
ffffffff8021cecf:	48 89 0b             	mov    %rcx,(%rbx)
    
    return 0;
}
ffffffff8021ced2:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021ced6:	5b                   	pop    %rbx
ffffffff8021ced7:	5d                   	pop    %rbp
ffffffff8021ced8:	c3                   	retq   
ffffffff8021ced9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
ffffffff8021cee0:	48 83 c4 18          	add    $0x18,%rsp
    struct RME_Cap_Sig* Sig_Crt;
    struct RME_Sig_Struct* Sig_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021cee4:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
    
    /* Creation complete */
    Sig_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_SIG,0);
    
    return 0;
}
ffffffff8021ceeb:	5b                   	pop    %rbx
ffffffff8021ceec:	5d                   	pop    %rbp
ffffffff8021ceed:	c3                   	retq   
ffffffff8021ceee:	66 90                	xchg   %ax,%ax
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff8021cef0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021cef7:	eb d9                	jmp    ffffffff8021ced2 <_RME_Sig_Crt+0x232>
ffffffff8021cef9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    struct RME_Cap_Sig* Sig_Crt;
    struct RME_Sig_Struct* Sig_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021cf00:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021cf07:	eb c9                	jmp    ffffffff8021ced2 <_RME_Sig_Crt+0x232>
ffffffff8021cf09:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAPTBL_OCCUPY(Sig_Crt,Type_Ref);
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_SIG_SIZE)!=0)
    {
        Sig_Crt->Head.Type_Ref=0;
ffffffff8021cf10:	48 c7 03 00 00 00 00 	movq   $0x0,(%rbx)
        return RME_ERR_CAP_KOTBL;
ffffffff8021cf17:	48 c7 c0 fc ff ff ff 	mov    $0xfffffffffffffffc,%rax
ffffffff8021cf1e:	eb b2                	jmp    ffffffff8021ced2 <_RME_Sig_Crt+0x232>

ffffffff8021cf20 <_RME_Sig_Del>:
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Sig_Struct* Sig_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021cf20:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021cf26:	0f 85 14 01 00 00    	jne    ffffffff8021d040 <_RME_Sig_Del+0x120>
ffffffff8021cf2c:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021cf30:	0f 86 15 02 00 00    	jbe    ffffffff8021d14b <_RME_Sig_Del+0x22b>
ffffffff8021cf36:	48 89 f0             	mov    %rsi,%rax
ffffffff8021cf39:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021cf3d:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021cf41:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021cf44:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021cf47:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021cf4b:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021cf4f:	0f 85 53 01 00 00    	jne    ffffffff8021d0a8 <_RME_Sig_Del+0x188>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff8021cf55:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff8021cf5c:	80 00 00 
ffffffff8021cf5f:	48 85 f1             	test   %rsi,%rcx
ffffffff8021cf62:	0f 85 ee 01 00 00    	jne    ffffffff8021d156 <_RME_Sig_Del+0x236>
ffffffff8021cf68:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8021cf6c:	0f 84 ed 01 00 00    	je     ffffffff8021d15f <_RME_Sig_Del+0x23f>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff8021cf72:	48 39 50 28          	cmp    %rdx,0x28(%rax)
ffffffff8021cf76:	0f 86 cf 01 00 00    	jbe    ffffffff8021d14b <_RME_Sig_Del+0x22b>
              cid_t Cap_Sig - The capability to the signal. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Sig_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Sig)
{
ffffffff8021cf7c:	53                   	push   %rbx
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff8021cf7d:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021cf81:	48 89 d7             	mov    %rdx,%rdi
              cid_t Cap_Sig - The capability to the signal. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Sig_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Sig)
{
ffffffff8021cf84:	48 83 ec 10          	sub    $0x10,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
ffffffff8021cf88:	48 03 78 18          	add    0x18(%rax),%rdi
    /* Delete check */
    RME_CAP_DEL_CHECK(Sig_Del,Type_Ref,RME_CAP_SIG);
ffffffff8021cf8c:	48 8b 07             	mov    (%rdi),%rax
ffffffff8021cf8f:	48 85 f0             	test   %rsi,%rax
ffffffff8021cf92:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8021cf97:	0f 85 cb 01 00 00    	jne    ffffffff8021d168 <_RME_Sig_Del+0x248>
ffffffff8021cf9d:	48 89 c2             	mov    %rax,%rdx
ffffffff8021cfa0:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021cfa4:	48 85 d2             	test   %rdx,%rdx
ffffffff8021cfa7:	0f 84 cb 01 00 00    	je     ffffffff8021d178 <_RME_Sig_Del+0x258>
ffffffff8021cfad:	48 83 fa 08          	cmp    $0x8,%rdx
ffffffff8021cfb1:	0f 85 d1 01 00 00    	jne    ffffffff8021d188 <_RME_Sig_Del+0x268>
ffffffff8021cfb7:	48 8b 15 42 60 00 00 	mov    0x6042(%rip),%rdx        # ffffffff80223000 <RME_Timestamp>
ffffffff8021cfbe:	48 2b 57 20          	sub    0x20(%rdi),%rdx
ffffffff8021cfc2:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021cfc6:	0f 86 cc 01 00 00    	jbe    ffffffff8021d198 <_RME_Sig_Del+0x278>
ffffffff8021cfcc:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffff,%rdx
ffffffff8021cfd3:	7f 00 00 
ffffffff8021cfd6:	48 85 d0             	test   %rdx,%rax
ffffffff8021cfd9:	0f 85 c9 01 00 00    	jne    ffffffff8021d1a8 <_RME_Sig_Del+0x288>
ffffffff8021cfdf:	48 83 7f 08 00       	cmpq   $0x0,0x8(%rdi)
ffffffff8021cfe4:	0f 85 be 01 00 00    	jne    ffffffff8021d1a8 <_RME_Sig_Del+0x288>
    
    /* Get the thread */
    Sig_Struct=RME_CAP_GETOBJ(Sig_Del,struct RME_Sig_Struct*);
ffffffff8021cfea:	48 8b 5f 18          	mov    0x18(%rdi),%rbx
    
    /* See if the signal endpoint is currently used. If yes, we cannot delete it */
    if(Sig_Struct->Thd!=0)
ffffffff8021cfee:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
ffffffff8021cff3:	0f 85 d6 01 00 00    	jne    ffffffff8021d1cf <_RME_Sig_Del+0x2af>
        RME_CAP_DEFROST(Sig_Del,Type_Ref);
        return RME_ERR_SIV_ACT;
    }
    
    /* See if this is a kernel endpoint. If yes, we cannot delete it */
    if(Sig_Struct->Kernel_Flag!=0)
ffffffff8021cff9:	48 83 3b 00          	cmpq   $0x0,(%rbx)
ffffffff8021cffd:	0f 85 21 01 00 00    	jne    ffffffff8021d124 <_RME_Sig_Del+0x204>
        RME_CAP_DEFROST(Sig_Del,Type_Ref);
        return RME_ERR_SIV_CONFLICT;
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
ffffffff8021d003:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021d008:	31 d2                	xor    %edx,%edx
ffffffff8021d00a:	e8 72 e8 fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021d00f:	48 85 c0             	test   %rax,%rax
ffffffff8021d012:	0f 84 60 01 00 00    	je     ffffffff8021d178 <_RME_Sig_Del+0x258>
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
ffffffff8021d018:	be 18 00 00 00       	mov    $0x18,%esi
ffffffff8021d01d:	48 89 df             	mov    %rbx,%rdi
ffffffff8021d020:	e8 9b a1 ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
    
    return 0;
ffffffff8021d025:	31 d2                	xor    %edx,%edx
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
ffffffff8021d027:	48 85 c0             	test   %rax,%rax
ffffffff8021d02a:	0f 84 88 00 00 00    	je     ffffffff8021d0b8 <_RME_Sig_Del+0x198>
    
    return 0;
}
ffffffff8021d030:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021d034:	48 89 d0             	mov    %rdx,%rax
ffffffff8021d037:	5b                   	pop    %rbx
ffffffff8021d038:	c3                   	retq   
ffffffff8021d039:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Sig_Struct* Sig_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021d040:	48 89 f0             	mov    %rsi,%rax
ffffffff8021d043:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021d047:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff8021d04b:	0f 83 fa 00 00 00    	jae    ffffffff8021d14b <_RME_Sig_Del+0x22b>
ffffffff8021d051:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021d055:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021d059:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021d060:	80 00 00 
ffffffff8021d063:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021d066:	48 85 f9             	test   %rdi,%rcx
ffffffff8021d069:	0f 85 e7 00 00 00    	jne    ffffffff8021d156 <_RME_Sig_Del+0x236>
ffffffff8021d06f:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021d073:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021d077:	75 2f                	jne    ffffffff8021d0a8 <_RME_Sig_Del+0x188>
ffffffff8021d079:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021d07f:	48 3b 70 28          	cmp    0x28(%rax),%rsi
ffffffff8021d083:	0f 83 c2 00 00 00    	jae    ffffffff8021d14b <_RME_Sig_Del+0x22b>
ffffffff8021d089:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021d08d:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff8021d091:	48 89 f0             	mov    %rsi,%rax
ffffffff8021d094:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021d097:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021d09a:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021d09e:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021d0a2:	0f 84 ad fe ff ff    	je     ffffffff8021cf55 <_RME_Sig_Del+0x35>
ffffffff8021d0a8:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
ffffffff8021d0af:	e9 9e 00 00 00       	jmpq   ffffffff8021d152 <_RME_Sig_Del+0x232>
ffffffff8021d0b4:	0f 1f 40 00          	nopl   0x0(%rax)
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
ffffffff8021d0b8:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021d0bf:	e8 4c 9e ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021d0c4:	48 c7 c7 18 f0 21 80 	mov    $0xffffffff8021f018,%rdi
ffffffff8021d0cb:	e8 40 9e ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021d0d0:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021d0d7:	e8 34 9e ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021d0dc:	bf d1 00 00 00       	mov    $0xd1,%edi
ffffffff8021d0e1:	e8 ea 9b ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021d0e6:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021d0ed:	e8 1e 9e ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021d0f2:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8021d0f9:	e8 12 9e ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021d0fe:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021d105:	e8 06 9e ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021d10a:	48 c7 c7 70 f0 21 80 	mov    $0xffffffff8021f070,%rdi
ffffffff8021d111:	e8 fa 9d ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021d116:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021d11d:	e8 ee 9d ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021d122:	eb fe                	jmp    ffffffff8021d122 <_RME_Sig_Del+0x202>
    }
    
    /* See if this is a kernel endpoint. If yes, we cannot delete it */
    if(Sig_Struct->Kernel_Flag!=0)
    {
        RME_CAP_DEFROST(Sig_Del,Type_Ref);
ffffffff8021d124:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021d129:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff8021d130:	7f ff ff 
ffffffff8021d133:	48 21 c2             	and    %rax,%rdx
ffffffff8021d136:	e8 46 e7 fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
        return RME_ERR_SIV_CONFLICT;
ffffffff8021d13b:	48 c7 c2 dd ff ff ff 	mov    $0xffffffffffffffdd,%rdx
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
    
    return 0;
}
ffffffff8021d142:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021d146:	48 89 d0             	mov    %rdx,%rax
ffffffff8021d149:	5b                   	pop    %rbx
ffffffff8021d14a:	c3                   	retq   
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Sig_Struct* Sig_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021d14b:	48 c7 c2 fd ff ff ff 	mov    $0xfffffffffffffffd,%rdx
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
    
    return 0;
}
ffffffff8021d152:	48 89 d0             	mov    %rdx,%rax
ffffffff8021d155:	c3                   	retq   
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Sig_Struct* Sig_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021d156:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
ffffffff8021d15d:	eb f3                	jmp    ffffffff8021d152 <_RME_Sig_Del+0x232>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff8021d15f:	48 c7 c2 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rdx
ffffffff8021d166:	eb ea                	jmp    ffffffff8021d152 <_RME_Sig_Del+0x232>
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Sig_Struct* Sig_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021d168:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
    
    return 0;
}
ffffffff8021d16f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021d173:	48 89 d0             	mov    %rdx,%rax
ffffffff8021d176:	5b                   	pop    %rbx
ffffffff8021d177:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Sig_Del,Type_Ref,RME_CAP_SIG);
ffffffff8021d178:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
    
    return 0;
}
ffffffff8021d17f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021d183:	48 89 d0             	mov    %rdx,%rax
ffffffff8021d186:	5b                   	pop    %rbx
ffffffff8021d187:	c3                   	retq   
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Sig_Struct* Sig_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021d188:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
    
    return 0;
}
ffffffff8021d18f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021d193:	48 89 d0             	mov    %rdx,%rax
ffffffff8021d196:	5b                   	pop    %rbx
ffffffff8021d197:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Sig_Del,Type_Ref,RME_CAP_SIG);
ffffffff8021d198:	48 c7 c2 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rdx
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
    
    return 0;
}
ffffffff8021d19f:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021d1a3:	48 89 d0             	mov    %rdx,%rax
ffffffff8021d1a6:	5b                   	pop    %rbx
ffffffff8021d1a7:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Sig,struct RME_Cap_Sig*,Sig_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Sig_Del,Type_Ref,RME_CAP_SIG);
ffffffff8021d1a8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021d1ad:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff8021d1b4:	7f ff ff 
ffffffff8021d1b7:	48 21 c2             	and    %rax,%rdx
ffffffff8021d1ba:	e8 c2 e6 fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021d1bf:	48 c7 c2 fa ff ff ff 	mov    $0xfffffffffffffffa,%rdx
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
    
    return 0;
}
ffffffff8021d1c6:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021d1ca:	48 89 d0             	mov    %rdx,%rax
ffffffff8021d1cd:	5b                   	pop    %rbx
ffffffff8021d1ce:	c3                   	retq   
    Sig_Struct=RME_CAP_GETOBJ(Sig_Del,struct RME_Sig_Struct*);
    
    /* See if the signal endpoint is currently used. If yes, we cannot delete it */
    if(Sig_Struct->Thd!=0)
    {
        RME_CAP_DEFROST(Sig_Del,Type_Ref);
ffffffff8021d1cf:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021d1d4:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff8021d1db:	7f ff ff 
ffffffff8021d1de:	48 21 c2             	and    %rax,%rdx
ffffffff8021d1e1:	e8 9b e6 fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff8021d1e6:	48 c7 c2 e1 ff ff ff 	mov    $0xffffffffffffffe1,%rdx
    RME_CAP_REMDEL(Sig_Del,Type_Ref);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Sig_Struct,RME_SIG_SIZE)!=0);
    
    return 0;
}
ffffffff8021d1ed:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021d1f1:	48 89 d0             	mov    %rdx,%rax
ffffffff8021d1f4:	5b                   	pop    %rbx
ffffffff8021d1f5:	c3                   	retq   
ffffffff8021d1f6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021d1fd:	00 00 00 

ffffffff8021d200 <_RME_Kern_Snd>:
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Unblock;
    ptr_t CPUID;
    
    /* Cannot send to a user endpoint in the kernel */
    if(Sig_Struct->Kernel_Flag==0)
ffffffff8021d200:	48 83 3e 00          	cmpq   $0x0,(%rsi)
        return RME_ERR_SIV_CONFLICT;
ffffffff8021d204:	48 c7 c0 dd ff ff ff 	mov    $0xffffffffffffffdd,%rax
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Unblock;
    ptr_t CPUID;
    
    /* Cannot send to a user endpoint in the kernel */
    if(Sig_Struct->Kernel_Flag==0)
ffffffff8021d20b:	74 4d                	je     ffffffff8021d25a <_RME_Kern_Snd+0x5a>
              struct RME_Sig_Struct* Sig - The signal structure.
Output      : None.
Return      : ret_t - If successful, 0, or an error code.
******************************************************************************/
ret_t _RME_Kern_Snd(struct RME_Reg_Struct* Reg, struct RME_Sig_Struct* Sig_Struct)
{
ffffffff8021d20d:	41 55                	push   %r13
ffffffff8021d20f:	41 54                	push   %r12
ffffffff8021d211:	49 89 fc             	mov    %rdi,%r12
ffffffff8021d214:	55                   	push   %rbp
ffffffff8021d215:	53                   	push   %rbx
ffffffff8021d216:	48 89 f3             	mov    %rsi,%rbx
ffffffff8021d219:	48 83 ec 08          	sub    $0x8,%rsp
    /* Cannot send to a user endpoint in the kernel */
    if(Sig_Struct->Kernel_Flag==0)
        return RME_ERR_SIV_CONFLICT;
    /* See if we can receive on that endpoint - if someone blocks, we must
     * wait for it to unblock before we can proceed */
    CPUID=RME_CPUID();
ffffffff8021d21d:	e8 1d e6 fe ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
    Thd_Struct=Sig_Struct->Thd;
ffffffff8021d222:	48 8b 6b 10          	mov    0x10(%rbx),%rbp
    /* Cannot send to a user endpoint in the kernel */
    if(Sig_Struct->Kernel_Flag==0)
        return RME_ERR_SIV_CONFLICT;
    /* See if we can receive on that endpoint - if someone blocks, we must
     * wait for it to unblock before we can proceed */
    CPUID=RME_CPUID();
ffffffff8021d226:	49 89 c5             	mov    %rax,%r13
    Thd_Struct=Sig_Struct->Thd;
    /* If and only if we are calling from the same core as the blocked thread do
     * we actually unblock. Use an intermediate variable Unblock to avoid optimizations */
    if(Thd_Struct!=0)
ffffffff8021d229:	48 85 ed             	test   %rbp,%rbp
ffffffff8021d22c:	74 06                	je     ffffffff8021d234 <_RME_Kern_Snd+0x34>
    {
        if(Thd_Struct->Sched.CPUID_Bind==CPUID)
ffffffff8021d22e:	48 3b 45 28          	cmp    0x28(%rbp),%rax
ffffffff8021d232:	74 2c                	je     ffffffff8021d260 <_RME_Kern_Snd+0x60>
    }
    else
    {
        /* The guy who blocked on it is not on our core, or nobody blocked.
         * We just faa the counter value and return */
        if(__RME_Fetch_Add(&(Sig_Struct->Signal_Num),1)>RME_MAX_SIG_NUM)
ffffffff8021d234:	48 83 c3 08          	add    $0x8,%rbx
ffffffff8021d238:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021d23d:	48 89 df             	mov    %rbx,%rdi
ffffffff8021d240:	e8 59 e6 fe ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
ffffffff8021d245:	48 85 c0             	test   %rax,%rax
ffffffff8021d248:	0f 88 9f 00 00 00    	js     ffffffff8021d2ed <_RME_Kern_Snd+0xed>
            __RME_Fetch_Add(&(Sig_Struct->Signal_Num),-1);
            return RME_ERR_SIV_FULL;
        }
    }

    return 0;
ffffffff8021d24e:	31 c0                	xor    %eax,%eax
}
ffffffff8021d250:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021d254:	5b                   	pop    %rbx
ffffffff8021d255:	5d                   	pop    %rbp
ffffffff8021d256:	41 5c                	pop    %r12
ffffffff8021d258:	41 5d                	pop    %r13
ffffffff8021d25a:	f3 c3                	repz retq 
ffffffff8021d25c:	0f 1f 40 00          	nopl   0x0(%rax)
    
    if(Unblock!=0)
    {
        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value, then see if we need a preemption */
        __RME_Set_Syscall_Retval(&(Thd_Struct->Cur_Reg->Reg), Sig_Struct->Signal_Num);
ffffffff8021d260:	48 8b 73 08          	mov    0x8(%rbx),%rsi
ffffffff8021d264:	48 8b bd 80 00 00 00 	mov    0x80(%rbp),%rdi
ffffffff8021d26b:	e8 d0 6a ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
        /* See if the thread still have time left */
        if(Thd_Struct->Sched.Slices!=0)
ffffffff8021d270:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff8021d275:	74 29                	je     ffffffff8021d2a0 <_RME_Kern_Snd+0xa0>
        {
            /* Put this into the runqueue */
            _RME_Run_Ins(Thd_Struct);
ffffffff8021d277:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021d27a:	e8 e1 ba ff ff       	callq  ffffffff80218d60 <_RME_Run_Ins>
            /* See if it will preempt us */
            if(Thd_Struct->Sched.Prio>RME_Cur_Thd[CPUID]->Sched.Prio)
ffffffff8021d27f:	4a 8b 34 ed 00 28 22 	mov    -0x7fddd800(,%r13,8),%rsi
ffffffff8021d286:	80 
ffffffff8021d287:	48 8b 46 48          	mov    0x48(%rsi),%rax
ffffffff8021d28b:	48 39 45 48          	cmp    %rax,0x48(%rbp)
ffffffff8021d28f:	77 2f                	ja     ffffffff8021d2c0 <_RME_Kern_Snd+0xc0>
                RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
                Thd_Struct->Sched.State=RME_THD_RUNNING;
                RME_Cur_Thd[CPUID]=Thd_Struct;
            }
            else
                Thd_Struct->Sched.State=RME_THD_READY;
ffffffff8021d291:	48 c7 45 38 01 00 00 	movq   $0x1,0x38(%rbp)
ffffffff8021d298:	00 
ffffffff8021d299:	eb 15                	jmp    ffffffff8021d2b0 <_RME_Kern_Snd+0xb0>
ffffffff8021d29b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
        else
        {
            /* No slices left. This is because we delegated all of its time
             * to someone else. Notify the parent, and change the state of this
             * thread to TIMEOUT */
            Thd_Struct->Sched.State=RME_THD_TIMEOUT;
ffffffff8021d2a0:	48 c7 45 38 03 00 00 	movq   $0x3,0x38(%rbp)
ffffffff8021d2a7:	00 
            /* Notify the parent about this */
            _RME_Run_Notif(Thd_Struct);
ffffffff8021d2a8:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021d2ab:	e8 30 bc ff ff       	callq  ffffffff80218ee0 <_RME_Run_Notif>
        }
        
        /* Clear the blocking status of the endpoint up */
        Sig_Struct->Thd=0;
ffffffff8021d2b0:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
ffffffff8021d2b7:	00 
            __RME_Fetch_Add(&(Sig_Struct->Signal_Num),-1);
            return RME_ERR_SIV_FULL;
        }
    }

    return 0;
ffffffff8021d2b8:	31 c0                	xor    %eax,%eax
ffffffff8021d2ba:	eb 94                	jmp    ffffffff8021d250 <_RME_Kern_Snd+0x50>
ffffffff8021d2bc:	0f 1f 40 00          	nopl   0x0(%rax)
            _RME_Run_Ins(Thd_Struct);
            /* See if it will preempt us */
            if(Thd_Struct->Sched.Prio>RME_Cur_Thd[CPUID]->Sched.Prio)
            {
                /* Yes. Do a context switch */
                _RME_Run_Swt(Reg,RME_Cur_Thd[CPUID],Thd_Struct);
ffffffff8021d2c0:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021d2c3:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021d2c6:	e8 45 bc ff ff       	callq  ffffffff80218f10 <_RME_Run_Swt>
                RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
ffffffff8021d2cb:	4a 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%r13,8),%rax
ffffffff8021d2d2:	80 
ffffffff8021d2d3:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff8021d2da:	00 
                Thd_Struct->Sched.State=RME_THD_RUNNING;
ffffffff8021d2db:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8021d2e2:	00 
                RME_Cur_Thd[CPUID]=Thd_Struct;
ffffffff8021d2e3:	4a 89 2c ed 00 28 22 	mov    %rbp,-0x7fddd800(,%r13,8)
ffffffff8021d2ea:	80 
ffffffff8021d2eb:	eb c3                	jmp    ffffffff8021d2b0 <_RME_Kern_Snd+0xb0>
    {
        /* The guy who blocked on it is not on our core, or nobody blocked.
         * We just faa the counter value and return */
        if(__RME_Fetch_Add(&(Sig_Struct->Signal_Num),1)>RME_MAX_SIG_NUM)
        {
            __RME_Fetch_Add(&(Sig_Struct->Signal_Num),-1);
ffffffff8021d2ed:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021d2f4:	48 89 df             	mov    %rbx,%rdi
ffffffff8021d2f7:	e8 a2 e5 fe ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff8021d2fc:	48 c7 c0 df ff ff ff 	mov    $0xffffffffffffffdf,%rax
ffffffff8021d303:	e9 48 ff ff ff       	jmpq   ffffffff8021d250 <_RME_Kern_Snd+0x50>
ffffffff8021d308:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021d30f:	00 

ffffffff8021d310 <_RME_Sig_Snd>:
              cid_t Cap_Sig - The capability to the signal. 2-Level.
Output      : None.
Return      : ret_t - If successful, 0, or an error code.
******************************************************************************/
ret_t _RME_Sig_Snd(struct RME_Cap_Captbl* Captbl, struct RME_Reg_Struct* Reg, cid_t Cap_Sig)
{
ffffffff8021d310:	41 55                	push   %r13
ffffffff8021d312:	41 54                	push   %r12
ffffffff8021d314:	55                   	push   %rbp
ffffffff8021d315:	53                   	push   %rbx
ffffffff8021d316:	48 83 ec 08          	sub    $0x8,%rsp
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Unblock;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Sig,RME_CAP_SIG,struct RME_Cap_Sig*,Sig_Op);    
ffffffff8021d31a:	f6 c6 80             	test   $0x80,%dh
ffffffff8021d31d:	75 31                	jne    ffffffff8021d350 <_RME_Sig_Snd+0x40>
ffffffff8021d31f:	48 39 57 28          	cmp    %rdx,0x28(%rdi)
ffffffff8021d323:	0f 86 7f 01 00 00    	jbe    ffffffff8021d4a8 <_RME_Sig_Snd+0x198>
ffffffff8021d329:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021d32d:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021d334:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021d337:	48 03 5f 18          	add    0x18(%rdi),%rbx
ffffffff8021d33b:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8021d33e:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021d341:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021d345:	48 83 f9 08          	cmp    $0x8,%rcx
ffffffff8021d349:	74 77                	je     ffffffff8021d3c2 <_RME_Sig_Snd+0xb2>
ffffffff8021d34b:	e9 d6 00 00 00       	jmpq   ffffffff8021d426 <_RME_Sig_Snd+0x116>
ffffffff8021d350:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021d353:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff8021d357:	48 3b 4f 28          	cmp    0x28(%rdi),%rcx
ffffffff8021d35b:	0f 83 47 01 00 00    	jae    ffffffff8021d4a8 <_RME_Sig_Snd+0x198>
ffffffff8021d361:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021d365:	48 03 4f 18          	add    0x18(%rdi),%rcx
ffffffff8021d369:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021d370:	80 00 00 
ffffffff8021d373:	48 8b 01             	mov    (%rcx),%rax
ffffffff8021d376:	48 85 f8             	test   %rdi,%rax
ffffffff8021d379:	0f 85 39 01 00 00    	jne    ffffffff8021d4b8 <_RME_Sig_Snd+0x1a8>
ffffffff8021d37f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021d383:	48 89 c7             	mov    %rax,%rdi
ffffffff8021d386:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021d38d:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021d391:	0f 85 8f 00 00 00    	jne    ffffffff8021d426 <_RME_Sig_Snd+0x116>
ffffffff8021d397:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021d39d:	48 3b 51 28          	cmp    0x28(%rcx),%rdx
ffffffff8021d3a1:	0f 83 01 01 00 00    	jae    ffffffff8021d4a8 <_RME_Sig_Snd+0x198>
ffffffff8021d3a7:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021d3ab:	48 89 d3             	mov    %rdx,%rbx
ffffffff8021d3ae:	48 03 59 18          	add    0x18(%rcx),%rbx
ffffffff8021d3b2:	48 8b 13             	mov    (%rbx),%rdx
ffffffff8021d3b5:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021d3b8:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021d3bc:	48 83 f9 08          	cmp    $0x8,%rcx
ffffffff8021d3c0:	75 64                	jne    ffffffff8021d426 <_RME_Sig_Snd+0x116>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
ffffffff8021d3c2:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021d3c9:	80 00 00 
ffffffff8021d3cc:	48 85 c2             	test   %rax,%rdx
ffffffff8021d3cf:	0f 85 e3 00 00 00    	jne    ffffffff8021d4b8 <_RME_Sig_Snd+0x1a8>
ffffffff8021d3d5:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8021d3d9:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021d3e0:	74 44                	je     ffffffff8021d426 <_RME_Sig_Snd+0x116>
ffffffff8021d3e2:	49 89 f5             	mov    %rsi,%r13
    
    /* See if we can receive on that endpoint - if someone blocks, we must
     * wait for it to unblock before we can proceed */
    CPUID=RME_CPUID();
ffffffff8021d3e5:	e8 55 e4 fe ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
    Sig_Struct=RME_CAP_GETOBJ(Sig_Op,struct RME_Sig_Struct*);
ffffffff8021d3ea:	48 8b 5b 18          	mov    0x18(%rbx),%rbx
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_SND);
    
    /* See if we can receive on that endpoint - if someone blocks, we must
     * wait for it to unblock before we can proceed */
    CPUID=RME_CPUID();
ffffffff8021d3ee:	49 89 c4             	mov    %rax,%r12
    Sig_Struct=RME_CAP_GETOBJ(Sig_Op,struct RME_Sig_Struct*);
    Thd_Struct=Sig_Struct->Thd;
ffffffff8021d3f1:	48 8b 6b 10          	mov    0x10(%rbx),%rbp
    /* If and only if we are calling from the same core as the blocked thread do
     * we actually unblock. Use an intermediate variable Unblock to avoid optimizations */
    if(Thd_Struct!=0)
ffffffff8021d3f5:	48 85 ed             	test   %rbp,%rbp
ffffffff8021d3f8:	74 06                	je     ffffffff8021d400 <_RME_Sig_Snd+0xf0>
    {
        if(Thd_Struct->Sched.CPUID_Bind==CPUID)
ffffffff8021d3fa:	48 3b 45 28          	cmp    0x28(%rbp),%rax
ffffffff8021d3fe:	74 38                	je     ffffffff8021d438 <_RME_Sig_Snd+0x128>
        Sig_Struct->Thd=0;
    }
    else
    {
        /* The guy who blocked on it is not on our core, we just faa and return */
        if(__RME_Fetch_Add(&(Sig_Struct->Signal_Num),1)>RME_MAX_SIG_NUM)
ffffffff8021d400:	48 83 c3 08          	add    $0x8,%rbx
ffffffff8021d404:	be 01 00 00 00       	mov    $0x1,%esi
ffffffff8021d409:	48 89 df             	mov    %rbx,%rdi
ffffffff8021d40c:	e8 8d e4 fe ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
ffffffff8021d411:	48 85 c0             	test   %rax,%rax
ffffffff8021d414:	0f 88 db 00 00 00    	js     ffffffff8021d4f5 <_RME_Sig_Snd+0x1e5>
        {
            __RME_Fetch_Add(&(Sig_Struct->Signal_Num),-1);
            return RME_ERR_SIV_FULL;
        }
        /* Now save the system call return value to the caller stack */
        __RME_Set_Syscall_Retval(Reg,0);
ffffffff8021d41a:	31 f6                	xor    %esi,%esi
ffffffff8021d41c:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021d41f:	e8 1c 69 ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
    }

    return 0;
ffffffff8021d424:	31 c0                	xor    %eax,%eax
}
ffffffff8021d426:	48 83 c4 08          	add    $0x8,%rsp
ffffffff8021d42a:	5b                   	pop    %rbx
ffffffff8021d42b:	5d                   	pop    %rbp
ffffffff8021d42c:	41 5c                	pop    %r12
ffffffff8021d42e:	41 5d                	pop    %r13
ffffffff8021d430:	c3                   	retq   
ffffffff8021d431:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
        Unblock=0;
    
    if(Unblock!=0)
    {
        /* Now save the system call return value to the caller stack */
        __RME_Set_Syscall_Retval(Reg,0);
ffffffff8021d438:	31 f6                	xor    %esi,%esi
ffffffff8021d43a:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021d43d:	e8 fe 68 ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
        /* The thread is blocked, and it is on our core. Unblock it, and
         * set the return value, then see if we need a preemption */
        __RME_Set_Syscall_Retval(&(Thd_Struct->Cur_Reg->Reg), Sig_Struct->Signal_Num);
ffffffff8021d442:	48 8b 73 08          	mov    0x8(%rbx),%rsi
ffffffff8021d446:	48 8b bd 80 00 00 00 	mov    0x80(%rbp),%rdi
ffffffff8021d44d:	e8 ee 68 ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
        /* See if the thread still have time left */
        if(Thd_Struct->Sched.Slices!=0)
ffffffff8021d452:	48 83 7d 30 00       	cmpq   $0x0,0x30(%rbp)
ffffffff8021d457:	74 27                	je     ffffffff8021d480 <_RME_Sig_Snd+0x170>
        {
            /* Put this into the runqueue */
            _RME_Run_Ins(Thd_Struct);
ffffffff8021d459:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021d45c:	e8 ff b8 ff ff       	callq  ffffffff80218d60 <_RME_Run_Ins>
            /* See if it will preempt us */
            if(Thd_Struct->Sched.Prio>RME_Cur_Thd[CPUID]->Sched.Prio)
ffffffff8021d461:	4a 8b 34 e5 00 28 22 	mov    -0x7fddd800(,%r12,8),%rsi
ffffffff8021d468:	80 
ffffffff8021d469:	48 8b 46 48          	mov    0x48(%rsi),%rax
ffffffff8021d46d:	48 39 45 48          	cmp    %rax,0x48(%rbp)
ffffffff8021d471:	77 55                	ja     ffffffff8021d4c8 <_RME_Sig_Snd+0x1b8>
                RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
                Thd_Struct->Sched.State=RME_THD_RUNNING;
                RME_Cur_Thd[CPUID]=Thd_Struct;
            }
            else
                Thd_Struct->Sched.State=RME_THD_READY;
ffffffff8021d473:	48 c7 45 38 01 00 00 	movq   $0x1,0x38(%rbp)
ffffffff8021d47a:	00 
ffffffff8021d47b:	eb 13                	jmp    ffffffff8021d490 <_RME_Sig_Snd+0x180>
ffffffff8021d47d:	0f 1f 00             	nopl   (%rax)
        else
        {
            /* No slices left. This is because we delegated all of its time
             * to someone else. Notify the parent, and change the state of this
             * thread to TIMEOUT */
            Thd_Struct->Sched.State=RME_THD_TIMEOUT;
ffffffff8021d480:	48 c7 45 38 03 00 00 	movq   $0x3,0x38(%rbp)
ffffffff8021d487:	00 
            /* Notify the parent about this */
            _RME_Run_Notif(Thd_Struct);
ffffffff8021d488:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021d48b:	e8 50 ba ff ff       	callq  ffffffff80218ee0 <_RME_Run_Notif>
        }
        
        /* Clear the blocking status of the endpoint up */
        Sig_Struct->Thd=0;
ffffffff8021d490:	48 c7 43 10 00 00 00 	movq   $0x0,0x10(%rbx)
ffffffff8021d497:	00 
        /* Now save the system call return value to the caller stack */
        __RME_Set_Syscall_Retval(Reg,0);
    }

    return 0;
}
ffffffff8021d498:	48 83 c4 08          	add    $0x8,%rsp
        }
        /* Now save the system call return value to the caller stack */
        __RME_Set_Syscall_Retval(Reg,0);
    }

    return 0;
ffffffff8021d49c:	31 c0                	xor    %eax,%eax
}
ffffffff8021d49e:	5b                   	pop    %rbx
ffffffff8021d49f:	5d                   	pop    %rbp
ffffffff8021d4a0:	41 5c                	pop    %r12
ffffffff8021d4a2:	41 5d                	pop    %r13
ffffffff8021d4a4:	c3                   	retq   
ffffffff8021d4a5:	0f 1f 00             	nopl   (%rax)
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Unblock;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Sig,RME_CAP_SIG,struct RME_Cap_Sig*,Sig_Op);    
ffffffff8021d4a8:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021d4af:	e9 72 ff ff ff       	jmpq   ffffffff8021d426 <_RME_Sig_Snd+0x116>
ffffffff8021d4b4:	0f 1f 40 00          	nopl   0x0(%rax)
ffffffff8021d4b8:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021d4bf:	e9 62 ff ff ff       	jmpq   ffffffff8021d426 <_RME_Sig_Snd+0x116>
ffffffff8021d4c4:	0f 1f 40 00          	nopl   0x0(%rax)
            _RME_Run_Ins(Thd_Struct);
            /* See if it will preempt us */
            if(Thd_Struct->Sched.Prio>RME_Cur_Thd[CPUID]->Sched.Prio)
            {
                /* Yes. Do a context switch */
                _RME_Run_Swt(Reg,RME_Cur_Thd[CPUID],Thd_Struct);
ffffffff8021d4c8:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021d4cb:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021d4ce:	e8 3d ba ff ff       	callq  ffffffff80218f10 <_RME_Run_Swt>
                RME_Cur_Thd[CPUID]->Sched.State=RME_THD_READY;
ffffffff8021d4d3:	4a 8b 04 e5 00 28 22 	mov    -0x7fddd800(,%r12,8),%rax
ffffffff8021d4da:	80 
ffffffff8021d4db:	48 c7 40 38 01 00 00 	movq   $0x1,0x38(%rax)
ffffffff8021d4e2:	00 
                Thd_Struct->Sched.State=RME_THD_RUNNING;
ffffffff8021d4e3:	48 c7 45 38 00 00 00 	movq   $0x0,0x38(%rbp)
ffffffff8021d4ea:	00 
                RME_Cur_Thd[CPUID]=Thd_Struct;
ffffffff8021d4eb:	4a 89 2c e5 00 28 22 	mov    %rbp,-0x7fddd800(,%r12,8)
ffffffff8021d4f2:	80 
ffffffff8021d4f3:	eb 9b                	jmp    ffffffff8021d490 <_RME_Sig_Snd+0x180>
    else
    {
        /* The guy who blocked on it is not on our core, we just faa and return */
        if(__RME_Fetch_Add(&(Sig_Struct->Signal_Num),1)>RME_MAX_SIG_NUM)
        {
            __RME_Fetch_Add(&(Sig_Struct->Signal_Num),-1);
ffffffff8021d4f5:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021d4fc:	48 89 df             	mov    %rbx,%rdi
ffffffff8021d4ff:	e8 9a e3 fe ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
            return RME_ERR_SIV_FULL;
ffffffff8021d504:	48 c7 c0 df ff ff ff 	mov    $0xffffffffffffffdf,%rax
ffffffff8021d50b:	e9 16 ff ff ff       	jmpq   ffffffff8021d426 <_RME_Sig_Snd+0x116>

ffffffff8021d510 <_RME_Sig_Rcv>:
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Old_Value;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Sig,RME_CAP_SIG,struct RME_Cap_Sig*,Sig_Op);    
ffffffff8021d510:	f6 c6 80             	test   $0x80,%dh
ffffffff8021d513:	75 2b                	jne    ffffffff8021d540 <_RME_Sig_Rcv+0x30>
ffffffff8021d515:	48 39 57 28          	cmp    %rdx,0x28(%rdi)
ffffffff8021d519:	0f 86 a1 01 00 00    	jbe    ffffffff8021d6c0 <_RME_Sig_Rcv+0x1b0>
ffffffff8021d51f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021d523:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8021d527:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021d52e:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021d531:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021d534:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021d538:	48 83 ff 08          	cmp    $0x8,%rdi
ffffffff8021d53c:	74 75                	je     ffffffff8021d5b3 <_RME_Sig_Rcv+0xa3>
ffffffff8021d53e:	f3 c3                	repz retq 
ffffffff8021d540:	48 89 d1             	mov    %rdx,%rcx
ffffffff8021d543:	48 c1 f9 10          	sar    $0x10,%rcx
ffffffff8021d547:	48 3b 4f 28          	cmp    0x28(%rdi),%rcx
ffffffff8021d54b:	0f 83 6f 01 00 00    	jae    ffffffff8021d6c0 <_RME_Sig_Rcv+0x1b0>
ffffffff8021d551:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021d555:	48 03 4f 18          	add    0x18(%rdi),%rcx
ffffffff8021d559:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021d560:	80 00 00 
ffffffff8021d563:	48 8b 01             	mov    (%rcx),%rax
ffffffff8021d566:	48 85 f8             	test   %rdi,%rax
ffffffff8021d569:	0f 85 61 01 00 00    	jne    ffffffff8021d6d0 <_RME_Sig_Rcv+0x1c0>
ffffffff8021d56f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021d573:	48 89 c7             	mov    %rax,%rdi
ffffffff8021d576:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021d57d:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021d581:	0f 85 d2 00 00 00    	jne    ffffffff8021d659 <_RME_Sig_Rcv+0x149>
ffffffff8021d587:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021d58d:	48 3b 51 28          	cmp    0x28(%rcx),%rdx
ffffffff8021d591:	0f 83 29 01 00 00    	jae    ffffffff8021d6c0 <_RME_Sig_Rcv+0x1b0>
ffffffff8021d597:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021d59b:	48 03 51 18          	add    0x18(%rcx),%rdx
ffffffff8021d59f:	48 8b 0a             	mov    (%rdx),%rcx
ffffffff8021d5a2:	48 89 cf             	mov    %rcx,%rdi
ffffffff8021d5a5:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021d5a9:	48 83 ff 08          	cmp    $0x8,%rdi
ffffffff8021d5ad:	0f 85 a6 00 00 00    	jne    ffffffff8021d659 <_RME_Sig_Rcv+0x149>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV);
ffffffff8021d5b3:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021d5ba:	80 00 00 
ffffffff8021d5bd:	48 85 c1             	test   %rax,%rcx
ffffffff8021d5c0:	0f 85 0a 01 00 00    	jne    ffffffff8021d6d0 <_RME_Sig_Rcv+0x1c0>
ffffffff8021d5c6:	f6 42 10 02          	testb  $0x2,0x10(%rdx)
ffffffff8021d5ca:	0f 84 20 01 00 00    	je     ffffffff8021d6f0 <_RME_Sig_Rcv+0x1e0>
Output      : None.
Return      : ret_t - If successful, a non-negative number containing the current
                      counter value will be returned; else an error code.
******************************************************************************/
ret_t _RME_Sig_Rcv(struct RME_Cap_Captbl* Captbl, struct RME_Reg_Struct* Reg, cid_t Cap_Sig)
{
ffffffff8021d5d0:	41 55                	push   %r13
ffffffff8021d5d2:	41 54                	push   %r12
    /* See if we can receive on that endpoint - if someone blocks, we must
     * wait for it to unblock before we can proceed */
    Sig_Struct=RME_CAP_GETOBJ(Sig_Op,struct RME_Sig_Struct*);
    Thd_Struct=Sig_Struct->Thd;
    if(Thd_Struct!=0)
        return RME_ERR_SIV_ACT;
ffffffff8021d5d4:	48 c7 c0 e1 ff ff ff 	mov    $0xffffffffffffffe1,%rax
Output      : None.
Return      : ret_t - If successful, a non-negative number containing the current
                      counter value will be returned; else an error code.
******************************************************************************/
ret_t _RME_Sig_Rcv(struct RME_Cap_Captbl* Captbl, struct RME_Reg_Struct* Reg, cid_t Cap_Sig)
{
ffffffff8021d5db:	55                   	push   %rbp
ffffffff8021d5dc:	53                   	push   %rbx
ffffffff8021d5dd:	48 83 ec 18          	sub    $0x18,%rsp
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV);
    
    /* See if we can receive on that endpoint - if someone blocks, we must
     * wait for it to unblock before we can proceed */
    Sig_Struct=RME_CAP_GETOBJ(Sig_Op,struct RME_Sig_Struct*);
ffffffff8021d5e1:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
    Thd_Struct=Sig_Struct->Thd;
    if(Thd_Struct!=0)
ffffffff8021d5e5:	48 83 7b 10 00       	cmpq   $0x0,0x10(%rbx)
ffffffff8021d5ea:	75 63                	jne    ffffffff8021d64f <_RME_Sig_Rcv+0x13f>
ffffffff8021d5ec:	49 89 f4             	mov    %rsi,%r12
        return RME_ERR_SIV_ACT;
    
    /* Are we trying to let a boot-time thread block on a signal? This is NOT allowed */
    CPUID=RME_CPUID();
ffffffff8021d5ef:	e8 4b e2 fe ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
    Thd_Struct=RME_Cur_Thd[CPUID];
ffffffff8021d5f4:	48 8b 2c c5 00 28 22 	mov    -0x7fddd800(,%rax,8),%rbp
ffffffff8021d5fb:	80 
    Thd_Struct=Sig_Struct->Thd;
    if(Thd_Struct!=0)
        return RME_ERR_SIV_ACT;
    
    /* Are we trying to let a boot-time thread block on a signal? This is NOT allowed */
    CPUID=RME_CPUID();
ffffffff8021d5fc:	49 89 c5             	mov    %rax,%r13
    Thd_Struct=RME_Cur_Thd[CPUID];
    if(Thd_Struct->Sched.Slices==RME_THD_INIT_TIME)
ffffffff8021d5ff:	48 b8 ff ff ff ff ff 	movabs $0x7fffffffffffffff,%rax
ffffffff8021d606:	ff ff 7f 
ffffffff8021d609:	48 39 45 30          	cmp    %rax,0x30(%rbp)
ffffffff8021d60d:	0f 84 e5 00 00 00    	je     ffffffff8021d6f8 <_RME_Sig_Rcv+0x1e8>
        return RME_ERR_SIV_BOOT;
    
    /* Are there any counts available? If yes, just take one and return. We cannot
     * use faa here because we don't know if we will get it below zero */
    Old_Value=Sig_Struct->Signal_Num;
ffffffff8021d613:	48 8b 53 08          	mov    0x8(%rbx),%rdx
    if(Old_Value>0)
ffffffff8021d617:	48 85 d2             	test   %rdx,%rdx
    if(Thd_Struct->Sched.Slices==RME_THD_INIT_TIME)
        return RME_ERR_SIV_BOOT;
    
    /* Are there any counts available? If yes, just take one and return. We cannot
     * use faa here because we don't know if we will get it below zero */
    Old_Value=Sig_Struct->Signal_Num;
ffffffff8021d61a:	48 89 54 24 08       	mov    %rdx,0x8(%rsp)
    if(Old_Value>0)
ffffffff8021d61f:	74 3f                	je     ffffffff8021d660 <_RME_Sig_Rcv+0x150>
    {
        /* Try to take it */
        if(__RME_Comp_Swap(&(Sig_Struct->Signal_Num),&Old_Value,Old_Value-1)==0)
ffffffff8021d621:	48 8d 7b 08          	lea    0x8(%rbx),%rdi
ffffffff8021d625:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021d62a:	48 83 ea 01          	sub    $0x1,%rdx
ffffffff8021d62e:	e8 4e e2 fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021d633:	48 85 c0             	test   %rax,%rax
ffffffff8021d636:	0f 84 a4 00 00 00    	je     ffffffff8021d6e0 <_RME_Sig_Rcv+0x1d0>
            return RME_ERR_SIV_CONFLICT;
        /* We have taken it, now return the number of remaining signals */
        __RME_Set_Syscall_Retval(Reg, Old_Value-1);
ffffffff8021d63c:	48 8b 44 24 08       	mov    0x8(%rsp),%rax
ffffffff8021d641:	4c 89 e7             	mov    %r12,%rdi
ffffffff8021d644:	48 8d 70 ff          	lea    -0x1(%rax),%rsi
ffffffff8021d648:	e8 f3 66 ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
        return 0;
ffffffff8021d64d:	31 c0                	xor    %eax,%eax
        _RME_Run_Swt(Reg,Thd_Struct,RME_Cur_Thd[CPUID]);
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_RUNNING;
    }
    
    return 0;
}
ffffffff8021d64f:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021d653:	5b                   	pop    %rbx
ffffffff8021d654:	5d                   	pop    %rbp
ffffffff8021d655:	41 5c                	pop    %r12
ffffffff8021d657:	41 5d                	pop    %r13
ffffffff8021d659:	f3 c3                	repz retq 
ffffffff8021d65b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    }
    else
    {
        /* Try to take it */
        Old_Value=0;
        if(__RME_Comp_Swap((ptr_t*)(&(Sig_Struct->Thd)),&Old_Value,(ptr_t)Thd_Struct)==0)
ffffffff8021d660:	48 8d 7b 10          	lea    0x10(%rbx),%rdi
ffffffff8021d664:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021d669:	48 89 ea             	mov    %rbp,%rdx
ffffffff8021d66c:	e8 10 e2 fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021d671:	48 85 c0             	test   %rax,%rax
ffffffff8021d674:	74 6a                	je     ffffffff8021d6e0 <_RME_Sig_Rcv+0x1d0>
        /* We have taken it, now we block our current thread. No need to set any
         * return value to the register set here, because we do not yet know how
         * many signals will be there when the thread unblocks */
        Thd_Struct->Sched.State=RME_THD_BLOCKED;
        Thd_Struct->Sched.Signal=Sig_Struct;
        _RME_Run_Del(Thd_Struct);
ffffffff8021d676:	48 89 ef             	mov    %rbp,%rdi
        if(__RME_Comp_Swap((ptr_t*)(&(Sig_Struct->Thd)),&Old_Value,(ptr_t)Thd_Struct)==0)
            return RME_ERR_SIV_CONFLICT;
        /* We have taken it, now we block our current thread. No need to set any
         * return value to the register set here, because we do not yet know how
         * many signals will be there when the thread unblocks */
        Thd_Struct->Sched.State=RME_THD_BLOCKED;
ffffffff8021d679:	48 c7 45 38 02 00 00 	movq   $0x2,0x38(%rbp)
ffffffff8021d680:	00 
        Thd_Struct->Sched.Signal=Sig_Struct;
ffffffff8021d681:	48 89 5d 58          	mov    %rbx,0x58(%rbp)
        _RME_Run_Del(Thd_Struct);
ffffffff8021d685:	e8 46 b7 ff ff       	callq  ffffffff80218dd0 <_RME_Run_Del>
        RME_Cur_Thd[CPUID]=_RME_Run_High(CPUID);
ffffffff8021d68a:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021d68d:	e8 ae b7 ff ff       	callq  ffffffff80218e40 <_RME_Run_High>
        _RME_Run_Swt(Reg,Thd_Struct,RME_Cur_Thd[CPUID]);
ffffffff8021d692:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021d695:	48 89 c2             	mov    %rax,%rdx
ffffffff8021d698:	4c 89 e7             	mov    %r12,%rdi
         * return value to the register set here, because we do not yet know how
         * many signals will be there when the thread unblocks */
        Thd_Struct->Sched.State=RME_THD_BLOCKED;
        Thd_Struct->Sched.Signal=Sig_Struct;
        _RME_Run_Del(Thd_Struct);
        RME_Cur_Thd[CPUID]=_RME_Run_High(CPUID);
ffffffff8021d69b:	4a 89 04 ed 00 28 22 	mov    %rax,-0x7fddd800(,%r13,8)
ffffffff8021d6a2:	80 
        _RME_Run_Swt(Reg,Thd_Struct,RME_Cur_Thd[CPUID]);
ffffffff8021d6a3:	e8 68 b8 ff ff       	callq  ffffffff80218f10 <_RME_Run_Swt>
        RME_Cur_Thd[CPUID]->Sched.State=RME_THD_RUNNING;
ffffffff8021d6a8:	4a 8b 04 ed 00 28 22 	mov    -0x7fddd800(,%r13,8),%rax
ffffffff8021d6af:	80 
ffffffff8021d6b0:	48 c7 40 38 00 00 00 	movq   $0x0,0x38(%rax)
ffffffff8021d6b7:	00 
    }
    
    return 0;
ffffffff8021d6b8:	31 c0                	xor    %eax,%eax
ffffffff8021d6ba:	eb 93                	jmp    ffffffff8021d64f <_RME_Sig_Rcv+0x13f>
ffffffff8021d6bc:	0f 1f 40 00          	nopl   0x0(%rax)
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Old_Value;
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Sig,RME_CAP_SIG,struct RME_Cap_Sig*,Sig_Op);    
ffffffff8021d6c0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021d6c7:	c3                   	retq   
ffffffff8021d6c8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021d6cf:	00 
ffffffff8021d6d0:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021d6d7:	c3                   	retq   
ffffffff8021d6d8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021d6df:	00 
    Old_Value=Sig_Struct->Signal_Num;
    if(Old_Value>0)
    {
        /* Try to take it */
        if(__RME_Comp_Swap(&(Sig_Struct->Signal_Num),&Old_Value,Old_Value-1)==0)
            return RME_ERR_SIV_CONFLICT;
ffffffff8021d6e0:	48 c7 c0 dd ff ff ff 	mov    $0xffffffffffffffdd,%rax
ffffffff8021d6e7:	e9 63 ff ff ff       	jmpq   ffffffff8021d64f <_RME_Sig_Rcv+0x13f>
ffffffff8021d6ec:	0f 1f 40 00          	nopl   0x0(%rax)
    ptr_t CPUID;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Sig,RME_CAP_SIG,struct RME_Cap_Sig*,Sig_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Sig_Op,RME_SIG_FLAG_RCV);
ffffffff8021d6f0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021d6f7:	c3                   	retq   
    
    /* Are we trying to let a boot-time thread block on a signal? This is NOT allowed */
    CPUID=RME_CPUID();
    Thd_Struct=RME_Cur_Thd[CPUID];
    if(Thd_Struct->Sched.Slices==RME_THD_INIT_TIME)
        return RME_ERR_SIV_BOOT;
ffffffff8021d6f8:	48 c7 c0 db ff ff ff 	mov    $0xffffffffffffffdb,%rax
ffffffff8021d6ff:	e9 4b ff ff ff       	jmpq   ffffffff8021d64f <_RME_Sig_Rcv+0x13f>
ffffffff8021d704:	66 90                	xchg   %ax,%ax
ffffffff8021d706:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
ffffffff8021d70d:	00 00 00 

ffffffff8021d710 <_RME_Inv_Crt>:
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Inv_Crt(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl,
                   cid_t Cap_Kmem, cid_t Cap_Inv, cid_t Cap_Proc, ptr_t Vaddr)
{
ffffffff8021d710:	41 55                	push   %r13
ffffffff8021d712:	41 54                	push   %r12
ffffffff8021d714:	55                   	push   %rbp
ffffffff8021d715:	53                   	push   %rbx
ffffffff8021d716:	48 83 ec 18          	sub    $0x18,%rsp
    struct RME_Cap_Inv* Inv_Crt;
    struct RME_Inv_Struct* Inv_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021d71a:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021d720:	0f 85 2a 01 00 00    	jne    ffffffff8021d850 <_RME_Inv_Crt+0x140>
ffffffff8021d726:	48 8b 6f 28          	mov    0x28(%rdi),%rbp
ffffffff8021d72a:	48 39 f5             	cmp    %rsi,%rbp
ffffffff8021d72d:	0f 86 ed 02 00 00    	jbe    ffffffff8021da20 <_RME_Inv_Crt+0x310>
ffffffff8021d733:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
ffffffff8021d737:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021d73b:	49 c7 c4 fe ff ff ff 	mov    $0xfffffffffffffffe,%r12
ffffffff8021d742:	4c 01 de             	add    %r11,%rsi
ffffffff8021d745:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8021d748:	48 89 f8             	mov    %rdi,%rax
ffffffff8021d74b:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021d74f:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021d753:	0f 85 b6 02 00 00    	jne    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);
ffffffff8021d759:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8021d760:	0f 84 6d 01 00 00    	je     ffffffff8021d8d3 <_RME_Inv_Crt+0x1c3>
ffffffff8021d766:	4c 89 c0             	mov    %r8,%rax
ffffffff8021d769:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021d76d:	48 39 e8             	cmp    %rbp,%rax
ffffffff8021d770:	0f 83 aa 02 00 00    	jae    ffffffff8021da20 <_RME_Inv_Crt+0x310>
ffffffff8021d776:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021d77a:	48 bb 00 00 00 00 00 	movabs $0x800000000000,%rbx
ffffffff8021d781:	80 00 00 
ffffffff8021d784:	4c 01 d8             	add    %r11,%rax
ffffffff8021d787:	4c 8b 10             	mov    (%rax),%r10
ffffffff8021d78a:	49 85 da             	test   %rbx,%r10
ffffffff8021d78d:	0f 85 b5 02 00 00    	jne    ffffffff8021da48 <_RME_Inv_Crt+0x338>
ffffffff8021d793:	49 c1 ea 30          	shr    $0x30,%r10
    struct RME_Cap_Inv* Inv_Crt;
    struct RME_Inv_Struct* Inv_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021d797:	49 c7 c4 fe ff ff ff 	mov    $0xfffffffffffffffe,%r12
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);
ffffffff8021d79e:	49 83 fa 03          	cmp    $0x3,%r10
ffffffff8021d7a2:	0f 85 67 02 00 00    	jne    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
ffffffff8021d7a8:	41 81 e0 ff 7f 00 00 	and    $0x7fff,%r8d
ffffffff8021d7af:	4c 3b 40 28          	cmp    0x28(%rax),%r8
ffffffff8021d7b3:	0f 83 67 02 00 00    	jae    ffffffff8021da20 <_RME_Inv_Crt+0x310>
ffffffff8021d7b9:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8021d7bd:	4c 89 c3             	mov    %r8,%rbx
ffffffff8021d7c0:	48 03 58 18          	add    0x18(%rax),%rbx
ffffffff8021d7c4:	4c 8b 03             	mov    (%rbx),%r8
ffffffff8021d7c7:	4c 89 c0             	mov    %r8,%rax
ffffffff8021d7ca:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021d7ce:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021d7d2:	0f 85 37 02 00 00    	jne    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021d7d8:	f6 c6 80             	test   $0x80,%dh
ffffffff8021d7db:	0f 84 27 01 00 00    	je     ffffffff8021d908 <_RME_Inv_Crt+0x1f8>
ffffffff8021d7e1:	49 89 d2             	mov    %rdx,%r10
ffffffff8021d7e4:	49 c1 fa 10          	sar    $0x10,%r10
ffffffff8021d7e8:	49 39 ea             	cmp    %rbp,%r10
ffffffff8021d7eb:	0f 83 2f 02 00 00    	jae    ffffffff8021da20 <_RME_Inv_Crt+0x310>
ffffffff8021d7f1:	49 c1 e2 06          	shl    $0x6,%r10
ffffffff8021d7f5:	4d 01 da             	add    %r11,%r10
ffffffff8021d7f8:	49 bb 00 00 00 00 00 	movabs $0x800000000000,%r11
ffffffff8021d7ff:	80 00 00 
ffffffff8021d802:	49 8b 02             	mov    (%r10),%rax
ffffffff8021d805:	4c 85 d8             	test   %r11,%rax
ffffffff8021d808:	0f 85 3a 02 00 00    	jne    ffffffff8021da48 <_RME_Inv_Crt+0x338>
ffffffff8021d80e:	48 c1 e8 30          	shr    $0x30,%rax
    struct RME_Cap_Inv* Inv_Crt;
    struct RME_Inv_Struct* Inv_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021d812:	49 c7 c4 fe ff ff ff 	mov    $0xfffffffffffffffe,%r12
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021d819:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021d81d:	0f 85 ec 01 00 00    	jne    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
ffffffff8021d823:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021d829:	49 3b 52 28          	cmp    0x28(%r10),%rdx
ffffffff8021d82d:	0f 83 ed 01 00 00    	jae    ffffffff8021da20 <_RME_Inv_Crt+0x310>
ffffffff8021d833:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021d837:	48 89 d0             	mov    %rdx,%rax
ffffffff8021d83a:	49 03 42 18          	add    0x18(%r10),%rax
ffffffff8021d83e:	66 83 78 06 02       	cmpw   $0x2,0x6(%rax)
ffffffff8021d843:	0f 84 e2 00 00 00    	je     ffffffff8021d92b <_RME_Inv_Crt+0x21b>
ffffffff8021d849:	e9 c1 01 00 00       	jmpq   ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
ffffffff8021d84e:	66 90                	xchg   %ax,%ax
    struct RME_Cap_Inv* Inv_Crt;
    struct RME_Inv_Struct* Inv_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021d850:	48 8b 6f 28          	mov    0x28(%rdi),%rbp
ffffffff8021d854:	48 89 f0             	mov    %rsi,%rax
ffffffff8021d857:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021d85b:	48 39 e8             	cmp    %rbp,%rax
ffffffff8021d85e:	0f 83 bc 01 00 00    	jae    ffffffff8021da20 <_RME_Inv_Crt+0x310>
ffffffff8021d864:	4c 8b 5f 18          	mov    0x18(%rdi),%r11
ffffffff8021d868:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021d86c:	49 ba 00 00 00 00 00 	movabs $0x800000000000,%r10
ffffffff8021d873:	80 00 00 
ffffffff8021d876:	4c 01 d8             	add    %r11,%rax
ffffffff8021d879:	48 8b 38             	mov    (%rax),%rdi
ffffffff8021d87c:	4c 85 d7             	test   %r10,%rdi
ffffffff8021d87f:	0f 85 c3 01 00 00    	jne    ffffffff8021da48 <_RME_Inv_Crt+0x338>
ffffffff8021d885:	48 c1 ef 30          	shr    $0x30,%rdi
ffffffff8021d889:	49 c7 c4 fe ff ff ff 	mov    $0xfffffffffffffffe,%r12
ffffffff8021d890:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021d894:	0f 85 75 01 00 00    	jne    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
ffffffff8021d89a:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021d8a0:	48 3b 70 28          	cmp    0x28(%rax),%rsi
ffffffff8021d8a4:	0f 83 76 01 00 00    	jae    ffffffff8021da20 <_RME_Inv_Crt+0x310>
ffffffff8021d8aa:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021d8ae:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff8021d8b2:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8021d8b5:	48 89 f8             	mov    %rdi,%rax
ffffffff8021d8b8:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021d8bc:	48 83 f8 03          	cmp    $0x3,%rax
ffffffff8021d8c0:	0f 85 49 01 00 00    	jne    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);
ffffffff8021d8c6:	41 f7 c0 00 80 00 00 	test   $0x8000,%r8d
ffffffff8021d8cd:	0f 85 93 fe ff ff    	jne    ffffffff8021d766 <_RME_Inv_Crt+0x56>
ffffffff8021d8d3:	49 39 e8             	cmp    %rbp,%r8
ffffffff8021d8d6:	0f 83 44 01 00 00    	jae    ffffffff8021da20 <_RME_Inv_Crt+0x310>
ffffffff8021d8dc:	49 c1 e0 06          	shl    $0x6,%r8
    struct RME_Cap_Inv* Inv_Crt;
    struct RME_Inv_Struct* Inv_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021d8e0:	49 c7 c4 fe ff ff ff 	mov    $0xfffffffffffffffe,%r12
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);
ffffffff8021d8e7:	4b 8d 1c 18          	lea    (%r8,%r11,1),%rbx
ffffffff8021d8eb:	4c 8b 03             	mov    (%rbx),%r8
ffffffff8021d8ee:	4c 89 c0             	mov    %r8,%rax
ffffffff8021d8f1:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021d8f5:	48 83 f8 05          	cmp    $0x5,%rax
ffffffff8021d8f9:	0f 85 10 01 00 00    	jne    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021d8ff:	f6 c6 80             	test   $0x80,%dh
ffffffff8021d902:	0f 85 d9 fe ff ff    	jne    ffffffff8021d7e1 <_RME_Inv_Crt+0xd1>
ffffffff8021d908:	48 39 ea             	cmp    %rbp,%rdx
ffffffff8021d90b:	0f 83 0f 01 00 00    	jae    ffffffff8021da20 <_RME_Inv_Crt+0x310>
ffffffff8021d911:	48 c1 e2 06          	shl    $0x6,%rdx
    struct RME_Cap_Inv* Inv_Crt;
    struct RME_Inv_Struct* Inv_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021d915:	49 c7 c4 fe ff ff ff 	mov    $0xfffffffffffffffe,%r12
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
ffffffff8021d91c:	4a 8d 04 1a          	lea    (%rdx,%r11,1),%rax
ffffffff8021d920:	66 83 78 06 02       	cmpw   $0x2,0x6(%rax)
ffffffff8021d925:	0f 85 e4 00 00 00    	jne    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff8021d92b:	48 ba 00 00 00 00 00 	movabs $0x800000000000,%rdx
ffffffff8021d932:	80 00 00 
ffffffff8021d935:	48 85 d7             	test   %rdx,%rdi
ffffffff8021d938:	0f 85 0a 01 00 00    	jne    ffffffff8021da48 <_RME_Inv_Crt+0x338>
ffffffff8021d93e:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff8021d942:	0f 84 f0 00 00 00    	je     ffffffff8021da38 <_RME_Inv_Crt+0x328>
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_INV);
ffffffff8021d948:	49 85 d0             	test   %rdx,%r8
ffffffff8021d94b:	0f 85 f7 00 00 00    	jne    ffffffff8021da48 <_RME_Inv_Crt+0x338>
ffffffff8021d951:	f6 43 10 01          	testb  $0x1,0x10(%rbx)
ffffffff8021d955:	0f 84 dd 00 00 00    	je     ffffffff8021da38 <_RME_Inv_Crt+0x328>
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_INV,Vaddr,RME_INV_SIZE);
ffffffff8021d95b:	f6 40 10 20          	testb  $0x20,0x10(%rax)
ffffffff8021d95f:	0f 84 d3 00 00 00    	je     ffffffff8021da38 <_RME_Inv_Crt+0x328>
ffffffff8021d965:	4c 39 48 28          	cmp    %r9,0x28(%rax)
ffffffff8021d969:	0f 87 c9 00 00 00    	ja     ffffffff8021da38 <_RME_Inv_Crt+0x328>
ffffffff8021d96f:	49 8d 79 48          	lea    0x48(%r9),%rdi
ffffffff8021d973:	48 39 78 30          	cmp    %rdi,0x30(%rax)
ffffffff8021d977:	0f 82 bb 00 00 00    	jb     ffffffff8021da38 <_RME_Inv_Crt+0x328>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff8021d97d:	48 39 4e 28          	cmp    %rcx,0x28(%rsi)
    struct RME_Cap_Inv* Inv_Crt;
    struct RME_Inv_Struct* Inv_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021d981:	49 c7 c4 fd ff ff ff 	mov    $0xfffffffffffffffd,%r12
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_INV);
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_INV,Vaddr,RME_INV_SIZE);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff8021d988:	0f 86 81 00 00 00    	jbe    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
ffffffff8021d98e:	48 c1 e1 06          	shl    $0x6,%rcx
ffffffff8021d992:	48 03 4e 18          	add    0x18(%rsi),%rcx
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Inv_Crt,Type_Ref);
ffffffff8021d996:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021d99b:	4d 89 cd             	mov    %r9,%r13
ffffffff8021d99e:	48 c7 44 24 08 00 00 	movq   $0x0,0x8(%rsp)
ffffffff8021d9a5:	00 00 
ffffffff8021d9a7:	49 c7 c4 fb ff ff ff 	mov    $0xfffffffffffffffb,%r12
ffffffff8021d9ae:	48 89 cf             	mov    %rcx,%rdi
    RME_CAP_CHECK(Proc_Op,RME_PROC_FLAG_INV);
    /* See if the creation is valid for this kmem range */
    RME_KMEM_CHECK(Kmem_Op,RME_KMEM_FLAG_INV,Vaddr,RME_INV_SIZE);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Crt);
ffffffff8021d9b1:	48 89 cd             	mov    %rcx,%rbp
    /* Take the slot if possible */
    RME_CAPTBL_OCCUPY(Inv_Crt,Type_Ref);
ffffffff8021d9b4:	e8 c8 de fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021d9b9:	48 85 c0             	test   %rax,%rax
ffffffff8021d9bc:	74 51                	je     ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_INV_SIZE)!=0)
ffffffff8021d9be:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021d9c3:	4c 89 ef             	mov    %r13,%rdi
ffffffff8021d9c6:	e8 c5 95 ff ff       	callq  ffffffff80216f90 <_RME_Kotbl_Mark>
ffffffff8021d9cb:	48 85 c0             	test   %rax,%rax
ffffffff8021d9ce:	49 89 c4             	mov    %rax,%r12
ffffffff8021d9d1:	0f 85 81 00 00 00    	jne    ffffffff8021da58 <_RME_Inv_Crt+0x348>
        return RME_ERR_CAP_KOTBL;
    }
    
    /* Fill in the structure */
    Inv_Struct=(struct RME_Inv_Struct*)Vaddr;
    Inv_Struct->Proc=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
ffffffff8021d9d7:	48 8b 43 18          	mov    0x18(%rbx),%rax
    /* Increase the reference count of the process structure(Not the process capability) */
    __RME_Fetch_Add(&(RME_CAP_GETOBJ(Proc_Op, struct RME_Proc_Struct*)->Refcnt), 1);
ffffffff8021d9db:	be 01 00 00 00       	mov    $0x1,%esi
        return RME_ERR_CAP_KOTBL;
    }
    
    /* Fill in the structure */
    Inv_Struct=(struct RME_Inv_Struct*)Vaddr;
    Inv_Struct->Proc=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
ffffffff8021d9e0:	49 89 45 10          	mov    %rax,0x10(%r13)
    /* Increase the reference count of the process structure(Not the process capability) */
    __RME_Fetch_Add(&(RME_CAP_GETOBJ(Proc_Op, struct RME_Proc_Struct*)->Refcnt), 1);
ffffffff8021d9e4:	48 8b 7b 18          	mov    0x18(%rbx),%rdi
ffffffff8021d9e8:	e8 b1 de fe ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    Inv_Crt->Head.Parent=0;
    Inv_Crt->Head.Object=Vaddr;
    Inv_Crt->Head.Flags=RME_INV_FLAG_SET|RME_INV_FLAG_ACT;
    
    /* Creation complete */
    Inv_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_INV,0);
ffffffff8021d9ed:	48 b8 00 00 00 00 00 	movabs $0x7000000000000,%rax
ffffffff8021d9f4:	00 07 00 
    Inv_Struct->Proc=RME_CAP_GETOBJ(Proc_Op,struct RME_Proc_Struct*);
    /* Increase the reference count of the process structure(Not the process capability) */
    __RME_Fetch_Add(&(RME_CAP_GETOBJ(Proc_Op, struct RME_Proc_Struct*)->Refcnt), 1);
    
    /* Fill in the header part */
    Inv_Crt->Head.Parent=0;
ffffffff8021d9f7:	48 c7 45 08 00 00 00 	movq   $0x0,0x8(%rbp)
ffffffff8021d9fe:	00 
    Inv_Crt->Head.Object=Vaddr;
ffffffff8021d9ff:	4c 89 6d 18          	mov    %r13,0x18(%rbp)
    Inv_Crt->Head.Flags=RME_INV_FLAG_SET|RME_INV_FLAG_ACT;
ffffffff8021da03:	48 c7 45 10 03 00 00 	movq   $0x3,0x10(%rbp)
ffffffff8021da0a:	00 
    
    /* Creation complete */
    Inv_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_INV,0);
ffffffff8021da0b:	48 89 45 00          	mov    %rax,0x0(%rbp)
    
    return 0;
}
ffffffff8021da0f:	48 83 c4 18          	add    $0x18,%rsp
ffffffff8021da13:	4c 89 e0             	mov    %r12,%rax
ffffffff8021da16:	5b                   	pop    %rbx
ffffffff8021da17:	5d                   	pop    %rbp
ffffffff8021da18:	41 5c                	pop    %r12
ffffffff8021da1a:	41 5d                	pop    %r13
ffffffff8021da1c:	c3                   	retq   
ffffffff8021da1d:	0f 1f 00             	nopl   (%rax)
ffffffff8021da20:	48 83 c4 18          	add    $0x18,%rsp
    struct RME_Cap_Inv* Inv_Crt;
    struct RME_Inv_Struct* Inv_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021da24:	49 c7 c4 fd ff ff ff 	mov    $0xfffffffffffffffd,%r12
    
    /* Creation complete */
    Inv_Crt->Head.Type_Ref=RME_CAP_TYPEREF(RME_CAP_INV,0);
    
    return 0;
}
ffffffff8021da2b:	5b                   	pop    %rbx
ffffffff8021da2c:	4c 89 e0             	mov    %r12,%rax
ffffffff8021da2f:	5d                   	pop    %rbp
ffffffff8021da30:	41 5c                	pop    %r12
ffffffff8021da32:	41 5d                	pop    %r13
ffffffff8021da34:	c3                   	retq   
ffffffff8021da35:	0f 1f 00             	nopl   (%rax)
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Proc,RME_CAP_PROC,struct RME_Cap_Proc*,Proc_Op);
    RME_CAPTBL_GETCAP(Captbl,Cap_Kmem,RME_CAP_KMEM,struct RME_Cap_Kmem*,Kmem_Op);
    /* Check if the captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_CRT);
ffffffff8021da38:	49 c7 c4 f9 ff ff ff 	mov    $0xfffffffffffffff9,%r12
ffffffff8021da3f:	eb ce                	jmp    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
ffffffff8021da41:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    struct RME_Cap_Inv* Inv_Crt;
    struct RME_Inv_Struct* Inv_Struct;
    ptr_t Type_Ref;
    
    /* Get the capability slots */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);
ffffffff8021da48:	49 c7 c4 f7 ff ff ff 	mov    $0xfffffffffffffff7,%r12
ffffffff8021da4f:	eb be                	jmp    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
ffffffff8021da51:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    RME_CAPTBL_OCCUPY(Inv_Crt,Type_Ref);
    
    /* Try to populate the area */
    if(_RME_Kotbl_Mark(Vaddr, RME_INV_SIZE)!=0)
    {
        Inv_Crt->Head.Type_Ref=0;
ffffffff8021da58:	48 c7 45 00 00 00 00 	movq   $0x0,0x0(%rbp)
ffffffff8021da5f:	00 
        return RME_ERR_CAP_KOTBL;
ffffffff8021da60:	49 c7 c4 fc ff ff ff 	mov    $0xfffffffffffffffc,%r12
ffffffff8021da67:	eb a6                	jmp    ffffffff8021da0f <_RME_Inv_Crt+0x2ff>
ffffffff8021da69:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

ffffffff8021da70 <_RME_Inv_Del>:
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021da70:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021da76:	0f 85 14 01 00 00    	jne    ffffffff8021db90 <_RME_Inv_Del+0x120>
ffffffff8021da7c:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021da80:	0f 86 15 02 00 00    	jbe    ffffffff8021dc9b <_RME_Inv_Del+0x22b>
ffffffff8021da86:	48 89 f0             	mov    %rsi,%rax
ffffffff8021da89:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021da8d:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021da91:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021da94:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021da97:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021da9b:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021da9f:	0f 85 53 01 00 00    	jne    ffffffff8021dbf8 <_RME_Inv_Del+0x188>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff8021daa5:	48 be 00 00 00 00 00 	movabs $0x800000000000,%rsi
ffffffff8021daac:	80 00 00 
ffffffff8021daaf:	48 85 f1             	test   %rsi,%rcx
ffffffff8021dab2:	0f 85 ee 01 00 00    	jne    ffffffff8021dca6 <_RME_Inv_Del+0x236>
ffffffff8021dab8:	f6 40 10 02          	testb  $0x2,0x10(%rax)
ffffffff8021dabc:	0f 84 ed 01 00 00    	je     ffffffff8021dcaf <_RME_Inv_Del+0x23f>
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff8021dac2:	48 39 50 28          	cmp    %rdx,0x28(%rax)
ffffffff8021dac6:	0f 86 cf 01 00 00    	jbe    ffffffff8021dc9b <_RME_Inv_Del+0x22b>
              cid_t Cap_Inv - The capability to the invocation stub. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Inv_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Inv)
{
ffffffff8021dacc:	53                   	push   %rbx
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff8021dacd:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021dad1:	48 89 d7             	mov    %rdx,%rdi
              cid_t Cap_Inv - The capability to the invocation stub. 1-Level.
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Inv_Del(struct RME_Cap_Captbl* Captbl, cid_t Cap_Captbl, cid_t Cap_Inv)
{
ffffffff8021dad4:	48 83 ec 10          	sub    $0x10,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
ffffffff8021dad8:	48 03 78 18          	add    0x18(%rax),%rdi
    /* Delete check */
    RME_CAP_DEL_CHECK(Inv_Del,Type_Ref,RME_CAP_INV);
ffffffff8021dadc:	48 8b 07             	mov    (%rdi),%rax
ffffffff8021dadf:	48 85 f0             	test   %rsi,%rax
ffffffff8021dae2:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
ffffffff8021dae7:	0f 85 cb 01 00 00    	jne    ffffffff8021dcb8 <_RME_Inv_Del+0x248>
ffffffff8021daed:	48 89 c2             	mov    %rax,%rdx
ffffffff8021daf0:	48 c1 ea 30          	shr    $0x30,%rdx
ffffffff8021daf4:	48 85 d2             	test   %rdx,%rdx
ffffffff8021daf7:	0f 84 cb 01 00 00    	je     ffffffff8021dcc8 <_RME_Inv_Del+0x258>
ffffffff8021dafd:	48 83 fa 07          	cmp    $0x7,%rdx
ffffffff8021db01:	0f 85 d1 01 00 00    	jne    ffffffff8021dcd8 <_RME_Inv_Del+0x268>
ffffffff8021db07:	48 8b 15 f2 54 00 00 	mov    0x54f2(%rip),%rdx        # ffffffff80223000 <RME_Timestamp>
ffffffff8021db0e:	48 2b 57 20          	sub    0x20(%rdi),%rdx
ffffffff8021db12:	48 83 fa 0a          	cmp    $0xa,%rdx
ffffffff8021db16:	0f 86 cc 01 00 00    	jbe    ffffffff8021dce8 <_RME_Inv_Del+0x278>
ffffffff8021db1c:	48 ba ff ff ff ff ff 	movabs $0x7fffffffffff,%rdx
ffffffff8021db23:	7f 00 00 
ffffffff8021db26:	48 85 d0             	test   %rdx,%rax
ffffffff8021db29:	0f 85 c9 01 00 00    	jne    ffffffff8021dcf8 <_RME_Inv_Del+0x288>
ffffffff8021db2f:	48 83 7f 08 00       	cmpq   $0x0,0x8(%rdi)
ffffffff8021db34:	0f 85 be 01 00 00    	jne    ffffffff8021dcf8 <_RME_Inv_Del+0x288>
    
    /* Get the thread */
    Inv_Struct=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
ffffffff8021db3a:	48 8b 5f 18          	mov    0x18(%rdi),%rbx
    
    /* See if the invocation is currently used. If yes, we cannot delete it */
    if(Inv_Struct->Active!=0)
ffffffff8021db3e:	48 83 7b 18 00       	cmpq   $0x0,0x18(%rbx)
ffffffff8021db43:	0f 85 2b 01 00 00    	jne    ffffffff8021dc74 <_RME_Inv_Del+0x204>
        RME_CAP_DEFROST(Inv_Del,Type_Ref);
        return RME_ERR_SIV_ACT;
    }
    
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Inv_Del,Type_Ref);
ffffffff8021db49:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021db4e:	31 d2                	xor    %edx,%edx
ffffffff8021db50:	e8 2c dd fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021db55:	48 85 c0             	test   %rax,%rax
ffffffff8021db58:	0f 84 6a 01 00 00    	je     ffffffff8021dcc8 <_RME_Inv_Del+0x258>
    /* Dereference the process */
    __RME_Fetch_Add(&(Inv_Struct->Proc->Refcnt), -1);
ffffffff8021db5e:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
ffffffff8021db62:	48 c7 c6 ff ff ff ff 	mov    $0xffffffffffffffff,%rsi
ffffffff8021db69:	e8 30 dd fe ff       	callq  ffffffff8020b89e <__RME_Fetch_Add>
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Inv_Struct,RME_INV_SIZE)!=0);
ffffffff8021db6e:	be 48 00 00 00       	mov    $0x48,%esi
ffffffff8021db73:	48 89 df             	mov    %rbx,%rdi
ffffffff8021db76:	e8 45 96 ff ff       	callq  ffffffff802171c0 <_RME_Kotbl_Erase>
    
    return 0;
ffffffff8021db7b:	31 d2                	xor    %edx,%edx
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Inv_Del,Type_Ref);
    /* Dereference the process */
    __RME_Fetch_Add(&(Inv_Struct->Proc->Refcnt), -1);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Inv_Struct,RME_INV_SIZE)!=0);
ffffffff8021db7d:	48 85 c0             	test   %rax,%rax
ffffffff8021db80:	0f 84 82 00 00 00    	je     ffffffff8021dc08 <_RME_Inv_Del+0x198>
    
    return 0;
}
ffffffff8021db86:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021db8a:	48 89 d0             	mov    %rdx,%rax
ffffffff8021db8d:	5b                   	pop    %rbx
ffffffff8021db8e:	c3                   	retq   
ffffffff8021db8f:	90                   	nop
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021db90:	48 89 f0             	mov    %rsi,%rax
ffffffff8021db93:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021db97:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff8021db9b:	0f 83 fa 00 00 00    	jae    ffffffff8021dc9b <_RME_Inv_Del+0x22b>
ffffffff8021dba1:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021dba5:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021dba9:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021dbb0:	80 00 00 
ffffffff8021dbb3:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021dbb6:	48 85 f9             	test   %rdi,%rcx
ffffffff8021dbb9:	0f 85 e7 00 00 00    	jne    ffffffff8021dca6 <_RME_Inv_Del+0x236>
ffffffff8021dbbf:	48 c1 e9 30          	shr    $0x30,%rcx
ffffffff8021dbc3:	48 83 f9 03          	cmp    $0x3,%rcx
ffffffff8021dbc7:	75 2f                	jne    ffffffff8021dbf8 <_RME_Inv_Del+0x188>
ffffffff8021dbc9:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021dbcf:	48 3b 70 28          	cmp    0x28(%rax),%rsi
ffffffff8021dbd3:	0f 83 c2 00 00 00    	jae    ffffffff8021dc9b <_RME_Inv_Del+0x22b>
ffffffff8021dbd9:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021dbdd:	48 03 70 18          	add    0x18(%rax),%rsi
ffffffff8021dbe1:	48 89 f0             	mov    %rsi,%rax
ffffffff8021dbe4:	48 8b 08             	mov    (%rax),%rcx
ffffffff8021dbe7:	48 89 ce             	mov    %rcx,%rsi
ffffffff8021dbea:	48 c1 ee 30          	shr    $0x30,%rsi
ffffffff8021dbee:	48 83 fe 03          	cmp    $0x3,%rsi
ffffffff8021dbf2:	0f 84 ad fe ff ff    	je     ffffffff8021daa5 <_RME_Inv_Del+0x35>
ffffffff8021dbf8:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
ffffffff8021dbff:	e9 9e 00 00 00       	jmpq   ffffffff8021dca2 <_RME_Inv_Del+0x232>
ffffffff8021dc04:	0f 1f 40 00          	nopl   0x0(%rax)
    /* Now we can safely delete the cap */
    RME_CAP_REMDEL(Inv_Del,Type_Ref);
    /* Dereference the process */
    __RME_Fetch_Add(&(Inv_Struct->Proc->Refcnt), -1);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Inv_Struct,RME_INV_SIZE)!=0);
ffffffff8021dc08:	48 c7 c7 80 e1 21 80 	mov    $0xffffffff8021e180,%rdi
ffffffff8021dc0f:	e8 fc 92 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021dc14:	48 c7 c7 18 f0 21 80 	mov    $0xffffffff8021f018,%rdi
ffffffff8021dc1b:	e8 f0 92 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021dc20:	48 c7 c7 f0 e3 21 80 	mov    $0xffffffff8021e3f0,%rdi
ffffffff8021dc27:	e8 e4 92 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021dc2c:	bf 3c 02 00 00       	mov    $0x23c,%edi
ffffffff8021dc31:	e8 9a 90 ff ff       	callq  ffffffff80216cd0 <RME_Print_Int>
ffffffff8021dc36:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021dc3d:	e8 ce 92 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021dc42:	48 c7 c7 fc e3 21 80 	mov    $0xffffffff8021e3fc,%rdi
ffffffff8021dc49:	e8 c2 92 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021dc4e:	48 c7 c7 08 e4 21 80 	mov    $0xffffffff8021e408,%rdi
ffffffff8021dc55:	e8 b6 92 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021dc5a:	48 c7 c7 70 f0 21 80 	mov    $0xffffffff8021f070,%rdi
ffffffff8021dc61:	e8 aa 92 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021dc66:	48 c7 c7 f9 e3 21 80 	mov    $0xffffffff8021e3f9,%rdi
ffffffff8021dc6d:	e8 9e 92 ff ff       	callq  ffffffff80216f10 <RME_Print_String>
ffffffff8021dc72:	eb fe                	jmp    ffffffff8021dc72 <_RME_Inv_Del+0x202>
    Inv_Struct=RME_CAP_GETOBJ(Inv_Del,struct RME_Inv_Struct*);
    
    /* See if the invocation is currently used. If yes, we cannot delete it */
    if(Inv_Struct->Active!=0)
    {
        RME_CAP_DEFROST(Inv_Del,Type_Ref);
ffffffff8021dc74:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021dc79:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff8021dc80:	7f ff ff 
ffffffff8021dc83:	48 21 c2             	and    %rax,%rdx
ffffffff8021dc86:	e8 f6 db fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
        return RME_ERR_SIV_ACT;
ffffffff8021dc8b:	48 c7 c2 e1 ff ff ff 	mov    $0xffffffffffffffe1,%rdx
    __RME_Fetch_Add(&(Inv_Struct->Proc->Refcnt), -1);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Inv_Struct,RME_INV_SIZE)!=0);
    
    return 0;
}
ffffffff8021dc92:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021dc96:	48 89 d0             	mov    %rdx,%rax
ffffffff8021dc99:	5b                   	pop    %rbx
ffffffff8021dc9a:	c3                   	retq   
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021dc9b:	48 c7 c2 fd ff ff ff 	mov    $0xfffffffffffffffd,%rdx
    __RME_Fetch_Add(&(Inv_Struct->Proc->Refcnt), -1);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Inv_Struct,RME_INV_SIZE)!=0);
    
    return 0;
}
ffffffff8021dca2:	48 89 d0             	mov    %rdx,%rax
ffffffff8021dca5:	c3                   	retq   
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021dca6:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
ffffffff8021dcad:	eb f3                	jmp    ffffffff8021dca2 <_RME_Inv_Del+0x232>
    /* Check if the target captbl is not frozen and allows such operations */
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
ffffffff8021dcaf:	48 c7 c2 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rdx
ffffffff8021dcb6:	eb ea                	jmp    ffffffff8021dca2 <_RME_Inv_Del+0x232>
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021dcb8:	48 c7 c2 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rdx
    __RME_Fetch_Add(&(Inv_Struct->Proc->Refcnt), -1);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Inv_Struct,RME_INV_SIZE)!=0);
    
    return 0;
}
ffffffff8021dcbf:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021dcc3:	48 89 d0             	mov    %rdx,%rax
ffffffff8021dcc6:	5b                   	pop    %rbx
ffffffff8021dcc7:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Inv_Del,Type_Ref,RME_CAP_INV);
ffffffff8021dcc8:	48 c7 c2 ff ff ff ff 	mov    $0xffffffffffffffff,%rdx
    __RME_Fetch_Add(&(Inv_Struct->Proc->Refcnt), -1);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Inv_Struct,RME_INV_SIZE)!=0);
    
    return 0;
}
ffffffff8021dccf:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021dcd3:	48 89 d0             	mov    %rdx,%rax
ffffffff8021dcd6:	5b                   	pop    %rbx
ffffffff8021dcd7:	c3                   	retq   
    ptr_t Type_Ref;
    /* These are for deletion */
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Captbl,RME_CAP_CAPTBL,struct RME_Cap_Captbl*,Captbl_Op);    
ffffffff8021dcd8:	48 c7 c2 fe ff ff ff 	mov    $0xfffffffffffffffe,%rdx
    __RME_Fetch_Add(&(Inv_Struct->Proc->Refcnt), -1);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Inv_Struct,RME_INV_SIZE)!=0);
    
    return 0;
}
ffffffff8021dcdf:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021dce3:	48 89 d0             	mov    %rdx,%rax
ffffffff8021dce6:	5b                   	pop    %rbx
ffffffff8021dce7:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Inv_Del,Type_Ref,RME_CAP_INV);
ffffffff8021dce8:	48 c7 c2 f8 ff ff ff 	mov    $0xfffffffffffffff8,%rdx
    __RME_Fetch_Add(&(Inv_Struct->Proc->Refcnt), -1);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Inv_Struct,RME_INV_SIZE)!=0);
    
    return 0;
}
ffffffff8021dcef:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021dcf3:	48 89 d0             	mov    %rdx,%rax
ffffffff8021dcf6:	5b                   	pop    %rbx
ffffffff8021dcf7:	c3                   	retq   
    RME_CAP_CHECK(Captbl_Op,RME_CAPTBL_FLAG_DEL);
    
    /* Get the cap slot */
    RME_CAPTBL_GETSLOT(Captbl_Op,Cap_Inv,struct RME_Cap_Inv*,Inv_Del);
    /* Delete check */
    RME_CAP_DEL_CHECK(Inv_Del,Type_Ref,RME_CAP_INV);
ffffffff8021dcf8:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021dcfd:	48 ba ff ff ff ff ff 	movabs $0xffff7fffffffffff,%rdx
ffffffff8021dd04:	7f ff ff 
ffffffff8021dd07:	48 21 c2             	and    %rax,%rdx
ffffffff8021dd0a:	e8 72 db fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021dd0f:	48 c7 c2 fa ff ff ff 	mov    $0xfffffffffffffffa,%rdx
    __RME_Fetch_Add(&(Inv_Struct->Proc->Refcnt), -1);
    /* Try to depopulate the area - this must be successful */
    RME_ASSERT(_RME_Kotbl_Erase((ptr_t)Inv_Struct,RME_INV_SIZE)!=0);
    
    return 0;
}
ffffffff8021dd16:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021dd1a:	48 89 d0             	mov    %rdx,%rax
ffffffff8021dd1d:	5b                   	pop    %rbx
ffffffff8021dd1e:	c3                   	retq   
ffffffff8021dd1f:	90                   	nop

ffffffff8021dd20 <_RME_Inv_Set>:
{
    struct RME_Cap_Inv* Inv_Op;
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Inv,RME_CAP_INV,struct RME_Cap_Inv*,Inv_Op);
ffffffff8021dd20:	f7 c6 00 80 00 00    	test   $0x8000,%esi
ffffffff8021dd26:	75 30                	jne    ffffffff8021dd58 <_RME_Inv_Set+0x38>
ffffffff8021dd28:	48 39 77 28          	cmp    %rsi,0x28(%rdi)
ffffffff8021dd2c:	0f 86 ce 00 00 00    	jbe    ffffffff8021de00 <_RME_Inv_Set+0xe0>
ffffffff8021dd32:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021dd36:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021dd3a:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021dd41:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8021dd44:	49 89 f9             	mov    %rdi,%r9
ffffffff8021dd47:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8021dd4b:	49 83 f9 07          	cmp    $0x7,%r9
ffffffff8021dd4f:	74 71                	je     ffffffff8021ddc2 <_RME_Inv_Set+0xa2>
ffffffff8021dd51:	f3 c3                	repz retq 
ffffffff8021dd53:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
ffffffff8021dd58:	48 89 f0             	mov    %rsi,%rax
ffffffff8021dd5b:	48 c1 f8 10          	sar    $0x10,%rax
ffffffff8021dd5f:	48 3b 47 28          	cmp    0x28(%rdi),%rax
ffffffff8021dd63:	0f 83 97 00 00 00    	jae    ffffffff8021de00 <_RME_Inv_Set+0xe0>
ffffffff8021dd69:	48 c1 e0 06          	shl    $0x6,%rax
ffffffff8021dd6d:	48 03 47 18          	add    0x18(%rdi),%rax
ffffffff8021dd71:	49 b9 00 00 00 00 00 	movabs $0x800000000000,%r9
ffffffff8021dd78:	80 00 00 
ffffffff8021dd7b:	48 89 c7             	mov    %rax,%rdi
ffffffff8021dd7e:	48 8b 00             	mov    (%rax),%rax
ffffffff8021dd81:	4c 85 c8             	test   %r9,%rax
ffffffff8021dd84:	0f 85 86 00 00 00    	jne    ffffffff8021de10 <_RME_Inv_Set+0xf0>
ffffffff8021dd8a:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021dd8e:	49 89 c1             	mov    %rax,%r9
ffffffff8021dd91:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021dd98:	49 83 f9 03          	cmp    $0x3,%r9
ffffffff8021dd9c:	75 59                	jne    ffffffff8021ddf7 <_RME_Inv_Set+0xd7>
ffffffff8021dd9e:	81 e6 ff 7f 00 00    	and    $0x7fff,%esi
ffffffff8021dda4:	48 3b 77 28          	cmp    0x28(%rdi),%rsi
ffffffff8021dda8:	73 56                	jae    ffffffff8021de00 <_RME_Inv_Set+0xe0>
ffffffff8021ddaa:	48 c1 e6 06          	shl    $0x6,%rsi
ffffffff8021ddae:	48 03 77 18          	add    0x18(%rdi),%rsi
ffffffff8021ddb2:	48 8b 3e             	mov    (%rsi),%rdi
ffffffff8021ddb5:	49 89 f9             	mov    %rdi,%r9
ffffffff8021ddb8:	49 c1 e9 30          	shr    $0x30,%r9
ffffffff8021ddbc:	49 83 f9 07          	cmp    $0x7,%r9
ffffffff8021ddc0:	75 35                	jne    ffffffff8021ddf7 <_RME_Inv_Set+0xd7>
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff8021ddc2:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021ddc9:	80 00 00 
ffffffff8021ddcc:	48 85 c7             	test   %rax,%rdi
ffffffff8021ddcf:	75 3f                	jne    ffffffff8021de10 <_RME_Inv_Set+0xf0>
ffffffff8021ddd1:	f6 46 10 01          	testb  $0x1,0x10(%rsi)
ffffffff8021ddd5:	74 19                	je     ffffffff8021ddf0 <_RME_Inv_Set+0xd0>
    
    /* Commit the change - we do not care if the invocation is in use */
    Inv_Struct=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021ddd7:	48 8b 46 18          	mov    0x18(%rsi),%rax
    Inv_Struct->Entry=Entry;
ffffffff8021dddb:	48 89 50 20          	mov    %rdx,0x20(%rax)
    Inv_Struct->Stack=Stack;
ffffffff8021dddf:	48 89 48 28          	mov    %rcx,0x28(%rax)
    Inv_Struct->Fault_Ret_Flag=Fault_Ret_Flag;
ffffffff8021dde3:	4c 89 40 30          	mov    %r8,0x30(%rax)
    
    return 0;
ffffffff8021dde7:	31 c0                	xor    %eax,%eax
ffffffff8021dde9:	c3                   	retq   
ffffffff8021ddea:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Inv,RME_CAP_INV,struct RME_Cap_Inv*,Inv_Op);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_SET);
ffffffff8021ddf0:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
    Inv_Struct->Entry=Entry;
    Inv_Struct->Stack=Stack;
    Inv_Struct->Fault_Ret_Flag=Fault_Ret_Flag;
    
    return 0;
}
ffffffff8021ddf7:	f3 c3                	repz retq 
ffffffff8021ddf9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
{
    struct RME_Cap_Inv* Inv_Op;
    struct RME_Inv_Struct* Inv_Struct;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Inv,RME_CAP_INV,struct RME_Cap_Inv*,Inv_Op);
ffffffff8021de00:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021de07:	c3                   	retq   
ffffffff8021de08:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021de0f:	00 
ffffffff8021de10:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
ffffffff8021de17:	c3                   	retq   
ffffffff8021de18:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021de1f:	00 

ffffffff8021de20 <_RME_Inv_Act>:
    struct RME_Inv_Struct* Inv_Top;
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Active;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Inv,RME_CAP_INV,struct RME_Cap_Inv*,Inv_Op);
ffffffff8021de20:	f6 c6 80             	test   $0x80,%dh
ffffffff8021de23:	75 2b                	jne    ffffffff8021de50 <_RME_Inv_Act+0x30>
ffffffff8021de25:	48 39 57 28          	cmp    %rdx,0x28(%rdi)
ffffffff8021de29:	0f 86 81 01 00 00    	jbe    ffffffff8021dfb0 <_RME_Inv_Act+0x190>
ffffffff8021de2f:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021de33:	48 03 57 18          	add    0x18(%rdi),%rdx
ffffffff8021de37:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021de3e:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff8021de41:	49 89 f8             	mov    %rdi,%r8
ffffffff8021de44:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8021de48:	49 83 f8 07          	cmp    $0x7,%r8
ffffffff8021de4c:	74 75                	je     ffffffff8021dec3 <_RME_Inv_Act+0xa3>
ffffffff8021de4e:	f3 c3                	repz retq 
ffffffff8021de50:	49 89 d0             	mov    %rdx,%r8
ffffffff8021de53:	49 c1 f8 10          	sar    $0x10,%r8
ffffffff8021de57:	4c 3b 47 28          	cmp    0x28(%rdi),%r8
ffffffff8021de5b:	0f 83 4f 01 00 00    	jae    ffffffff8021dfb0 <_RME_Inv_Act+0x190>
ffffffff8021de61:	49 c1 e0 06          	shl    $0x6,%r8
ffffffff8021de65:	4c 03 47 18          	add    0x18(%rdi),%r8
ffffffff8021de69:	48 bf 00 00 00 00 00 	movabs $0x800000000000,%rdi
ffffffff8021de70:	80 00 00 
ffffffff8021de73:	49 8b 00             	mov    (%r8),%rax
ffffffff8021de76:	48 85 f8             	test   %rdi,%rax
ffffffff8021de79:	0f 85 99 01 00 00    	jne    ffffffff8021e018 <_RME_Inv_Act+0x1f8>
ffffffff8021de7f:	48 c1 e8 30          	shr    $0x30,%rax
ffffffff8021de83:	48 89 c7             	mov    %rax,%rdi
ffffffff8021de86:	48 c7 c0 fe ff ff ff 	mov    $0xfffffffffffffffe,%rax
ffffffff8021de8d:	48 83 ff 03          	cmp    $0x3,%rdi
ffffffff8021de91:	0f 85 11 01 00 00    	jne    ffffffff8021dfa8 <_RME_Inv_Act+0x188>
ffffffff8021de97:	81 e2 ff 7f 00 00    	and    $0x7fff,%edx
ffffffff8021de9d:	49 3b 50 28          	cmp    0x28(%r8),%rdx
ffffffff8021dea1:	0f 83 09 01 00 00    	jae    ffffffff8021dfb0 <_RME_Inv_Act+0x190>
ffffffff8021dea7:	48 c1 e2 06          	shl    $0x6,%rdx
ffffffff8021deab:	49 03 50 18          	add    0x18(%r8),%rdx
ffffffff8021deaf:	48 8b 3a             	mov    (%rdx),%rdi
ffffffff8021deb2:	49 89 f8             	mov    %rdi,%r8
ffffffff8021deb5:	49 c1 e8 30          	shr    $0x30,%r8
ffffffff8021deb9:	49 83 f8 07          	cmp    $0x7,%r8
ffffffff8021debd:	0f 85 e5 00 00 00    	jne    ffffffff8021dfa8 <_RME_Inv_Act+0x188>
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8021dec3:	48 b8 00 00 00 00 00 	movabs $0x800000000000,%rax
ffffffff8021deca:	80 00 00 
ffffffff8021decd:	48 85 c7             	test   %rax,%rdi
ffffffff8021ded0:	0f 85 42 01 00 00    	jne    ffffffff8021e018 <_RME_Inv_Act+0x1f8>
ffffffff8021ded6:	f6 42 10 02          	testb  $0x2,0x10(%rdx)
ffffffff8021deda:	0f 84 40 01 00 00    	je     ffffffff8021e020 <_RME_Inv_Act+0x200>
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Inv_Act(struct RME_Cap_Captbl* Captbl, 
                   struct RME_Reg_Struct* Reg,
                   cid_t Cap_Inv, ptr_t Param)
{
ffffffff8021dee0:	41 56                	push   %r14
ffffffff8021dee2:	41 55                	push   %r13
ffffffff8021dee4:	41 54                	push   %r12
ffffffff8021dee6:	55                   	push   %rbp
ffffffff8021dee7:	53                   	push   %rbx
ffffffff8021dee8:	48 83 ec 10          	sub    $0x10,%rsp
    RME_CAPTBL_GETCAP(Captbl,Cap_Inv,RME_CAP_INV,struct RME_Cap_Inv*,Inv_Op);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
    
    /* Get the invocation struct */
    Inv_Struct=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
ffffffff8021deec:	48 8b 5a 18          	mov    0x18(%rdx),%rbx
    /* See if we are currently active - If yes, we can activate it again */
    Active=Inv_Struct->Active;
ffffffff8021def0:	48 8b 43 18          	mov    0x18(%rbx),%rax
    if(Active!=0)
ffffffff8021def4:	48 85 c0             	test   %rax,%rax
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
    
    /* Get the invocation struct */
    Inv_Struct=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
    /* See if we are currently active - If yes, we can activate it again */
    Active=Inv_Struct->Active;
ffffffff8021def7:	48 89 44 24 08       	mov    %rax,0x8(%rsp)
    if(Active!=0)
ffffffff8021defc:	0f 85 be 00 00 00    	jne    ffffffff8021dfc0 <_RME_Inv_Act+0x1a0>
ffffffff8021df02:	49 89 ce             	mov    %rcx,%r14
ffffffff8021df05:	49 89 f4             	mov    %rsi,%r12
        return RME_ERR_SIV_ACT;
    
    /* Push this invocation stub capability into the current thread's invocation stack */
    Thd_Struct=RME_Cur_Thd[RME_CPUID()];
ffffffff8021df08:	e8 32 d9 fe ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
    /* Try to do CAS and activate it */
    if(__RME_Comp_Swap(&(Inv_Struct->Active),&Active,1)==0)
ffffffff8021df0d:	48 8d 7b 18          	lea    0x18(%rbx),%rdi
ffffffff8021df11:	48 8d 74 24 08       	lea    0x8(%rsp),%rsi
ffffffff8021df16:	ba 01 00 00 00       	mov    $0x1,%edx
    Active=Inv_Struct->Active;
    if(Active!=0)
        return RME_ERR_SIV_ACT;
    
    /* Push this invocation stub capability into the current thread's invocation stack */
    Thd_Struct=RME_Cur_Thd[RME_CPUID()];
ffffffff8021df1b:	4c 8b 2c c5 00 28 22 	mov    -0x7fddd800(,%rax,8),%r13
ffffffff8021df22:	80 
    /* Try to do CAS and activate it */
    if(__RME_Comp_Swap(&(Inv_Struct->Active),&Active,1)==0)
ffffffff8021df23:	e8 59 d9 fe ff       	callq  ffffffff8020b881 <__RME_Comp_Swap>
ffffffff8021df28:	48 85 c0             	test   %rax,%rax
ffffffff8021df2b:	0f 84 8f 00 00 00    	je     ffffffff8021dfc0 <_RME_Inv_Act+0x1a0>
    
    /* Save whatever is needed to return to the point - normally only SP and IP needed
     * because all other registers, including the coprocessor registers, are saved at
     * user-level. We do not set the return value because it will be saved by SRET.
     * The coprocessor state will be consistent across the call */
    __RME_Inv_Reg_Save(&(Inv_Struct->Ret), Reg);
ffffffff8021df31:	48 8d 7b 38          	lea    0x38(%rbx),%rdi
ffffffff8021df35:	4c 89 e6             	mov    %r12,%rsi
ffffffff8021df38:	e8 a3 5f ff ff       	callq  ffffffff80213ee0 <__RME_Inv_Reg_Save>
    Inv_Top=RME_INVSTK_TOP(Thd_Struct);
ffffffff8021df3d:	49 8b ad c0 09 00 00 	mov    0x9c0(%r13),%rbp
ffffffff8021df44:	49 8d b5 b8 09 00 00 	lea    0x9b8(%r13),%rsi
ffffffff8021df4b:	48 39 f5             	cmp    %rsi,%rbp
    /* Push this into the stack: insert after the thread list header */
    __RME_List_Ins(&(Inv_Struct->Head),&(Thd_Struct->Inv_Stack),Thd_Struct->Inv_Stack.Next);
ffffffff8021df4e:	48 89 ea             	mov    %rbp,%rdx
    /* Save whatever is needed to return to the point - normally only SP and IP needed
     * because all other registers, including the coprocessor registers, are saved at
     * user-level. We do not set the return value because it will be saved by SRET.
     * The coprocessor state will be consistent across the call */
    __RME_Inv_Reg_Save(&(Inv_Struct->Ret), Reg);
    Inv_Top=RME_INVSTK_TOP(Thd_Struct);
ffffffff8021df51:	74 7d                	je     ffffffff8021dfd0 <_RME_Inv_Act+0x1b0>
    /* Push this into the stack: insert after the thread list header */
    __RME_List_Ins(&(Inv_Struct->Head),&(Thd_Struct->Inv_Stack),Thd_Struct->Inv_Stack.Next);
ffffffff8021df53:	48 89 df             	mov    %rbx,%rdi
ffffffff8021df56:	e8 15 ab ff ff       	callq  ffffffff80218a70 <__RME_List_Ins>
    /* Setup the register contents, and do the invocation */
    __RME_Thd_Reg_Init(Inv_Struct->Entry, Inv_Struct->Stack, Reg);
ffffffff8021df5b:	48 8b 73 28          	mov    0x28(%rbx),%rsi
ffffffff8021df5f:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
ffffffff8021df63:	4c 89 e2             	mov    %r12,%rdx
ffffffff8021df66:	e8 05 5e ff ff       	callq  ffffffff80213d70 <__RME_Thd_Reg_Init>
    __RME_Inv_Reg_Init(Param, Reg);
ffffffff8021df6b:	4c 89 e6             	mov    %r12,%rsi
ffffffff8021df6e:	4c 89 f7             	mov    %r14,%rdi
ffffffff8021df71:	e8 5a 5f ff ff       	callq  ffffffff80213ed0 <__RME_Inv_Reg_Init>
    
    /* Are we invoking into a new process? If yes, switch the page table */
    if(Inv_Top!=0)
ffffffff8021df76:	48 85 ed             	test   %rbp,%rbp
ffffffff8021df79:	74 7b                	je     ffffffff8021dff6 <_RME_Inv_Act+0x1d6>
    {
        if(RME_CAP_GETOBJ(Inv_Top->Proc->Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t))
ffffffff8021df7b:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8021df7f:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021df83:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8021df87:	48 8b 45 10          	mov    0x10(%rbp),%rax
ffffffff8021df8b:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021df8f:	48 39 78 18          	cmp    %rdi,0x18(%rax)
ffffffff8021df93:	74 05                	je     ffffffff8021df9a <_RME_Inv_Act+0x17a>
            __RME_Pgtbl_Set(RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t));
    }
    else
    {
        if(RME_CAP_GETOBJ(Thd_Struct->Sched.Proc->Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t))
            __RME_Pgtbl_Set(RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t));
ffffffff8021df95:	e8 46 63 ff ff       	callq  ffffffff802142e0 <__RME_Pgtbl_Set>
    }
    
    return 0;
ffffffff8021df9a:	31 c0                	xor    %eax,%eax
}
ffffffff8021df9c:	48 83 c4 10          	add    $0x10,%rsp
ffffffff8021dfa0:	5b                   	pop    %rbx
ffffffff8021dfa1:	5d                   	pop    %rbp
ffffffff8021dfa2:	41 5c                	pop    %r12
ffffffff8021dfa4:	41 5d                	pop    %r13
ffffffff8021dfa6:	41 5e                	pop    %r14
ffffffff8021dfa8:	f3 c3                	repz retq 
ffffffff8021dfaa:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    struct RME_Inv_Struct* Inv_Top;
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Active;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Inv,RME_CAP_INV,struct RME_Cap_Inv*,Inv_Op);
ffffffff8021dfb0:	48 c7 c0 fd ff ff ff 	mov    $0xfffffffffffffffd,%rax
ffffffff8021dfb7:	c3                   	retq   
ffffffff8021dfb8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021dfbf:	00 
    /* Get the invocation struct */
    Inv_Struct=RME_CAP_GETOBJ(Inv_Op,struct RME_Inv_Struct*);
    /* See if we are currently active - If yes, we can activate it again */
    Active=Inv_Struct->Active;
    if(Active!=0)
        return RME_ERR_SIV_ACT;
ffffffff8021dfc0:	48 c7 c0 e1 ff ff ff 	mov    $0xffffffffffffffe1,%rax
ffffffff8021dfc7:	eb d3                	jmp    ffffffff8021df9c <_RME_Inv_Act+0x17c>
ffffffff8021dfc9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
     * user-level. We do not set the return value because it will be saved by SRET.
     * The coprocessor state will be consistent across the call */
    __RME_Inv_Reg_Save(&(Inv_Struct->Ret), Reg);
    Inv_Top=RME_INVSTK_TOP(Thd_Struct);
    /* Push this into the stack: insert after the thread list header */
    __RME_List_Ins(&(Inv_Struct->Head),&(Thd_Struct->Inv_Stack),Thd_Struct->Inv_Stack.Next);
ffffffff8021dfd0:	48 89 ee             	mov    %rbp,%rsi
ffffffff8021dfd3:	48 89 df             	mov    %rbx,%rdi
ffffffff8021dfd6:	e8 95 aa ff ff       	callq  ffffffff80218a70 <__RME_List_Ins>
    /* Setup the register contents, and do the invocation */
    __RME_Thd_Reg_Init(Inv_Struct->Entry, Inv_Struct->Stack, Reg);
ffffffff8021dfdb:	48 8b 73 28          	mov    0x28(%rbx),%rsi
ffffffff8021dfdf:	48 8b 7b 20          	mov    0x20(%rbx),%rdi
ffffffff8021dfe3:	4c 89 e2             	mov    %r12,%rdx
ffffffff8021dfe6:	e8 85 5d ff ff       	callq  ffffffff80213d70 <__RME_Thd_Reg_Init>
    __RME_Inv_Reg_Init(Param, Reg);
ffffffff8021dfeb:	4c 89 e6             	mov    %r12,%rsi
ffffffff8021dfee:	4c 89 f7             	mov    %r14,%rdi
ffffffff8021dff1:	e8 da 5e ff ff       	callq  ffffffff80213ed0 <__RME_Inv_Reg_Init>
        if(RME_CAP_GETOBJ(Inv_Top->Proc->Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t))
            __RME_Pgtbl_Set(RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t));
    }
    else
    {
        if(RME_CAP_GETOBJ(Thd_Struct->Sched.Proc->Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t))
ffffffff8021dff6:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8021dffa:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021dffe:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8021e002:	49 8b 45 60          	mov    0x60(%r13),%rax
ffffffff8021e006:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021e00a:	48 39 78 18          	cmp    %rdi,0x18(%rax)
ffffffff8021e00e:	75 85                	jne    ffffffff8021df95 <_RME_Inv_Act+0x175>
ffffffff8021e010:	eb 88                	jmp    ffffffff8021df9a <_RME_Inv_Act+0x17a>
ffffffff8021e012:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    struct RME_Inv_Struct* Inv_Top;
    struct RME_Thd_Struct* Thd_Struct;
    ptr_t Active;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Inv,RME_CAP_INV,struct RME_Cap_Inv*,Inv_Op);
ffffffff8021e018:	48 c7 c0 f7 ff ff ff 	mov    $0xfffffffffffffff7,%rax
        if(RME_CAP_GETOBJ(Thd_Struct->Sched.Proc->Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t))
            __RME_Pgtbl_Set(RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t));
    }
    
    return 0;
}
ffffffff8021e01f:	c3                   	retq   
    ptr_t Active;
    
    /* Get the capability slot */
    RME_CAPTBL_GETCAP(Captbl,Cap_Inv,RME_CAP_INV,struct RME_Cap_Inv*,Inv_Op);
    /* Check if the target cap is not frozen and allows such operations */
    RME_CAP_CHECK(Inv_Op,RME_INV_FLAG_ACT);
ffffffff8021e020:	48 c7 c0 f9 ff ff ff 	mov    $0xfffffffffffffff9,%rax
ffffffff8021e027:	c3                   	retq   
ffffffff8021e028:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
ffffffff8021e02f:	00 

ffffffff8021e030 <_RME_Inv_Ret>:
              ptr_t Fault_Flag - Are we attempting a return from fault?
Output      : None.
Return      : ret_t - If successful, 0; or an error code.
******************************************************************************/
ret_t _RME_Inv_Ret(struct RME_Reg_Struct* Reg, ptr_t Fault_Flag)
{
ffffffff8021e030:	41 56                	push   %r14
ffffffff8021e032:	41 55                	push   %r13
ffffffff8021e034:	49 89 f6             	mov    %rsi,%r14
ffffffff8021e037:	41 54                	push   %r12
ffffffff8021e039:	55                   	push   %rbp
ffffffff8021e03a:	48 89 fd             	mov    %rdi,%rbp
ffffffff8021e03d:	53                   	push   %rbx
    struct RME_Inv_Struct* Inv_Struct;
    struct RME_Inv_Struct* Inv_Top;
    ptr_t Retval;
    
    /* See if we can return; If we can, get the structure */
    Thd_Struct=RME_Cur_Thd[RME_CPUID()];
ffffffff8021e03e:	e8 fc d7 fe ff       	callq  ffffffff8020b83f <__RME_CPUID_Get>
ffffffff8021e043:	4c 8b 24 c5 00 28 22 	mov    -0x7fddd800(,%rax,8),%r12
ffffffff8021e04a:	80 
    Inv_Struct=RME_INVSTK_TOP(Thd_Struct);
ffffffff8021e04b:	49 8b 9c 24 c0 09 00 	mov    0x9c0(%r12),%rbx
ffffffff8021e052:	00 
    if(Inv_Struct==0)
ffffffff8021e053:	48 85 db             	test   %rbx,%rbx
ffffffff8021e056:	0f 84 15 01 00 00    	je     ffffffff8021e171 <_RME_Inv_Ret+0x141>
ffffffff8021e05c:	4d 8d ac 24 b8 09 00 	lea    0x9b8(%r12),%r13
ffffffff8021e063:	00 
ffffffff8021e064:	4c 39 eb             	cmp    %r13,%rbx
ffffffff8021e067:	0f 84 04 01 00 00    	je     ffffffff8021e171 <_RME_Inv_Ret+0x141>
        return RME_ERR_SIV_EMPTY;
    
    /* Is this return forced by a fault? If yes, check if we allow that */
    if((Fault_Flag!=0)&&(Inv_Struct->Fault_Ret_Flag==0))
ffffffff8021e06d:	4d 85 f6             	test   %r14,%r14
ffffffff8021e070:	0f 84 92 00 00 00    	je     ffffffff8021e108 <_RME_Inv_Ret+0xd8>
ffffffff8021e076:	48 83 7b 30 00       	cmpq   $0x0,0x30(%rbx)
ffffffff8021e07b:	0f 84 e7 00 00 00    	je     ffffffff8021e168 <_RME_Inv_Ret+0x138>
        return RME_ERR_SIV_FAULT;
    
    /* Pop it from the stack */
    __RME_List_Del(Inv_Struct->Head.Prev,Inv_Struct->Head.Next);
ffffffff8021e081:	48 8b 73 08          	mov    0x8(%rbx),%rsi
ffffffff8021e085:	48 8b 3b             	mov    (%rbx),%rdi
ffffffff8021e088:	e8 d3 a9 ff ff       	callq  ffffffff80218a60 <__RME_List_Del>
    /* Get the return value from the register set */
    Retval=__RME_Get_Inv_Retval(Reg);
ffffffff8021e08d:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021e090:	e8 bb 5c ff ff       	callq  ffffffff80213d50 <__RME_Get_Inv_Retval>

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well */
    __RME_Inv_Reg_Restore(Reg, &(Inv_Struct->Ret));
ffffffff8021e095:	48 8d 73 38          	lea    0x38(%rbx),%rsi
        return RME_ERR_SIV_FAULT;
    
    /* Pop it from the stack */
    __RME_List_Del(Inv_Struct->Head.Prev,Inv_Struct->Head.Next);
    /* Get the return value from the register set */
    Retval=__RME_Get_Inv_Retval(Reg);
ffffffff8021e099:	49 89 c6             	mov    %rax,%r14

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well */
    __RME_Inv_Reg_Restore(Reg, &(Inv_Struct->Ret));
ffffffff8021e09c:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021e09f:	e8 5c 5e ff ff       	callq  ffffffff80213f00 <__RME_Inv_Reg_Restore>
    __RME_Set_Inv_Retval(Reg, Retval);
ffffffff8021e0a4:	4c 89 f6             	mov    %r14,%rsi
ffffffff8021e0a7:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021e0aa:	e8 b1 5c ff ff       	callq  ffffffff80213d60 <__RME_Set_Inv_Retval>
    /* Decide the system call's return value */
    if(Fault_Flag!=0)
        __RME_Set_Syscall_Retval(Reg, RME_ERR_SIV_FAULT);
ffffffff8021e0af:	48 c7 c6 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rsi
ffffffff8021e0b6:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021e0b9:	e8 82 5c ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
    else
        __RME_Set_Syscall_Retval(Reg, 0);
    
    /* Are we returning to a new process? If yes, switch the page table */
    Inv_Top=RME_INVSTK_TOP(Thd_Struct);
ffffffff8021e0be:	49 8b 84 24 c0 09 00 	mov    0x9c0(%r12),%rax
ffffffff8021e0c5:	00 
    if(Inv_Top!=0)
ffffffff8021e0c6:	49 39 c5             	cmp    %rax,%r13
ffffffff8021e0c9:	74 7a                	je     ffffffff8021e145 <_RME_Inv_Ret+0x115>
ffffffff8021e0cb:	48 85 c0             	test   %rax,%rax
ffffffff8021e0ce:	74 75                	je     ffffffff8021e145 <_RME_Inv_Ret+0x115>
    {
        if(RME_CAP_GETOBJ(Inv_Top->Proc->Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t))
ffffffff8021e0d0:	48 8b 53 10          	mov    0x10(%rbx),%rdx
ffffffff8021e0d4:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021e0d8:	48 8b 52 10          	mov    0x10(%rdx),%rdx
ffffffff8021e0dc:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021e0e0:	48 8b 7a 18          	mov    0x18(%rdx),%rdi
ffffffff8021e0e4:	48 39 78 18          	cmp    %rdi,0x18(%rax)
ffffffff8021e0e8:	74 05                	je     ffffffff8021e0ef <_RME_Inv_Ret+0xbf>
            __RME_Pgtbl_Set(RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t));
    }
    else
    {
        if(RME_CAP_GETOBJ(Thd_Struct->Sched.Proc->Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t))
            __RME_Pgtbl_Set(RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t));
ffffffff8021e0ea:	e8 f1 61 ff ff       	callq  ffffffff802142e0 <__RME_Pgtbl_Set>
    }
    
    /* We have successfully returned, set the invocation as inactive */
    Inv_Struct->Active=0;
ffffffff8021e0ef:	48 c7 43 18 00 00 00 	movq   $0x0,0x18(%rbx)
ffffffff8021e0f6:	00 
    
    return 0;
ffffffff8021e0f7:	31 c0                	xor    %eax,%eax
}
ffffffff8021e0f9:	5b                   	pop    %rbx
ffffffff8021e0fa:	5d                   	pop    %rbp
ffffffff8021e0fb:	41 5c                	pop    %r12
ffffffff8021e0fd:	41 5d                	pop    %r13
ffffffff8021e0ff:	41 5e                	pop    %r14
ffffffff8021e101:	c3                   	retq   
ffffffff8021e102:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    /* Is this return forced by a fault? If yes, check if we allow that */
    if((Fault_Flag!=0)&&(Inv_Struct->Fault_Ret_Flag==0))
        return RME_ERR_SIV_FAULT;
    
    /* Pop it from the stack */
    __RME_List_Del(Inv_Struct->Head.Prev,Inv_Struct->Head.Next);
ffffffff8021e108:	48 8b 73 08          	mov    0x8(%rbx),%rsi
ffffffff8021e10c:	48 8b 3b             	mov    (%rbx),%rdi
ffffffff8021e10f:	e8 4c a9 ff ff       	callq  ffffffff80218a60 <__RME_List_Del>
    /* Get the return value from the register set */
    Retval=__RME_Get_Inv_Retval(Reg);
ffffffff8021e114:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021e117:	e8 34 5c ff ff       	callq  ffffffff80213d50 <__RME_Get_Inv_Retval>

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well */
    __RME_Inv_Reg_Restore(Reg, &(Inv_Struct->Ret));
ffffffff8021e11c:	48 8d 73 38          	lea    0x38(%rbx),%rsi
        return RME_ERR_SIV_FAULT;
    
    /* Pop it from the stack */
    __RME_List_Del(Inv_Struct->Head.Prev,Inv_Struct->Head.Next);
    /* Get the return value from the register set */
    Retval=__RME_Get_Inv_Retval(Reg);
ffffffff8021e120:	49 89 c6             	mov    %rax,%r14

    /* Restore the register contents, and set return value. We need to set
     * the return value of the invocation system call itself as well */
    __RME_Inv_Reg_Restore(Reg, &(Inv_Struct->Ret));
ffffffff8021e123:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021e126:	e8 d5 5d ff ff       	callq  ffffffff80213f00 <__RME_Inv_Reg_Restore>
    __RME_Set_Inv_Retval(Reg, Retval);
ffffffff8021e12b:	4c 89 f6             	mov    %r14,%rsi
ffffffff8021e12e:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021e131:	e8 2a 5c ff ff       	callq  ffffffff80213d60 <__RME_Set_Inv_Retval>
    /* Decide the system call's return value */
    if(Fault_Flag!=0)
        __RME_Set_Syscall_Retval(Reg, RME_ERR_SIV_FAULT);
    else
        __RME_Set_Syscall_Retval(Reg, 0);
ffffffff8021e136:	31 f6                	xor    %esi,%esi
ffffffff8021e138:	48 89 ef             	mov    %rbp,%rdi
ffffffff8021e13b:	e8 00 5c ff ff       	callq  ffffffff80213d40 <__RME_Set_Syscall_Retval>
ffffffff8021e140:	e9 79 ff ff ff       	jmpq   ffffffff8021e0be <_RME_Inv_Ret+0x8e>
        if(RME_CAP_GETOBJ(Inv_Top->Proc->Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t))
            __RME_Pgtbl_Set(RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t));
    }
    else
    {
        if(RME_CAP_GETOBJ(Thd_Struct->Sched.Proc->Pgtbl,ptr_t)!=RME_CAP_GETOBJ(Inv_Struct->Proc->Pgtbl,ptr_t))
ffffffff8021e145:	48 8b 43 10          	mov    0x10(%rbx),%rax
ffffffff8021e149:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021e14d:	48 8b 78 18          	mov    0x18(%rax),%rdi
ffffffff8021e151:	49 8b 44 24 60       	mov    0x60(%r12),%rax
ffffffff8021e156:	48 8b 40 10          	mov    0x10(%rax),%rax
ffffffff8021e15a:	48 39 78 18          	cmp    %rdi,0x18(%rax)
ffffffff8021e15e:	75 8a                	jne    ffffffff8021e0ea <_RME_Inv_Ret+0xba>
ffffffff8021e160:	eb 8d                	jmp    ffffffff8021e0ef <_RME_Inv_Ret+0xbf>
ffffffff8021e162:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    if(Inv_Struct==0)
        return RME_ERR_SIV_EMPTY;
    
    /* Is this return forced by a fault? If yes, check if we allow that */
    if((Fault_Flag!=0)&&(Inv_Struct->Fault_Ret_Flag==0))
        return RME_ERR_SIV_FAULT;
ffffffff8021e168:	48 c7 c0 e0 ff ff ff 	mov    $0xffffffffffffffe0,%rax
ffffffff8021e16f:	eb 88                	jmp    ffffffff8021e0f9 <_RME_Inv_Ret+0xc9>
    
    /* See if we can return; If we can, get the structure */
    Thd_Struct=RME_Cur_Thd[RME_CPUID()];
    Inv_Struct=RME_INVSTK_TOP(Thd_Struct);
    if(Inv_Struct==0)
        return RME_ERR_SIV_EMPTY;
ffffffff8021e171:	48 c7 c0 de ff ff ff 	mov    $0xffffffffffffffde,%rax
ffffffff8021e178:	e9 7c ff ff ff       	jmpq   ffffffff8021e0f9 <_RME_Inv_Ret+0xc9>
